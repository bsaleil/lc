(define equal?
   (lambda (x0 y0)
     (if (($$atom pair?) ($$atom x0))
         (if (($$atom pair?) ($$atom y0))
             (if (($$atom equal?)
                  (($$atom car) ($$atom x0))
                  (($$atom car) ($$atom y0)))
                 (($$atom equal?)
                  (($$atom cdr) ($$atom x0))
                  (($$atom cdr) ($$atom y0)))
                 ($$atom #f))
             ($$atom #f))
         (if (($$atom string?) ($$atom x0))
             (if (($$atom string?) ($$atom y0))
                 (($$atom string=?) ($$atom x0) ($$atom y0))
                 ($$atom #f))
             (if (($$atom number?) ($$atom x0))
                 (if (($$atom number?) ($$atom y0))
                     (($$atom =) ($$atom x0) ($$atom y0))
                     ($$atom #f))
                 (($$atom eq?) ($$atom x0) ($$atom y0)))))))
 (define open-input-file
   (lambda (path0) (($$atom gambit$$open-input-file) ($$atom path0))))
 (define open-output-file
   (lambda (path0) (($$atom gambit$$open-output-file) ($$atom path0))))
 (define close-output-port
   (lambda (port0) (($$atom gambit$$close-output-port) ($$atom port0))))
 (define close-input-port
   (lambda (port0) (($$atom gambit$$close-input-port) ($$atom port0))))
 (define read-char
   (lambda (port0) (($$atom gambit$$read-char) ($$atom port0))))
 (define write-char
   (lambda (c0 p0) (($$atom gambit$$write-char) ($$atom c0) ($$atom p0))))
 (define string->symbol
   (lambda (str0) (($$atom gambit$$string->symbol) ($$atom str0))))
 (define string->list-h
   (lambda (s0 pos0)
     (if (($$atom =) (($$atom string-length) ($$atom s0)) ($$atom pos0))
         ($$atom '())
         (($$atom cons)
          (($$atom string-ref) ($$atom s0) ($$atom pos0))
          (($$atom string->list-h)
           ($$atom s0)
           (($$atom +) ($$atom pos0) ($$atom 1)))))))
 (define string->list
   (lambda (s0) (($$atom string->list-h) ($$atom s0) ($$atom 0))))
 (define string-fill!-h
   (lambda (str0 char0 pos0 len0)
     (if (($$atom <) ($$atom pos0) ($$atom len0))
         (begin
           (($$atom string-set!) ($$atom str0) ($$atom pos0) ($$atom char0))
           (($$atom string-fill!-h)
            ($$atom str0)
            ($$atom char0)
            (($$atom +) ($$atom pos0) ($$atom 1))
            ($$atom len0)))
         ($$atom str0))))
 (define string-fill!
   (lambda (str0 char0)
     (($$atom string-fill!-h)
      ($$atom str0)
      ($$atom char0)
      ($$atom 0)
      (($$atom string-length) ($$atom str0)))))
 (define list->string-h
   (lambda (l0 str0 pos0)
     (if (($$atom null?) ($$atom l0))
         ($$atom str0)
         (begin
           (($$atom string-set!)
            ($$atom str0)
            ($$atom pos0)
            (($$atom car) ($$atom l0)))
           (($$atom list->string-h)
            (($$atom cdr) ($$atom l0))
            ($$atom str0)
            (($$atom +) ($$atom pos0) ($$atom 1)))))))
 (define list->string
   (lambda (l0)
     (let ((str0 (($$atom make-string) (($$atom length) ($$atom l0)))))
       (($$atom list->string-h) ($$atom l0) ($$atom str0) ($$atom 0)))))
 (define string-h
   (lambda (str0 chars0 pos0)
     (if (($$atom null?) ($$atom chars0))
         ($$atom str0)
         (begin
           (($$atom string-set!)
            ($$atom str0)
            ($$atom pos0)
            (($$atom car) ($$atom chars0)))
           (($$atom string-h)
            ($$atom str0)
            (($$atom cdr) ($$atom chars0))
            (($$atom +) ($$atom pos0) ($$atom 1)))))))
 (define string
   (lambda chars0
     (if (($$atom null?) ($$atom chars0))
         ($$atom "")
         (let ((str0 (($$atom make-string) (($$atom length) ($$atom chars0)))))
           (($$atom string-h) ($$atom str0) ($$atom chars0) ($$atom 0))))))
 (define substring-h
   (lambda (to0 from0 posf0 post0 end0)
     (if (($$atom =) ($$atom posf0) ($$atom end0))
         ($$atom to0)
         (begin
           (($$atom string-set!)
            ($$atom to0)
            ($$atom post0)
            (($$atom string-ref) ($$atom from0) ($$atom posf0)))
           (($$atom substring-h)
            ($$atom to0)
            ($$atom from0)
            (($$atom +) ($$atom posf0) ($$atom 1))
            (($$atom +) ($$atom post0) ($$atom 1))
            ($$atom end0))))))
 (define substring
   (lambda (string0 start0 end0)
     (if (let ((g00 (($$atom <) ($$atom start0) ($$atom 0))))
           (if ($$atom g00)
               ($$atom g00)
               (let ((g10 (($$atom >)
                           ($$atom end0)
                           (($$atom string-length) ($$atom string0)))))
                 (if ($$atom g10)
                     ($$atom g10)
                     (($$atom <) ($$atom end0) ($$atom start0))))))
         (($$atom error) ($$atom "Substring"))
         (let ((new-str0
                (($$atom make-string)
                 (($$atom -) ($$atom end0) ($$atom start0)))))
           (($$atom substring-h)
            ($$atom new-str0)
            ($$atom string0)
            ($$atom start0)
            ($$atom 0)
            ($$atom end0))))))
 (define string-append-two
   (lambda (str0 str20)
     (($$atom list->string)
      (($$atom ##append-two)
       (($$atom string->list) ($$atom str0))
       (($$atom string->list) ($$atom str20))))))
 (define string-append-h
   (lambda (strings0)
     (if (($$atom null?) ($$atom strings0))
         ($$atom "")
         (if (($$atom null?) (($$atom cdr) ($$atom strings0)))
             (($$atom car) ($$atom strings0))
             (($$atom string-append-h)
              (($$atom cons)
               (let ((str20 (($$atom car) (($$atom cdr) ($$atom strings0))))
                     (str0 (($$atom car) ($$atom strings0))))
                 (($$atom list->string)
                  (($$atom ##append-two)
                   (($$atom string->list) ($$atom str0))
                   (($$atom string->list) ($$atom str20)))))
               (($$atom cdr) (($$atom cdr) ($$atom strings0)))))))))
 (define string-append
   (lambda strings0 (($$atom string-append-h) ($$atom strings0))))
 (define string-copy
   (lambda (str0)
     (($$atom list->string) (($$atom string->list) ($$atom str0)))))
 (define string=?-h
   (lambda (str10 str20 pos0)
     (if (($$atom =) ($$atom pos0) (($$atom string-length) ($$atom str10)))
         (($$atom =) ($$atom pos0) (($$atom string-length) ($$atom str20)))
         (if (($$atom =) ($$atom pos0) (($$atom string-length) ($$atom str20)))
             ($$atom #f)
             (if (($$atom char=?)
                  (($$atom string-ref) ($$atom str10) ($$atom pos0))
                  (($$atom string-ref) ($$atom str20) ($$atom pos0)))
                 (($$atom string=?-h)
                  ($$atom str10)
                  ($$atom str20)
                  (($$atom +) ($$atom pos0) ($$atom 1)))
                 ($$atom #f))))))
 (define string=?
   (lambda (str10 str20)
     (($$atom string=?-h) ($$atom str10) ($$atom str20) ($$atom 0))))
 (define string<?
   (lambda (str10 str20)
     (letrec ((string<?-h0
               (lambda (str11 str21 pos0)
                 (if (($$atom =)
                      ($$atom pos0)
                      (($$atom -)
                       (($$atom string-length) ($$atom str21))
                       ($$atom 1)))
                     (($$atom char<?)
                      (($$atom string-ref) ($$atom str11) ($$atom pos0))
                      (($$atom string-ref) ($$atom str21) ($$atom pos0)))
                     (if (($$atom =)
                          ($$atom pos0)
                          (($$atom -)
                           (($$atom string-length) ($$atom str11))
                           ($$atom 1)))
                         (($$atom char<=?)
                          (($$atom string-ref) ($$atom str11) ($$atom pos0))
                          (($$atom string-ref) ($$atom str21) ($$atom pos0)))
                         (if (($$atom char<=?)
                              (($$atom string-ref)
                               ($$atom str11)
                               ($$atom pos0))
                              (($$atom string-ref)
                               ($$atom str21)
                               ($$atom pos0)))
                             (($$atom string<?-h0)
                              ($$atom str11)
                              ($$atom str21)
                              (($$atom +) ($$atom pos0) ($$atom 1)))
                             ($$atom #f)))))))
       (if (($$atom =) (($$atom string-length) ($$atom str10)) ($$atom 0))
           (($$atom >) (($$atom string-length) ($$atom str20)) ($$atom 0))
           (if (($$atom =) (($$atom string-length) ($$atom str20)) ($$atom 0))
               ($$atom #f)
               (($$atom string<?-h0)
                ($$atom str10)
                ($$atom str20)
                ($$atom 0)))))))
 (define print (lambda (n0) (($$atom gambit$$print) ($$atom n0))))
 (define println (lambda n0 (($$atom gambit$$println) ($$atom n0))))
 (define pp (lambda (n0) (($$atom gambit$$pp) ($$atom n0))))
 (define write (lambda (n0) (($$atom gambit$$pp) ($$atom n0))))
 (define newline (lambda () (($$atom gambit$$newline))))
 (define vector-fill!
   (lambda (v0 el0)
     (letrec ((loop0 (lambda (v1 el1 l0)
                       (if (($$atom =) ($$atom l0) ($$atom -1))
                           ($$atom v1)
                           (begin
                             (($$atom vector-set!)
                              ($$atom v1)
                              ($$atom l0)
                              ($$atom el1))
                             (($$atom loop0)
                              ($$atom v1)
                              ($$atom el1)
                              (($$atom -) ($$atom l0) ($$atom 1))))))))
       (($$atom loop0)
        ($$atom v0)
        ($$atom el0)
        (($$atom -) (($$atom vector-length) ($$atom v0)) ($$atom 1))))))
 (define FLOATvector-const ($$atom vector))
 (define FLOATvector-length ($$atom vector-length))
 (define FLOATvector-ref ($$atom vector-ref))
 (define port?
   (lambda (p0)
     (let ((g20 (($$atom input-port?) ($$atom p0))))
       (if ($$atom g20) ($$atom g20) (($$atom output-port?) ($$atom p0))))))
 (define boolean?
   (lambda (n0)
     (let ((g30 (($$atom eq?) ($$atom n0) ($$atom #t))))
       (if ($$atom g30) ($$atom g30) (($$atom eq?) ($$atom n0) ($$atom #f))))))
 (define vector->list
   (lambda (v0)
     (($$atom vector->list-h)
      ($$atom v0)
      ($$atom 0)
      (($$atom vector-length) ($$atom v0)))))
 (define vector->list-h
   (lambda (vector0 idx0 length0)
     (if (($$atom =) ($$atom idx0) ($$atom length0))
         ($$atom '())
         (($$atom cons)
          (($$atom vector-ref) ($$atom vector0) ($$atom idx0))
          (($$atom vector->list-h)
           ($$atom vector0)
           (($$atom +) ($$atom idx0) ($$atom 1))
           ($$atom length0))))))
 (define list->vector
   (lambda (l0)
     (let ((v0 (($$atom make-vector) (($$atom length) ($$atom l0)))))
       (($$atom list->vector-h)
        ($$atom l0)
        ($$atom v0)
        ($$atom 0)
        (($$atom length) ($$atom l0))))))
 (define list->vector-h
   (lambda (lst0 vec0 pos0 len0)
     (if (($$atom null?) ($$atom lst0))
         ($$atom vec0)
         (begin
           (($$atom vector-set!)
            ($$atom vec0)
            ($$atom pos0)
            (($$atom car) ($$atom lst0)))
           (($$atom list->vector-h)
            (($$atom cdr) ($$atom lst0))
            ($$atom vec0)
            (($$atom +) ($$atom pos0) ($$atom 1))
            ($$atom len0))))))
 (define number->string
   (lambda (num0)
     (letrec ((number->string-h0
               (lambda (num1)
                 (if (($$atom =) ($$atom num1) ($$atom 0))
                     ($$atom "")
                     (($$atom string-append)
                      (($$atom number->string-h0)
                       (($$atom quotient) ($$atom num1) ($$atom 10)))
                      (let ((d0 (($$atom modulo) ($$atom num1) ($$atom 10))))
                        (($$atom make-string)
                         ($$atom 1)
                         (($$atom integer->char)
                          (($$atom +) ($$atom d0) ($$atom 48)))))))))
              (digit->string0
               (lambda (d0)
                 (($$atom make-string)
                  ($$atom 1)
                  (($$atom integer->char)
                   (($$atom +) ($$atom d0) ($$atom 48)))))))
       (if (($$atom =) ($$atom num0) ($$atom 0))
           ($$atom "0")
           (if (($$atom <) ($$atom num0) ($$atom 0))
               (($$atom string-append)
                ($$atom "-")
                (($$atom number->string-h0)
                 (($$atom *) ($$atom num0) ($$atom -1))))
               (($$atom number->string-h0) ($$atom num0)))))))
 (define string->number
   (lambda (str0 . l0)
     (letrec ((s->n0 (lambda (str1 pos0)
                       (if (($$atom =)
                            ($$atom pos0)
                            (($$atom string-length) ($$atom str1)))
                           ($$atom "")
                           (let ((c0 (($$atom string-ref)
                                      ($$atom str1)
                                      ($$atom pos0))))
                             (if (($$atom char-numeric?) ($$atom c0))
                                 (let ((r0 (($$atom s->n0)
                                            ($$atom str1)
                                            (($$atom +)
                                             ($$atom pos0)
                                             ($$atom 1)))))
                                   (if ($$atom r0)
                                       (($$atom string-append)
                                        (($$atom make-string)
                                         ($$atom 1)
                                         ($$atom c0))
                                        ($$atom r0))
                                       ($$atom #f)))
                                 ($$atom #f)))))))
       (if (($$atom =) (($$atom string-length) ($$atom str0)) ($$atom 0))
           ($$atom #f)
           (($$atom s->n0) ($$atom str0) ($$atom 0))))))
 (define char<?
   (lambda (c10 c20)
     (($$atom <)
      (($$atom char->integer) ($$atom c10))
      (($$atom char->integer) ($$atom c20)))))
 (define char>?
   (lambda (c10 c20)
     (($$atom >)
      (($$atom char->integer) ($$atom c10))
      (($$atom char->integer) ($$atom c20)))))
 (define char<=?
   (lambda (c10 c20)
     (($$atom <=)
      (($$atom char->integer) ($$atom c10))
      (($$atom char->integer) ($$atom c20)))))
 (define char>=?
   (lambda (c10 c20)
     (($$atom >=)
      (($$atom char->integer) ($$atom c10))
      (($$atom char->integer) ($$atom c20)))))
 (define char-alphabetic?
   (lambda (c0)
     (let ((c1 (($$atom char->integer) ($$atom c0))))
       (let ((g40 (if (($$atom >) ($$atom c1) ($$atom 64))
                      (($$atom <) ($$atom c1) ($$atom 91))
                      ($$atom #f))))
         (if ($$atom g40)
             ($$atom g40)
             (if (($$atom >) ($$atom c1) ($$atom 96))
                 (($$atom <) ($$atom c1) ($$atom 123))
                 ($$atom #f)))))))
 (define char-numeric?
   (lambda (c0)
     (let ((c1 (($$atom char->integer) ($$atom c0))))
       (if (($$atom >) ($$atom c1) ($$atom 47))
           (($$atom <) ($$atom c1) ($$atom 58))
           ($$atom #f)))))
 (define char-whitespace?
   (lambda (c0)
     (let ((c1 (($$atom char->integer) ($$atom c0))))
       (let ((g50 (($$atom =) ($$atom c1) ($$atom 32))))
         (if ($$atom g50)
             ($$atom g50)
             (let ((g60 (($$atom =) ($$atom c1) ($$atom 9))))
               (if ($$atom g60)
                   ($$atom g60)
                   (let ((g70 (($$atom =) ($$atom c1) ($$atom 10))))
                     (if ($$atom g70)
                         ($$atom g70)
                         (let ((g80 (($$atom =) ($$atom c1) ($$atom 12))))
                           (if ($$atom g80)
                               ($$atom g80)
                               (($$atom =) ($$atom c1) ($$atom 13)))))))))))))
 (define char-upper-case?
   (lambda (c0)
     (let ((c1 (($$atom char->integer) ($$atom c0))))
       (if (($$atom >) ($$atom c1) ($$atom 64))
           (($$atom <) ($$atom c1) ($$atom 91))
           ($$atom #f)))))
 (define char-lower-case?
   (lambda (c0)
     (let ((c1 (($$atom char->integer) ($$atom c0))))
       (if (($$atom >) ($$atom c1) ($$atom 96))
           (($$atom <) ($$atom c1) ($$atom 123))
           ($$atom #f)))))
 (define char-upcase
   (lambda (c0)
     (let ((v0 (($$atom char->integer) ($$atom c0))))
       (if (if (($$atom >) ($$atom v0) ($$atom 96))
               (($$atom <) ($$atom v0) ($$atom 123))
               ($$atom #f))
           (($$atom integer->char) (($$atom -) ($$atom v0) ($$atom 32)))
           ($$atom c0)))))
 (define char-downcase
   (lambda (c0)
     (let ((v0 (($$atom char->integer) ($$atom c0))))
       (if (if (($$atom >) ($$atom v0) ($$atom 64))
               (($$atom <) ($$atom v0) ($$atom 91))
               ($$atom #f))
           (($$atom integer->char) (($$atom +) ($$atom v0) ($$atom 32)))
           ($$atom c0)))))
 (define char-ci=?
   (lambda (c10 c20)
     (($$atom =)
      (($$atom char->integer) (($$atom char-downcase) ($$atom c10)))
      (($$atom char->integer) (($$atom char-downcase) ($$atom c20))))))
 (define char-ci<?
   (lambda (c10 c20)
     (($$atom <)
      (($$atom char->integer) (($$atom char-downcase) ($$atom c10)))
      (($$atom char->integer) (($$atom char-downcase) ($$atom c20))))))
 (define char-ci>?
   (lambda (c10 c20)
     (($$atom >)
      (($$atom char->integer) (($$atom char-downcase) ($$atom c10)))
      (($$atom char->integer) (($$atom char-downcase) ($$atom c20))))))
 (define char-ci<=?
   (lambda (c10 c20)
     (($$atom <=)
      (($$atom char->integer) (($$atom char-downcase) ($$atom c10)))
      (($$atom char->integer) (($$atom char-downcase) ($$atom c20))))))
 (define char-ci>=?
   (lambda (c10 c20)
     (($$atom >=)
      (($$atom char->integer) (($$atom char-downcase) ($$atom c10)))
      (($$atom char->integer) (($$atom char-downcase) ($$atom c20))))))
 (define length
   (lambda (l0)
     (letrec ((loop0 (lambda (l1 len0)
                       (if (($$atom null?) ($$atom l1))
                           ($$atom len0)
                           (if (($$atom pair?) ($$atom l1))
                               (($$atom loop0)
                                (($$atom cdr) ($$atom l1))
                                (($$atom +) ($$atom 1) ($$atom len0)))
                               (($$atom error) ($$atom "LIST expected")))))))
       (($$atom loop0) ($$atom l0) ($$atom 0)))))
 (define ##append-two
   (lambda (lst10 lst20)
     (if (($$atom null?) ($$atom lst10))
         ($$atom lst20)
         (($$atom cons)
          (($$atom car) ($$atom lst10))
          (($$atom ##append-two)
           (($$atom cdr) ($$atom lst10))
           ($$atom lst20))))))
 (define append
   (lambda lsts0
     (letrec ((loop0 (lambda (lsts1)
                       (if (($$atom null?) ($$atom lsts1))
                           ($$atom '())
                           (($$atom ##append-two)
                            (($$atom car) ($$atom lsts1))
                            (($$atom loop0) (($$atom cdr) ($$atom lsts1))))))))
       (($$atom loop0) ($$atom lsts0)))))
 (define list?
   (lambda (n0)
     (let ((g90 (($$atom null?) ($$atom n0))))
       (if ($$atom g90)
           ($$atom g90)
           (if (($$atom pair?) ($$atom n0))
               (($$atom list?) (($$atom cdr) ($$atom n0)))
               ($$atom #f))))))
 (define list-ref
   (lambda (lst0 i0)
     (if (($$atom =) ($$atom i0) ($$atom 0))
         (($$atom car) ($$atom lst0))
         (($$atom list-ref)
          (($$atom cdr) ($$atom lst0))
          (($$atom -) ($$atom i0) ($$atom 1))))))
 (define reverse
   (lambda (l0)
     (letrec ((loop0 (lambda (l1 r0)
                       (if (($$atom null?) ($$atom l1))
                           ($$atom r0)
                           (if (($$atom pair?) ($$atom l1))
                               (($$atom loop0)
                                (($$atom cdr) ($$atom l1))
                                (($$atom cons)
                                 (($$atom car) ($$atom l1))
                                 ($$atom r0)))
                               (($$atom error) ($$atom "LIST expected")))))))
       (($$atom loop0) ($$atom l0) ($$atom '())))))
 (define for-each
   (lambda (f0 lst0)
     (if (($$atom null?) ($$atom lst0))
         ($$atom #f)
         (begin
           (($$atom f0) (($$atom car) ($$atom lst0)))
           (($$atom for-each) ($$atom f0) (($$atom cdr) ($$atom lst0)))))))
 (define assq
   (lambda (el0 lst0)
     (if (($$atom null?) ($$atom lst0))
         ($$atom #f)
         (if (($$atom eq?)
              ($$atom el0)
              (($$atom car) (($$atom car) ($$atom lst0))))
             (($$atom car) ($$atom lst0))
             (($$atom assq) ($$atom el0) (($$atom cdr) ($$atom lst0)))))))
 (define assv
   (lambda (el0 lst0)
     (if (($$atom null?) ($$atom lst0))
         ($$atom #f)
         (if (let ((g100 (($$atom car) (($$atom car) ($$atom lst0)))))
               (if (($$atom number?) ($$atom el0))
                   (if (($$atom number?) ($$atom g100))
                       (($$atom =) ($$atom el0) ($$atom g100))
                       ($$atom #f))
                   (($$atom eq?) ($$atom el0) ($$atom g100))))
             (($$atom car) ($$atom lst0))
             (($$atom assv) ($$atom el0) (($$atom cdr) ($$atom lst0)))))))
 (define assoc
   (lambda (el0 lst0)
     (if (($$atom null?) ($$atom lst0))
         ($$atom #f)
         (if (($$atom equal?)
              ($$atom el0)
              (($$atom car) (($$atom car) ($$atom lst0))))
             (($$atom car) ($$atom lst0))
             (($$atom assoc) ($$atom el0) (($$atom cdr) ($$atom lst0)))))))
 (define memq
   (lambda (el0 lst0)
     (if (($$atom null?) ($$atom lst0))
         ($$atom #f)
         (if (($$atom eq?) ($$atom el0) (($$atom car) ($$atom lst0)))
             ($$atom lst0)
             (($$atom memq) ($$atom el0) (($$atom cdr) ($$atom lst0)))))))
 (define memv
   (lambda (el0 lst0)
     (if (($$atom null?) ($$atom lst0))
         ($$atom #f)
         (if (let ((g110 (($$atom car) ($$atom lst0))))
               (if (($$atom number?) ($$atom el0))
                   (if (($$atom number?) ($$atom g110))
                       (($$atom =) ($$atom el0) ($$atom g110))
                       ($$atom #f))
                   (($$atom eq?) ($$atom el0) ($$atom g110))))
             ($$atom lst0)
             (($$atom memv) ($$atom el0) (($$atom cdr) ($$atom lst0)))))))
 (define member
   (lambda (el0 lst0)
     (if (($$atom null?) ($$atom lst0))
         ($$atom #f)
         (if (($$atom equal?) ($$atom el0) (($$atom car) ($$atom lst0)))
             ($$atom lst0)
             (($$atom member) ($$atom el0) (($$atom cdr) ($$atom lst0)))))))
 (define map
   (lambda (fn0 lst0)
     (if (($$atom null?) ($$atom lst0))
         ($$atom '())
         (($$atom cons)
          (($$atom fn0) (($$atom car) ($$atom lst0)))
          (($$atom map) ($$atom fn0) (($$atom cdr) ($$atom lst0)))))))
 (define error
   (lambda (msg0 . msgs0)
     (letrec ((print-msgs0
               (lambda (msgs1)
                 (if (($$atom null?) ($$atom msgs1))
                     (($$atom newline))
                     (begin
                       (let ((n0 (($$atom car) ($$atom msgs1))))
                         (($$atom gambit$$print) ($$atom n0)))
                       (($$atom gambit$$print) ($$atom " "))
                       (($$atom print-msgs0)
                        (($$atom cdr) ($$atom msgs1))))))))
       (begin
         (($$atom gambit$$print) ($$atom "!!! ERROR - "))
         (($$atom print-msgs0) (($$atom cons) ($$atom msg0) ($$atom msgs0)))
         (($$atom exit))))))
 (define fatal-error
   (lambda (msg0 . msgs0)
     (($$atom apply)
      ($$atom error)
      (($$atom cons) ($$atom msg0) ($$atom msgs0)))))
 (define apply
   (lambda (fn0 args0 . r0)
     (letrec ((gen-args0
               (lambda (l0)
                 (if (($$atom =) (($$atom length) ($$atom l0)) ($$atom 1))
                     (if (($$atom list?) (($$atom car) ($$atom l0)))
                         (($$atom car) ($$atom l0))
                         (($$atom error) ($$atom "APPLY ERROR")))
                     (($$atom cons)
                      (($$atom car) ($$atom l0))
                      (($$atom gen-args0) (($$atom cdr) ($$atom l0))))))))
       (let ((args1 (if (($$atom null?) ($$atom r0))
                        ($$atom args0)
                        (($$atom gen-args0)
                         (($$atom cons) ($$atom args0) ($$atom r0))))))
         (begin
           (if (($$atom list?) ($$atom args1))
               ($$atom #f)
               (($$atom error) ($$atom "LIST EXPECTED")))
           (($$atom ##apply) ($$atom fn0) ($$atom args1)))))))
 (define integer? (lambda (n0) (($$atom fixnum?) ($$atom n0))))
 (define positive? (lambda (x0) (($$atom >) ($$atom x0) ($$atom 0))))
 (define negative? (lambda (x0) (($$atom <) ($$atom x0) ($$atom 0))))
 (define even?
   (lambda (x0)
     (($$atom =) (($$atom modulo) ($$atom x0) ($$atom 2)) ($$atom 0))))
 (define odd?
   (lambda (x0)
     (($$atom =) (($$atom modulo) ($$atom x0) ($$atom 2)) ($$atom 1))))
 (define expt
   (lambda (n0 m0)
     (if (($$atom =) ($$atom m0) ($$atom 0))
         ($$atom 1)
         (($$atom *)
          ($$atom n0)
          (($$atom expt) ($$atom n0) (($$atom -) ($$atom m0) ($$atom 1)))))))
 (define max
   (lambda (a0 . l0)
     (letrec ((max-h0 (lambda (els0 m0)
                        (if (($$atom null?) ($$atom els0))
                            ($$atom m0)
                            (let ((c0 (($$atom car) ($$atom els0))))
                              (if (($$atom >) ($$atom c0) ($$atom m0))
                                  (($$atom max-h0)
                                   (($$atom cdr) ($$atom els0))
                                   ($$atom c0))
                                  (($$atom max-h0)
                                   (($$atom cdr) ($$atom els0))
                                   ($$atom m0))))))))
       (($$atom max-h0) ($$atom l0) ($$atom a0)))))
 (define min
   (lambda (a0 . l0)
     (letrec ((min-h0 (lambda (els0 m0)
                        (if (($$atom null?) ($$atom els0))
                            ($$atom m0)
                            (begin
                              (($$atom car) ($$atom els0))
                              (if (($$atom <)
                                   (($$atom car) ($$atom els0))
                                   ($$atom m0))
                                  (($$atom min-h0)
                                   (($$atom cdr) ($$atom els0))
                                   (($$atom car) ($$atom els0)))
                                  (($$atom min-h0)
                                   (($$atom cdr) ($$atom els0))
                                   ($$atom m0))))))))
       (($$atom min-h0) ($$atom l0) ($$atom a0)))))
 (define exact? (lambda (n0) ($$atom #t)))
 (define exact->inexact (lambda (x0) ($$atom x0)))
 (define call/cc
   (lambda n0
     (let ((l0 (($$atom length) ($$atom n0))))
       (if (($$atom =) ($$atom l0) ($$atom 1))
           ((($$atom car) ($$atom n0)) ($$atom #f))
           (if (($$atom =) ($$atom l0) ($$atom 2))
               ((($$atom car) ($$atom n0))
                ($$atom #f)
                (($$atom car) (($$atom cdr) ($$atom n0))))
               (($$atom error) ($$atom "call/cc")))))))
 (define abs
   (lambda (x0)
     (if (($$atom <) ($$atom x0) ($$atom 0))
         (($$atom *) ($$atom -1) ($$atom x0))
         ($$atom x0))))
 (define read (lambda () (($$atom gambit$$read))))
 (define open-input-file* ($$atom open-input-file))
 (define pp-expression
   (lambda (expr0 port0)
     (begin
       (($$atom write) ($$atom expr0) ($$atom port0))
       (($$atom newline) ($$atom port0)))))
 (define write-returning-len
   (lambda (obj0 port0)
     (begin (($$atom write) ($$atom obj0) ($$atom port0)) ($$atom 1))))
 (define display-returning-len
   (lambda (obj0 port0)
     (begin (($$atom display) ($$atom obj0) ($$atom port0)) ($$atom 1))))
 (define write-word
   (lambda (w0 port0)
     (begin
       (($$atom write-char)
        (($$atom integer->char) (($$atom quotient) ($$atom w0) ($$atom 256)))
        ($$atom port0))
       (($$atom write-char)
        (($$atom integer->char) (($$atom modulo) ($$atom w0) ($$atom 256)))
        ($$atom port0)))))
 (define char-nul (($$atom integer->char) ($$atom 0)))
 (define char-tab (($$atom integer->char) ($$atom 9)))
 (define char-newline (($$atom integer->char) ($$atom 10)))
 (define character-encoding ($$atom char->integer))
 (define max-character-encoding ($$atom 255))
 (define fatal-err
   (lambda (msg0 arg0) (($$atom fatal-error) ($$atom msg0) ($$atom arg0))))
 (define scheme-global-var (lambda (name0) ($$atom name0)))
 (define scheme-global-var-ref
   (lambda (var0) (($$atom NYIquasi-list) ($$atom 'eval) ($$atom var0))))
 (define scheme-global-var-set!
   (lambda (var0 val0)
     (let ((expr0 (($$atom list)
                   ($$atom 'set!)
                   ($$atom var0)
                   (($$atom list) ($$atom 'quote) ($$atom val0)))))
       (($$atom NYIquasi-list) ($$atom 'eval) ($$atom expr0)))))
 (define scheme-global-eval
   (lambda (expr0 err0)
     (($$atom NYIquasi-list) ($$atom 'eval) ($$atom expr0))))
 (define pinpoint-error (lambda (filename0 line0 char0) ($$atom #t)))
 (define file-path-sep ($$atom #\:))
 (define file-ext-sep ($$atom #\.))
 (define path-absolute?
   (lambda (x0)
     (if (($$atom >) (($$atom string-length) ($$atom x0)) ($$atom 0))
         (let ((c0 (($$atom string-ref) ($$atom x0) ($$atom 0))))
           (let ((g120 (($$atom char=?) ($$atom c0) ($$atom #\/))))
             (if ($$atom g120)
                 ($$atom g120)
                 (($$atom char=?) ($$atom c0) ($$atom #\~)))))
         ($$atom #f))))
 (define file-path
   (lambda (x0)
     (letrec ((loop10 (lambda (x1 i0)
                        (if (if (($$atom >) ($$atom i0) ($$atom 0))
                                (($$atom not)
                                 (($$atom char=?)
                                  (($$atom string-ref)
                                   ($$atom x1)
                                   (($$atom -) ($$atom i0) ($$atom 1)))
                                  ($$atom #\:)))
                                ($$atom #f))
                            (($$atom loop10)
                             ($$atom x1)
                             (($$atom -) ($$atom i0) ($$atom 1)))
                            (let ((result0 (($$atom make-string) ($$atom i0))))
                              (letrec ((loop20 (lambda (x2 result1 j0)
                                                 (if (($$atom <)
                                                      ($$atom j0)
                                                      ($$atom 0))
                                                     ($$atom result1)
                                                     (begin
                                                       (($$atom string-set!)
                                                        ($$atom result1)
                                                        ($$atom j0)
                                                        (($$atom string-ref)
                                                         ($$atom x2)
                                                         ($$atom j0)))
                                                       (($$atom loop20)
                                                        ($$atom x2)
                                                        ($$atom result1)
                                                        (($$atom -)
                                                         ($$atom j0)
                                                         ($$atom 1))))))))
                                (($$atom loop20)
                                 ($$atom x1)
                                 ($$atom result0)
                                 (($$atom -) ($$atom i0) ($$atom 1)))))))))
       (($$atom loop10) ($$atom x0) (($$atom string-length) ($$atom x0))))))
 (define file-name
   (lambda (x0)
     (letrec ((loop10 (lambda (x1 i0)
                        (if (if (($$atom >) ($$atom i0) ($$atom 0))
                                (($$atom not)
                                 (($$atom char=?)
                                  (($$atom string-ref)
                                   ($$atom x1)
                                   (($$atom -) ($$atom i0) ($$atom 1)))
                                  ($$atom #\:)))
                                ($$atom #f))
                            (($$atom loop10)
                             ($$atom x1)
                             (($$atom -) ($$atom i0) ($$atom 1)))
                            (let ((result0 (($$atom make-string)
                                            (($$atom -)
                                             (($$atom string-length)
                                              ($$atom x1))
                                             ($$atom i0)))))
                              (letrec ((loop20 (lambda (x2 i1 result1 j0)
                                                 (if (($$atom <)
                                                      ($$atom j0)
                                                      ($$atom i1))
                                                     ($$atom result1)
                                                     (begin
                                                       (($$atom string-set!)
                                                        ($$atom result1)
                                                        (($$atom -)
                                                         ($$atom j0)
                                                         ($$atom i1))
                                                        (($$atom string-ref)
                                                         ($$atom x2)
                                                         ($$atom j0)))
                                                       (($$atom loop20)
                                                        ($$atom x2)
                                                        ($$atom i1)
                                                        ($$atom result1)
                                                        (($$atom -)
                                                         ($$atom j0)
                                                         ($$atom 1))))))))
                                (($$atom loop20)
                                 ($$atom x1)
                                 ($$atom i0)
                                 ($$atom result0)
                                 (($$atom -)
                                  (($$atom string-length) ($$atom x1))
                                  ($$atom 1)))))))))
       (($$atom loop10) ($$atom x0) (($$atom string-length) ($$atom x0))))))
 (define file-ext
   (lambda (x0)
     (letrec ((loop10 (lambda (x1 i0)
                        (if (let ((g130 (($$atom =) ($$atom i0) ($$atom 0))))
                              (if ($$atom g130)
                                  ($$atom g130)
                                  (($$atom char=?)
                                   (($$atom string-ref)
                                    ($$atom x1)
                                    (($$atom -) ($$atom i0) ($$atom 1)))
                                   ($$atom #\:))))
                            ($$atom #f)
                            (if (($$atom char=?)
                                 (($$atom string-ref)
                                  ($$atom x1)
                                  (($$atom -) ($$atom i0) ($$atom 1)))
                                 ($$atom #\.))
                                (let ((result0 (($$atom make-string)
                                                (($$atom -)
                                                 (($$atom string-length)
                                                  ($$atom x1))
                                                 ($$atom i0)))))
                                  (letrec ((loop20 (lambda (x2 i1 result1 j0)
                                                     (if (($$atom <)
                                                          ($$atom j0)
                                                          ($$atom i1))
                                                         ($$atom result1)
                                                         (begin
                                                           (($$atom string-set!)
                                                            ($$atom result1)
                                                            (($$atom -)
                                                             ($$atom j0)
                                                             ($$atom i1))
                                                            (($$atom string-ref)
                                                             ($$atom x2)
                                                             ($$atom j0)))
                                                           (($$atom loop20)
                                                            ($$atom x2)
                                                            ($$atom i1)
                                                            ($$atom result1)
                                                            (($$atom -)
                                                             ($$atom j0)
                                                             ($$atom 1))))))))
                                    (($$atom loop20)
                                     ($$atom x1)
                                     ($$atom i0)
                                     ($$atom result0)
                                     (($$atom -)
                                      (($$atom string-length) ($$atom x1))
                                      ($$atom 1)))))
                                (($$atom loop10)
                                 ($$atom x1)
                                 (($$atom -) ($$atom i0) ($$atom 1))))))))
       (($$atom loop10) ($$atom x0) (($$atom string-length) ($$atom x0))))))
 (define file-root
   (lambda (x0)
     (letrec ((loop10 (lambda (x1 i0)
                        (if (let ((g140 (($$atom =) ($$atom i0) ($$atom 0))))
                              (if ($$atom g140)
                                  ($$atom g140)
                                  (($$atom char=?)
                                   (($$atom string-ref)
                                    ($$atom x1)
                                    (($$atom -) ($$atom i0) ($$atom 1)))
                                   ($$atom #\:))))
                            ($$atom x1)
                            (if (($$atom char=?)
                                 (($$atom string-ref)
                                  ($$atom x1)
                                  (($$atom -) ($$atom i0) ($$atom 1)))
                                 ($$atom #\.))
                                (let ((result0 (($$atom make-string)
                                                (($$atom -)
                                                 ($$atom i0)
                                                 ($$atom 1)))))
                                  (letrec ((loop20 (lambda (x2 result1 j0)
                                                     (if (($$atom <)
                                                          ($$atom j0)
                                                          ($$atom 0))
                                                         ($$atom result1)
                                                         (begin
                                                           (($$atom string-set!)
                                                            ($$atom result1)
                                                            ($$atom j0)
                                                            (($$atom string-ref)
                                                             ($$atom x2)
                                                             ($$atom j0)))
                                                           (($$atom loop20)
                                                            ($$atom x2)
                                                            ($$atom result1)
                                                            (($$atom -)
                                                             ($$atom j0)
                                                             ($$atom 1))))))))
                                    (($$atom loop20)
                                     ($$atom x1)
                                     ($$atom result0)
                                     (($$atom -) ($$atom i0) ($$atom 2)))))
                                (($$atom loop10)
                                 ($$atom x1)
                                 (($$atom -) ($$atom i0) ($$atom 1))))))))
       (($$atom loop10) ($$atom x0) (($$atom string-length) ($$atom x0))))))
 (define make-counter
   (lambda (next0 limit0 limit-error0)
     (let ((next1 (($$atom ##box) ($$atom next0))))
       (lambda ()
         (if (($$atom <) (($$atom ##unbox) ($$atom next1)) ($$atom limit0))
             (let ((result0 (($$atom ##unbox) ($$atom next1))))
               (begin
                 (($$atom ##set-box!)
                  ($$atom next1)
                  (($$atom +) (($$atom ##unbox) ($$atom next1)) ($$atom 1)))
                 ($$atom result0)))
             (($$atom limit-error0)))))))
 (define pos-in-list
   (lambda (x0 l0)
     (letrec ((loop0 (lambda (x1 l1 i0)
                       (if (($$atom pair?) ($$atom l1))
                           (if (($$atom eq?)
                                (($$atom car) ($$atom l1))
                                ($$atom x1))
                               ($$atom i0)
                               (($$atom loop0)
                                ($$atom x1)
                                (($$atom cdr) ($$atom l1))
                                (($$atom +) ($$atom i0) ($$atom 1))))
                           ($$atom #f)))))
       (($$atom loop0) ($$atom x0) ($$atom l0) ($$atom 0)))))
 (define string-pos-in-list
   (lambda (x0 l0)
     (letrec ((loop0 (lambda (x1 l1 i0)
                       (if (($$atom pair?) ($$atom l1))
                           (if (($$atom string=?)
                                (($$atom car) ($$atom l1))
                                ($$atom x1))
                               ($$atom i0)
                               (($$atom loop0)
                                ($$atom x1)
                                (($$atom cdr) ($$atom l1))
                                (($$atom +) ($$atom i0) ($$atom 1))))
                           ($$atom #f)))))
       (($$atom loop0) ($$atom x0) ($$atom l0) ($$atom 0)))))
 (define nth-after
   (lambda (l0 n0)
     (letrec ((loop0 (lambda (l1 n1)
                       (if (($$atom >) ($$atom n1) ($$atom 0))
                           (($$atom loop0)
                            (($$atom cdr) ($$atom l1))
                            (($$atom -) ($$atom n1) ($$atom 1)))
                           ($$atom l1)))))
       (($$atom loop0) ($$atom l0) ($$atom n0)))))
 (define pair-up
   (lambda (l10 l20)
     (letrec ((pair0 (lambda (l11 l21)
                       (if (($$atom pair?) ($$atom l11))
                           (($$atom cons)
                            (($$atom cons)
                             (($$atom car) ($$atom l11))
                             (($$atom car) ($$atom l21)))
                            (($$atom pair0)
                             (($$atom cdr) ($$atom l11))
                             (($$atom cdr) ($$atom l21))))
                           ($$atom '())))))
       (($$atom pair0) ($$atom l10) ($$atom l20)))))
 (define my-last-pair
   (lambda (l0)
     (letrec ((loop0 (lambda (l1)
                       (if (($$atom pair?) (($$atom cdr) ($$atom l1)))
                           (($$atom loop0) (($$atom cdr) ($$atom l1)))
                           ($$atom l1)))))
       (($$atom loop0) ($$atom l0)))))
 (define sort-list
   (lambda (l0 <?0)
     (letrec ((mergesort0
               (lambda (<?1 l1)
                 (letrec ((split0 (lambda (l2)
                                    (if (let ((g150 (($$atom null?)
                                                     ($$atom l2))))
                                          (if ($$atom g150)
                                              ($$atom g150)
                                              (($$atom null?)
                                               (($$atom cdr) ($$atom l2)))))
                                        ($$atom l2)
                                        (($$atom cons)
                                         (($$atom car) ($$atom l2))
                                         (($$atom split0)
                                          (($$atom cdr)
                                           (($$atom cdr) ($$atom l2))))))))
                          (merge0 (lambda (<?2 l10 l20)
                                    (if (($$atom null?) ($$atom l10))
                                        ($$atom l20)
                                        (if (($$atom null?) ($$atom l20))
                                            ($$atom l10)
                                            (let ((e20 (($$atom car)
                                                        ($$atom l20)))
                                                  (e10 (($$atom car)
                                                        ($$atom l10))))
                                              (if (($$atom <?2)
                                                   ($$atom e10)
                                                   ($$atom e20))
                                                  (($$atom cons)
                                                   ($$atom e10)
                                                   (($$atom merge0)
                                                    ($$atom <?2)
                                                    (($$atom cdr) ($$atom l10))
                                                    ($$atom l20)))
                                                  (($$atom cons)
                                                   ($$atom e20)
                                                   (($$atom merge0)
                                                    ($$atom <?2)
                                                    ($$atom l10)
                                                    (($$atom cdr)
                                                     ($$atom l20)))))))))))
                   (if (let ((g160 (($$atom null?) ($$atom l1))))
                         (if ($$atom g160)
                             ($$atom g160)
                             (($$atom null?) (($$atom cdr) ($$atom l1)))))
                       ($$atom l1)
                       (let ((l10 (($$atom mergesort0)
                                   ($$atom <?1)
                                   (($$atom split0) ($$atom l1)))))
                         (let ((l20 (($$atom mergesort0)
                                     ($$atom <?1)
                                     (($$atom split0)
                                      (($$atom cdr) ($$atom l1))))))
                           (($$atom merge0)
                            ($$atom <?1)
                            ($$atom l10)
                            ($$atom l20)))))))))
       (($$atom mergesort0) ($$atom <?0) ($$atom l0)))))
 (define lst->vector
   (lambda (l0)
     (let ((n0 (($$atom length) ($$atom l0))))
       (let ((v0 (($$atom make-vector) ($$atom n0))))
         (letrec ((loop0 (lambda (v1 l1 i0)
                           (if (($$atom pair?) ($$atom l1))
                               (begin
                                 (($$atom vector-set!)
                                  ($$atom v1)
                                  ($$atom i0)
                                  (($$atom car) ($$atom l1)))
                                 (($$atom loop0)
                                  ($$atom v1)
                                  (($$atom cdr) ($$atom l1))
                                  (($$atom +) ($$atom i0) ($$atom 1))))
                               ($$atom v1)))))
           (($$atom loop0) ($$atom v0) ($$atom l0) ($$atom 0)))))))
 (define vector->lst
   (lambda (v0)
     (letrec ((loop0 (lambda (v1 l0 i0)
                       (if (($$atom <) ($$atom i0) ($$atom 0))
                           ($$atom l0)
                           (($$atom loop0)
                            ($$atom v1)
                            (($$atom cons)
                             (($$atom vector-ref) ($$atom v1) ($$atom i0))
                             ($$atom l0))
                            (($$atom -) ($$atom i0) ($$atom 1)))))))
       (($$atom loop0)
        ($$atom v0)
        ($$atom '())
        (($$atom -) (($$atom vector-length) ($$atom v0)) ($$atom 1))))))
 (define lst->string
   (lambda (l0)
     (let ((n0 (($$atom length) ($$atom l0))))
       (let ((s0 (($$atom make-string) ($$atom n0))))
         (letrec ((loop0 (lambda (s1 l1 i0)
                           (if (($$atom pair?) ($$atom l1))
                               (begin
                                 (($$atom string-set!)
                                  ($$atom s1)
                                  ($$atom i0)
                                  (($$atom car) ($$atom l1)))
                                 (($$atom loop0)
                                  ($$atom s1)
                                  (($$atom cdr) ($$atom l1))
                                  (($$atom +) ($$atom i0) ($$atom 1))))
                               ($$atom s1)))))
           (($$atom loop0) ($$atom s0) ($$atom l0) ($$atom 0)))))))
 (define string->lst
   (lambda (s0)
     (letrec ((loop0 (lambda (s1 l0 i0)
                       (if (($$atom <) ($$atom i0) ($$atom 0))
                           ($$atom l0)
                           (($$atom loop0)
                            ($$atom s1)
                            (($$atom cons)
                             (($$atom string-ref) ($$atom s1) ($$atom i0))
                             ($$atom l0))
                            (($$atom -) ($$atom i0) ($$atom 1)))))))
       (($$atom loop0)
        ($$atom s0)
        ($$atom '())
        (($$atom -) (($$atom string-length) ($$atom s0)) ($$atom 1))))))
 (define with-exception-handling
   (lambda (proc0)
     (let ((old-exception-handler0 ($$atom throw-to-exception-handler)))
       (let ((val0 (($$atom call/cc)
                    (lambda (cont0 proc1)
                      (begin
                        (set! throw-to-exception-handler ($$atom cont0))
                        (($$atom proc1))))
                    ($$atom proc0))))
         (begin
           (set! throw-to-exception-handler ($$atom old-exception-handler0))
           ($$atom val0))))))
 (define throw-to-exception-handler
   (lambda (val0)
     (($$atom fatal-error)
      ($$atom "Internal error, no exception handler at this point")
      ($$atom val0))))
 (define compiler-error
   (lambda (msg0 . args0)
     (begin
       (($$atom newline))
       (($$atom display) ($$atom "*** ERROR -- "))
       (($$atom display) ($$atom msg0))
       (($$atom for-each)
        (lambda (x0)
          (begin (($$atom display) ($$atom " ")) (($$atom write) ($$atom x0))))
        ($$atom args0))
       (($$atom newline))
       (($$atom compiler-abort)))))
 (define compiler-user-error
   (lambda (loc0 msg0 . args0)
     (begin
       (($$atom newline))
       (($$atom display) ($$atom "*** ERROR -- In "))
       (($$atom locat-show) ($$atom loc0))
       (($$atom newline))
       (($$atom display) ($$atom "*** "))
       (($$atom display) ($$atom msg0))
       (($$atom for-each)
        (lambda (x0)
          (begin (($$atom display) ($$atom " ")) (($$atom write) ($$atom x0))))
        ($$atom args0))
       (($$atom newline))
       (($$atom compiler-abort)))))
 (define compiler-internal-error
   (lambda (msg0 . args0)
     (begin
       (($$atom newline))
       (($$atom display)
        ($$atom "*** ERROR -- Compiler internal error detected"))
       (($$atom newline))
       (($$atom display) ($$atom "*** in procedure "))
       (($$atom display) ($$atom msg0))
       (($$atom for-each)
        (lambda (x0)
          (begin (($$atom display) ($$atom " ")) (($$atom write) ($$atom x0))))
        ($$atom args0))
       (($$atom newline))
       (($$atom compiler-abort)))))
 (define compiler-limitation-error
   (lambda (msg0 . args0)
     (begin
       (($$atom newline))
       (($$atom display) ($$atom "*** ERROR -- Compiler limit reached"))
       (($$atom newline))
       (($$atom display) ($$atom "*** "))
       (($$atom display) ($$atom msg0))
       (($$atom for-each)
        (lambda (x0)
          (begin (($$atom display) ($$atom " ")) (($$atom write) ($$atom x0))))
        ($$atom args0))
       (($$atom newline))
       (($$atom compiler-abort)))))
 (define compiler-abort
   (lambda () (($$atom throw-to-exception-handler) ($$atom #f))))
 (define make-gnode
   (lambda (label0 edges0) (($$atom vector) ($$atom label0) ($$atom edges0))))
 (define gnode-label
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 0))))
 (define gnode-edges
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 1))))
 (define transitive-closure
   (lambda (graph0)
     (let ((changed?0 (($$atom ##box) ($$atom #f))))
       (let ((new-graph0
              (let ((proc0 (lambda (x0)
                             (let ((new-edges0
                                    (let ((edges0 (($$atom vector-ref)
                                                   ($$atom x0)
                                                   ($$atom 1))))
                                      (let ((list0 (($$atom set-union)
                                                    ($$atom edges0)
                                                    (($$atom apply)
                                                     ($$atom set-union)
                                                     (($$atom map)
                                                      (lambda (label0)
                                                        (let ((x1 (($$atom gnode-find)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                           ($$atom label0)
                           ($$atom graph0))))
                  (($$atom vector-ref) ($$atom x1) ($$atom 1))))
              ($$atom edges0))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                        ($$atom list0)))))
                               (begin
                                 (if (($$atom set-equal?)
                                      ($$atom new-edges0)
                                      (($$atom vector-ref)
                                       ($$atom x0)
                                       ($$atom 1)))
                                     ($$atom #f)
                                     (($$atom ##set-box!)
                                      ($$atom changed?0)
                                      ($$atom #t)))
                                 (($$atom make-gnode)
                                  (($$atom gnode-label) ($$atom x0))
                                  ($$atom new-edges0)))))))
                (if (($$atom null?) ($$atom graph0))
                    ($$atom '())
                    (($$atom cons)
                     (($$atom proc0) (($$atom car) ($$atom graph0)))
                     (let ((set0 (($$atom cdr) ($$atom graph0))))
                       (if (($$atom null?) ($$atom set0))
                           ($$atom '())
                           (($$atom cons)
                            (($$atom proc0) (($$atom car) ($$atom set0)))
                            (($$atom set-map)
                             ($$atom proc0)
                             (($$atom cdr) ($$atom set0)))))))))))
         (if (($$atom ##unbox) ($$atom changed?0))
             (($$atom transitive-closure) ($$atom new-graph0))
             ($$atom new-graph0))))))
 (define gnode-find
   (lambda (label0 graph0)
     (letrec ((find0 (lambda (label1 l0)
                       (if (($$atom null?) ($$atom l0))
                           ($$atom #f)
                           (if (($$atom eq?)
                                (let ((x0 (($$atom car) ($$atom l0))))
                                  (($$atom vector-ref) ($$atom x0) ($$atom 0)))
                                ($$atom label1))
                               (($$atom car) ($$atom l0))
                               (($$atom find0)
                                ($$atom label1)
                                (($$atom cdr) ($$atom l0))))))))
       (($$atom find0) ($$atom label0) ($$atom graph0)))))
 (define topological-sort
   (lambda (graph0)
     (if (($$atom null?) ($$atom graph0))
         ($$atom '())
         (let ((to-remove0
                (let ((g170 (($$atom remove-no-edges) ($$atom graph0))))
                  (if ($$atom g170)
                      ($$atom g170)
                      (($$atom remove-cycle) ($$atom graph0))))))
           (let ((labels0 (($$atom set-map)
                           ($$atom gnode-label)
                           ($$atom to-remove0))))
             (($$atom cons)
              ($$atom labels0)
              (($$atom topological-sort)
               (let ((set0 (($$atom set-difference)
                            ($$atom graph0)
                            ($$atom to-remove0)))
                     (proc0 (lambda (x0)
                              (let ((label0 (($$atom gnode-label) ($$atom x0)))
                                    (edges0 (($$atom set-difference)
                                             (($$atom gnode-edges) ($$atom x0))
                                             ($$atom labels0))))
                                (($$atom vector)
                                 ($$atom label0)
                                 ($$atom edges0))))))
                 (if (($$atom null?) ($$atom set0))
                     ($$atom '())
                     (($$atom cons)
                      (($$atom proc0) (($$atom car) ($$atom set0)))
                      (($$atom set-map)
                       ($$atom proc0)
                       (($$atom cdr) ($$atom set0)))))))))))))
 (define remove-no-edges
   (lambda (graph0)
     (let ((nodes-with-no-edges0
            (($$atom set-keep)
             (lambda (x0)
               (let ((set0 (($$atom vector-ref) ($$atom x0) ($$atom 1))))
                 (($$atom null?) ($$atom set0))))
             ($$atom graph0))))
       (if (($$atom null?) ($$atom nodes-with-no-edges0))
           ($$atom #f)
           ($$atom nodes-with-no-edges0)))))
 (define remove-cycle
   (lambda (graph0)
     (letrec ((remove0 (lambda (graph1 l0)
                         (let ((edges0 (let ((x0 (($$atom car) ($$atom l0))))
                                         (($$atom vector-ref)
                                          ($$atom x0)
                                          ($$atom 1)))))
                           (let ((member-edges?0
                                  (lambda (x0)
                                    (let ((x1 (($$atom vector-ref)
                                               ($$atom x0)
                                               ($$atom 0))))
                                      (($$atom memq)
                                       ($$atom x1)
                                       ($$atom edges0)))))
                                 (equal-edges?0
                                  (lambda (x0)
                                    (($$atom set-equal?)
                                     (($$atom vector-ref)
                                      ($$atom x0)
                                      ($$atom 1))
                                     ($$atom edges0)))))
                             (if (let ((x0 (let ((x0 (($$atom car)
                                                      ($$atom l0))))
                                             (($$atom vector-ref)
                                              ($$atom x0)
                                              ($$atom 0)))))
                                   (($$atom memq) ($$atom x0) ($$atom edges0)))
                                 (let ((edge-graph0
                                        (($$atom set-keep)
                                         ($$atom member-edges?0)
                                         ($$atom graph1))))
                                   (if (($$atom set-every?)
                                        ($$atom equal-edges?0)
                                        ($$atom edge-graph0))
                                       ($$atom edge-graph0)
                                       (($$atom remove0)
                                        ($$atom graph1)
                                        (($$atom cdr) ($$atom l0)))))
                                 (($$atom remove0)
                                  ($$atom graph1)
                                  (($$atom cdr) ($$atom l0)))))))))
       (($$atom remove0) ($$atom graph0) ($$atom graph0)))))
 (define list->set (lambda (list0) ($$atom list0)))
 (define set->list (lambda (set0) ($$atom set0)))
 (define set-empty (lambda () ($$atom '())))
 (define set-empty? (lambda (set0) (($$atom null?) ($$atom set0))))
 (define set-member?
   (lambda (x0 set0) (($$atom memq) ($$atom x0) ($$atom set0))))
 (define set-singleton (lambda (x0) (($$atom list) ($$atom x0))))
 (define set-adjoin
   (lambda (set0 x0)
     (if (($$atom memq) ($$atom x0) ($$atom set0))
         ($$atom set0)
         (($$atom cons) ($$atom x0) ($$atom set0)))))
 (define set-remove
   (lambda (set0 x0)
     (if (($$atom null?) ($$atom set0))
         ($$atom '())
         (if (($$atom eq?) (($$atom car) ($$atom set0)) ($$atom x0))
             (($$atom cdr) ($$atom set0))
             (($$atom cons)
              (($$atom car) ($$atom set0))
              (($$atom set-remove)
               (($$atom cdr) ($$atom set0))
               ($$atom x0)))))))
 (define set-equal?
   (lambda (s10 s20)
     (if (($$atom null?) ($$atom s10))
         (($$atom null?) ($$atom s20))
         (if (($$atom memq) (($$atom car) ($$atom s10)) ($$atom s20))
             (($$atom set-equal?)
              (($$atom cdr) ($$atom s10))
              (($$atom set-remove) ($$atom s20) (($$atom car) ($$atom s10))))
             ($$atom #f)))))
 (define set-difference
   (lambda (set0 . other-sets0)
     (letrec ((difference0
               (lambda (s10 s20)
                 (if (($$atom null?) ($$atom s10))
                     ($$atom '())
                     (if (($$atom memq)
                          (($$atom car) ($$atom s10))
                          ($$atom s20))
                         (($$atom difference0)
                          (($$atom cdr) ($$atom s10))
                          ($$atom s20))
                         (($$atom cons)
                          (($$atom car) ($$atom s10))
                          (($$atom difference0)
                           (($$atom cdr) ($$atom s10))
                           ($$atom s20))))))))
       (($$atom n-ary)
        ($$atom difference0)
        ($$atom set0)
        ($$atom other-sets0)))))
 (define set-union
   (lambda sets0
     (letrec ((union0 (lambda (s10 s20)
                        (if (($$atom null?) ($$atom s10))
                            ($$atom s20)
                            (if (($$atom memq)
                                 (($$atom car) ($$atom s10))
                                 ($$atom s20))
                                (($$atom union0)
                                 (($$atom cdr) ($$atom s10))
                                 ($$atom s20))
                                (($$atom cons)
                                 (($$atom car) ($$atom s10))
                                 (($$atom union0)
                                  (($$atom cdr) ($$atom s10))
                                  ($$atom s20))))))))
       (($$atom n-ary) ($$atom union0) ($$atom '()) ($$atom sets0)))))
 (define set-intersection
   (lambda (set0 . other-sets0)
     (letrec ((intersection0
               (lambda (s10 s20)
                 (if (($$atom null?) ($$atom s10))
                     ($$atom '())
                     (if (($$atom memq)
                          (($$atom car) ($$atom s10))
                          ($$atom s20))
                         (($$atom cons)
                          (($$atom car) ($$atom s10))
                          (($$atom intersection0)
                           (($$atom cdr) ($$atom s10))
                           ($$atom s20)))
                         (($$atom intersection0)
                          (($$atom cdr) ($$atom s10))
                          ($$atom s20)))))))
       (($$atom n-ary)
        ($$atom intersection0)
        ($$atom set0)
        ($$atom other-sets0)))))
 (define n-ary
   (lambda (function0 first0 rest0)
     (if (($$atom null?) ($$atom rest0))
         ($$atom first0)
         (let ((rest1 (($$atom cdr) ($$atom rest0)))
               (first1 (($$atom function0)
                        ($$atom first0)
                        (($$atom car) ($$atom rest0)))))
           (if (($$atom null?) ($$atom rest1))
               ($$atom first1)
               (($$atom n-ary)
                ($$atom function0)
                (($$atom function0)
                 ($$atom first1)
                 (($$atom car) ($$atom rest1)))
                (($$atom cdr) ($$atom rest1))))))))
 (define set-keep
   (lambda (keep?0 set0)
     (if (($$atom null?) ($$atom set0))
         ($$atom '())
         (if (($$atom keep?0) (($$atom car) ($$atom set0)))
             (($$atom cons)
              (($$atom car) ($$atom set0))
              (($$atom set-keep) ($$atom keep?0) (($$atom cdr) ($$atom set0))))
             (($$atom set-keep)
              ($$atom keep?0)
              (($$atom cdr) ($$atom set0)))))))
 (define set-every?
   (lambda (pred?0 set0)
     (let ((g180 (($$atom null?) ($$atom set0))))
       (if ($$atom g180)
           ($$atom g180)
           (if (($$atom pred?0) (($$atom car) ($$atom set0)))
               (($$atom set-every?)
                ($$atom pred?0)
                (($$atom cdr) ($$atom set0)))
               ($$atom #f))))))
 (define set-map
   (lambda (proc0 set0)
     (if (($$atom null?) ($$atom set0))
         ($$atom '())
         (($$atom cons)
          (($$atom proc0) (($$atom car) ($$atom set0)))
          (($$atom set-map) ($$atom proc0) (($$atom cdr) ($$atom set0)))))))
 (define list->queue
   (lambda (list0)
     (($$atom cons)
      ($$atom list0)
      (if (($$atom pair?) ($$atom list0))
          (($$atom my-last-pair) ($$atom list0))
          ($$atom '())))))
 (define queue->list (lambda (queue0) (($$atom car) ($$atom queue0))))
 (define queue-empty (lambda () (($$atom cons) ($$atom '()) ($$atom '()))))
 (define queue-empty?
   (lambda (queue0) (($$atom null?) (($$atom car) ($$atom queue0)))))
 (define queue-get!
   (lambda (queue0)
     (if (($$atom null?) (($$atom car) ($$atom queue0)))
         (($$atom compiler-internal-error)
          ($$atom "queue-get!, queue is empty"))
         (let ((x0 (($$atom car) (($$atom car) ($$atom queue0)))))
           (begin
             (($$atom set-car!)
              ($$atom queue0)
              (($$atom cdr) (($$atom car) ($$atom queue0))))
             (if (($$atom null?) (($$atom car) ($$atom queue0)))
                 (($$atom set-cdr!) ($$atom queue0) ($$atom '()))
                 ($$atom #f))
             ($$atom x0))))))
 (define queue-put!
   (lambda (queue0 x0)
     (let ((entry0 (($$atom cons) ($$atom x0) ($$atom '()))))
       (begin
         (if (($$atom null?) (($$atom car) ($$atom queue0)))
             (($$atom set-car!) ($$atom queue0) ($$atom entry0))
             (($$atom set-cdr!)
              (($$atom cdr) ($$atom queue0))
              ($$atom entry0)))
         (($$atom set-cdr!) ($$atom queue0) ($$atom entry0))
         ($$atom x0)))))
 (define string->canonical-symbol
   (lambda (str0)
     (let ((len0 (($$atom string-length) ($$atom str0))))
       (letrec ((loop0 (lambda (str1 s0 i0)
                         (if (($$atom >=) ($$atom i0) ($$atom 0))
                             (begin
                               (($$atom string-set!)
                                ($$atom s0)
                                ($$atom i0)
                                (($$atom char-downcase)
                                 (($$atom string-ref)
                                  ($$atom str1)
                                  ($$atom i0))))
                               (($$atom loop0)
                                ($$atom str1)
                                ($$atom s0)
                                (($$atom -) ($$atom i0) ($$atom 1))))
                             (($$atom string->symbol) ($$atom s0))))))
         (($$atom loop0)
          ($$atom str0)
          (($$atom make-string) ($$atom len0))
          (($$atom -) ($$atom len0) ($$atom 1)))))))
 (define quote-sym (($$atom string->canonical-symbol) ($$atom "QUOTE")))
 (define quasiquote-sym
   (($$atom string->canonical-symbol) ($$atom "QUASIQUOTE")))
 (define unquote-sym (($$atom string->canonical-symbol) ($$atom "UNQUOTE")))
 (define unquote-splicing-sym
   (($$atom string->canonical-symbol) ($$atom "UNQUOTE-SPLICING")))
 (define lambda-sym (($$atom string->canonical-symbol) ($$atom "LAMBDA")))
 (define if-sym (($$atom string->canonical-symbol) ($$atom "IF")))
 (define set!-sym (($$atom string->canonical-symbol) ($$atom "SET!")))
 (define cond-sym (($$atom string->canonical-symbol) ($$atom "COND")))
 (define =>-sym (($$atom string->canonical-symbol) ($$atom "=>")))
 (define else-sym (($$atom string->canonical-symbol) ($$atom "ELSE")))
 (define and-sym (($$atom string->canonical-symbol) ($$atom "AND")))
 (define or-sym (($$atom string->canonical-symbol) ($$atom "OR")))
 (define case-sym (($$atom string->canonical-symbol) ($$atom "CASE")))
 (define let-sym (($$atom string->canonical-symbol) ($$atom "LET")))
 (define let*-sym (($$atom string->canonical-symbol) ($$atom "LET*")))
 (define letrec-sym (($$atom string->canonical-symbol) ($$atom "LETREC")))
 (define begin-sym (($$atom string->canonical-symbol) ($$atom "BEGIN")))
 (define do-sym (($$atom string->canonical-symbol) ($$atom "DO")))
 (define define-sym (($$atom string->canonical-symbol) ($$atom "DEFINE")))
 (define delay-sym (($$atom string->canonical-symbol) ($$atom "DELAY")))
 (define future-sym (($$atom string->canonical-symbol) ($$atom "FUTURE")))
 (define **define-macro-sym
   (($$atom string->canonical-symbol) ($$atom "DEFINE-MACRO")))
 (define **declare-sym (($$atom string->canonical-symbol) ($$atom "DECLARE")))
 (define **include-sym (($$atom string->canonical-symbol) ($$atom "INCLUDE")))
 (define not-sym (($$atom string->canonical-symbol) ($$atom "NOT")))
 (define **c-declaration-sym
   (($$atom string->canonical-symbol) ($$atom "C-DECLARATION")))
 (define **c-init-sym (($$atom string->canonical-symbol) ($$atom "C-INIT")))
 (define **c-procedure-sym
   (($$atom string->canonical-symbol) ($$atom "C-PROCEDURE")))
 (define void-sym (($$atom string->canonical-symbol) ($$atom "VOID")))
 (define char-sym (($$atom string->canonical-symbol) ($$atom "CHAR")))
 (define signed-char-sym
   (($$atom string->canonical-symbol) ($$atom "SIGNED-CHAR")))
 (define unsigned-char-sym
   (($$atom string->canonical-symbol) ($$atom "UNSIGNED-CHAR")))
 (define short-sym (($$atom string->canonical-symbol) ($$atom "SHORT")))
 (define unsigned-short-sym
   (($$atom string->canonical-symbol) ($$atom "UNSIGNED-SHORT")))
 (define int-sym (($$atom string->canonical-symbol) ($$atom "INT")))
 (define unsigned-int-sym
   (($$atom string->canonical-symbol) ($$atom "UNSIGNED-INT")))
 (define long-sym (($$atom string->canonical-symbol) ($$atom "LONG")))
 (define unsigned-long-sym
   (($$atom string->canonical-symbol) ($$atom "UNSIGNED-LONG")))
 (define float-sym (($$atom string->canonical-symbol) ($$atom "FLOAT")))
 (define double-sym (($$atom string->canonical-symbol) ($$atom "DOUBLE")))
 (define pointer-sym (($$atom string->canonical-symbol) ($$atom "POINTER")))
 (define boolean-sym (($$atom string->canonical-symbol) ($$atom "BOOLEAN")))
 (define string-sym (($$atom string->canonical-symbol) ($$atom "STRING")))
 (define scheme-object-sym
   (($$atom string->canonical-symbol) ($$atom "SCHEME-OBJECT")))
 (define c-id-prefix ($$atom "___"))
 (define false-object ($$atom #f))
 (define false-object?
   (lambda (obj0) (($$atom eq?) ($$atom obj0) ($$atom #f))))
 (define undef-object ($$atom '|#[undefined]|))
 (define undef-object?
   (lambda (obj0) (($$atom eq?) ($$atom obj0) ($$atom '|#[undefined]|))))
 (define symbol-object?
   (lambda (obj0)
     (if (($$atom eq?) ($$atom obj0) ($$atom #f))
         ($$atom #f)
         (if (($$atom eq?) ($$atom obj0) ($$atom '|#[undefined]|))
             ($$atom #f)
             (($$atom symbol?) ($$atom obj0))))))
 (define scm-file-exts ($$atom '("scm" #f)))
 (define compiler-version ($$atom "2.2.2"))
 (define open-sf
   (lambda (filename0)
     (let ((open-err0
            (lambda (filename1)
              (($$atom compiler-error)
               ($$atom "Can't find file")
               ($$atom filename1)))))
       (if (($$atom file-ext) ($$atom filename0))
           (let ((port0 (($$atom open-input-file) ($$atom filename0))))
             (if ($$atom port0)
                 (($$atom vector)
                  ($$atom port0)
                  ($$atom filename0)
                  ($$atom 0)
                  ($$atom 1)
                  ($$atom 0))
                 (($$atom open-err0) ($$atom filename0))))
           (letrec ((loop0 (lambda (filename1 exts0)
                             (if (($$atom pair?) ($$atom exts0))
                                 (let ((ext0 (($$atom car) ($$atom exts0))))
                                   (let ((full-name0
                                          (if ($$atom ext0)
                                              (($$atom string-append)
                                               ($$atom filename1)
                                               ($$atom ".")
                                               ($$atom ext0))
                                              ($$atom filename1))))
                                     (let ((port0 (($$atom open-input-file)
                                                   ($$atom full-name0))))
                                       (if ($$atom port0)
                                           (($$atom vector)
                                            ($$atom port0)
                                            ($$atom full-name0)
                                            ($$atom 0)
                                            ($$atom 1)
                                            ($$atom 0))
                                           (($$atom loop0)
                                            ($$atom filename1)
                                            (($$atom cdr) ($$atom exts0)))))))
                                 (($$atom open-err0) ($$atom filename1))))))
             (($$atom loop0) ($$atom filename0) ($$atom '("scm" #f))))))))
 (define close-sf
   (lambda (sf0)
     (($$atom close-input-port)
      (($$atom vector-ref) ($$atom sf0) ($$atom 0)))))
 (define sf-read-char
   (lambda (sf0)
     (let ((c0 (($$atom read-char)
                (($$atom vector-ref) ($$atom sf0) ($$atom 0)))))
       (begin
         (let ((g190 (($$atom eof-object?) ($$atom c0))))
           (if ($$atom g190)
               ($$atom g190)
               (if (($$atom char=?) ($$atom c0) ($$atom char-newline))
                   (begin
                     (($$atom vector-set!)
                      ($$atom sf0)
                      ($$atom 3)
                      (($$atom +)
                       (($$atom vector-ref) ($$atom sf0) ($$atom 3))
                       ($$atom 1)))
                     (($$atom vector-set!) ($$atom sf0) ($$atom 4) ($$atom 0)))
                   (($$atom vector-set!)
                    ($$atom sf0)
                    ($$atom 4)
                    (($$atom +)
                     (($$atom vector-ref) ($$atom sf0) ($$atom 4))
                     ($$atom 1))))))
         ($$atom c0)))))
 (define sf-peek-char
   (lambda (sf0)
     (($$atom NYIpeek-char) (($$atom vector-ref) ($$atom sf0) ($$atom 0)))))
 (define sf-read-error
   (lambda (sf0 msg0 . args0)
     (($$atom apply)
      ($$atom compiler-user-error)
      (($$atom cons)
       (($$atom sf->locat) ($$atom sf0))
       (($$atom cons)
        (($$atom string-append) ($$atom "Read error -- ") ($$atom msg0))
        ($$atom args0))))))
 (define sf->locat
   (lambda (sf0)
     (($$atom vector)
      ($$atom 'file)
      (($$atom vector-ref) ($$atom sf0) ($$atom 1))
      (($$atom vector-ref) ($$atom sf0) ($$atom 2))
      (($$atom vector-ref) ($$atom sf0) ($$atom 3))
      (($$atom vector-ref) ($$atom sf0) ($$atom 4)))))
 (define expr->locat
   (lambda (expr0 source0)
     (($$atom vector) ($$atom 'expr) ($$atom expr0) ($$atom source0))))
 (define locat-show
   (lambda (loc0)
     (if ($$atom loc0)
         (let ((case-temp.640 (($$atom vector-ref) ($$atom loc0) ($$atom 0))))
           (if (let ((g200 ($$atom 'file)))
                 (if (($$atom number?) ($$atom case-temp.640))
                     (if (($$atom number?) ($$atom g200))
                         (($$atom =) ($$atom case-temp.640) ($$atom g200))
                         ($$atom #f))
                     (($$atom eq?) ($$atom case-temp.640) ($$atom g200))))
               (if (let ((char0 (($$atom vector-ref) ($$atom loc0) ($$atom 4)))
                         (line0 (($$atom vector-ref) ($$atom loc0) ($$atom 3)))
                         (filename0
                          (($$atom vector-ref) ($$atom loc0) ($$atom 1))))
                     ($$atom #t))
                   (begin
                     (($$atom display) ($$atom "file \""))
                     (($$atom display)
                      (($$atom vector-ref) ($$atom loc0) ($$atom 1)))
                     (($$atom display) ($$atom "\", line "))
                     (($$atom display)
                      (($$atom vector-ref) ($$atom loc0) ($$atom 3)))
                     (($$atom display) ($$atom ", character "))
                     (($$atom display)
                      (($$atom vector-ref) ($$atom loc0) ($$atom 4))))
                   ($$atom #f))
               (if (let ((g210 ($$atom 'expr)))
                     (if (($$atom number?) ($$atom case-temp.640))
                         (if (($$atom number?) ($$atom g210))
                             (($$atom =) ($$atom case-temp.640) ($$atom g210))
                             ($$atom #f))
                         (($$atom eq?) ($$atom case-temp.640) ($$atom g210))))
                   (begin
                     (($$atom display) ($$atom "expression "))
                     (($$atom write)
                      (($$atom vector-ref) ($$atom loc0) ($$atom 1)))
                     (if (($$atom vector-ref) ($$atom loc0) ($$atom 2))
                         (begin
                           (($$atom display) ($$atom " "))
                           (($$atom locat-show)
                            (let ((x0 (($$atom vector-ref)
                                       ($$atom loc0)
                                       ($$atom 2))))
                              (($$atom vector-ref) ($$atom x0) ($$atom 1)))))
                         ($$atom #f)))
                   (($$atom compiler-internal-error)
                    ($$atom "locat-show, unknown location tag")))))
         (($$atom display) ($$atom "unknown location")))))
 (define locat-filename
   (lambda (loc0)
     (if ($$atom loc0)
         (let ((case-temp.730 (($$atom vector-ref) ($$atom loc0) ($$atom 0))))
           (if (let ((g220 ($$atom 'file)))
                 (if (($$atom number?) ($$atom case-temp.730))
                     (if (($$atom number?) ($$atom g220))
                         (($$atom =) ($$atom case-temp.730) ($$atom g220))
                         ($$atom #f))
                     (($$atom eq?) ($$atom case-temp.730) ($$atom g220))))
               (($$atom vector-ref) ($$atom loc0) ($$atom 1))
               (if (let ((g230 ($$atom 'expr)))
                     (if (($$atom number?) ($$atom case-temp.730))
                         (if (($$atom number?) ($$atom g230))
                             (($$atom =) ($$atom case-temp.730) ($$atom g230))
                             ($$atom #f))
                         (($$atom eq?) ($$atom case-temp.730) ($$atom g230))))
                   (let ((source0 (($$atom vector-ref)
                                   ($$atom loc0)
                                   ($$atom 2))))
                     (if ($$atom source0)
                         (($$atom locat-filename)
                          (($$atom vector-ref) ($$atom source0) ($$atom 1)))
                         ($$atom "")))
                   (($$atom compiler-internal-error)
                    ($$atom "locat-filename, unknown location tag")))))
         ($$atom ""))))
 (define make-source
   (lambda (code0 locat0) (($$atom vector) ($$atom code0) ($$atom locat0))))
 (define source-code
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 0))))
 (define source-code-set!
   (lambda (x0 y0)
     (begin
       (($$atom vector-set!) ($$atom x0) ($$atom 0) ($$atom y0))
       ($$atom x0))))
 (define source-locat
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 1))))
 (define expression->source
   (lambda (expr0 source0)
     (letrec ((vector->source0
               (lambda (source1 v0)
                 (let ((len0 (($$atom vector-length) ($$atom v0))))
                   (let ((x0 (($$atom make-vector) ($$atom len0))))
                     (begin
                       (letrec ((loop0 (lambda (source2 v1 x1 i0)
                                         (if (($$atom >=)
                                              ($$atom i0)
                                              ($$atom 0))
                                             (begin
                                               (($$atom vector-set!)
                                                ($$atom x1)
                                                ($$atom i0)
                                                (($$atom expr->source0)
                                                 ($$atom source2)
                                                 (($$atom vector-ref)
                                                  ($$atom v1)
                                                  ($$atom i0))))
                                               (($$atom loop0)
                                                ($$atom source2)
                                                ($$atom v1)
                                                ($$atom x1)
                                                (($$atom -)
                                                 ($$atom i0)
                                                 ($$atom 1))))
                                             ($$atom #f)))))
                         (($$atom loop0)
                          ($$atom source1)
                          ($$atom v0)
                          ($$atom x0)
                          (($$atom -) ($$atom len0) ($$atom 1))))
                       ($$atom x0))))))
              (list->source0
               (lambda (source1 l0)
                 (if (($$atom pair?) ($$atom l0))
                     (($$atom cons)
                      (($$atom expr->source0)
                       ($$atom source1)
                       (($$atom car) ($$atom l0)))
                      (($$atom list->source0)
                       ($$atom source1)
                       (($$atom cdr) ($$atom l0))))
                     (if (($$atom null?) ($$atom l0))
                         ($$atom '())
                         (($$atom expr->source0)
                          ($$atom source1)
                          ($$atom l0))))))
              (expr->source0
               (lambda (source1 x0)
                 (let ((locat0 (($$atom vector)
                                ($$atom 'expr)
                                ($$atom x0)
                                ($$atom source1)))
                       (code0 (if (($$atom pair?) ($$atom x0))
                                  (if (($$atom pair?) ($$atom x0))
                                      (($$atom cons)
                                       (($$atom expr->source0)
                                        ($$atom source1)
                                        (($$atom car) ($$atom x0)))
                                       (($$atom list->source0)
                                        ($$atom source1)
                                        (($$atom cdr) ($$atom x0))))
                                      (if (($$atom null?) ($$atom x0))
                                          ($$atom '())
                                          (($$atom expr->source0)
                                           ($$atom source1)
                                           ($$atom x0))))
                                  (if (($$atom vector?) ($$atom x0))
                                      (let ((len0 (($$atom vector-length)
                                                   ($$atom x0))))
                                        (let ((x#10 (($$atom make-vector)
                                                     ($$atom len0))))
                                          (begin
                                            (letrec ((loop0 (lambda (source2
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                             x#20
                             x#30
                             i0)
                      (if (($$atom >=) ($$atom i0) ($$atom 0))
                          (begin
                            (($$atom vector-set!)
                             ($$atom x#30)
                             ($$atom i0)
                             (($$atom expr->source0)
                              ($$atom source2)
                              (($$atom vector-ref) ($$atom x#20) ($$atom i0))))
                            (($$atom loop0)
                             ($$atom source2)
                             ($$atom x#20)
                             ($$atom x#30)
                             (($$atom -) ($$atom i0) ($$atom 1))))
                          ($$atom #f)))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                              (($$atom loop0)
                                               ($$atom source1)
                                               ($$atom x0)
                                               ($$atom x#10)
                                               (($$atom -)
                                                ($$atom len0)
                                                ($$atom 1))))
                                            ($$atom x#10))))
                                      (if (($$atom symbol-object?) ($$atom x0))
                                          (($$atom string->canonical-symbol)
                                           (($$atom symbol->string)
                                            ($$atom x0)))
                                          ($$atom x0))))))
                   (($$atom vector) ($$atom code0) ($$atom locat0))))))
       (($$atom expr->source0) ($$atom source0) ($$atom expr0)))))
 (define source->expression
   (lambda (source0)
     (letrec ((list->expression0
               (lambda (l0)
                 (if (($$atom pair?) ($$atom l0))
                     (($$atom cons)
                      (($$atom source->expression) (($$atom car) ($$atom l0)))
                      (($$atom list->expression0) (($$atom cdr) ($$atom l0))))
                     (if (($$atom null?) ($$atom l0))
                         ($$atom '())
                         (($$atom source->expression) ($$atom l0)))))))
       (let ((code0 (($$atom vector-ref) ($$atom source0) ($$atom 0))))
         (if (($$atom pair?) ($$atom code0))
             (($$atom list->expression0) ($$atom code0))
             (if (($$atom vector?) ($$atom code0))
                 (let ((len0 (($$atom vector-length) ($$atom code0))))
                   (let ((x0 (($$atom make-vector) ($$atom len0))))
                     (begin
                       (letrec ((loop0 (lambda (code1 x1 i0)
                                         (if (($$atom >=)
                                              ($$atom i0)
                                              ($$atom 0))
                                             (begin
                                               (($$atom vector-set!)
                                                ($$atom x1)
                                                ($$atom i0)
                                                (($$atom source->expression)
                                                 (($$atom vector-ref)
                                                  ($$atom code1)
                                                  ($$atom i0))))
                                               (($$atom loop0)
                                                ($$atom code1)
                                                ($$atom x1)
                                                (($$atom -)
                                                 ($$atom i0)
                                                 ($$atom 1))))
                                             ($$atom #f)))))
                         (($$atom loop0)
                          ($$atom code0)
                          ($$atom x0)
                          (($$atom -) ($$atom len0) ($$atom 1))))
                       ($$atom x0))))
                 ($$atom code0)))))))
 (define file->sources
   (lambda (filename0 info-port0)
     (begin
       (if ($$atom info-port0)
           (begin
             (($$atom display) ($$atom "(reading \"") ($$atom info-port0))
             (($$atom display) ($$atom filename0) ($$atom info-port0))
             (($$atom display) ($$atom "\"") ($$atom info-port0)))
           ($$atom #f))
       (let ((sf0 (($$atom open-sf) ($$atom filename0))))
         (letrec ((read-sources0
                   (lambda (info-port1 sf1)
                     (let ((source0 (($$atom read-source) ($$atom sf1))))
                       (if (($$atom eof-object?) ($$atom source0))
                           ($$atom '())
                           (begin
                             (if ($$atom info-port1)
                                 (($$atom display)
                                  ($$atom ".")
                                  ($$atom info-port1))
                                 ($$atom #f))
                             (($$atom cons)
                              ($$atom source0)
                              (($$atom read-sources0)
                               ($$atom info-port1)
                               ($$atom sf1)))))))))
           (let ((sources0
                  (($$atom read-sources0) ($$atom info-port0) ($$atom sf0))))
             (begin
               (if ($$atom info-port0)
                   (($$atom display) ($$atom ")") ($$atom info-port0))
                   ($$atom #f))
               (($$atom close-sf) ($$atom sf0))
               ($$atom sources0))))))))
 (define file->sources*
   (lambda (filename0 info-port0 loc0)
     (($$atom file->sources)
      (if (($$atom path-absolute?) ($$atom filename0))
          ($$atom filename0)
          (($$atom string-append)
           (($$atom file-path) (($$atom locat-filename) ($$atom loc0)))
           ($$atom filename0)))
      ($$atom info-port0))))
 (define read-source
   (lambda (sf0)
     (letrec ((rd*0 (lambda (sf1 c0)
                      (let ((source0 (let ((locat0 (($$atom sf->locat)
                                                    ($$atom sf1))))
                                       (($$atom vector)
                                        ($$atom #f)
                                        ($$atom locat0)))))
                        (let ((y0 (if (($$atom char=?)
                                       ($$atom c0)
                                       ($$atom #\())
                                      (let ((x0 (let ((c1 (let ((c1 (let ((c1 (($$atom read-char)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                       (($$atom vector-ref)
                                        ($$atom sf1)
                                        ($$atom 0)))))
                              (begin
                                (let ((g240 (($$atom eof-object?)
                                             ($$atom c1))))
                                  (if ($$atom g240)
                                      ($$atom g240)
                                      (if (($$atom char=?)
                                           ($$atom c1)
                                           ($$atom char-newline))
                                          (begin
                                            (($$atom vector-set!)
                                             ($$atom sf1)
                                             ($$atom 3)
                                             (($$atom +)
                                              (($$atom vector-ref)
                                               ($$atom sf1)
                                               ($$atom 3))
                                              ($$atom 1)))
                                            (($$atom vector-set!)
                                             ($$atom sf1)
                                             ($$atom 4)
                                             ($$atom 0)))
                                          (($$atom vector-set!)
                                           ($$atom sf1)
                                           ($$atom 4)
                                           (($$atom +)
                                            (($$atom vector-ref)
                                             ($$atom sf1)
                                             ($$atom 4))
                                            ($$atom 1))))))
                                ($$atom c1)))))
                    (if (($$atom eof-object?) ($$atom c1))
                        ((lambda (sf2 msg0 . args0)
                           (($$atom apply)
                            ($$atom compiler-user-error)
                            (($$atom cons)
                             (($$atom vector)
                              ($$atom 'file)
                              (($$atom vector-ref) ($$atom sf2) ($$atom 1))
                              (($$atom vector-ref) ($$atom sf2) ($$atom 2))
                              (($$atom vector-ref) ($$atom sf2) ($$atom 3))
                              (($$atom vector-ref) ($$atom sf2) ($$atom 4)))
                             (($$atom cons)
                              (($$atom string-append)
                               ($$atom "Read error -- ")
                               ($$atom msg0))
                              ($$atom args0)))))
                         ($$atom sf1)
                         ($$atom "Premature end of file encountered"))
                        ($$atom c1)))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                  (if (($$atom <)
                                                       ($$atom 0)
                                                       (($$atom vector-ref)
                                                        ($$atom read-table)
                                                        (($$atom char->integer)
                                                         ($$atom c1))))
                                                      (let ((c2 (let ((c2 (let ((c2 (($$atom read-char)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                             (($$atom vector-ref)
                                              ($$atom sf1)
                                              ($$atom 0)))))
                                    (begin
                                      (let ((g250 (($$atom eof-object?)
                                                   ($$atom c2))))
                                        (if ($$atom g250)
                                            ($$atom g250)
                                            (if (($$atom char=?)
                                                 ($$atom c2)
                                                 ($$atom char-newline))
                                                (begin
                                                  (($$atom vector-set!)
                                                   ($$atom sf1)
                                                   ($$atom 3)
                                                   (($$atom +)
                                                    (($$atom vector-ref)
                                                     ($$atom sf1)
                                                     ($$atom 3))
                                                    ($$atom 1)))
                                                  (($$atom vector-set!)
                                                   ($$atom sf1)
                                                   ($$atom 4)
                                                   ($$atom 0)))
                                                (($$atom vector-set!)
                                                 ($$atom sf1)
                                                 ($$atom 4)
                                                 (($$atom +)
                                                  (($$atom vector-ref)
                                                   ($$atom sf1)
                                                   ($$atom 4))
                                                  ($$atom 1))))))
                                      ($$atom c2)))))
                          (if (($$atom eof-object?) ($$atom c2))
                              ((lambda (sf2 msg0 . args0)
                                 (($$atom apply)
                                  ($$atom compiler-user-error)
                                  (($$atom cons)
                                   (($$atom vector)
                                    ($$atom 'file)
                                    (($$atom vector-ref)
                                     ($$atom sf2)
                                     ($$atom 1))
                                    (($$atom vector-ref)
                                     ($$atom sf2)
                                     ($$atom 2))
                                    (($$atom vector-ref)
                                     ($$atom sf2)
                                     ($$atom 3))
                                    (($$atom vector-ref)
                                     ($$atom sf2)
                                     ($$atom 4)))
                                   (($$atom cons)
                                    (($$atom string-append)
                                     ($$atom "Read error -- ")
                                     ($$atom msg0))
                                    ($$atom args0)))))
                               ($$atom sf1)
                               ($$atom "Premature end of file encountered"))
                              ($$atom c2)))))
                (if (($$atom <)
                     ($$atom 0)
                     (($$atom vector-ref)
                      ($$atom read-table)
                      (($$atom char->integer) ($$atom c2))))
                    (let ((c3 (let ((c3 (($$atom sf-read-char) ($$atom sf1))))
                                (if (($$atom eof-object?) ($$atom c3))
                                    ((lambda (sf2 msg0 . args0)
                                       (($$atom apply)
                                        ($$atom compiler-user-error)
                                        (($$atom cons)
                                         (($$atom sf->locat) ($$atom sf2))
                                         (($$atom cons)
                                          (($$atom string-append)
                                           ($$atom "Read error -- ")
                                           ($$atom msg0))
                                          ($$atom args0)))))
                                     ($$atom sf1)
                                     ($$atom "Premature end of file encountered"))
                                    ($$atom c3)))))
                      (if (($$atom <)
                           ($$atom 0)
                           (($$atom vector-ref)
                            ($$atom read-table)
                            (($$atom char->integer) ($$atom c3))))
                          (($$atom read-non-whitespace-char0) ($$atom sf1))
                          (if (($$atom char=?) ($$atom c3) ($$atom #\;))
                              (letrec ((loop0 (lambda (sf2)
                                                (if (($$atom char=?)
                                                     (($$atom read-char*0)
                                                      ($$atom sf2))
                                                     ($$atom char-newline))
                                                    (($$atom read-non-whitespace-char0)
                                                     ($$atom sf2))
                                                    (if (($$atom char=?)
                                                         (($$atom read-char*0)
                                                          ($$atom sf2))
                                                         ($$atom char-newline))
                                                        (($$atom read-non-whitespace-char0)
                                                         ($$atom sf2))
                                                        (($$atom loop0)
                                                         ($$atom sf2)))))))
                                (($$atom loop0) ($$atom sf1)))
                              ($$atom c3))))
                    (if (($$atom char=?) ($$atom c2) ($$atom #\;))
                        (letrec ((loop0 (lambda (sf2)
                                          (if (($$atom char=?)
                                               (($$atom read-char*0)
                                                ($$atom sf2))
                                               ($$atom char-newline))
                                              (($$atom read-non-whitespace-char0)
                                               ($$atom sf2))
                                              (($$atom loop0) ($$atom sf2))))))
                          (($$atom loop0) ($$atom sf1)))
                        ($$atom c2))))
              (if (($$atom char=?) ($$atom c1) ($$atom #\;))
                  (letrec ((loop0 (lambda (sf2)
                                    (if (($$atom char=?)
                                         (($$atom read-char*0) ($$atom sf2))
                                         ($$atom char-newline))
                                        (($$atom read-non-whitespace-char0)
                                         ($$atom sf2))
                                        (($$atom loop0) ($$atom sf2))))))
                    (($$atom loop0) ($$atom sf1)))
                  ($$atom c1))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                        (if (($$atom char=?)
                                             ($$atom x0)
                                             ($$atom #\)))
                                            ($$atom '())
                                            (let ((first0 (($$atom rd*0)
                                                           ($$atom sf1)
                                                           ($$atom x0))))
                                              (let ((result0 (($$atom cons)
                                                              ($$atom first0)
                                                              ($$atom '()))))
                                                (begin
                                                  (letrec ((loop0 (lambda (sf2
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                   end0)
                            (let ((c1 (($$atom read-non-whitespace-char0)
                                       ($$atom sf2))))
                              (let ((g260 (($$atom char=?)
                                           ($$atom c1)
                                           ($$atom #\)))))
                                (if ($$atom g260)
                                    ($$atom g260)
                                    (if (if (($$atom char=?)
                                             ($$atom c1)
                                             ($$atom #\.))
                                            (($$atom delimiter?0)
                                             (($$atom sf-peek-char)
                                              ($$atom sf2)))
                                            ($$atom #f))
                                        (let ((x1 (($$atom read-source)
                                                   ($$atom sf2))))
                                          (if (($$atom char=?)
                                               (($$atom read-non-whitespace-char0)
                                                ($$atom sf2))
                                               ($$atom #\)))
                                              (($$atom set-cdr!)
                                               ($$atom end0)
                                               ($$atom x1))
                                              (($$atom sf-read-error)
                                               ($$atom sf2)
                                               ($$atom "')' expected"))))
                                        (let ((tail0 (($$atom cons)
                                                      (($$atom rd*0)
                                                       ($$atom sf2)
                                                       ($$atom c1))
                                                      ($$atom '()))))
                                          (begin
                                            (($$atom set-cdr!)
                                             ($$atom end0)
                                             ($$atom tail0))
                                            (($$atom loop0)
                                             ($$atom sf2)
                                             ($$atom tail0)))))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                    (($$atom loop0)
                                                     ($$atom sf1)
                                                     ($$atom result0)))
                                                  ($$atom result0))))))
                                      (if (($$atom char=?)
                                           ($$atom c0)
                                           ($$atom #\#))
                                          (let ((c1 (($$atom char-downcase)
                                                     (($$atom sf-read-char)
                                                      ($$atom sf1)))))
                                            (if (($$atom char=?)
                                                 ($$atom c1)
                                                 ($$atom #\())
                                                (letrec ((loop0 (lambda (sf2
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                 i0)
                          (let ((c2 (($$atom read-non-whitespace-char0)
                                     ($$atom sf2))))
                            (if (($$atom char=?) ($$atom c2) ($$atom #\)))
                                (($$atom make-vector) ($$atom i0) ($$atom '()))
                                (let ((x0 (($$atom rd*0)
                                           ($$atom sf2)
                                           ($$atom c2))))
                                  (let ((v0 (($$atom loop0)
                                             ($$atom sf2)
                                             (($$atom +)
                                              ($$atom i0)
                                              ($$atom 1)))))
                                    (begin
                                      (($$atom vector-set!)
                                       ($$atom v0)
                                       ($$atom i0)
                                       ($$atom x0))
                                      ($$atom v0)))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                  (($$atom loop0)
                                                   ($$atom sf1)
                                                   ($$atom 0)))
                                                (if (($$atom char=?)
                                                     ($$atom c1)
                                                     ($$atom #\f))
                                                    ($$atom #f)
                                                    (if (($$atom char=?)
                                                         ($$atom c1)
                                                         ($$atom #\t))
                                                        ($$atom #t)
                                                        (if (($$atom char=?)
                                                             ($$atom c1)
                                                             ($$atom #\\))
                                                            (let ((c2 (($$atom read-char*0)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                               ($$atom sf1))))
                      (if (let ((g270 (($$atom not)
                                       (($$atom char-alphabetic?)
                                        ($$atom c2)))))
                            (if ($$atom g270)
                                ($$atom g270)
                                (($$atom delimiter?0)
                                 (($$atom sf-peek-char) ($$atom sf1)))))
                          ($$atom c2)
                          (let ((name0 (($$atom read-symbol/number0)
                                        ($$atom sf1)
                                        ($$atom c2))))
                            (let ((x0 (($$atom assq)
                                       ($$atom name0)
                                       ($$atom named-char-table))))
                              (if ($$atom x0)
                                  (($$atom cdr) ($$atom x0))
                                  (($$atom sf-read-error)
                                   ($$atom sf1)
                                   ($$atom "Unknown character name")
                                   ($$atom name0)))))))
                    (if (($$atom char=?) ($$atom c1) ($$atom #\#))
                        (let ((s0 (($$atom read-symbol/number-string0)
                                   ($$atom sf1)
                                   ($$atom 2))))
                          (begin
                            (($$atom string-set!)
                             ($$atom s0)
                             ($$atom 0)
                             ($$atom #\#))
                            (($$atom string-set!)
                             ($$atom s0)
                             ($$atom 1)
                             ($$atom #\#))
                            (($$atom string->canonical-symbol) ($$atom s0))))
                        (let ((num0 (let ((s0 (($$atom read-symbol/number-string0)
                                               ($$atom sf1)
                                               ($$atom 2))))
                                      (begin
                                        (($$atom string-set!)
                                         ($$atom s0)
                                         ($$atom 0)
                                         ($$atom #\#))
                                        (($$atom string-set!)
                                         ($$atom s0)
                                         ($$atom 1)
                                         ($$atom c1))
                                        (($$atom string->number)
                                         ($$atom s0)
                                         ($$atom 10))))))
                          (let ((g280 ($$atom num0)))
                            (if ($$atom g280)
                                ($$atom g280)
                                (($$atom sf-read-error)
                                 ($$atom sf1)
                                 ($$atom "Unknown '#' read macro")
                                 ($$atom c1)))))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                          (if (($$atom char=?)
                                               ($$atom c0)
                                               ($$atom #\"))
                                              (letrec ((loop0 (lambda (sf2 i0)
                                                                (let ((c1 (($$atom read-char*0)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                   ($$atom sf2))))
                          (if (($$atom char=?) ($$atom c1) ($$atom #\"))
                              (($$atom make-string)
                               ($$atom i0)
                               ($$atom #\space))
                              (if (($$atom char=?) ($$atom c1) ($$atom #\\))
                                  (let ((c2 (($$atom read-char*0)
                                             ($$atom sf2))))
                                    (let ((s0 (($$atom loop0)
                                               ($$atom sf2)
                                               (($$atom +)
                                                ($$atom i0)
                                                ($$atom 1)))))
                                      (begin
                                        (($$atom string-set!)
                                         ($$atom s0)
                                         ($$atom i0)
                                         ($$atom c2))
                                        ($$atom s0))))
                                  (let ((s0 (($$atom loop0)
                                             ($$atom sf2)
                                             (($$atom +)
                                              ($$atom i0)
                                              ($$atom 1)))))
                                    (begin
                                      (($$atom string-set!)
                                       ($$atom s0)
                                       ($$atom i0)
                                       ($$atom c1))
                                      ($$atom s0)))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                (($$atom loop0)
                                                 ($$atom sf1)
                                                 ($$atom 0)))
                                              (if (($$atom char=?)
                                                   ($$atom c0)
                                                   ($$atom #\'))
                                                  (($$atom list)
                                                   (($$atom make-source)
                                                    ($$atom quote-sym)
                                                    (($$atom sf->locat)
                                                     ($$atom sf1)))
                                                   (($$atom read-source)
                                                    ($$atom sf1)))
                                                  (if (($$atom char=?)
                                                       ($$atom c0)
                                                       ($$atom #\`))
                                                      (($$atom list)
                                                       (($$atom make-source)
                                                        ($$atom quasiquote-sym)
                                                        (($$atom sf->locat)
                                                         ($$atom sf1)))
                                                       (($$atom read-source)
                                                        ($$atom sf1)))
                                                      (if (($$atom char=?)
                                                           ($$atom c0)
                                                           ($$atom #\,))
                                                          (if (($$atom char=?)
                                                               (($$atom sf-peek-char)
                                                                ($$atom sf1))
                                                               ($$atom #\@))
                                                              (let ((x0 (($$atom make-source)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                 ($$atom unquote-splicing-sym)
                                 (($$atom sf->locat) ($$atom sf1)))))
                        (begin
                          (($$atom sf-read-char) ($$atom sf1))
                          (($$atom list)
                           ($$atom x0)
                           (($$atom read-source) ($$atom sf1)))))
                      (($$atom list)
                       (($$atom make-source)
                        ($$atom unquote-sym)
                        (($$atom sf->locat) ($$atom sf1)))
                       (($$atom read-source) ($$atom sf1))))
                  (if (($$atom char=?) ($$atom c0) ($$atom #\)))
                      (($$atom sf-read-error)
                       ($$atom sf1)
                       ($$atom "Misplaced ')'"))
                      (if (let ((g290 (($$atom char=?)
                                       ($$atom c0)
                                       ($$atom #\[))))
                            (if ($$atom g290)
                                ($$atom g290)
                                (let ((g300 (($$atom char=?)
                                             ($$atom c0)
                                             ($$atom #\]))))
                                  (if ($$atom g300)
                                      ($$atom g300)
                                      (let ((g310 (($$atom char=?)
                                                   ($$atom c0)
                                                   ($$atom #\{))))
                                        (if ($$atom g310)
                                            ($$atom g310)
                                            (($$atom char=?)
                                             ($$atom c0)
                                             ($$atom #\}))))))))
                          (($$atom sf-read-error)
                           ($$atom sf1)
                           ($$atom "Illegal character")
                           ($$atom c0))
                          (begin
                            (if (($$atom char=?) ($$atom c0) ($$atom #\.))
                                (if (($$atom delimiter?0)
                                     (($$atom sf-peek-char) ($$atom sf1)))
                                    (($$atom sf-read-error)
                                     ($$atom sf1)
                                     ($$atom "Misplaced '.'"))
                                    ($$atom #f))
                                ($$atom #f))
                            (($$atom read-symbol/number0)
                             ($$atom sf1)
                             ($$atom c0)))))))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                          (begin
                            (($$atom vector-set!)
                             ($$atom source0)
                             ($$atom 0)
                             ($$atom y0))
                            ($$atom source0))))))
              (rd0 (lambda (sf1 c0)
                     (if (($$atom eof-object?) ($$atom c0))
                         ($$atom c0)
                         (if (($$atom <)
                              ($$atom 0)
                              (($$atom vector-ref)
                               ($$atom read-table)
                               (($$atom char->integer) ($$atom c0))))
                             (($$atom rd0)
                              ($$atom sf1)
                              (($$atom sf-read-char) ($$atom sf1)))
                             (if (($$atom char=?) ($$atom c0) ($$atom #\;))
                                 (letrec ((loop0 (lambda (sf2)
                                                   (let ((c1 (($$atom sf-read-char)
                                                              ($$atom sf2))))
                                                     (if (($$atom eof-object?)
                                                          ($$atom c1))
                                                         ($$atom c1)
                                                         (if (($$atom char=?)
                                                              ($$atom c1)
                                                              ($$atom char-newline))
                                                             (($$atom rd0)
                                                              ($$atom sf2)
                                                              (($$atom sf-read-char)
                                                               ($$atom sf2)))
                                                             (($$atom loop0)
                                                              ($$atom sf2))))))))
                                   (($$atom loop0) ($$atom sf1)))
                                 (($$atom rd*0) ($$atom sf1) ($$atom c0)))))))
              (read-special-symbol0
               (lambda (sf1)
                 (let ((s0 (($$atom read-symbol/number-string0)
                            ($$atom sf1)
                            ($$atom 2))))
                   (begin
                     (($$atom string-set!) ($$atom s0) ($$atom 0) ($$atom #\#))
                     (($$atom string-set!) ($$atom s0) ($$atom 1) ($$atom #\#))
                     (($$atom string->canonical-symbol) ($$atom s0))))))
              (read-prefixed-number0
               (lambda (sf1 c0)
                 (let ((s0 (($$atom read-symbol/number-string0)
                            ($$atom sf1)
                            ($$atom 2))))
                   (begin
                     (($$atom string-set!) ($$atom s0) ($$atom 0) ($$atom #\#))
                     (($$atom string-set!) ($$atom s0) ($$atom 1) ($$atom c0))
                     (($$atom string->number) ($$atom s0) ($$atom 10))))))
              (read-symbol/number0
               (lambda (sf1 c0)
                 (let ((s0 (($$atom read-symbol/number-string0)
                            ($$atom sf1)
                            ($$atom 1))))
                   (begin
                     (($$atom string-set!)
                      ($$atom s0)
                      ($$atom 0)
                      (($$atom char-downcase) ($$atom c0)))
                     (let ((g320 (($$atom string->number)
                                  ($$atom s0)
                                  ($$atom 10))))
                       (if ($$atom g320)
                           ($$atom g320)
                           (($$atom string->canonical-symbol)
                            ($$atom s0))))))))
              (read-symbol/number-string0
               (lambda (sf1 i0)
                 (if (($$atom delimiter?0)
                      (($$atom sf-peek-char) ($$atom sf1)))
                     (($$atom make-string) ($$atom i0) ($$atom #\space))
                     (let ((c0 (($$atom sf-read-char) ($$atom sf1))))
                       (let ((s0 (($$atom read-symbol/number-string0)
                                  ($$atom sf1)
                                  (($$atom +) ($$atom i0) ($$atom 1)))))
                         (begin
                           (($$atom string-set!)
                            ($$atom s0)
                            ($$atom i0)
                            (($$atom char-downcase) ($$atom c0)))
                           ($$atom s0)))))))
              (read-string0
               (lambda (sf1)
                 (letrec ((loop0 (lambda (sf2 i0)
                                   (let ((c0 (($$atom read-char*0)
                                              ($$atom sf2))))
                                     (if (($$atom char=?)
                                          ($$atom c0)
                                          ($$atom #\"))
                                         (($$atom make-string)
                                          ($$atom i0)
                                          ($$atom #\space))
                                         (if (($$atom char=?)
                                              ($$atom c0)
                                              ($$atom #\\))
                                             (let ((c1 (($$atom read-char*0)
                                                        ($$atom sf2))))
                                               (let ((s0 (($$atom loop0)
                                                          ($$atom sf2)
                                                          (($$atom +)
                                                           ($$atom i0)
                                                           ($$atom 1)))))
                                                 (begin
                                                   (($$atom string-set!)
                                                    ($$atom s0)
                                                    ($$atom i0)
                                                    ($$atom c1))
                                                   ($$atom s0))))
                                             (let ((s0 (($$atom loop0)
                                                        ($$atom sf2)
                                                        (($$atom +)
                                                         ($$atom i0)
                                                         ($$atom 1)))))
                                               (begin
                                                 (($$atom string-set!)
                                                  ($$atom s0)
                                                  ($$atom i0)
                                                  ($$atom c0))
                                                 ($$atom s0)))))))))
                   (($$atom loop0) ($$atom sf1) ($$atom 0)))))
              (read-vector0
               (lambda (sf1)
                 (letrec ((loop0 (lambda (sf2 i0)
                                   (let ((c0 (($$atom read-non-whitespace-char0)
                                              ($$atom sf2))))
                                     (if (($$atom char=?)
                                          ($$atom c0)
                                          ($$atom #\)))
                                         (($$atom make-vector)
                                          ($$atom i0)
                                          ($$atom '()))
                                         (let ((x0 (($$atom rd*0)
                                                    ($$atom sf2)
                                                    ($$atom c0))))
                                           (let ((v0 (($$atom loop0)
                                                      ($$atom sf2)
                                                      (($$atom +)
                                                       ($$atom i0)
                                                       ($$atom 1)))))
                                             (begin
                                               (($$atom vector-set!)
                                                ($$atom v0)
                                                ($$atom i0)
                                                ($$atom x0))
                                               ($$atom v0)))))))))
                   (($$atom loop0) ($$atom sf1) ($$atom 0)))))
              (read-list0
               (lambda (sf1 first0)
                 (let ((result0 (($$atom cons) ($$atom first0) ($$atom '()))))
                   (begin
                     (letrec ((loop0 (lambda (sf2 end0)
                                       (let ((c0 (($$atom read-non-whitespace-char0)
                                                  ($$atom sf2))))
                                         (let ((g330 (($$atom char=?)
                                                      ($$atom c0)
                                                      ($$atom #\)))))
                                           (if ($$atom g330)
                                               ($$atom g330)
                                               (if (if (($$atom char=?)
                                                        ($$atom c0)
                                                        ($$atom #\.))
                                                       (($$atom delimiter?0)
                                                        (($$atom sf-peek-char)
                                                         ($$atom sf2)))
                                                       ($$atom #f))
                                                   (let ((x0 (($$atom read-source)
                                                              ($$atom sf2))))
                                                     (if (($$atom char=?)
                                                          (($$atom read-non-whitespace-char0)
                                                           ($$atom sf2))
                                                          ($$atom #\)))
                                                         (($$atom set-cdr!)
                                                          ($$atom end0)
                                                          ($$atom x0))
                                                         (($$atom sf-read-error)
                                                          ($$atom sf2)
                                                          ($$atom "')' expected"))))
                                                   (let ((tail0 (($$atom cons)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                         (($$atom rd*0) ($$atom sf2) ($$atom c0))
                         ($$atom '()))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                     (begin
                                                       (($$atom set-cdr!)
                                                        ($$atom end0)
                                                        ($$atom tail0))
                                                       (($$atom loop0)
                                                        ($$atom sf2)
                                                        ($$atom tail0)))))))))))
                       (($$atom loop0) ($$atom sf1) ($$atom result0)))
                     ($$atom result0)))))
              (delimiter?0
               (lambda (c0)
                 (let ((g340 (($$atom eof-object?) ($$atom c0))))
                   (if ($$atom g340)
                       ($$atom g340)
                       (($$atom not)
                        (($$atom =)
                         (($$atom vector-ref)
                          ($$atom read-table)
                          (($$atom char->integer) ($$atom c0)))
                         ($$atom 0)))))))
              (read-non-whitespace-char0
               (lambda (sf1)
                 (let ((c0 (($$atom read-char*0) ($$atom sf1))))
                   (if (($$atom <)
                        ($$atom 0)
                        (($$atom vector-ref)
                         ($$atom read-table)
                         (($$atom char->integer) ($$atom c0))))
                       (($$atom read-non-whitespace-char0) ($$atom sf1))
                       (if (($$atom char=?) ($$atom c0) ($$atom #\;))
                           (letrec ((loop0 (lambda (sf2)
                                             (if (($$atom char=?)
                                                  (($$atom read-char*0)
                                                   ($$atom sf2))
                                                  ($$atom char-newline))
                                                 (($$atom read-non-whitespace-char0)
                                                  ($$atom sf2))
                                                 (($$atom loop0)
                                                  ($$atom sf2))))))
                             (($$atom loop0) ($$atom sf1)))
                           ($$atom c0))))))
              (read-char*0
               (lambda (sf1)
                 (let ((c0 (($$atom sf-read-char) ($$atom sf1))))
                   (if (($$atom eof-object?) ($$atom c0))
                       (($$atom sf-read-error)
                        ($$atom sf1)
                        ($$atom "Premature end of file encountered"))
                       ($$atom c0))))))
       (($$atom rd0) ($$atom sf0) (($$atom sf-read-char) ($$atom sf0))))))
 (define named-char-table
   (($$atom list)
    (($$atom cons)
     (($$atom string->canonical-symbol) ($$atom "NUL"))
     ($$atom char-nul))
    (($$atom cons)
     (($$atom string->canonical-symbol) ($$atom "TAB"))
     ($$atom char-tab))
    (($$atom cons)
     (($$atom string->canonical-symbol) ($$atom "NEWLINE"))
     ($$atom char-newline))
    (($$atom cons)
     (($$atom string->canonical-symbol) ($$atom "SPACE"))
     ($$atom #\space))))
 (define read-table
   (let ((rt0 (($$atom make-vector) ($$atom 256) ($$atom 0))))
     (begin
       (($$atom vector-set!)
        ($$atom rt0)
        (($$atom char->integer) ($$atom char-tab))
        ($$atom 1))
       (($$atom vector-set!)
        ($$atom rt0)
        (($$atom char->integer) ($$atom char-newline))
        ($$atom 1))
       (($$atom vector-set!) ($$atom rt0) ($$atom 32) ($$atom 1))
       (($$atom vector-set!) ($$atom rt0) ($$atom 59) ($$atom -1))
       (($$atom vector-set!) ($$atom rt0) ($$atom 40) ($$atom -1))
       (($$atom vector-set!) ($$atom rt0) ($$atom 41) ($$atom -1))
       (($$atom vector-set!) ($$atom rt0) ($$atom 34) ($$atom -1))
       (($$atom vector-set!) ($$atom rt0) ($$atom 39) ($$atom -1))
       (($$atom vector-set!) ($$atom rt0) ($$atom 96) ($$atom -1))
       ($$atom rt0))))
 (define make-var
   (lambda (name0 bound0 refs0 sets0 source0)
     (($$atom vector)
      ($$atom var-tag)
      ($$atom name0)
      ($$atom bound0)
      ($$atom refs0)
      ($$atom sets0)
      ($$atom source0)
      ($$atom #f))))
 (define var?
   (lambda (x0)
     (if (($$atom vector?) ($$atom x0))
         (if (($$atom >) (($$atom vector-length) ($$atom x0)) ($$atom 0))
             (($$atom eq?)
              (($$atom vector-ref) ($$atom x0) ($$atom 0))
              ($$atom var-tag))
             ($$atom #f))
         ($$atom #f))))
 (define var-name (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 1))))
 (define var-bound (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 2))))
 (define var-refs (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 3))))
 (define var-sets (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 4))))
 (define var-source (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 5))))
 (define var-info (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 6))))
 (define var-name-set!
   (lambda (x0 y0) (($$atom vector-set!) ($$atom x0) ($$atom 1) ($$atom y0))))
 (define var-bound-set!
   (lambda (x0 y0) (($$atom vector-set!) ($$atom x0) ($$atom 2) ($$atom y0))))
 (define var-refs-set!
   (lambda (x0 y0) (($$atom vector-set!) ($$atom x0) ($$atom 3) ($$atom y0))))
 (define var-sets-set!
   (lambda (x0 y0) (($$atom vector-set!) ($$atom x0) ($$atom 4) ($$atom y0))))
 (define var-source-set!
   (lambda (x0 y0) (($$atom vector-set!) ($$atom x0) ($$atom 5) ($$atom y0))))
 (define var-info-set!
   (lambda (x0 y0) (($$atom vector-set!) ($$atom x0) ($$atom 6) ($$atom y0))))
 (define var-tag (($$atom list) ($$atom 'var-tag)))
 (define var-copy
   (lambda (var0)
     (let ((source0 (($$atom var-source) ($$atom var0)))
           (name0 (($$atom vector-ref) ($$atom var0) ($$atom 1))))
       (($$atom vector)
        ($$atom var-tag)
        ($$atom name0)
        ($$atom #t)
        ($$atom '())
        ($$atom '())
        ($$atom source0)
        ($$atom #f)))))
 (define make-temp-var
   (lambda (name0)
     (($$atom vector)
      ($$atom var-tag)
      ($$atom name0)
      ($$atom #t)
      ($$atom '())
      ($$atom '())
      ($$atom #f)
      ($$atom #f))))
 (define temp-var?
   (lambda (var0)
     (($$atom eq?)
      (($$atom vector-ref) ($$atom var0) ($$atom 2))
      ($$atom #t))))
 (define ret-var (($$atom make-temp-var) ($$atom 'ret)))
 (define ret-var-set (($$atom list) ($$atom ret-var)))
 (define closure-env-var (($$atom make-temp-var) ($$atom 'closure-env)))
 (define empty-var (($$atom make-temp-var) ($$atom #f)))
 (define make-global-environment ($$atom #f))
 (set! make-global-environment
       (lambda () (($$atom env-frame) ($$atom #f) ($$atom '()))))
 (define env-frame
   (lambda (env0 vars0)
     (($$atom vector)
      (($$atom cons) ($$atom vars0) ($$atom #f))
      ($$atom '())
      ($$atom '())
      ($$atom env0))))
 (define env-new-var!
   (lambda (env0 name0 source0)
     (let ((glob0 (($$atom not)
                   (($$atom vector-ref) ($$atom env0) ($$atom 3)))))
       (let ((var0 (let ((bound0 (($$atom not) ($$atom glob0))))
                     (($$atom vector)
                      ($$atom var-tag)
                      ($$atom name0)
                      ($$atom bound0)
                      ($$atom '())
                      ($$atom '())
                      ($$atom source0)
                      ($$atom #f)))))
         (begin
           (let ((vars0 (($$atom cons)
                         ($$atom var0)
                         (($$atom env-vars-ref) ($$atom env0)))))
             (($$atom set-car!)
              (($$atom vector-ref) ($$atom env0) ($$atom 0))
              ($$atom vars0)))
           ($$atom var0))))))
 (define env-macro
   (lambda (env0 name0 def0)
     (let ((name*0 (if (($$atom full-name?) ($$atom name0))
                       ($$atom name0)
                       (let ((prefix0 (($$atom env-namespace-prefix)
                                       ($$atom env0)
                                       ($$atom name0))))
                         (if ($$atom prefix0)
                             (($$atom make-full-name)
                              ($$atom prefix0)
                              ($$atom name0))
                             ($$atom name0))))))
       (($$atom vector)
        (($$atom vector-ref) ($$atom env0) ($$atom 0))
        (($$atom cons)
         (($$atom cons) ($$atom name*0) ($$atom def0))
         (($$atom vector-ref) ($$atom env0) ($$atom 1)))
        (($$atom vector-ref) ($$atom env0) ($$atom 2))
        (($$atom vector-ref) ($$atom env0) ($$atom 3))))))
 (define env-declare
   (lambda (env0 decl0)
     (($$atom vector)
      (($$atom vector-ref) ($$atom env0) ($$atom 0))
      (($$atom vector-ref) ($$atom env0) ($$atom 1))
      (($$atom cons)
       ($$atom decl0)
       (($$atom vector-ref) ($$atom env0) ($$atom 2)))
      (($$atom vector-ref) ($$atom env0) ($$atom 3)))))
 (define env-vars-ref
   (lambda (env0)
     (($$atom car) (($$atom vector-ref) ($$atom env0) ($$atom 0)))))
 (define env-vars-set!
   (lambda (env0 vars0)
     (($$atom set-car!)
      (($$atom vector-ref) ($$atom env0) ($$atom 0))
      ($$atom vars0))))
 (define env-macros-ref
   (lambda (env0) (($$atom vector-ref) ($$atom env0) ($$atom 1))))
 (define env-decls-ref
   (lambda (env0) (($$atom vector-ref) ($$atom env0) ($$atom 2))))
 (define env-parent-ref
   (lambda (env0) (($$atom vector-ref) ($$atom env0) ($$atom 3))))
 (define env-namespace-prefix
   (lambda (env0 name0)
     (letrec ((loop0 (lambda (name1 decls0)
                       (if (($$atom pair?) ($$atom decls0))
                           (let ((decl0 (($$atom car) ($$atom decls0))))
                             (if (($$atom eq?)
                                  (($$atom car) ($$atom decl0))
                                  ($$atom namespace-sym))
                                 (let ((syms0 (($$atom cdr)
                                               (($$atom cdr) ($$atom decl0)))))
                                   (if (let ((g350 (($$atom null?)
                                                    ($$atom syms0))))
                                         (if ($$atom g350)
                                             ($$atom g350)
                                             (($$atom memq)
                                              ($$atom name1)
                                              ($$atom syms0))))
                                       (($$atom car)
                                        (($$atom cdr) ($$atom decl0)))
                                       (($$atom loop0)
                                        ($$atom name1)
                                        (($$atom cdr) ($$atom decls0)))))
                                 (($$atom loop0)
                                  ($$atom name1)
                                  (($$atom cdr) ($$atom decls0)))))
                           ($$atom #f)))))
       (($$atom loop0)
        ($$atom name0)
        (($$atom vector-ref) ($$atom env0) ($$atom 2))))))
 (define env-lookup
   (lambda (env0 name0 stop-at-first-frame?0 proc0)
     (letrec ((search*0
               (lambda (stop-at-first-frame?1 proc1 env1 name1 full?0)
                 (letrec ((search-vars0
                           (lambda (stop-at-first-frame?2
                                    proc2
                                    env2
                                    name2
                                    full?1
                                    vars0)
                             (if (($$atom pair?) ($$atom vars0))
                                 (let ((v0 (($$atom car) ($$atom vars0))))
                                   (if (($$atom eq?)
                                        (($$atom vector-ref)
                                         ($$atom v0)
                                         ($$atom 1))
                                        ($$atom name2))
                                       (($$atom proc2)
                                        ($$atom env2)
                                        ($$atom name2)
                                        ($$atom v0))
                                       (($$atom search-vars0)
                                        ($$atom stop-at-first-frame?2)
                                        ($$atom proc2)
                                        ($$atom env2)
                                        ($$atom name2)
                                        ($$atom full?1)
                                        (($$atom cdr) ($$atom vars0)))))
                                 (let ((env*0 (($$atom vector-ref)
                                               ($$atom env2)
                                               ($$atom 3))))
                                   (if (let ((g360 ($$atom stop-at-first-frame?2)))
                                         (if ($$atom g360)
                                             ($$atom g360)
                                             (($$atom not) ($$atom env*0))))
                                       (($$atom proc2)
                                        ($$atom env2)
                                        ($$atom name2)
                                        ($$atom #f))
                                       (($$atom search0)
                                        ($$atom stop-at-first-frame?2)
                                        ($$atom proc2)
                                        ($$atom env*0)
                                        ($$atom name2)
                                        ($$atom full?1)))))))
                          (search-macros0
                           (lambda (stop-at-first-frame?2
                                    proc2
                                    env2
                                    name2
                                    full?1
                                    macros0)
                             (if (($$atom pair?) ($$atom macros0))
                                 (let ((m0 (($$atom car) ($$atom macros0))))
                                   (if (($$atom eq?)
                                        (($$atom car) ($$atom m0))
                                        ($$atom name2))
                                       (($$atom proc2)
                                        ($$atom env2)
                                        ($$atom name2)
                                        (($$atom cdr) ($$atom m0)))
                                       (($$atom search-macros0)
                                        ($$atom stop-at-first-frame?2)
                                        ($$atom proc2)
                                        ($$atom env2)
                                        ($$atom name2)
                                        ($$atom full?1)
                                        (($$atom cdr) ($$atom macros0)))))
                                 (($$atom search-vars0)
                                  ($$atom stop-at-first-frame?2)
                                  ($$atom proc2)
                                  ($$atom env2)
                                  ($$atom name2)
                                  ($$atom full?1)
                                  (($$atom env-vars-ref) ($$atom env2)))))))
                   (($$atom search-macros0)
                    ($$atom stop-at-first-frame?1)
                    ($$atom proc1)
                    ($$atom env1)
                    ($$atom name1)
                    ($$atom full?0)
                    (($$atom vector-ref) ($$atom env1) ($$atom 1))))))
              (search0 (lambda (stop-at-first-frame?1 proc1 env1 name1 full?0)
                         (if ($$atom full?0)
                             (($$atom search*0)
                              ($$atom stop-at-first-frame?1)
                              ($$atom proc1)
                              ($$atom env1)
                              ($$atom name1)
                              ($$atom full?0))
                             (let ((prefix0 (($$atom env-namespace-prefix)
                                             ($$atom env1)
                                             ($$atom name1))))
                               (if ($$atom prefix0)
                                   (($$atom search*0)
                                    ($$atom stop-at-first-frame?1)
                                    ($$atom proc1)
                                    ($$atom env1)
                                    (($$atom make-full-name)
                                     ($$atom prefix0)
                                     ($$atom name1))
                                    ($$atom #t))
                                   (($$atom search*0)
                                    ($$atom stop-at-first-frame?1)
                                    ($$atom proc1)
                                    ($$atom env1)
                                    ($$atom name1)
                                    ($$atom full?0))))))))
       (($$atom search0)
        ($$atom stop-at-first-frame?0)
        ($$atom proc0)
        ($$atom env0)
        ($$atom name0)
        (($$atom full-name?) ($$atom name0))))))
 (define valid-prefix?
   (lambda (str0)
     (let ((l0 (($$atom string-length) ($$atom str0))))
       (let ((g370 (($$atom =) ($$atom l0) ($$atom 0))))
         (if ($$atom g370)
             ($$atom g370)
             (if (($$atom >=) ($$atom l0) ($$atom 2))
                 (($$atom char=?)
                  (($$atom string-ref)
                   ($$atom str0)
                   (($$atom -) ($$atom l0) ($$atom 1)))
                  ($$atom #\#))
                 ($$atom #f)))))))
 (define full-name?
   (lambda (sym0)
     (let ((str0 (($$atom symbol->string) ($$atom sym0))))
       (letrec ((loop0 (lambda (str1 i0)
                         (if (($$atom <) ($$atom i0) ($$atom 0))
                             ($$atom #f)
                             (if (($$atom char=?)
                                  (($$atom string-ref)
                                   ($$atom str1)
                                   ($$atom i0))
                                  ($$atom #\#))
                                 ($$atom #t)
                                 (($$atom loop0)
                                  ($$atom str1)
                                  (($$atom -) ($$atom i0) ($$atom 1))))))))
         (($$atom loop0)
          ($$atom str0)
          (($$atom -) (($$atom string-length) ($$atom str0)) ($$atom 1)))))))
 (define make-full-name
   (lambda (prefix0 sym0)
     (if (($$atom =) (($$atom string-length) ($$atom prefix0)) ($$atom 0))
         ($$atom sym0)
         (($$atom string->canonical-symbol)
          (($$atom string-append)
           ($$atom prefix0)
           (($$atom symbol->string) ($$atom sym0)))))))
 (define env-lookup-var
   (lambda (env0 name0 source0)
     (($$atom env-lookup)
      ($$atom env0)
      ($$atom name0)
      ($$atom #f)
      (lambda (env1 name1 x0)
        (if ($$atom x0)
            (if (($$atom var?) ($$atom x0))
                ($$atom x0)
                (($$atom compiler-internal-error)
                 ($$atom "env-lookup-var, name is that of a macro")
                 ($$atom name1)))
            (($$atom env-new-var!)
             ($$atom env1)
             ($$atom name1)
             ($$atom source0)))))))
 (define env-define-var
   (lambda (env0 name0 source0)
     (($$atom env-lookup)
      ($$atom env0)
      ($$atom name0)
      ($$atom #t)
      (lambda (env1 name1 x0)
        (if ($$atom x0)
            (if (($$atom var?) ($$atom x0))
                (($$atom pt-syntax-error)
                 ($$atom source0)
                 ($$atom "Duplicate definition of a variable"))
                (($$atom compiler-internal-error)
                 ($$atom "env-define-var, name is that of a macro")
                 ($$atom name1)))
            (($$atom env-new-var!)
             ($$atom env1)
             ($$atom name1)
             ($$atom source0)))))))
 (define env-lookup-global-var
   (lambda (env0 name0)
     (let ((env*0 (($$atom env-global-env) ($$atom env0))))
       (letrec ((search-vars0
                 (lambda (name1 env*1 vars0)
                   (if (($$atom pair?) ($$atom vars0))
                       (let ((v0 (($$atom car) ($$atom vars0))))
                         (if (($$atom eq?)
                              (($$atom vector-ref) ($$atom v0) ($$atom 1))
                              ($$atom name1))
                             ($$atom v0)
                             (($$atom search-vars0)
                              ($$atom name1)
                              ($$atom env*1)
                              (($$atom cdr) ($$atom vars0)))))
                       (($$atom env-new-var!)
                        ($$atom env*1)
                        ($$atom name1)
                        ($$atom #f))))))
         (($$atom search-vars0)
          ($$atom name0)
          ($$atom env*0)
          (($$atom env-vars-ref) ($$atom env*0)))))))
 (define env-global-variables
   (lambda (env0)
     (let ((env1 (($$atom env-global-env) ($$atom env0))))
       (($$atom car) (($$atom vector-ref) ($$atom env1) ($$atom 0))))))
 (define env-global-env
   (lambda (env0)
     (letrec ((loop0 (lambda (env1)
                       (let ((env*0 (($$atom vector-ref)
                                     ($$atom env1)
                                     ($$atom 3))))
                         (if ($$atom env*0)
                             (($$atom loop0) ($$atom env*0))
                             ($$atom env1))))))
       (($$atom loop0) ($$atom env0)))))
 (define env-lookup-macro
   (lambda (env0 name0)
     (($$atom env-lookup)
      ($$atom env0)
      ($$atom name0)
      ($$atom #f)
      (lambda (env1 name1 x0)
        (if (let ((g380 (($$atom not) ($$atom x0))))
              (if ($$atom g380) ($$atom g380) (($$atom var?) ($$atom x0))))
            ($$atom #f)
            ($$atom x0))))))
 (define env-declarations (lambda (env0) ($$atom env0)))
 (define flag-declarations ($$atom '()))
 (define parameterized-declarations ($$atom '()))
 (define boolean-declarations ($$atom '()))
 (define namable-declarations ($$atom '()))
 (define namable-boolean-declarations ($$atom '()))
 (define namable-string-declarations ($$atom '()))
 (define define-flag-decl
   (lambda (name0 type0)
     (begin
       (set! flag-declarations
             (($$atom cons)
              (($$atom cons) ($$atom name0) ($$atom type0))
              ($$atom flag-declarations)))
       ($$atom '()))))
 (define define-parameterized-decl
   (lambda (name0)
     (begin
       (set! parameterized-declarations
             (($$atom cons)
              ($$atom name0)
              ($$atom parameterized-declarations)))
       ($$atom '()))))
 (define define-boolean-decl
   (lambda (name0)
     (begin
       (set! boolean-declarations
             (($$atom cons) ($$atom name0) ($$atom boolean-declarations)))
       ($$atom '()))))
 (define define-namable-decl
   (lambda (name0 type0)
     (begin
       (set! namable-declarations
             (($$atom cons)
              (($$atom cons) ($$atom name0) ($$atom type0))
              ($$atom namable-declarations)))
       ($$atom '()))))
 (define define-namable-boolean-decl
   (lambda (name0)
     (begin
       (set! namable-boolean-declarations
             (($$atom cons)
              ($$atom name0)
              ($$atom namable-boolean-declarations)))
       ($$atom '()))))
 (define define-namable-string-decl
   (lambda (name0)
     (begin
       (set! namable-string-declarations
             (($$atom cons)
              ($$atom name0)
              ($$atom namable-string-declarations)))
       ($$atom '()))))
 (define flag-decl
   (lambda (source0 type0 val0) (($$atom list) ($$atom type0) ($$atom val0))))
 (define parameterized-decl
   (lambda (source0 id0 parm0) (($$atom list) ($$atom id0) ($$atom parm0))))
 (define boolean-decl
   (lambda (source0 id0 pos0) (($$atom list) ($$atom id0) ($$atom pos0))))
 (define namable-decl
   (lambda (source0 type0 val0 names0)
     (($$atom cons)
      ($$atom type0)
      (($$atom cons) ($$atom val0) ($$atom names0)))))
 (define namable-boolean-decl
   (lambda (source0 id0 pos0 names0)
     (($$atom cons)
      ($$atom id0)
      (($$atom cons) ($$atom pos0) ($$atom names0)))))
 (define namable-string-decl
   (lambda (source0 id0 str0 names0)
     (begin
       (if (if (($$atom eq?) ($$atom id0) ($$atom namespace-sym))
               (($$atom not) (($$atom valid-prefix?) ($$atom str0)))
               ($$atom #f))
           (($$atom pt-syntax-error)
            ($$atom source0)
            ($$atom "Illegal namespace"))
           ($$atom #f))
       (($$atom cons)
        ($$atom id0)
        (($$atom cons) ($$atom str0) ($$atom names0))))))
 (define declaration-value
   (lambda (name0 element0 default0 decls0)
     (if ($$atom decls0)
         (letrec ((loop0 (lambda (name1 element1 default1 decls1 l0)
                           (if (($$atom pair?) ($$atom l0))
                               (let ((d0 (($$atom car) ($$atom l0))))
                                 (if (if (($$atom eq?)
                                          (($$atom car) ($$atom d0))
                                          ($$atom name1))
                                         (let ((g390 (($$atom null?)
                                                      (($$atom cdr)
                                                       (($$atom cdr)
                                                        ($$atom d0))))))
                                           (if ($$atom g390)
                                               ($$atom g390)
                                               (($$atom memq)
                                                ($$atom element1)
                                                (($$atom cdr)
                                                 (($$atom cdr) ($$atom d0))))))
                                         ($$atom #f))
                                     (($$atom car) (($$atom cdr) ($$atom d0)))
                                     (($$atom loop0)
                                      ($$atom name1)
                                      ($$atom element1)
                                      ($$atom default1)
                                      ($$atom decls1)
                                      (($$atom cdr) ($$atom l0)))))
                               (($$atom declaration-value)
                                ($$atom name1)
                                ($$atom element1)
                                ($$atom default1)
                                (($$atom vector-ref)
                                 ($$atom decls1)
                                 ($$atom 3)))))))
           (($$atom loop0)
            ($$atom name0)
            ($$atom element0)
            ($$atom default0)
            ($$atom decls0)
            (($$atom vector-ref) ($$atom decls0) ($$atom 2))))
         ($$atom default0))))
 (define namespace-sym
   (($$atom string->canonical-symbol) ($$atom "NAMESPACE")))
 (($$atom define-namable-string-decl) ($$atom namespace-sym))
 (define node-parent
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 1))))
 (define node-children
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 2))))
 (define node-fv (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 3))))
 (define node-decl (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 4))))
 (define node-source
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 5))))
 (define node-parent-set!
   (lambda (x0 y0) (($$atom vector-set!) ($$atom x0) ($$atom 1) ($$atom y0))))
 (define node-fv-set!
   (lambda (x0 y0) (($$atom vector-set!) ($$atom x0) ($$atom 3) ($$atom y0))))
 (define node-decl-set!
   (lambda (x0 y0) (($$atom vector-set!) ($$atom x0) ($$atom 4) ($$atom y0))))
 (define node-source-set!
   (lambda (x0 y0) (($$atom vector-set!) ($$atom x0) ($$atom 5) ($$atom y0))))
 (define node-children-set!
   (lambda (x0 y0)
     (begin
       (($$atom vector-set!) ($$atom x0) ($$atom 2) ($$atom y0))
       (($$atom for-each)
        (lambda (child0)
          (($$atom vector-set!) ($$atom child0) ($$atom 1) ($$atom x0)))
        ($$atom y0))
       (($$atom node-fv-invalidate!) ($$atom x0)))))
 (define node-fv-invalidate!
   (lambda (x0)
     (letrec ((loop0 (lambda (node0)
                       (if ($$atom node0)
                           (begin
                             (($$atom vector-set!)
                              ($$atom node0)
                              ($$atom 3)
                              ($$atom #t))
                             (($$atom loop0)
                              (($$atom vector-ref) ($$atom node0) ($$atom 1))))
                           ($$atom #f)))))
       (($$atom loop0) ($$atom x0)))))
 (define make-cst
   (lambda (parent0 children0 fv0 decl0 source0 val0)
     (($$atom vector)
      ($$atom cst-tag)
      ($$atom parent0)
      ($$atom children0)
      ($$atom fv0)
      ($$atom decl0)
      ($$atom source0)
      ($$atom val0))))
 (define cst?
   (lambda (x0)
     (if (($$atom vector?) ($$atom x0))
         (if (($$atom >) (($$atom vector-length) ($$atom x0)) ($$atom 0))
             (($$atom eq?)
              (($$atom vector-ref) ($$atom x0) ($$atom 0))
              ($$atom cst-tag))
             ($$atom #f))
         ($$atom #f))))
 (define cst-val (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 6))))
 (define cst-val-set!
   (lambda (x0 y0) (($$atom vector-set!) ($$atom x0) ($$atom 6) ($$atom y0))))
 (define cst-tag (($$atom list) ($$atom 'cst-tag)))
 (define make-ref
   (lambda (parent0 children0 fv0 decl0 source0 var0)
     (($$atom vector)
      ($$atom ref-tag)
      ($$atom parent0)
      ($$atom children0)
      ($$atom fv0)
      ($$atom decl0)
      ($$atom source0)
      ($$atom var0))))
 (define ref?
   (lambda (x0)
     (if (($$atom vector?) ($$atom x0))
         (if (($$atom >) (($$atom vector-length) ($$atom x0)) ($$atom 0))
             (($$atom eq?)
              (($$atom vector-ref) ($$atom x0) ($$atom 0))
              ($$atom ref-tag))
             ($$atom #f))
         ($$atom #f))))
 (define ref-var (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 6))))
 (define ref-var-set!
   (lambda (x0 y0) (($$atom vector-set!) ($$atom x0) ($$atom 6) ($$atom y0))))
 (define ref-tag (($$atom list) ($$atom 'ref-tag)))
 (define make-set
   (lambda (parent0 children0 fv0 decl0 source0 var0)
     (($$atom vector)
      ($$atom set-tag)
      ($$atom parent0)
      ($$atom children0)
      ($$atom fv0)
      ($$atom decl0)
      ($$atom source0)
      ($$atom var0))))
 (define set?
   (lambda (x0)
     (if (($$atom vector?) ($$atom x0))
         (if (($$atom >) (($$atom vector-length) ($$atom x0)) ($$atom 0))
             (($$atom eq?)
              (($$atom vector-ref) ($$atom x0) ($$atom 0))
              ($$atom set-tag))
             ($$atom #f))
         ($$atom #f))))
 (define set-var (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 6))))
 (define set-var-set!
   (lambda (x0 y0) (($$atom vector-set!) ($$atom x0) ($$atom 6) ($$atom y0))))
 (define set-tag (($$atom list) ($$atom 'set-tag)))
 (define make-def
   (lambda (parent0 children0 fv0 decl0 source0 var0)
     (($$atom vector)
      ($$atom def-tag)
      ($$atom parent0)
      ($$atom children0)
      ($$atom fv0)
      ($$atom decl0)
      ($$atom source0)
      ($$atom var0))))
 (define def?
   (lambda (x0)
     (if (($$atom vector?) ($$atom x0))
         (if (($$atom >) (($$atom vector-length) ($$atom x0)) ($$atom 0))
             (($$atom eq?)
              (($$atom vector-ref) ($$atom x0) ($$atom 0))
              ($$atom def-tag))
             ($$atom #f))
         ($$atom #f))))
 (define def-var (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 6))))
 (define def-var-set!
   (lambda (x0 y0) (($$atom vector-set!) ($$atom x0) ($$atom 6) ($$atom y0))))
 (define def-tag (($$atom list) ($$atom 'def-tag)))
 (define make-tst
   (lambda (parent0 children0 fv0 decl0 source0)
     (($$atom vector)
      ($$atom tst-tag)
      ($$atom parent0)
      ($$atom children0)
      ($$atom fv0)
      ($$atom decl0)
      ($$atom source0))))
 (define tst?
   (lambda (x0)
     (if (($$atom vector?) ($$atom x0))
         (if (($$atom >) (($$atom vector-length) ($$atom x0)) ($$atom 0))
             (($$atom eq?)
              (($$atom vector-ref) ($$atom x0) ($$atom 0))
              ($$atom tst-tag))
             ($$atom #f))
         ($$atom #f))))
 (define tst-tag (($$atom list) ($$atom 'tst-tag)))
 (define make-conj
   (lambda (parent0 children0 fv0 decl0 source0)
     (($$atom vector)
      ($$atom conj-tag)
      ($$atom parent0)
      ($$atom children0)
      ($$atom fv0)
      ($$atom decl0)
      ($$atom source0))))
 (define conj?
   (lambda (x0)
     (if (($$atom vector?) ($$atom x0))
         (if (($$atom >) (($$atom vector-length) ($$atom x0)) ($$atom 0))
             (($$atom eq?)
              (($$atom vector-ref) ($$atom x0) ($$atom 0))
              ($$atom conj-tag))
             ($$atom #f))
         ($$atom #f))))
 (define conj-tag (($$atom list) ($$atom 'conj-tag)))
 (define make-disj
   (lambda (parent0 children0 fv0 decl0 source0)
     (($$atom vector)
      ($$atom disj-tag)
      ($$atom parent0)
      ($$atom children0)
      ($$atom fv0)
      ($$atom decl0)
      ($$atom source0))))
 (define disj?
   (lambda (x0)
     (if (($$atom vector?) ($$atom x0))
         (if (($$atom >) (($$atom vector-length) ($$atom x0)) ($$atom 0))
             (($$atom eq?)
              (($$atom vector-ref) ($$atom x0) ($$atom 0))
              ($$atom disj-tag))
             ($$atom #f))
         ($$atom #f))))
 (define disj-tag (($$atom list) ($$atom 'disj-tag)))
 (define make-prc
   (lambda (parent0 children0 fv0 decl0 source0 name0 min0 rest0 parms0)
     (($$atom vector)
      ($$atom prc-tag)
      ($$atom parent0)
      ($$atom children0)
      ($$atom fv0)
      ($$atom decl0)
      ($$atom source0)
      ($$atom name0)
      ($$atom min0)
      ($$atom rest0)
      ($$atom parms0))))
 (define prc?
   (lambda (x0)
     (if (($$atom vector?) ($$atom x0))
         (if (($$atom >) (($$atom vector-length) ($$atom x0)) ($$atom 0))
             (($$atom eq?)
              (($$atom vector-ref) ($$atom x0) ($$atom 0))
              ($$atom prc-tag))
             ($$atom #f))
         ($$atom #f))))
 (define prc-name (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 6))))
 (define prc-min (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 7))))
 (define prc-rest (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 8))))
 (define prc-parms (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 9))))
 (define prc-name-set!
   (lambda (x0 y0) (($$atom vector-set!) ($$atom x0) ($$atom 6) ($$atom y0))))
 (define prc-min-set!
   (lambda (x0 y0) (($$atom vector-set!) ($$atom x0) ($$atom 7) ($$atom y0))))
 (define prc-rest-set!
   (lambda (x0 y0) (($$atom vector-set!) ($$atom x0) ($$atom 8) ($$atom y0))))
 (define prc-parms-set!
   (lambda (x0 y0) (($$atom vector-set!) ($$atom x0) ($$atom 9) ($$atom y0))))
 (define prc-tag (($$atom list) ($$atom 'prc-tag)))
 (define make-app
   (lambda (parent0 children0 fv0 decl0 source0)
     (($$atom vector)
      ($$atom app-tag)
      ($$atom parent0)
      ($$atom children0)
      ($$atom fv0)
      ($$atom decl0)
      ($$atom source0))))
 (define app?
   (lambda (x0)
     (if (($$atom vector?) ($$atom x0))
         (if (($$atom >) (($$atom vector-length) ($$atom x0)) ($$atom 0))
             (($$atom eq?)
              (($$atom vector-ref) ($$atom x0) ($$atom 0))
              ($$atom app-tag))
             ($$atom #f))
         ($$atom #f))))
 (define app-tag (($$atom list) ($$atom 'app-tag)))
 (define make-fut
   (lambda (parent0 children0 fv0 decl0 source0)
     (($$atom vector)
      ($$atom fut-tag)
      ($$atom parent0)
      ($$atom children0)
      ($$atom fv0)
      ($$atom decl0)
      ($$atom source0))))
 (define fut?
   (lambda (x0)
     (if (($$atom vector?) ($$atom x0))
         (if (($$atom >) (($$atom vector-length) ($$atom x0)) ($$atom 0))
             (($$atom eq?)
              (($$atom vector-ref) ($$atom x0) ($$atom 0))
              ($$atom fut-tag))
             ($$atom #f))
         ($$atom #f))))
 (define fut-tag (($$atom list) ($$atom 'fut-tag)))
 (define new-cst
   (lambda (source0 decl0 val0)
     (($$atom vector)
      ($$atom cst-tag)
      ($$atom #f)
      ($$atom '())
      ($$atom #t)
      ($$atom decl0)
      ($$atom source0)
      ($$atom val0))))
 (define new-ref
   (lambda (source0 decl0 var0)
     (let ((node0 (($$atom vector)
                   ($$atom ref-tag)
                   ($$atom #f)
                   ($$atom '())
                   ($$atom #t)
                   ($$atom decl0)
                   ($$atom source0)
                   ($$atom var0))))
       (begin
         (let ((y0 (($$atom set-adjoin)
                    (($$atom vector-ref) ($$atom var0) ($$atom 3))
                    ($$atom node0))))
           (($$atom vector-set!) ($$atom var0) ($$atom 3) ($$atom y0)))
         ($$atom node0)))))
 (define new-ref-extended-bindings
   (lambda (source0 name0 env0)
     (($$atom new-ref)
      ($$atom source0)
      (($$atom add-extended-bindings) ($$atom env0))
      (($$atom env-lookup-global-var) ($$atom env0) ($$atom name0)))))
 (define new-set
   (lambda (source0 decl0 var0 val0)
     (let ((node0 (let ((children0 (($$atom list) ($$atom val0))))
                    (($$atom vector)
                     ($$atom set-tag)
                     ($$atom #f)
                     ($$atom children0)
                     ($$atom #t)
                     ($$atom decl0)
                     ($$atom source0)
                     ($$atom var0)))))
       (begin
         (let ((y0 (($$atom set-adjoin)
                    (($$atom vector-ref) ($$atom var0) ($$atom 4))
                    ($$atom node0))))
           (($$atom vector-set!) ($$atom var0) ($$atom 4) ($$atom y0)))
         (($$atom vector-set!) ($$atom val0) ($$atom 1) ($$atom node0))
         ($$atom node0)))))
 (define set-val
   (lambda (x0)
     (if (($$atom set?) ($$atom x0))
         (($$atom car) (($$atom vector-ref) ($$atom x0) ($$atom 2)))
         (($$atom compiler-internal-error)
          ($$atom "set-val, 'set' node expected")
          ($$atom x0)))))
 (define new-def
   (lambda (source0 decl0 var0 val0)
     (let ((node0 (let ((children0 (($$atom list) ($$atom val0))))
                    (($$atom vector)
                     ($$atom def-tag)
                     ($$atom #f)
                     ($$atom children0)
                     ($$atom #t)
                     ($$atom decl0)
                     ($$atom source0)
                     ($$atom var0)))))
       (begin
         (let ((y0 (($$atom set-adjoin)
                    (($$atom vector-ref) ($$atom var0) ($$atom 4))
                    ($$atom node0))))
           (($$atom vector-set!) ($$atom var0) ($$atom 4) ($$atom y0)))
         (($$atom vector-set!) ($$atom val0) ($$atom 1) ($$atom node0))
         ($$atom node0)))))
 (define def-val
   (lambda (x0)
     (if (($$atom def?) ($$atom x0))
         (($$atom car) (($$atom vector-ref) ($$atom x0) ($$atom 2)))
         (($$atom compiler-internal-error)
          ($$atom "def-val, 'def' node expected")
          ($$atom x0)))))
 (define new-tst
   (lambda (source0 decl0 pre0 con0 alt0)
     (let ((node0 (let ((children0
                         (($$atom list)
                          ($$atom pre0)
                          ($$atom con0)
                          ($$atom alt0))))
                    (($$atom vector)
                     ($$atom tst-tag)
                     ($$atom #f)
                     ($$atom children0)
                     ($$atom #t)
                     ($$atom decl0)
                     ($$atom source0)))))
       (begin
         (($$atom vector-set!) ($$atom pre0) ($$atom 1) ($$atom node0))
         (($$atom vector-set!) ($$atom con0) ($$atom 1) ($$atom node0))
         (($$atom vector-set!) ($$atom alt0) ($$atom 1) ($$atom node0))
         ($$atom node0)))))
 (define tst-pre
   (lambda (x0)
     (if (($$atom tst?) ($$atom x0))
         (($$atom car) (($$atom vector-ref) ($$atom x0) ($$atom 2)))
         (($$atom compiler-internal-error)
          ($$atom "tst-pre, 'tst' node expected")
          ($$atom x0)))))
 (define tst-con
   (lambda (x0)
     (if (($$atom tst?) ($$atom x0))
         (($$atom car)
          (($$atom cdr) (($$atom vector-ref) ($$atom x0) ($$atom 2))))
         (($$atom compiler-internal-error)
          ($$atom "tst-con, 'tst' node expected")
          ($$atom x0)))))
 (define tst-alt
   (lambda (x0)
     (if (($$atom tst?) ($$atom x0))
         (($$atom car)
          (($$atom cdr)
           (($$atom cdr) (($$atom vector-ref) ($$atom x0) ($$atom 2)))))
         (($$atom compiler-internal-error)
          ($$atom "tst-alt, 'tst' node expected")
          ($$atom x0)))))
 (define new-conj
   (lambda (source0 decl0 pre0 alt0)
     (let ((node0 (let ((children0
                         (($$atom list) ($$atom pre0) ($$atom alt0))))
                    (($$atom vector)
                     ($$atom conj-tag)
                     ($$atom #f)
                     ($$atom children0)
                     ($$atom #t)
                     ($$atom decl0)
                     ($$atom source0)))))
       (begin
         (($$atom vector-set!) ($$atom pre0) ($$atom 1) ($$atom node0))
         (($$atom vector-set!) ($$atom alt0) ($$atom 1) ($$atom node0))
         ($$atom node0)))))
 (define conj-pre
   (lambda (x0)
     (if (($$atom conj?) ($$atom x0))
         (($$atom car) (($$atom vector-ref) ($$atom x0) ($$atom 2)))
         (($$atom compiler-internal-error)
          ($$atom "conj-pre, 'conj' node expected")
          ($$atom x0)))))
 (define conj-alt
   (lambda (x0)
     (if (($$atom conj?) ($$atom x0))
         (($$atom car)
          (($$atom cdr) (($$atom vector-ref) ($$atom x0) ($$atom 2))))
         (($$atom compiler-internal-error)
          ($$atom "conj-alt, 'conj' node expected")
          ($$atom x0)))))
 (define new-disj
   (lambda (source0 decl0 pre0 alt0)
     (let ((node0 (let ((children0
                         (($$atom list) ($$atom pre0) ($$atom alt0))))
                    (($$atom vector)
                     ($$atom disj-tag)
                     ($$atom #f)
                     ($$atom children0)
                     ($$atom #t)
                     ($$atom decl0)
                     ($$atom source0)))))
       (begin
         (($$atom vector-set!) ($$atom pre0) ($$atom 1) ($$atom node0))
         (($$atom vector-set!) ($$atom alt0) ($$atom 1) ($$atom node0))
         ($$atom node0)))))
 (define disj-pre
   (lambda (x0)
     (if (($$atom disj?) ($$atom x0))
         (($$atom car) (($$atom vector-ref) ($$atom x0) ($$atom 2)))
         (($$atom compiler-internal-error)
          ($$atom "disj-pre, 'disj' node expected")
          ($$atom x0)))))
 (define disj-alt
   (lambda (x0)
     (if (($$atom disj?) ($$atom x0))
         (($$atom car)
          (($$atom cdr) (($$atom vector-ref) ($$atom x0) ($$atom 2))))
         (($$atom compiler-internal-error)
          ($$atom "disj-alt, 'disj' node expected")
          ($$atom x0)))))
 (define new-prc
   (lambda (source0 decl0 name0 min0 rest0 parms0 body0)
     (let ((node0 (let ((children0 (($$atom list) ($$atom body0))))
                    (($$atom vector)
                     ($$atom prc-tag)
                     ($$atom #f)
                     ($$atom children0)
                     ($$atom #t)
                     ($$atom decl0)
                     ($$atom source0)
                     ($$atom name0)
                     ($$atom min0)
                     ($$atom rest0)
                     ($$atom parms0)))))
       (begin
         (($$atom for-each)
          (lambda (x0)
            (($$atom vector-set!) ($$atom x0) ($$atom 2) ($$atom node0)))
          ($$atom parms0))
         (($$atom vector-set!) ($$atom body0) ($$atom 1) ($$atom node0))
         ($$atom node0)))))
 (define prc-body
   (lambda (x0)
     (if (($$atom prc?) ($$atom x0))
         (($$atom car) (($$atom vector-ref) ($$atom x0) ($$atom 2)))
         (($$atom compiler-internal-error)
          ($$atom "prc-body, 'proc' node expected")
          ($$atom x0)))))
 (define new-call
   (lambda (source0 decl0 oper0 args0)
     (let ((node0 (let ((children0
                         (($$atom cons) ($$atom oper0) ($$atom args0))))
                    (($$atom vector)
                     ($$atom app-tag)
                     ($$atom #f)
                     ($$atom children0)
                     ($$atom #t)
                     ($$atom decl0)
                     ($$atom source0)))))
       (begin
         (($$atom vector-set!) ($$atom oper0) ($$atom 1) ($$atom node0))
         (($$atom for-each)
          (lambda (x0)
            (($$atom vector-set!) ($$atom x0) ($$atom 1) ($$atom node0)))
          ($$atom args0))
         ($$atom node0)))))
 (define new-call*
   (lambda (source0 decl0 oper0 args0)
     (begin
       (if ($$atom *ptree-port*)
           (if (($$atom ref?) ($$atom oper0))
               (let ((var0 (($$atom vector-ref) ($$atom oper0) ($$atom 6))))
                 (if (($$atom global?) ($$atom var0))
                     (let ((proc0 (($$atom standard-procedure)
                                   (($$atom vector-ref)
                                    ($$atom var0)
                                    ($$atom 1))
                                   (($$atom vector-ref)
                                    ($$atom oper0)
                                    ($$atom 4)))))
                       (if (if ($$atom proc0)
                               (($$atom not)
                                (let ((call-pat0 (($$atom cdr) ($$atom proc0)))
                                      (n0 (($$atom length) ($$atom args0))))
                                  (($$atom pattern-member?)
                                   ($$atom n0)
                                   ($$atom call-pat0))))
                               ($$atom #f))
                           (begin
                             (($$atom display)
                              ($$atom "*** WARNING -- \"")
                              ($$atom *ptree-port*))
                             (($$atom display)
                              (($$atom vector-ref) ($$atom var0) ($$atom 1))
                              ($$atom *ptree-port*))
                             (($$atom display)
                              ($$atom "\" is called with ")
                              ($$atom *ptree-port*))
                             (($$atom display)
                              (($$atom length) ($$atom args0))
                              ($$atom *ptree-port*))
                             (($$atom display)
                              ($$atom " argument(s).")
                              ($$atom *ptree-port*))
                             (($$atom newline) ($$atom *ptree-port*)))
                           ($$atom #f)))
                     ($$atom #f)))
               ($$atom #f))
           ($$atom #f))
       (($$atom new-call)
        ($$atom source0)
        ($$atom decl0)
        ($$atom oper0)
        ($$atom args0)))))
 (define app-oper
   (lambda (x0)
     (if (($$atom app?) ($$atom x0))
         (($$atom car) (($$atom vector-ref) ($$atom x0) ($$atom 2)))
         (($$atom compiler-internal-error)
          ($$atom "app-oper, 'call' node expected")
          ($$atom x0)))))
 (define app-args
   (lambda (x0)
     (if (($$atom app?) ($$atom x0))
         (($$atom cdr) (($$atom vector-ref) ($$atom x0) ($$atom 2)))
         (($$atom compiler-internal-error)
          ($$atom "app-args, 'call' node expected")
          ($$atom x0)))))
 (define oper-pos?
   (lambda (node0)
     (let ((parent0 (($$atom vector-ref) ($$atom node0) ($$atom 1))))
       (if ($$atom parent0)
           (if (($$atom app?) ($$atom parent0))
               (($$atom eq?)
                (($$atom app-oper) ($$atom parent0))
                ($$atom node0))
               ($$atom #f))
           ($$atom #f)))))
 (define new-fut
   (lambda (source0 decl0 val0)
     (let ((node0 (let ((children0 (($$atom list) ($$atom val0))))
                    (($$atom vector)
                     ($$atom fut-tag)
                     ($$atom #f)
                     ($$atom children0)
                     ($$atom #t)
                     ($$atom decl0)
                     ($$atom source0)))))
       (begin
         (($$atom vector-set!) ($$atom val0) ($$atom 1) ($$atom node0))
         ($$atom node0)))))
 (define fut-val
   (lambda (x0)
     (if (($$atom fut?) ($$atom x0))
         (($$atom car) (($$atom vector-ref) ($$atom x0) ($$atom 2)))
         (($$atom compiler-internal-error)
          ($$atom "fut-val, 'fut' node expected")
          ($$atom x0)))))
 (define new-disj-call
   (lambda (source0 decl0 pre0 oper0 alt0)
     (($$atom new-call*)
      ($$atom source0)
      ($$atom decl0)
      (let ((parms0 (($$atom new-temps) ($$atom source0) ($$atom '(temp)))))
        (let ((temp0 (($$atom car) ($$atom parms0))))
          (let ((body0 (($$atom new-tst)
                        ($$atom source0)
                        ($$atom decl0)
                        (($$atom new-ref)
                         ($$atom source0)
                         ($$atom decl0)
                         ($$atom temp0))
                        (($$atom new-call*)
                         ($$atom source0)
                         ($$atom decl0)
                         ($$atom oper0)
                         (($$atom list)
                          (($$atom new-ref)
                           ($$atom source0)
                           ($$atom decl0)
                           ($$atom temp0))))
                        ($$atom alt0))))
            (let ((node0 (let ((children0 (($$atom list) ($$atom body0))))
                           (($$atom vector)
                            ($$atom prc-tag)
                            ($$atom #f)
                            ($$atom children0)
                            ($$atom #t)
                            ($$atom decl0)
                            ($$atom source0)
                            ($$atom #f)
                            ($$atom 1)
                            ($$atom #f)
                            ($$atom parms0)))))
              (begin
                (($$atom for-each)
                 (lambda (x0)
                   (($$atom vector-set!)
                    ($$atom x0)
                    ($$atom 2)
                    ($$atom node0)))
                 ($$atom parms0))
                (($$atom vector-set!) ($$atom body0) ($$atom 1) ($$atom node0))
                ($$atom node0))))))
      (($$atom list) ($$atom pre0)))))
 (define new-seq
   (lambda (source0 decl0 before0 after0)
     (($$atom new-call*)
      ($$atom source0)
      ($$atom decl0)
      (($$atom new-prc)
       ($$atom source0)
       ($$atom decl0)
       ($$atom #f)
       ($$atom 1)
       ($$atom #f)
       (($$atom new-temps) ($$atom source0) ($$atom '(temp)))
       ($$atom after0))
      (($$atom list) ($$atom before0)))))
 (define new-let
   (lambda (ptree0 proc0 vars0 vals0 body0)
     (if (($$atom pair?) ($$atom vars0))
         (let ((args0 (($$atom reverse) ($$atom vals0)))
               (oper0 (($$atom new-prc)
                       (($$atom node-source) ($$atom proc0))
                       (($$atom node-decl) ($$atom proc0))
                       (($$atom prc-name) ($$atom proc0))
                       (($$atom length) ($$atom vars0))
                       ($$atom #f)
                       (($$atom reverse) ($$atom vars0))
                       ($$atom body0)))
               (decl0 (($$atom node-decl) ($$atom ptree0)))
               (source0 (($$atom vector-ref) ($$atom ptree0) ($$atom 5))))
           (let ((node0 (let ((children0
                               (($$atom cons) ($$atom oper0) ($$atom args0))))
                          (($$atom vector)
                           ($$atom app-tag)
                           ($$atom #f)
                           ($$atom children0)
                           ($$atom #t)
                           ($$atom decl0)
                           ($$atom source0)))))
             (begin
               (($$atom vector-set!) ($$atom oper0) ($$atom 1) ($$atom node0))
               (($$atom for-each)
                (lambda (x0)
                  (($$atom vector-set!) ($$atom x0) ($$atom 1) ($$atom node0)))
                ($$atom args0))
               ($$atom node0))))
         ($$atom body0))))
 (define new-temps
   (lambda (source0 names0)
     (if (($$atom null?) ($$atom names0))
         ($$atom '())
         (($$atom cons)
          (let ((name0 (($$atom car) ($$atom names0))))
            (($$atom vector)
             ($$atom var-tag)
             ($$atom name0)
             ($$atom #t)
             ($$atom '())
             ($$atom '())
             ($$atom source0)
             ($$atom #f)))
          (($$atom new-temps)
           ($$atom source0)
           (($$atom cdr) ($$atom names0)))))))
 (define new-variables
   (lambda (vars0)
     (if (($$atom null?) ($$atom vars0))
         ($$atom '())
         (($$atom cons)
          (let ((source0 (($$atom car) ($$atom vars0)))
                (name0 (let ((x0 (($$atom car) ($$atom vars0))))
                         (($$atom vector-ref) ($$atom x0) ($$atom 0)))))
            (($$atom vector)
             ($$atom var-tag)
             ($$atom name0)
             ($$atom #t)
             ($$atom '())
             ($$atom '())
             ($$atom source0)
             ($$atom #f)))
          (($$atom new-variables) (($$atom cdr) ($$atom vars0)))))))
 (define set-prc-names!
   (lambda (vars0 vals0)
     (letrec ((loop0 (lambda (vars1 vals1)
                       (if (($$atom null?) ($$atom vars1))
                           ($$atom #f)
                           (let ((val0 (($$atom car) ($$atom vals1)))
                                 (var0 (($$atom car) ($$atom vars1))))
                             (begin
                               (if (($$atom prc?) ($$atom val0))
                                   (let ((y0 (($$atom symbol->string)
                                              (($$atom vector-ref)
                                               ($$atom var0)
                                               ($$atom 1)))))
                                     (($$atom vector-set!)
                                      ($$atom val0)
                                      ($$atom 6)
                                      ($$atom y0)))
                                   ($$atom #f))
                               (($$atom loop0)
                                (($$atom cdr) ($$atom vars1))
                                (($$atom cdr) ($$atom vals1)))))))))
       (($$atom loop0) ($$atom vars0) ($$atom vals0)))))
 (define free-variables
   (lambda (node0)
     (begin
       (if (($$atom eq?)
            (($$atom vector-ref) ($$atom node0) ($$atom 3))
            ($$atom #t))
           (let ((x0 (($$atom apply)
                      ($$atom set-union)
                      (($$atom map)
                       ($$atom free-variables)
                       (($$atom vector-ref) ($$atom node0) ($$atom 2))))))
             (let ((y0 (if (if (($$atom vector?) ($$atom node0))
                               (if (($$atom >)
                                    (($$atom vector-length) ($$atom node0))
                                    ($$atom 0))
                                   (($$atom eq?)
                                    (($$atom vector-ref)
                                     ($$atom node0)
                                     ($$atom 0))
                                    ($$atom ref-tag))
                                   ($$atom #f))
                               ($$atom #f))
                           (if (let ((var0 (($$atom vector-ref)
                                            ($$atom node0)
                                            ($$atom 6))))
                                 (($$atom not)
                                  (($$atom vector-ref)
                                   ($$atom var0)
                                   ($$atom 2))))
                               ($$atom x0)
                               (let ((x#10 (($$atom vector-ref)
                                            ($$atom node0)
                                            ($$atom 6))))
                                 (if (($$atom memq) ($$atom x#10) ($$atom x0))
                                     ($$atom x0)
                                     (($$atom cons)
                                      ($$atom x#10)
                                      ($$atom x0)))))
                           (if (if (($$atom vector?) ($$atom node0))
                                   (if (($$atom >)
                                        (($$atom vector-length) ($$atom node0))
                                        ($$atom 0))
                                       (($$atom eq?)
                                        (($$atom vector-ref)
                                         ($$atom node0)
                                         ($$atom 0))
                                        ($$atom set-tag))
                                       ($$atom #f))
                                   ($$atom #f))
                               (if (let ((var0 (($$atom vector-ref)
                                                ($$atom node0)
                                                ($$atom 6))))
                                     (($$atom not)
                                      (($$atom vector-ref)
                                       ($$atom var0)
                                       ($$atom 2))))
                                   ($$atom x0)
                                   (let ((x#20 (($$atom vector-ref)
                                                ($$atom node0)
                                                ($$atom 6))))
                                     (if (($$atom memq)
                                          ($$atom x#20)
                                          ($$atom x0))
                                         ($$atom x0)
                                         (($$atom cons)
                                          ($$atom x#20)
                                          ($$atom x0)))))
                               (if (($$atom prc?) ($$atom node0))
                                   (($$atom set-difference)
                                    ($$atom x0)
                                    (let ((list0 (($$atom vector-ref)
                                                  ($$atom node0)
                                                  ($$atom 9))))
                                      ($$atom list0)))
                                   (if (if (($$atom app?) ($$atom node0))
                                           (($$atom prc?)
                                            (($$atom app-oper) ($$atom node0)))
                                           ($$atom #f))
                                       (($$atom set-difference)
                                        ($$atom x0)
                                        (let ((list0 (let ((x1 (($$atom app-oper)
                                                                ($$atom node0))))
                                                       (($$atom vector-ref)
                                                        ($$atom x1)
                                                        ($$atom 9)))))
                                          ($$atom list0)))
                                       ($$atom x0)))))))
               (($$atom vector-set!) ($$atom node0) ($$atom 3) ($$atom y0))))
           ($$atom #f))
       (($$atom vector-ref) ($$atom node0) ($$atom 3)))))
 (define bound-variables
   (lambda (node0)
     (let ((list0 (($$atom vector-ref) ($$atom node0) ($$atom 9))))
       ($$atom list0))))
 (define not-mutable?
   (lambda (var0)
     (let ((set0 (($$atom vector-ref) ($$atom var0) ($$atom 4))))
       (($$atom null?) ($$atom set0)))))
 (define mutable?
   (lambda (var0) (($$atom not) (($$atom not-mutable?) ($$atom var0)))))
 (define bound? (lambda (var0) (($$atom vector-ref) ($$atom var0) ($$atom 2))))
 (define global?
   (lambda (var0)
     (($$atom not) (($$atom vector-ref) ($$atom var0) ($$atom 2)))))
 (define global-val
   (lambda (var0)
     (if (($$atom global?) ($$atom var0))
         (let ((sets0 (let ((set0 (($$atom vector-ref)
                                   ($$atom var0)
                                   ($$atom 4))))
                        ($$atom set0))))
           (if (($$atom pair?) ($$atom sets0))
               (if (($$atom null?) (($$atom cdr) ($$atom sets0)))
                   (if (($$atom def?) (($$atom car) ($$atom sets0)))
                       (if (($$atom eq?)
                            (let ((decl0 (let ((x0 (($$atom car)
                                                    ($$atom sets0))))
                                           (($$atom vector-ref)
                                            ($$atom x0)
                                            ($$atom 4)))))
                              (($$atom declaration-value)
                               ($$atom 'compilation-strategy)
                               ($$atom #f)
                               ($$atom separate-sym)
                               ($$atom decl0)))
                            ($$atom block-sym))
                           (($$atom def-val) (($$atom car) ($$atom sets0)))
                           ($$atom #f))
                       ($$atom #f))
                   ($$atom #f))
               ($$atom #f)))
         ($$atom #f))))
 (define **not-sym (($$atom string->canonical-symbol) ($$atom "##NOT")))
 (define **quasi-append-sym
   (($$atom string->canonical-symbol) ($$atom "##QUASI-APPEND")))
 (define **quasi-list-sym
   (($$atom string->canonical-symbol) ($$atom "##QUASI-LIST")))
 (define **quasi-cons-sym
   (($$atom string->canonical-symbol) ($$atom "##QUASI-CONS")))
 (define **quasi-list->vector-sym
   (($$atom string->canonical-symbol) ($$atom "##QUASI-LIST->VECTOR")))
 (define **case-memv-sym
   (($$atom string->canonical-symbol) ($$atom "##CASE-MEMV")))
 (define **unassigned?-sym
   (($$atom string->canonical-symbol) ($$atom "##UNASSIGNED?")))
 (define **make-cell-sym
   (($$atom string->canonical-symbol) ($$atom "##MAKE-CELL")))
 (define **cell-ref-sym
   (($$atom string->canonical-symbol) ($$atom "##CELL-REF")))
 (define **cell-set!-sym
   (($$atom string->canonical-symbol) ($$atom "##CELL-SET!")))
 (define **make-placeholder-sym
   (($$atom string->canonical-symbol) ($$atom "##MAKE-PLACEHOLDER")))
 (define ieee-scheme-sym
   (($$atom string->canonical-symbol) ($$atom "IEEE-SCHEME")))
 (define r4rs-scheme-sym
   (($$atom string->canonical-symbol) ($$atom "R4RS-SCHEME")))
 (define multilisp-sym
   (($$atom string->canonical-symbol) ($$atom "MULTILISP")))
 (define lambda-lift-sym
   (($$atom string->canonical-symbol) ($$atom "LAMBDA-LIFT")))
 (define block-sym (($$atom string->canonical-symbol) ($$atom "BLOCK")))
 (define separate-sym (($$atom string->canonical-symbol) ($$atom "SEPARATE")))
 (define standard-bindings-sym
   (($$atom string->canonical-symbol) ($$atom "STANDARD-BINDINGS")))
 (define extended-bindings-sym
   (($$atom string->canonical-symbol) ($$atom "EXTENDED-BINDINGS")))
 (define safe-sym (($$atom string->canonical-symbol) ($$atom "SAFE")))
 (define interrupts-enabled-sym
   (($$atom string->canonical-symbol) ($$atom "INTERRUPTS-ENABLED")))
 (($$atom define-flag-decl) ($$atom ieee-scheme-sym) ($$atom 'dialect))
 (($$atom define-flag-decl) ($$atom r4rs-scheme-sym) ($$atom 'dialect))
 (($$atom define-flag-decl) ($$atom multilisp-sym) ($$atom 'dialect))
 (($$atom define-boolean-decl) ($$atom lambda-lift-sym))
 (($$atom define-flag-decl) ($$atom block-sym) ($$atom 'compilation-strategy))
 (($$atom define-flag-decl)
  ($$atom separate-sym)
  ($$atom 'compilation-strategy))
 (($$atom define-namable-boolean-decl) ($$atom standard-bindings-sym))
 (($$atom define-namable-boolean-decl) ($$atom extended-bindings-sym))
 (($$atom define-boolean-decl) ($$atom safe-sym))
 (($$atom define-boolean-decl) ($$atom interrupts-enabled-sym))
 (define scheme-dialect
   (lambda (decl0)
     (($$atom declaration-value)
      ($$atom 'dialect)
      ($$atom #f)
      ($$atom ieee-scheme-sym)
      ($$atom decl0))))
 (define lambda-lift?
   (lambda (decl0)
     (($$atom declaration-value)
      ($$atom lambda-lift-sym)
      ($$atom #f)
      ($$atom #t)
      ($$atom decl0))))
 (define compilation-strategy
   (lambda (decl0)
     (($$atom declaration-value)
      ($$atom 'compilation-strategy)
      ($$atom #f)
      ($$atom separate-sym)
      ($$atom decl0))))
 (define standard-binding?
   (lambda (name0 decl0)
     (($$atom declaration-value)
      ($$atom standard-bindings-sym)
      ($$atom name0)
      ($$atom #f)
      ($$atom decl0))))
 (define extended-binding?
   (lambda (name0 decl0)
     (($$atom declaration-value)
      ($$atom extended-bindings-sym)
      ($$atom name0)
      ($$atom #f)
      ($$atom decl0))))
 (define add-extended-bindings
   (lambda (decl0)
     (let ((d0 (($$atom list) ($$atom extended-bindings-sym) ($$atom #t))))
       (($$atom env-declare) ($$atom decl0) ($$atom d0)))))
 (define intrs-enabled?
   (lambda (decl0)
     (($$atom declaration-value)
      ($$atom interrupts-enabled-sym)
      ($$atom #f)
      ($$atom #t)
      ($$atom decl0))))
 (define add-not-interrupts-enabled
   (lambda (decl0)
     (let ((d0 (($$atom list) ($$atom interrupts-enabled-sym) ($$atom #f))))
       (($$atom env-declare) ($$atom decl0) ($$atom d0)))))
 (define safe?
   (lambda (decl0)
     (($$atom declaration-value)
      ($$atom safe-sym)
      ($$atom #f)
      ($$atom #f)
      ($$atom decl0))))
 (define add-not-safe
   (lambda (decl0)
     (let ((d0 (($$atom list) ($$atom safe-sym) ($$atom #f))))
       (($$atom env-declare) ($$atom decl0) ($$atom d0)))))
 (define dialect-specific-keywords
   (lambda (dialect0)
     (if (($$atom eq?) ($$atom dialect0) ($$atom ieee-scheme-sym))
         ($$atom '())
         (if (($$atom eq?) ($$atom dialect0) ($$atom r4rs-scheme-sym))
             ($$atom r4rs-scheme-specific-keywords)
             (if (($$atom eq?) ($$atom dialect0) ($$atom multilisp-sym))
                 ($$atom multilisp-specific-keywords)
                 (($$atom compiler-internal-error)
                  ($$atom "dialect-specific-keywords, unknown dialect")
                  ($$atom dialect0)))))))
 (define dialect-specific-procedures
   (lambda (dialect0)
     (if (($$atom eq?) ($$atom dialect0) ($$atom ieee-scheme-sym))
         ($$atom ieee-scheme-specific-procedures)
         (if (($$atom eq?) ($$atom dialect0) ($$atom r4rs-scheme-sym))
             ($$atom r4rs-scheme-specific-procedures)
             (if (($$atom eq?) ($$atom dialect0) ($$atom multilisp-sym))
                 ($$atom multilisp-specific-procedures)
                 (($$atom compiler-internal-error)
                  ($$atom "dialect-specific-procedures, unknown dialect")
                  ($$atom dialect0)))))))
 (define make-standard-procedure
   (lambda (x0)
     (($$atom cons)
      (($$atom string->canonical-symbol) (($$atom car) ($$atom x0)))
      (($$atom cdr) ($$atom x0)))))
 (define standard-procedure
   (lambda (name0 decl0)
     (let ((g400 (($$atom assq)
                  ($$atom name0)
                  (($$atom dialect-specific-procedures)
                   (($$atom scheme-dialect) ($$atom decl0))))))
       (if ($$atom g400)
           ($$atom g400)
           (($$atom assq) ($$atom name0) ($$atom common-procedures))))))
 (define standard-procedure-call-pattern
   (lambda (proc0) (($$atom cdr) ($$atom proc0))))
 (define ieee-scheme-specific-keywords ($$atom '()))
 (define ieee-scheme-specific-procedures
   (($$atom map) ($$atom make-standard-procedure) ($$atom '())))
 (define r4rs-scheme-specific-keywords (($$atom list) ($$atom delay-sym)))
 (define r4rs-scheme-specific-procedures
   (($$atom map)
    ($$atom make-standard-procedure)
    ($$atom '(("LIST-TAIL" 2)
              ("-" . 1)
              ("/" . 1)
              ("STRING->LIST" 1)
              ("LIST->STRING" 1)
              ("STRING-COPY" 1)
              ("STRING-FILL!" 2)
              ("VECTOR->LIST" 1)
              ("LIST->VECTOR" 1)
              ("VECTOR-FILL!" 2)
              ("FORCE" 1)
              ("WITH-INPUT-FROM-FILE" 2)
              ("WITH-OUTPUT-TO-FILE" 2)
              ("CHAR-READY?" 0 1)
              ("LOAD" 1)
              ("TRANSCRIPT-ON" 1)
              ("TRANSCRIPT-OFF" 0)))))
 (define multilisp-specific-keywords
   (($$atom list) ($$atom delay-sym) ($$atom future-sym)))
 (define multilisp-specific-procedures
   (($$atom map)
    ($$atom make-standard-procedure)
    ($$atom '(("FORCE" 1) ("TOUCH" 1)))))
 (define common-keywords
   (($$atom list)
    ($$atom quote-sym)
    ($$atom quasiquote-sym)
    ($$atom unquote-sym)
    ($$atom unquote-splicing-sym)
    ($$atom lambda-sym)
    ($$atom if-sym)
    ($$atom set!-sym)
    ($$atom cond-sym)
    ($$atom =>-sym)
    ($$atom else-sym)
    ($$atom and-sym)
    ($$atom or-sym)
    ($$atom case-sym)
    ($$atom let-sym)
    ($$atom let*-sym)
    ($$atom letrec-sym)
    ($$atom begin-sym)
    ($$atom do-sym)
    ($$atom define-sym)
    ($$atom **define-macro-sym)
    ($$atom **declare-sym)
    ($$atom **include-sym)))
 (define common-procedures
   (($$atom map)
    ($$atom make-standard-procedure)
    ($$atom '(("NOT" 1)
              ("BOOLEAN?" 1)
              ("EQV?" 2)
              ("EQ?" 2)
              ("EQUAL?" 2)
              ("PAIR?" 1)
              ("CONS" 2)
              ("CAR" 1)
              ("CDR" 1)
              ("SET-CAR!" 2)
              ("SET-CDR!" 2)
              ("CAAR" 1)
              ("CADR" 1)
              ("CDAR" 1)
              ("CDDR" 1)
              ("CAAAR" 1)
              ("CAADR" 1)
              ("CADAR" 1)
              ("CADDR" 1)
              ("CDAAR" 1)
              ("CDADR" 1)
              ("CDDAR" 1)
              ("CDDDR" 1)
              ("CAAAAR" 1)
              ("CAAADR" 1)
              ("CAADAR" 1)
              ("CAADDR" 1)
              ("CADAAR" 1)
              ("CADADR" 1)
              ("CADDAR" 1)
              ("CADDDR" 1)
              ("CDAAAR" 1)
              ("CDAADR" 1)
              ("CDADAR" 1)
              ("CDADDR" 1)
              ("CDDAAR" 1)
              ("CDDADR" 1)
              ("CDDDAR" 1)
              ("CDDDDR" 1)
              ("NULL?" 1)
              ("LIST?" 1)
              ("LIST" . 0)
              ("LENGTH" 1)
              ("APPEND" . 0)
              ("REVERSE" 1)
              ("LIST-REF" 2)
              ("MEMQ" 2)
              ("MEMV" 2)
              ("MEMBER" 2)
              ("ASSQ" 2)
              ("ASSV" 2)
              ("ASSOC" 2)
              ("SYMBOL?" 1)
              ("SYMBOL->STRING" 1)
              ("STRING->SYMBOL" 1)
              ("NUMBER?" 1)
              ("COMPLEX?" 1)
              ("REAL?" 1)
              ("RATIONAL?" 1)
              ("INTEGER?" 1)
              ("EXACT?" 1)
              ("INEXACT?" 1)
              ("=" . 2)
              ("<" . 2)
              (">" . 2)
              ("<=" . 2)
              (">=" . 2)
              ("ZERO?" 1)
              ("POSITIVE?" 1)
              ("NEGATIVE?" 1)
              ("ODD?" 1)
              ("EVEN?" 1)
              ("MAX" . 1)
              ("MIN" . 1)
              ("+" . 0)
              ("*" . 0)
              ("-" 1 2)
              ("/" 1 2)
              ("ABS" 1)
              ("QUOTIENT" 2)
              ("REMAINDER" 2)
              ("MODULO" 2)
              ("GCD" . 0)
              ("LCM" . 0)
              ("NUMERATOR" 1)
              ("DENOMINATOR" 1)
              ("FLOOR" 1)
              ("CEILING" 1)
              ("TRUNCATE" 1)
              ("ROUND" 1)
              ("RATIONALIZE" 2)
              ("EXP" 1)
              ("LOG" 1)
              ("SIN" 1)
              ("COS" 1)
              ("TAN" 1)
              ("ASIN" 1)
              ("ACOS" 1)
              ("ATAN" 1 2)
              ("SQRT" 1)
              ("EXPT" 2)
              ("MAKE-RECTANGULAR" 2)
              ("MAKE-POLAR" 2)
              ("REAL-PART" 1)
              ("IMAG-PART" 1)
              ("MAGNITUDE" 1)
              ("ANGLE" 1)
              ("EXACT->INEXACT" 1)
              ("INEXACT->EXACT" 1)
              ("NUMBER->STRING" 1 2)
              ("STRING->NUMBER" 1 2)
              ("CHAR?" 1)
              ("CHAR=?" 2)
              ("CHAR<?" 2)
              ("CHAR>?" 2)
              ("CHAR<=?" 2)
              ("CHAR>=?" 2)
              ("CHAR-CI=?" 2)
              ("CHAR-CI<?" 2)
              ("CHAR-CI>?" 2)
              ("CHAR-CI<=?" 2)
              ("CHAR-CI>=?" 2)
              ("CHAR-ALPHABETIC?" 1)
              ("CHAR-NUMERIC?" 1)
              ("CHAR-WHITESPACE?" 1)
              ("CHAR-UPPER-CASE?" 1)
              ("CHAR-LOWER-CASE?" 1)
              ("CHAR->INTEGER" 1)
              ("INTEGER->CHAR" 1)
              ("CHAR-UPCASE" 1)
              ("CHAR-DOWNCASE" 1)
              ("STRING?" 1)
              ("MAKE-STRING" 1 2)
              ("STRING" . 0)
              ("STRING-LENGTH" 1)
              ("STRING-REF" 2)
              ("STRING-SET!" 3)
              ("STRING=?" 2)
              ("STRING<?" 2)
              ("STRING>?" 2)
              ("STRING<=?" 2)
              ("STRING>=?" 2)
              ("STRING-CI=?" 2)
              ("STRING-CI<?" 2)
              ("STRING-CI>?" 2)
              ("STRING-CI<=?" 2)
              ("STRING-CI>=?" 2)
              ("SUBSTRING" 3)
              ("STRING-APPEND" . 0)
              ("VECTOR?" 1)
              ("MAKE-VECTOR" 1 2)
              ("VECTOR" . 0)
              ("VECTOR-LENGTH" 1)
              ("VECTOR-REF" 2)
              ("VECTOR-SET!" 3)
              ("PROCEDURE?" 1)
              ("APPLY" . 2)
              ("MAP" . 2)
              ("FOR-EACH" . 2)
              ("CALL-WITH-CURRENT-CONTINUATION" 1)
              ("CALL-WITH-INPUT-FILE" 2)
              ("CALL-WITH-OUTPUT-FILE" 2)
              ("INPUT-PORT?" 1)
              ("OUTPUT-PORT?" 1)
              ("CURRENT-INPUT-PORT" 0)
              ("CURRENT-OUTPUT-PORT" 0)
              ("OPEN-INPUT-FILE" 1)
              ("OPEN-OUTPUT-FILE" 1)
              ("CLOSE-INPUT-PORT" 1)
              ("CLOSE-OUTPUT-PORT" 1)
              ("EOF-OBJECT?" 1)
              ("READ" 0 1)
              ("READ-CHAR" 0 1)
              ("PEEK-CHAR" 0 1)
              ("WRITE" 1 2)
              ("DISPLAY" 1 2)
              ("NEWLINE" 0 1)
              ("WRITE-CHAR" 1 2)))))
 (define parse-program
   (lambda (program0 env0 module-name0 proc0)
     (letrec ((parse-prog0
               (lambda (program1 env1 lst0 proc1)
                 (if (($$atom null?) ($$atom program1))
                     (($$atom proc1)
                      (($$atom reverse) ($$atom lst0))
                      ($$atom env1))
                     (let ((source0 (($$atom car) ($$atom program1))))
                       (if (($$atom macro-expr?)
                            ($$atom source0)
                            ($$atom env1))
                           (($$atom parse-prog0)
                            (($$atom cons)
                             (($$atom macro-expand)
                              ($$atom source0)
                              ($$atom env1))
                             (($$atom cdr) ($$atom program1)))
                            ($$atom env1)
                            ($$atom lst0)
                            ($$atom proc1))
                           (if (($$atom begin-defs-expr?) ($$atom source0))
                               (($$atom parse-prog0)
                                (($$atom ##append-two)
                                 (($$atom begin-defs-body) ($$atom source0))
                                 (($$atom cdr) ($$atom program1)))
                                ($$atom env1)
                                ($$atom lst0)
                                ($$atom proc1))
                               (if (($$atom include-expr?) ($$atom source0))
                                   (begin
                                     (if ($$atom *ptree-port*)
                                         (($$atom display)
                                          ($$atom "  ")
                                          ($$atom *ptree-port*))
                                         ($$atom #f))
                                     (let ((x0 (($$atom file->sources*)
                                                (($$atom include-filename)
                                                 ($$atom source0))
                                                ($$atom *ptree-port*)
                                                (($$atom vector-ref)
                                                 ($$atom source0)
                                                 ($$atom 1)))))
                                       (begin
                                         (if ($$atom *ptree-port*)
                                             (($$atom newline)
                                              ($$atom *ptree-port*))
                                             ($$atom #f))
                                         (($$atom parse-prog0)
                                          (($$atom ##append-two)
                                           ($$atom x0)
                                           (($$atom cdr) ($$atom program1)))
                                          ($$atom env1)
                                          ($$atom lst0)
                                          ($$atom proc1)))))
                                   (if (($$atom define-macro-expr?)
                                        ($$atom source0)
                                        ($$atom env1))
                                       (begin
                                         (if ($$atom *ptree-port*)
                                             (begin
                                               (($$atom display)
                                                ($$atom "  \"macro\"")
                                                ($$atom *ptree-port*))
                                               (($$atom newline)
                                                ($$atom *ptree-port*)))
                                             ($$atom #f))
                                         (($$atom parse-prog0)
                                          (($$atom cdr) ($$atom program1))
                                          (($$atom add-macro)
                                           ($$atom source0)
                                           ($$atom env1))
                                          ($$atom lst0)
                                          ($$atom proc1)))
                                       (if (($$atom declare-expr?)
                                            ($$atom source0))
                                           (begin
                                             (if ($$atom *ptree-port*)
                                                 (begin
                                                   (($$atom display)
                                                    ($$atom "  \"decl\"")
                                                    ($$atom *ptree-port*))
                                                   (($$atom newline)
                                                    ($$atom *ptree-port*)))
                                                 ($$atom #f))
                                             (($$atom parse-prog0)
                                              (($$atom cdr) ($$atom program1))
                                              (($$atom add-declarations)
                                               ($$atom source0)
                                               ($$atom env1))
                                              ($$atom lst0)
                                              ($$atom proc1)))
                                           (if (($$atom define-expr?)
                                                ($$atom source0)
                                                ($$atom env1))
                                               (let ((var**0 (($$atom definition-variable)
                                                              ($$atom source0))))
                                                 (let ((var*0 (($$atom vector-ref)
                                                               ($$atom var**0)
                                                               ($$atom 0))))
                                                   (let ((var0 (($$atom env-lookup-var)
                                                                ($$atom env1)
                                                                ($$atom var*0)
                                                                ($$atom var**0))))
                                                     (begin
                                                       (if ($$atom *ptree-port*)
                                                           (begin
                                                             (($$atom display)
                                                              ($$atom "  ")
                                                              ($$atom *ptree-port*))
                                                             (($$atom display)
                                                              (($$atom vector-ref)
                                                               ($$atom var0)
                                                               ($$atom 1))
                                                              ($$atom *ptree-port*))
                                                             (($$atom newline)
                                                              ($$atom *ptree-port*)))
                                                           ($$atom #f))
                                                       (let ((node0 (($$atom pt)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                             (($$atom definition-value) ($$atom source0))
                             ($$atom env1)
                             ($$atom 'true))))
                 (begin
                   (($$atom set-prc-names!)
                    (($$atom list) ($$atom var0))
                    (($$atom list) ($$atom node0)))
                   (($$atom parse-prog0)
                    (($$atom cdr) ($$atom program1))
                    ($$atom env1)
                    (($$atom cons)
                     (($$atom cons)
                      (($$atom new-def)
                       ($$atom source0)
                       ($$atom env1)
                       ($$atom var0)
                       ($$atom node0))
                      ($$atom env1))
                     ($$atom lst0))
                    ($$atom proc1))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                               (if (($$atom c-declaration-expr?)
                                                    ($$atom source0))
                                                   (begin
                                                     (if ($$atom *ptree-port*)
                                                         (begin
                                                           (($$atom display)
                                                            ($$atom "  \"c-decl\"")
                                                            ($$atom *ptree-port*))
                                                           (($$atom newline)
                                                            ($$atom *ptree-port*)))
                                                         ($$atom #f))
                                                     (let ((declaration-string0
                                                            (let ((x0 (($$atom car)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                               (($$atom cdr)
                                (($$atom source-code) ($$atom source0))))))
                      (($$atom vector-ref) ($$atom x0) ($$atom 0)))))
               (begin
                 (set! c-interface-decls
                       (($$atom cons)
                        ($$atom declaration-string0)
                        ($$atom c-interface-decls)))
                 ($$atom #f)))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                     (($$atom parse-prog0)
                                                      (($$atom cdr)
                                                       ($$atom program1))
                                                      ($$atom env1)
                                                      ($$atom lst0)
                                                      ($$atom proc1)))
                                                   (if (($$atom c-init-expr?)
                                                        ($$atom source0))
                                                       (begin
                                                         (if ($$atom *ptree-port*)
                                                             (begin
                                                               (($$atom display)
                                                                ($$atom "  \"c-init\"")
                                                                ($$atom *ptree-port*))
                                                               (($$atom newline)
                                                                ($$atom *ptree-port*)))
                                                             ($$atom #f))
                                                         (let ((initialization-code-string0
                                                                (let ((x0 (($$atom car)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                   (($$atom cdr)
                                    (($$atom source-code) ($$atom source0))))))
                          (($$atom vector-ref) ($$atom x0) ($$atom 0)))))
                   (begin
                     (set! c-interface-inits
                           (($$atom cons)
                            ($$atom initialization-code-string0)
                            ($$atom c-interface-inits)))
                     ($$atom #f)))
                 (($$atom parse-prog0)
                  (($$atom cdr) ($$atom program1))
                  ($$atom env1)
                  ($$atom lst0)
                  ($$atom proc1)))
               (begin
                 (if ($$atom *ptree-port*)
                     (begin
                       (($$atom display)
                        ($$atom "  \"expr\"")
                        ($$atom *ptree-port*))
                       (($$atom newline) ($$atom *ptree-port*)))
                     ($$atom #f))
                 (($$atom parse-prog0)
                  (($$atom cdr) ($$atom program1))
                  ($$atom env1)
                  (($$atom cons)
                   (($$atom cons)
                    (($$atom pt) ($$atom source0) ($$atom env1) ($$atom 'true))
                    ($$atom env1))
                   ($$atom lst0))
                  ($$atom proc1))))))))))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
       (begin
         (if ($$atom *ptree-port*)
             (begin
               (($$atom display) ($$atom "Parsing:") ($$atom *ptree-port*))
               (($$atom newline) ($$atom *ptree-port*)))
             ($$atom #f))
         (($$atom c-interface-begin) ($$atom module-name0))
         (($$atom parse-prog0)
          ($$atom program0)
          ($$atom env0)
          ($$atom '())
          (lambda (lst0 env1)
            (begin
              (if ($$atom *ptree-port*)
                  (($$atom newline) ($$atom *ptree-port*))
                  ($$atom #f))
              (($$atom proc0)
               ($$atom lst0)
               ($$atom env1)
               (($$atom c-interface-end))))))))))
 (define c-interface-begin
   (lambda (module-name0)
     (begin
       (set! c-interface-module-name ($$atom module-name0))
       (set! c-interface-proc-count ($$atom 0))
       (set! c-interface-decls ($$atom '()))
       (set! c-interface-procs ($$atom '()))
       (set! c-interface-inits ($$atom '()))
       ($$atom #f))))
 (define c-interface-end
   (lambda ()
     (let ((i0 (let ((inits0 (($$atom reverse) ($$atom c-interface-inits)))
                     (procs0 (($$atom reverse) ($$atom c-interface-procs)))
                     (decls0 (($$atom reverse) ($$atom c-interface-decls))))
                 (($$atom vector)
                  ($$atom decls0)
                  ($$atom procs0)
                  ($$atom inits0)))))
       (begin
         (set! c-interface-module-name ($$atom #f))
         (set! c-interface-proc-count ($$atom #f))
         (set! c-interface-decls ($$atom #f))
         (set! c-interface-procs ($$atom #f))
         (set! c-interface-inits ($$atom #f))
         ($$atom i0)))))
 (define c-interface-module-name ($$atom #f))
 (define c-interface-proc-count ($$atom #f))
 (define c-interface-decls ($$atom #f))
 (define c-interface-procs ($$atom #f))
 (define c-interface-inits ($$atom #f))
 (define make-c-intf
   (lambda (decls0 procs0 inits0)
     (($$atom vector) ($$atom decls0) ($$atom procs0) ($$atom inits0))))
 (define c-intf-decls
   (lambda (c-intf0) (($$atom vector-ref) ($$atom c-intf0) ($$atom 0))))
 (define c-intf-decls-set!
   (lambda (c-intf0 x0)
     (($$atom vector-set!) ($$atom c-intf0) ($$atom 0) ($$atom x0))))
 (define c-intf-procs
   (lambda (c-intf0) (($$atom vector-ref) ($$atom c-intf0) ($$atom 1))))
 (define c-intf-procs-set!
   (lambda (c-intf0 x0)
     (($$atom vector-set!) ($$atom c-intf0) ($$atom 1) ($$atom x0))))
 (define c-intf-inits
   (lambda (c-intf0) (($$atom vector-ref) ($$atom c-intf0) ($$atom 2))))
 (define c-intf-inits-set!
   (lambda (c-intf0 x0)
     (($$atom vector-set!) ($$atom c-intf0) ($$atom 2) ($$atom x0))))
 (define c-declaration-expr?
   (lambda (source0)
     (if (($$atom mymatch)
          ($$atom **c-declaration-sym)
          ($$atom 1)
          ($$atom source0))
         (let ((code0 (($$atom vector-ref) ($$atom source0) ($$atom 0))))
           (let ((g410 (($$atom string?)
                        (let ((x0 (($$atom car)
                                   (($$atom cdr) ($$atom code0)))))
                          (($$atom vector-ref) ($$atom x0) ($$atom 0))))))
             (if ($$atom g410)
                 ($$atom g410)
                 (($$atom pt-syntax-error)
                  ($$atom source0)
                  ($$atom "Argument to '##c-declaration' must be a string")))))
         ($$atom #f))))
 (define c-init-expr?
   (lambda (source0)
     (if (($$atom mymatch) ($$atom **c-init-sym) ($$atom 1) ($$atom source0))
         (let ((code0 (($$atom vector-ref) ($$atom source0) ($$atom 0))))
           (let ((g420 (($$atom string?)
                        (let ((x0 (($$atom car)
                                   (($$atom cdr) ($$atom code0)))))
                          (($$atom vector-ref) ($$atom x0) ($$atom 0))))))
             (if ($$atom g420)
                 ($$atom g420)
                 (($$atom pt-syntax-error)
                  ($$atom source0)
                  ($$atom "Argument to '##c-init' must be a string")))))
         ($$atom #f))))
 (define c-procedure-expr?
   (lambda (source0)
     (if (($$atom mymatch)
          ($$atom **c-procedure-sym)
          ($$atom 3)
          ($$atom source0))
         (let ((code0 (($$atom vector-ref) ($$atom source0) ($$atom 0))))
           (if (($$atom string?)
                (let ((x0 (($$atom car)
                           (($$atom cdr)
                            (($$atom cdr) (($$atom cdr) ($$atom code0)))))))
                  (($$atom vector-ref) ($$atom x0) ($$atom 0))))
               (($$atom check-arg-and-result-types)
                ($$atom source0)
                (($$atom car) (($$atom cdr) ($$atom code0)))
                (($$atom car) (($$atom cdr) (($$atom cdr) ($$atom code0)))))
               (($$atom pt-syntax-error)
                ($$atom source0)
                ($$atom "Last argument to '##c-procedure' must be a string"))))
         ($$atom #f))))
 (define scheme-to-c-notation
   (($$atom list)
    (($$atom list) ($$atom void-sym) ($$atom "VOID") ($$atom "void"))
    (($$atom list) ($$atom char-sym) ($$atom "CHAR") ($$atom "char"))
    (($$atom list)
     ($$atom signed-char-sym)
     ($$atom "SCHAR")
     ($$atom "signed char"))
    (($$atom list)
     ($$atom unsigned-char-sym)
     ($$atom "UCHAR")
     ($$atom "unsigned char"))
    (($$atom list) ($$atom short-sym) ($$atom "SHORT") ($$atom "short"))
    (($$atom list)
     ($$atom unsigned-short-sym)
     ($$atom "USHORT")
     ($$atom "unsigned short"))
    (($$atom list) ($$atom int-sym) ($$atom "INT") ($$atom "int"))
    (($$atom list)
     ($$atom unsigned-int-sym)
     ($$atom "UINT")
     ($$atom "unsigned int"))
    (($$atom list) ($$atom long-sym) ($$atom "LONG") ($$atom "long"))
    (($$atom list)
     ($$atom unsigned-long-sym)
     ($$atom "ULONG")
     ($$atom "unsigned long"))
    (($$atom list) ($$atom float-sym) ($$atom "FLOAT") ($$atom "float"))
    (($$atom list) ($$atom double-sym) ($$atom "DOUBLE") ($$atom "double"))
    (($$atom list) ($$atom pointer-sym) ($$atom "POINTER") ($$atom "void*"))
    (($$atom list) ($$atom boolean-sym) ($$atom "BOOLEAN") ($$atom "int"))
    (($$atom list) ($$atom string-sym) ($$atom "STRING") ($$atom "char*"))
    (($$atom list)
     ($$atom scheme-object-sym)
     ($$atom "SCMOBJ")
     ($$atom "long"))))
 (define convert-type
   (lambda (typ0)
     (if (($$atom assq) ($$atom typ0) ($$atom scheme-to-c-notation))
         ($$atom typ0)
         ($$atom #f))))
 (define check-arg-and-result-types
   (lambda (source0 arg-typs-source0 res-typ-source0)
     (let ((res-typ0 (($$atom vector-ref) ($$atom res-typ-source0) ($$atom 0)))
           (arg-typs0
            (($$atom vector-ref) ($$atom arg-typs-source0) ($$atom 0))))
       (let ((res-type0 (($$atom convert-type) ($$atom res-typ0))))
         (if ($$atom res-type0)
             (if (($$atom proper-length) ($$atom arg-typs0))
                 (letrec ((loop0 (lambda (lst0)
                                   (if (($$atom pair?) ($$atom lst0))
                                       (let ((arg-typ0
                                              (let ((x0 (($$atom car)
                                                         ($$atom lst0))))
                                                (($$atom vector-ref)
                                                 ($$atom x0)
                                                 ($$atom 0)))))
                                         (let ((arg-type0
                                                (($$atom convert-type)
                                                 ($$atom arg-typ0))))
                                           (if (let ((g430 (($$atom not)
                                                            ($$atom arg-type0))))
                                                 (if ($$atom g430)
                                                     ($$atom g430)
                                                     (($$atom eq?)
                                                      ($$atom arg-type0)
                                                      ($$atom void-sym))))
                                               (($$atom pt-syntax-error)
                                                (($$atom car) ($$atom lst0))
                                                ($$atom "Invalid argument type"))
                                               (($$atom loop0)
                                                (($$atom cdr)
                                                 ($$atom lst0))))))
                                       ($$atom #t)))))
                   (($$atom loop0) ($$atom arg-typs0)))
                 (($$atom pt-syntax-error)
                  ($$atom arg-typs-source0)
                  ($$atom "Ill-terminated argument type list")))
             (($$atom pt-syntax-error)
              ($$atom res-typ-source0)
              ($$atom "Invalid result type")))))))
 (define add-c-declaration
   (lambda (declaration-string0)
     (begin
       (set! c-interface-decls
             (($$atom cons)
              ($$atom declaration-string0)
              ($$atom c-interface-decls)))
       ($$atom #f))))
 (define add-c-init
   (lambda (initialization-code-string0)
     (begin
       (set! c-interface-inits
             (($$atom cons)
              ($$atom initialization-code-string0)
              ($$atom c-interface-inits)))
       ($$atom #f))))
 (define add-c-proc
   (lambda (scheme-name0 c-name0 arity0 def0)
     (begin
       (set! c-interface-procs
             (($$atom cons)
              (($$atom vector)
               ($$atom scheme-name0)
               ($$atom c-name0)
               ($$atom arity0)
               ($$atom def0))
              ($$atom c-interface-procs)))
       ($$atom #f))))
 (define pt-c-procedure
   (lambda (source0 env0 use0)
     (let ((code0 (($$atom vector-ref) ($$atom source0) ($$atom 0))))
       (let ((name0 (($$atom build-c-procedure)
                     (($$atom map)
                      ($$atom source-code)
                      (let ((x0 (($$atom car) (($$atom cdr) ($$atom code0)))))
                        (($$atom vector-ref) ($$atom x0) ($$atom 0))))
                     (let ((x0 (($$atom car)
                                (($$atom cdr) (($$atom cdr) ($$atom code0))))))
                       (($$atom vector-ref) ($$atom x0) ($$atom 0)))
                     (let ((x0 (($$atom car)
                                (($$atom cdr)
                                 (($$atom cdr)
                                  (($$atom cdr) ($$atom code0)))))))
                       (($$atom vector-ref) ($$atom x0) ($$atom 0))))))
         (($$atom new-ref)
          ($$atom source0)
          ($$atom env0)
          (($$atom env-lookup-global-var)
           ($$atom env0)
           (($$atom string->symbol) ($$atom name0))))))))
 (define build-c-procedure
   (lambda (argument-types0 result-type0 proc-name-or-code0)
     (let ((c-arg-var0
            (lambda (t0)
              (($$atom string-append)
               ($$atom "___")
               ($$atom "arg")
               (($$atom number->string) (($$atom cdr) ($$atom t0))))))
           (c-type-name0
            (lambda (typ0)
              (($$atom car)
               (($$atom cdr)
                (($$atom assq) ($$atom typ0) ($$atom scheme-to-c-notation))))))
           (c-arg-prefix0 ($$atom "arg"))
           (nl0 (($$atom string) ($$atom #\newline)))
           (proc-name?0
            (letrec ((loop0 (lambda (proc-name-or-code1 i0)
                              (if (($$atom >=) ($$atom i0) ($$atom 0))
                                  (let ((c0 (($$atom string-ref)
                                             ($$atom proc-name-or-code1)
                                             ($$atom i0))))
                                    (if (let ((g440 (($$atom char-alphabetic?>)
                                                     ($$atom c0))))
                                          (if ($$atom g440)
                                              ($$atom g440)
                                              (($$atom char=?)
                                               ($$atom c0)
                                               ($$atom #\_))))
                                        (($$atom loop0)
                                         ($$atom proc-name-or-code1)
                                         (($$atom -) ($$atom i0) ($$atom 1)))
                                        ($$atom #f)))
                                  ($$atom #t)))))
              (($$atom loop0)
               ($$atom proc-name-or-code0)
               (($$atom -)
                (($$atom string-length) ($$atom proc-name-or-code0))
                ($$atom 1))))))
       (letrec ((loop0 (lambda (argument-types1
                                result-type1
                                proc-name-or-code1
                                c-arg-var1
                                nl1
                                proc-name?1
                                i0
                                lst10
                                lst20)
                         (if (($$atom pair?) ($$atom lst10))
                             (($$atom loop0)
                              ($$atom argument-types1)
                              ($$atom result-type1)
                              ($$atom proc-name-or-code1)
                              ($$atom c-arg-var1)
                              ($$atom nl1)
                              ($$atom proc-name?1)
                              (($$atom +) ($$atom i0) ($$atom 1))
                              (($$atom cdr) ($$atom lst10))
                              (($$atom cons)
                               (($$atom cons)
                                (($$atom car) ($$atom lst10))
                                ($$atom i0))
                               ($$atom lst20)))
                             (let ((arg-types0
                                    (($$atom reverse) ($$atom lst20))))
                               (let ((index0 (($$atom number->string)
                                              ($$atom c-interface-proc-count))))
                                 (let ((scheme-name0
                                        (($$atom string-append)
                                         ($$atom "#!")
                                         ($$atom c-interface-module-name)
                                         ($$atom "#")
                                         ($$atom index0))))
                                   (let ((c-name0 (($$atom string-append)
                                                   ($$atom "___")
                                                   (($$atom scheme-id->c-id)
                                                    ($$atom scheme-name0)))))
                                     (let ((arity0 (($$atom length)
                                                    ($$atom argument-types1))))
                                       (let ((def0 (($$atom string-append)
                                                    (if (let ((g450 ($$atom proc-name?1)))
                                                          (if ($$atom g450)
                                                              ($$atom g450)
                                                              (($$atom eq?)
                                                               ($$atom result-type1)
                                                               ($$atom void-sym))))
                                                        ($$atom "")
                                                        (($$atom string-append)
                                                         (($$atom car)
                                                          (($$atom cdr)
                                                           (($$atom cdr)
                                                            (($$atom assq)
                                                             ($$atom result-type1)
                                                             ($$atom scheme-to-c-notation)))))
                                                         ($$atom " ")
                                                         ($$atom "___")
                                                         ($$atom "result")
                                                         ($$atom ";")
                                                         ($$atom nl1)))
                                                    (($$atom apply)
                                                     ($$atom string-append)
                                                     (($$atom map)
                                                      (lambda (t0)
                                                        (($$atom string-append)
                                                         (let ((typ0 (($$atom car)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                              ($$atom t0))))
                   (($$atom car)
                    (($$atom cdr)
                     (($$atom cdr)
                      (($$atom assq)
                       ($$atom typ0)
                       ($$atom scheme-to-c-notation))))))
                 ($$atom " ")
                 (($$atom c-arg-var1) ($$atom t0))
                 ($$atom ";")
                 ($$atom nl1)))
              ($$atom arg-types0)))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                    (if (($$atom null?)
                                                         ($$atom arg-types0))
                                                        ($$atom "")
                                                        (letrec ((loop1 (lambda (c-arg-var2
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                         nl2
                                         lst0
                                         str0)
                                  (if (($$atom null?) ($$atom lst0))
                                      (($$atom string-append)
                                       ($$atom str0)
                                       ($$atom "   )")
                                       ($$atom nl2))
                                      (let ((rest0 (($$atom cdr)
                                                    ($$atom lst0)))
                                            (t0 (($$atom car) ($$atom lst0))))
                                        (let ((str1 (($$atom string-append)
                                                     ($$atom str0)
                                                     ($$atom "    ")
                                                     ($$atom "___")
                                                     ($$atom "SCMOBJ_TO_")
                                                     (let ((typ0 (($$atom car)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                          ($$atom t0))))
               (($$atom car)
                (($$atom cdr)
                 (($$atom assq) ($$atom typ0) ($$atom scheme-to-c-notation)))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                     ($$atom "(")
                                                     (($$atom string-append)
                                                      ($$atom "___")
                                                      ($$atom "ARG")
                                                      (($$atom number->string)
                                                       (($$atom cdr)
                                                        ($$atom t0))))
                                                     ($$atom ",")
                                                     (($$atom c-arg-var2)
                                                      ($$atom t0))
                                                     ($$atom ")")
                                                     (if (($$atom null?)
                                                          ($$atom rest0))
                                                         ($$atom "")
                                                         ($$atom " &&"))
                                                     ($$atom nl2))))
                                          (if (($$atom null?) ($$atom rest0))
                                              (($$atom string-append)
                                               ($$atom str1)
                                               ($$atom "   )")
                                               ($$atom nl2))
                                              (let ((rest1 (($$atom cdr)
                                                            ($$atom rest0)))
                                                    (t1 (($$atom car)
                                                         ($$atom rest0))))
                                                (($$atom loop1)
                                                 ($$atom c-arg-var2)
                                                 ($$atom nl2)
                                                 ($$atom rest1)
                                                 (($$atom string-append)
                                                  ($$atom str1)
                                                  ($$atom "    ")
                                                  ($$atom "___")
                                                  ($$atom "SCMOBJ_TO_")
                                                  (let ((typ0 (($$atom car)
                                                               ($$atom t1))))
                                                    (($$atom car)
                                                     (($$atom cdr)
                                                      (($$atom assq)
                                                       ($$atom typ0)
                                                       ($$atom scheme-to-c-notation)))))
                                                  ($$atom "(")
                                                  (($$atom string-append)
                                                   ($$atom "___")
                                                   ($$atom "ARG")
                                                   (($$atom number->string)
                                                    (($$atom cdr)
                                                     ($$atom t1))))
                                                  ($$atom ",")
                                                  (($$atom c-arg-var2)
                                                   ($$atom t1))
                                                  ($$atom ")")
                                                  (if (($$atom null?)
                                                       ($$atom rest1))
                                                      ($$atom "")
                                                      ($$atom " &&"))
                                                  ($$atom nl2)))))))))))
                  (($$atom loop1)
                   ($$atom c-arg-var1)
                   ($$atom nl1)
                   ($$atom arg-types0)
                   (($$atom string-append) ($$atom "if (") ($$atom nl1)))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                    (if ($$atom proc-name?1)
                                                        (let ((param-list0
                                                               (let ((strings0
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                              (($$atom map)
                               ($$atom c-arg-var1)
                               ($$atom arg-types0))))
                         (if (($$atom null?) ($$atom strings0))
                             ($$atom "")
                             (($$atom string-append)
                              (($$atom car) ($$atom strings0))
                              (($$atom apply)
                               ($$atom string-append)
                               (($$atom map)
                                (lambda (s0)
                                  (($$atom string-append)
                                   ($$atom ",")
                                   ($$atom s0)))
                                (($$atom cdr) ($$atom strings0)))))))))
                  (let ((call0 (($$atom string-append)
                                ($$atom proc-name-or-code1)
                                ($$atom "(")
                                ($$atom param-list0)
                                ($$atom ")"))))
                    (if (($$atom eq?) ($$atom result-type1) ($$atom void-sym))
                        (($$atom string-append)
                         ($$atom "{")
                         ($$atom nl1)
                         ($$atom call0)
                         ($$atom ";")
                         ($$atom nl1)
                         ($$atom "___")
                         ($$atom "RESULT")
                         ($$atom " = ")
                         ($$atom "___")
                         ($$atom "UND")
                         ($$atom ";")
                         ($$atom nl1)
                         ($$atom "}")
                         ($$atom nl1))
                        (($$atom string-append)
                         ($$atom "___")
                         (($$atom c-type-name0) ($$atom result-type1))
                         ($$atom "_TO_SCMOBJ")
                         ($$atom "(")
                         ($$atom call0)
                         ($$atom ",")
                         ($$atom "___")
                         ($$atom "RESULT")
                         ($$atom ");")
                         ($$atom nl1)))))
                (if (($$atom eq?) ($$atom result-type1) ($$atom void-sym))
                    (($$atom string-append)
                     ($$atom "{")
                     ($$atom nl1)
                     ($$atom proc-name-or-code1)
                     ($$atom nl1)
                     ($$atom "___")
                     ($$atom "RESULT")
                     ($$atom " = ")
                     ($$atom "___")
                     ($$atom "UND")
                     ($$atom ";")
                     ($$atom nl1)
                     ($$atom "}")
                     ($$atom nl1))
                    (($$atom string-append)
                     ($$atom "{")
                     ($$atom nl1)
                     ($$atom proc-name-or-code1)
                     ($$atom nl1)
                     ($$atom "___")
                     (($$atom c-type-name0) ($$atom result-type1))
                     ($$atom "_TO_SCMOBJ")
                     ($$atom "(")
                     ($$atom "___")
                     ($$atom "result")
                     ($$atom ",")
                     ($$atom "___")
                     ($$atom "RESULT")
                     ($$atom ");")
                     ($$atom nl1)
                     ($$atom "}")
                     ($$atom nl1)))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                         (begin
                                           (set! c-interface-proc-count
                                                 (($$atom +)
                                                  ($$atom c-interface-proc-count)
                                                  ($$atom 1)))
                                           (($$atom add-c-proc)
                                            ($$atom scheme-name0)
                                            ($$atom c-name0)
                                            ($$atom arity0)
                                            ($$atom def0))
                                           ($$atom scheme-name0))))))))))))
         (($$atom loop0)
          ($$atom argument-types0)
          ($$atom result-type0)
          ($$atom proc-name-or-code0)
          ($$atom c-arg-var0)
          ($$atom nl0)
          ($$atom proc-name?0)
          ($$atom 1)
          ($$atom argument-types0)
          ($$atom '()))))))
 (define scheme-id->c-id
   (lambda (s0)
     (letrec ((loop0 (lambda (s1 i0 l0)
                       (if (($$atom >=) ($$atom i0) ($$atom 0))
                           (let ((c0 (($$atom string-ref)
                                      ($$atom s1)
                                      ($$atom i0))))
                             (if (let ((g460 (($$atom char-alphabetic?)
                                              ($$atom c0))))
                                   (if ($$atom g460)
                                       ($$atom g460)
                                       (($$atom char-numeric?) ($$atom c0))))
                                 (($$atom loop0)
                                  ($$atom s1)
                                  (($$atom -) ($$atom i0) ($$atom 1))
                                  (($$atom cons) ($$atom c0) ($$atom l0)))
                                 (if (($$atom char=?) ($$atom c0) ($$atom #\_))
                                     (($$atom loop0)
                                      ($$atom s1)
                                      (($$atom -) ($$atom i0) ($$atom 1))
                                      (($$atom cons)
                                       ($$atom c0)
                                       (($$atom cons)
                                        ($$atom c0)
                                        ($$atom l0))))
                                     (let ((n0 (($$atom char->integer)
                                                ($$atom c0))))
                                       (($$atom loop0)
                                        ($$atom s1)
                                        (($$atom -) ($$atom i0) ($$atom 1))
                                        (($$atom cons)
                                         ($$atom #\_)
                                         (($$atom cons)
                                          (let ((i1 (($$atom quotient)
                                                     ($$atom n0)
                                                     ($$atom 16))))
                                            (($$atom string-ref)
                                             ($$atom "0123456789abcdef")
                                             ($$atom i1)))
                                          (($$atom cons)
                                           (let ((i1 (($$atom modulo)
                                                      ($$atom n0)
                                                      ($$atom 16))))
                                             (($$atom string-ref)
                                              ($$atom "0123456789abcdef")
                                              ($$atom i1)))
                                           ($$atom l0)))))))))
                           (($$atom lst->string) ($$atom l0))))))
       (($$atom loop0)
        ($$atom s0)
        (($$atom -) (($$atom string-length) ($$atom s0)) ($$atom 1))
        ($$atom '())))))
 (define pt-syntax-error
   (lambda (source0 msg0 . args0)
     (($$atom apply)
      ($$atom compiler-user-error)
      (($$atom cons)
       (($$atom vector-ref) ($$atom source0) ($$atom 1))
       (($$atom cons)
        (($$atom string-append) ($$atom "Syntax error -- ") ($$atom msg0))
        ($$atom args0))))))
 (define pt
   (lambda (source0 env0 use0)
     (if (($$atom macro-expr?) ($$atom source0) ($$atom env0))
         (($$atom pt)
          (($$atom macro-expand) ($$atom source0) ($$atom env0))
          ($$atom env0)
          ($$atom use0))
         (if (($$atom self-eval-expr?) ($$atom source0))
             (($$atom pt-self-eval)
              ($$atom source0)
              ($$atom env0)
              ($$atom use0))
             (if (($$atom quote-expr?) ($$atom source0))
                 (($$atom pt-quote)
                  ($$atom source0)
                  ($$atom env0)
                  ($$atom use0))
                 (if (($$atom quasiquote-expr?) ($$atom source0))
                     (($$atom pt-quasiquote)
                      ($$atom source0)
                      ($$atom env0)
                      ($$atom use0))
                     (if (($$atom unquote-expr?) ($$atom source0))
                         (($$atom pt-syntax-error)
                          ($$atom source0)
                          ($$atom "Ill-placed 'unquote'"))
                         (if (($$atom unquote-splicing-expr?) ($$atom source0))
                             (($$atom pt-syntax-error)
                              ($$atom source0)
                              ($$atom "Ill-placed 'unquote-splicing'"))
                             (if (($$atom var-expr?)
                                  ($$atom source0)
                                  ($$atom env0))
                                 (($$atom pt-var)
                                  ($$atom source0)
                                  ($$atom env0)
                                  ($$atom use0))
                                 (if (($$atom set!-expr?)
                                      ($$atom source0)
                                      ($$atom env0))
                                     (($$atom pt-set!)
                                      ($$atom source0)
                                      ($$atom env0)
                                      ($$atom use0))
                                     (if (($$atom lambda-expr?)
                                          ($$atom source0)
                                          ($$atom env0))
                                         (($$atom pt-lambda)
                                          ($$atom source0)
                                          ($$atom env0)
                                          ($$atom use0))
                                         (if (($$atom if-expr?)
                                              ($$atom source0))
                                             (($$atom pt-if)
                                              ($$atom source0)
                                              ($$atom env0)
                                              ($$atom use0))
                                             (if (($$atom cond-expr?)
                                                  ($$atom source0))
                                                 (($$atom pt-cond)
                                                  ($$atom source0)
                                                  ($$atom env0)
                                                  ($$atom use0))
                                                 (if (($$atom and-expr?)
                                                      ($$atom source0))
                                                     (($$atom pt-and)
                                                      ($$atom source0)
                                                      ($$atom env0)
                                                      ($$atom use0))
                                                     (if (($$atom or-expr?)
                                                          ($$atom source0))
                                                         (($$atom pt-or)
                                                          ($$atom source0)
                                                          ($$atom env0)
                                                          ($$atom use0))
                                                         (if (($$atom case-expr?)
                                                              ($$atom source0))
                                                             (($$atom pt-case)
                                                              ($$atom source0)
                                                              ($$atom env0)
                                                              ($$atom use0))
                                                             (if (($$atom let-expr?)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                          ($$atom source0)
                          ($$atom env0))
                         (($$atom pt-let)
                          ($$atom source0)
                          ($$atom env0)
                          ($$atom use0))
                         (if (($$atom let*-expr?)
                              ($$atom source0)
                              ($$atom env0))
                             (($$atom pt-let*)
                              ($$atom source0)
                              ($$atom env0)
                              ($$atom use0))
                             (if (($$atom letrec-expr?)
                                  ($$atom source0)
                                  ($$atom env0))
                                 (($$atom pt-letrec)
                                  ($$atom source0)
                                  ($$atom env0)
                                  ($$atom use0))
                                 (if (($$atom begin-expr?) ($$atom source0))
                                     (($$atom pt-begin)
                                      ($$atom source0)
                                      ($$atom env0)
                                      ($$atom use0))
                                     (if (($$atom do-expr?)
                                          ($$atom source0)
                                          ($$atom env0))
                                         (($$atom pt-do)
                                          ($$atom source0)
                                          ($$atom env0)
                                          ($$atom use0))
                                         (if (($$atom define-expr?)
                                              ($$atom source0)
                                              ($$atom env0))
                                             (($$atom pt-syntax-error)
                                              ($$atom source0)
                                              ($$atom "Ill-placed 'define'"))
                                             (if (($$atom delay-expr?)
                                                  ($$atom source0)
                                                  ($$atom env0))
                                                 (($$atom pt-delay)
                                                  ($$atom source0)
                                                  ($$atom env0)
                                                  ($$atom use0))
                                                 (if (($$atom future-expr?)
                                                      ($$atom source0)
                                                      ($$atom env0))
                                                     (($$atom pt-future)
                                                      ($$atom source0)
                                                      ($$atom env0)
                                                      ($$atom use0))
                                                     (if (($$atom define-macro-expr?)
                                                          ($$atom source0)
                                                          ($$atom env0))
                                                         (($$atom pt-syntax-error)
                                                          ($$atom source0)
                                                          ($$atom "Ill-placed '##define-macro'"))
                                                         (if (($$atom begin-defs-expr?)
                                                              ($$atom source0))
                                                             (($$atom pt-syntax-error)
                                                              ($$atom source0)
                                                              ($$atom "Ill-placed 'begin' style definitions"))
                                                             (if (($$atom declare-expr?)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                          ($$atom source0))
                         (($$atom pt-syntax-error)
                          ($$atom source0)
                          ($$atom "Ill-placed '##declare'"))
                         (if (($$atom c-declaration-expr?) ($$atom source0))
                             (($$atom pt-syntax-error)
                              ($$atom source0)
                              ($$atom "Ill-placed '##c-declaration'"))
                             (if (($$atom c-init-expr?) ($$atom source0))
                                 (($$atom pt-syntax-error)
                                  ($$atom source0)
                                  ($$atom "Ill-placed '##c-init'"))
                                 (if (($$atom c-procedure-expr?)
                                      ($$atom source0))
                                     (($$atom pt-c-procedure)
                                      ($$atom source0)
                                      ($$atom env0)
                                      ($$atom use0))
                                     (if (($$atom combination-expr?)
                                          ($$atom source0))
                                         (($$atom pt-combination)
                                          ($$atom source0)
                                          ($$atom env0)
                                          ($$atom use0))
                                         (($$atom compiler-internal-error)
                                          ($$atom "pt, unknown expression type")
                                          ($$atom source0)))))))))))))))))))))))))))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 (define macro-expand
   (lambda (source0 env0)
     (let ((code0 (($$atom vector-ref) ($$atom source0) ($$atom 0))))
       (($$atom expression->source)
        (($$atom apply)
         (($$atom cdr)
          (($$atom env-lookup-macro)
           ($$atom env0)
           (let ((x0 (($$atom car) ($$atom code0))))
             (($$atom vector-ref) ($$atom x0) ($$atom 0)))))
         (($$atom cdr) (($$atom source->expression) ($$atom source0))))
        ($$atom source0)))))
 (define pt-self-eval
   (lambda (source0 env0 use0)
     (let ((val0 (($$atom source->expression) ($$atom source0))))
       (if (($$atom eq?) ($$atom use0) ($$atom 'none))
           (($$atom vector)
            ($$atom cst-tag)
            ($$atom #f)
            ($$atom '())
            ($$atom #t)
            ($$atom env0)
            ($$atom source0)
            ($$atom '|#[undefined]|))
           (($$atom vector)
            ($$atom cst-tag)
            ($$atom #f)
            ($$atom '())
            ($$atom #t)
            ($$atom env0)
            ($$atom source0)
            ($$atom val0))))))
 (define pt-quote
   (lambda (source0 env0 use0)
     (let ((code0 (($$atom vector-ref) ($$atom source0) ($$atom 0))))
       (if (($$atom eq?) ($$atom use0) ($$atom 'none))
           (($$atom vector)
            ($$atom cst-tag)
            ($$atom #f)
            ($$atom '())
            ($$atom #t)
            ($$atom env0)
            ($$atom source0)
            ($$atom '|#[undefined]|))
           (let ((val0 (($$atom source->expression)
                        (($$atom car) (($$atom cdr) ($$atom code0))))))
             (($$atom vector)
              ($$atom cst-tag)
              ($$atom #f)
              ($$atom '())
              ($$atom #t)
              ($$atom env0)
              ($$atom source0)
              ($$atom val0)))))))
 (define pt-quasiquote
   (lambda (source0 env0 use0)
     (let ((code0 (($$atom vector-ref) ($$atom source0) ($$atom 0))))
       (($$atom pt-quasiquotation)
        (($$atom car) (($$atom cdr) ($$atom code0)))
        ($$atom 1)
        ($$atom env0)))))
 (define pt-quasiquotation
   (lambda (form0 level0 env0)
     (if (($$atom =) ($$atom level0) ($$atom 0))
         (($$atom pt) ($$atom form0) ($$atom env0) ($$atom 'true))
         (if (($$atom quasiquote-expr?) ($$atom form0))
             (($$atom pt-quasiquotation-list)
              ($$atom form0)
              (($$atom vector-ref) ($$atom form0) ($$atom 0))
              (($$atom +) ($$atom level0) ($$atom 1))
              ($$atom env0))
             (if (($$atom unquote-expr?) ($$atom form0))
                 (if (($$atom =) ($$atom level0) ($$atom 1))
                     (($$atom pt)
                      (($$atom car)
                       (($$atom cdr)
                        (($$atom vector-ref) ($$atom form0) ($$atom 0))))
                      ($$atom env0)
                      ($$atom 'true))
                     (($$atom pt-quasiquotation-list)
                      ($$atom form0)
                      (($$atom vector-ref) ($$atom form0) ($$atom 0))
                      (($$atom -) ($$atom level0) ($$atom 1))
                      ($$atom env0)))
                 (if (($$atom unquote-splicing-expr?) ($$atom form0))
                     (if (($$atom =) ($$atom level0) ($$atom 1))
                         (($$atom pt-syntax-error)
                          ($$atom form0)
                          ($$atom "Ill-placed 'unquote-splicing'"))
                         (($$atom pt-quasiquotation-list)
                          ($$atom form0)
                          (($$atom vector-ref) ($$atom form0) ($$atom 0))
                          (($$atom -) ($$atom level0) ($$atom 1))
                          ($$atom env0)))
                     (if (($$atom pair?)
                          (($$atom vector-ref) ($$atom form0) ($$atom 0)))
                         (($$atom pt-quasiquotation-list)
                          ($$atom form0)
                          (($$atom vector-ref) ($$atom form0) ($$atom 0))
                          ($$atom level0)
                          ($$atom env0))
                         (if (($$atom vector?)
                              (($$atom vector-ref) ($$atom form0) ($$atom 0)))
                             (($$atom vector-form)
                              ($$atom form0)
                              (($$atom pt-quasiquotation-list)
                               ($$atom form0)
                               (($$atom vector->lst)
                                (($$atom vector-ref)
                                 ($$atom form0)
                                 ($$atom 0)))
                               ($$atom level0)
                               ($$atom env0))
                              ($$atom env0))
                             (let ((val0 (($$atom source->expression)
                                          ($$atom form0))))
                               (($$atom vector)
                                ($$atom cst-tag)
                                ($$atom #f)
                                ($$atom '())
                                ($$atom #t)
                                ($$atom env0)
                                ($$atom form0)
                                ($$atom val0)))))))))))
 (define pt-quasiquotation-list
   (lambda (form0 l0 level0 env0)
     (if (($$atom pair?) ($$atom l0))
         (if (if (let ((source0 (($$atom car) ($$atom l0))))
                   (($$atom mymatch)
                    ($$atom unquote-splicing-sym)
                    ($$atom 1)
                    ($$atom source0)))
                 (($$atom =) ($$atom level0) ($$atom 1))
                 ($$atom #f))
             (let ((x0 (($$atom pt)
                        (($$atom car)
                         (($$atom cdr)
                          (let ((x0 (($$atom car) ($$atom l0))))
                            (($$atom vector-ref) ($$atom x0) ($$atom 0)))))
                        ($$atom env0)
                        ($$atom 'true))))
               (if (($$atom null?) (($$atom cdr) ($$atom l0)))
                   ($$atom x0)
                   (($$atom append-form)
                    (($$atom car) ($$atom l0))
                    ($$atom x0)
                    (($$atom pt-quasiquotation-list)
                     ($$atom form0)
                     (($$atom cdr) ($$atom l0))
                     ($$atom 1)
                     ($$atom env0))
                    ($$atom env0))))
             (($$atom cons-form)
              ($$atom form0)
              (($$atom pt-quasiquotation)
               (($$atom car) ($$atom l0))
               ($$atom level0)
               ($$atom env0))
              (($$atom pt-quasiquotation-list)
               ($$atom form0)
               (($$atom cdr) ($$atom l0))
               ($$atom level0)
               ($$atom env0))
              ($$atom env0)))
         (if (($$atom null?) ($$atom l0))
             (($$atom vector)
              ($$atom cst-tag)
              ($$atom #f)
              ($$atom '())
              ($$atom #t)
              ($$atom env0)
              ($$atom form0)
              ($$atom '()))
             (($$atom pt-quasiquotation)
              ($$atom l0)
              ($$atom level0)
              ($$atom env0))))))
 (define append-form
   (lambda (source0 ptree10 ptree20 env0)
     (if (if (($$atom cst?) ($$atom ptree10))
             (($$atom cst?) ($$atom ptree20))
             ($$atom #f))
         (let ((val0 (($$atom ##append-two)
                      (($$atom vector-ref) ($$atom ptree10) ($$atom 6))
                      (($$atom vector-ref) ($$atom ptree20) ($$atom 6)))))
           (($$atom vector)
            ($$atom cst-tag)
            ($$atom #f)
            ($$atom '())
            ($$atom #t)
            ($$atom env0)
            ($$atom source0)
            ($$atom val0)))
         (if (if (($$atom cst?) ($$atom ptree20))
                 (($$atom null?)
                  (($$atom vector-ref) ($$atom ptree20) ($$atom 6)))
                 ($$atom #f))
             ($$atom ptree10)
             (($$atom new-call*)
              ($$atom source0)
              (($$atom add-not-safe) ($$atom env0))
              (($$atom new-ref-extended-bindings)
               ($$atom source0)
               ($$atom **quasi-append-sym)
               ($$atom env0))
              (($$atom list) ($$atom ptree10) ($$atom ptree20)))))))
 (define cons-form
   (lambda (source0 ptree10 ptree20 env0)
     (if (if (($$atom cst?) ($$atom ptree10))
             (($$atom cst?) ($$atom ptree20))
             ($$atom #f))
         (let ((val0 (($$atom cons)
                      (($$atom vector-ref) ($$atom ptree10) ($$atom 6))
                      (($$atom vector-ref) ($$atom ptree20) ($$atom 6)))))
           (($$atom vector)
            ($$atom cst-tag)
            ($$atom #f)
            ($$atom '())
            ($$atom #t)
            ($$atom env0)
            ($$atom source0)
            ($$atom val0)))
         (if (if (($$atom cst?) ($$atom ptree20))
                 (($$atom null?)
                  (($$atom vector-ref) ($$atom ptree20) ($$atom 6)))
                 ($$atom #f))
             (($$atom new-call*)
              ($$atom source0)
              (($$atom add-not-safe) ($$atom env0))
              (($$atom new-ref-extended-bindings)
               ($$atom source0)
               ($$atom **quasi-list-sym)
               ($$atom env0))
              (($$atom list) ($$atom ptree10)))
             (($$atom new-call*)
              ($$atom source0)
              (($$atom add-not-safe) ($$atom env0))
              (($$atom new-ref-extended-bindings)
               ($$atom source0)
               ($$atom **quasi-cons-sym)
               ($$atom env0))
              (($$atom list) ($$atom ptree10) ($$atom ptree20)))))))
 (define vector-form
   (lambda (source0 ptree0 env0)
     (if (($$atom cst?) ($$atom ptree0))
         (let ((val0 (($$atom lst->vector)
                      (($$atom vector-ref) ($$atom ptree0) ($$atom 6)))))
           (($$atom vector)
            ($$atom cst-tag)
            ($$atom #f)
            ($$atom '())
            ($$atom #t)
            ($$atom env0)
            ($$atom source0)
            ($$atom val0)))
         (($$atom new-call*)
          ($$atom source0)
          (($$atom add-not-safe) ($$atom env0))
          (($$atom new-ref-extended-bindings)
           ($$atom source0)
           ($$atom **quasi-list->vector-sym)
           ($$atom env0))
          (($$atom list) ($$atom ptree0))))))
 (define pt-var
   (lambda (source0 env0 use0)
     (if (($$atom eq?) ($$atom use0) ($$atom 'none))
         (($$atom vector)
          ($$atom cst-tag)
          ($$atom #f)
          ($$atom '())
          ($$atom #t)
          ($$atom env0)
          ($$atom source0)
          ($$atom '|#[undefined]|))
         (($$atom new-ref)
          ($$atom source0)
          ($$atom env0)
          (($$atom env-lookup-var)
           ($$atom env0)
           (($$atom vector-ref) ($$atom source0) ($$atom 0))
           ($$atom source0))))))
 (define pt-set!
   (lambda (source0 env0 use0)
     (let ((code0 (($$atom vector-ref) ($$atom source0) ($$atom 0))))
       (($$atom new-set)
        ($$atom source0)
        ($$atom env0)
        (($$atom env-lookup-var)
         ($$atom env0)
         (let ((x0 (($$atom car) (($$atom cdr) ($$atom code0)))))
           (($$atom vector-ref) ($$atom x0) ($$atom 0)))
         (($$atom car) (($$atom cdr) ($$atom code0))))
        (($$atom pt)
         (($$atom car) (($$atom cdr) (($$atom cdr) ($$atom code0))))
         ($$atom env0)
         ($$atom 'true))))))
 (define pt-lambda
   (lambda (source0 env0 use0)
     (let ((code0 (($$atom vector-ref) ($$atom source0) ($$atom 0))))
       (letrec ((optionals0
                 (lambda (parms0 source1 body0 env1)
                   (if (($$atom pair?) ($$atom parms0))
                       (let ((parm*0 (($$atom car) ($$atom parms0))))
                         (let ((parm0 (($$atom vector-ref)
                                       ($$atom parm*0)
                                       ($$atom 0))))
                           (if (if (($$atom pair?) ($$atom parm0))
                                   (($$atom length?) ($$atom parm0) ($$atom 2))
                                   ($$atom #f))
                               (let ((var0 (($$atom car) ($$atom parm0))))
                                 (let ((vars0 (($$atom new-variables)
                                               (($$atom list) ($$atom var0)))))
                                   (let ((args0 (($$atom list)
                                                 (($$atom new-tst)
                                                  ($$atom parm*0)
                                                  ($$atom env1)
                                                  (($$atom new-call*)
                                                   ($$atom parm*0)
                                                   ($$atom env1)
                                                   (($$atom new-ref-extended-bindings)
                                                    ($$atom parm*0)
                                                    ($$atom **unassigned?-sym)
                                                    ($$atom env1))
                                                   (($$atom list)
                                                    (($$atom new-ref)
                                                     ($$atom parm*0)
                                                     ($$atom env1)
                                                     (($$atom env-lookup-var)
                                                      ($$atom env1)
                                                      (($$atom source-code)
                                                       ($$atom var0))
                                                      ($$atom var0)))))
                                                  (($$atom pt)
                                                   (($$atom car)
                                                    (($$atom cdr)
                                                     ($$atom parm0)))
                                                   ($$atom env1)
                                                   ($$atom 'true))
                                                  (($$atom new-ref)
                                                   ($$atom parm*0)
                                                   ($$atom env1)
                                                   (($$atom env-lookup-var)
                                                    ($$atom env1)
                                                    (($$atom source-code)
                                                     ($$atom var0))
                                                    ($$atom var0))))))
                                         (oper0 (($$atom new-prc)
                                                 ($$atom parm*0)
                                                 ($$atom env1)
                                                 ($$atom #f)
                                                 ($$atom 1)
                                                 ($$atom #f)
                                                 ($$atom vars0)
                                                 (($$atom optionals0)
                                                  (($$atom cdr)
                                                   ($$atom parms0))
                                                  ($$atom source1)
                                                  ($$atom body0)
                                                  (($$atom env-frame)
                                                   ($$atom env1)
                                                   ($$atom vars0))))))
                                     (begin
                                       (if ($$atom *ptree-port*)
                                           (if (($$atom ref?) ($$atom oper0))
                                               (let ((var1 (($$atom vector-ref)
                                                            ($$atom oper0)
                                                            ($$atom 6))))
                                                 (if (($$atom global?)
                                                      ($$atom var1))
                                                     (let ((proc0 (($$atom standard-procedure)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                           (($$atom vector-ref) ($$atom var1) ($$atom 1))
                           (($$atom vector-ref) ($$atom oper0) ($$atom 4)))))
               (if (if ($$atom proc0)
                       (($$atom not)
                        (let ((n0 (($$atom length) ($$atom args0)))
                              (call-pat0 (($$atom cdr) ($$atom proc0))))
                          (($$atom pattern-member?)
                           ($$atom n0)
                           ($$atom call-pat0))))
                       ($$atom #f))
                   (begin
                     (($$atom display)
                      ($$atom "*** WARNING -- \"")
                      ($$atom *ptree-port*))
                     (($$atom display)
                      (($$atom vector-ref) ($$atom var1) ($$atom 1))
                      ($$atom *ptree-port*))
                     (($$atom display)
                      ($$atom "\" is called with ")
                      ($$atom *ptree-port*))
                     (($$atom display)
                      (($$atom length) ($$atom args0))
                      ($$atom *ptree-port*))
                     (($$atom display)
                      ($$atom " argument(s).")
                      ($$atom *ptree-port*))
                     (($$atom newline) ($$atom *ptree-port*)))
                   ($$atom #f)))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                     ($$atom #f)))
                                               ($$atom #f))
                                           ($$atom #f))
                                       (($$atom new-call)
                                        ($$atom parm*0)
                                        ($$atom env1)
                                        ($$atom oper0)
                                        ($$atom args0))))))
                               (($$atom optionals0)
                                (($$atom cdr) ($$atom parms0))
                                ($$atom source1)
                                ($$atom body0)
                                ($$atom env1)))))
                       (($$atom pt-body)
                        ($$atom source1)
                        ($$atom body0)
                        ($$atom env1)
                        ($$atom 'true)))))
                (rest-param?0
                 (lambda (parms0)
                   (if (($$atom pair?) ($$atom parms0))
                       (($$atom rest-param?0) (($$atom cdr) ($$atom parms0)))
                       (($$atom not) (($$atom null?) ($$atom parms0))))))
                (new-params0
                 (lambda (parms0)
                   (if (($$atom pair?) ($$atom parms0))
                       (let ((parm*0 (($$atom car) ($$atom parms0))))
                         (let ((parm0 (($$atom vector-ref)
                                       ($$atom parm*0)
                                       ($$atom 0))))
                           (let ((p*0 (if (($$atom pair?) ($$atom parm0))
                                          (($$atom car) ($$atom parm0))
                                          ($$atom parm*0))))
                             (($$atom cons)
                              (let ((name0 (($$atom vector-ref)
                                            ($$atom p*0)
                                            ($$atom 0))))
                                (($$atom vector)
                                 ($$atom var-tag)
                                 ($$atom name0)
                                 ($$atom #t)
                                 ($$atom '())
                                 ($$atom '())
                                 ($$atom p*0)
                                 ($$atom #f)))
                              (($$atom new-params0)
                               (($$atom cdr) ($$atom parms0)))))))
                       (if (($$atom null?) ($$atom parms0))
                           ($$atom '())
                           (($$atom list)
                            (let ((name0 (($$atom vector-ref)
                                          ($$atom parms0)
                                          ($$atom 0))))
                              (($$atom vector)
                               ($$atom var-tag)
                               ($$atom name0)
                               ($$atom #t)
                               ($$atom '())
                               ($$atom '())
                               ($$atom parms0)
                               ($$atom #f)))))))))
         (if (($$atom eq?) ($$atom use0) ($$atom 'none))
             (($$atom vector)
              ($$atom cst-tag)
              ($$atom #f)
              ($$atom '())
              ($$atom #t)
              ($$atom env0)
              ($$atom source0)
              ($$atom '|#[undefined]|))
             (let ((parms0 (($$atom source->parms)
                            (($$atom car) (($$atom cdr) ($$atom code0))))))
               (let ((frame0 (($$atom new-params0) ($$atom parms0))))
                 (($$atom new-prc)
                  ($$atom source0)
                  ($$atom env0)
                  ($$atom #f)
                  (letrec ((loop0 (lambda (l0 n0)
                                    (if (($$atom pair?) ($$atom l0))
                                        (if (($$atom pair?)
                                             (let ((x0 (($$atom car)
                                                        ($$atom l0))))
                                               (($$atom vector-ref)
                                                ($$atom x0)
                                                ($$atom 0))))
                                            ($$atom n0)
                                            (($$atom loop0)
                                             (($$atom cdr) ($$atom l0))
                                             (($$atom +)
                                              ($$atom n0)
                                              ($$atom 1))))
                                        ($$atom n0)))))
                    (($$atom loop0) ($$atom parms0) ($$atom 0)))
                  (($$atom rest-param?0) ($$atom parms0))
                  ($$atom frame0)
                  (($$atom optionals0)
                   ($$atom parms0)
                   ($$atom source0)
                   (($$atom cdr) (($$atom cdr) ($$atom code0)))
                   (($$atom env-frame) ($$atom env0) ($$atom frame0)))))))))))
 (define source->parms
   (lambda (source0)
     (let ((x0 (($$atom vector-ref) ($$atom source0) ($$atom 0))))
       (if (let ((g470 (($$atom pair?) ($$atom x0))))
             (if ($$atom g470) ($$atom g470) (($$atom null?) ($$atom x0))))
           ($$atom x0)
           ($$atom source0)))))
 (define pt-body
   (lambda (source0 body0 env0 use0)
     (letrec ((letrec-defines0
               (lambda (source1 use1 vars0 vals0 envs0 body1 env1)
                 (if (($$atom null?) ($$atom body1))
                     (($$atom pt-syntax-error)
                      ($$atom source1)
                      ($$atom "Body must contain at least one evaluable expression"))
                     (if (($$atom macro-expr?)
                          (($$atom car) ($$atom body1))
                          ($$atom env1))
                         (($$atom letrec-defines0)
                          ($$atom source1)
                          ($$atom use1)
                          ($$atom vars0)
                          ($$atom vals0)
                          ($$atom envs0)
                          (($$atom cons)
                           (($$atom macro-expand)
                            (($$atom car) ($$atom body1))
                            ($$atom env1))
                           (($$atom cdr) ($$atom body1)))
                          ($$atom env1))
                         (if (let ((source2 (($$atom car) ($$atom body1))))
                               (($$atom mymatch)
                                ($$atom begin-sym)
                                ($$atom 0)
                                ($$atom source2)))
                             (($$atom letrec-defines0)
                              ($$atom source1)
                              ($$atom use1)
                              ($$atom vars0)
                              ($$atom vals0)
                              ($$atom envs0)
                              (($$atom ##append-two)
                               (let ((source2 (($$atom car) ($$atom body1))))
                                 (($$atom cdr)
                                  (($$atom vector-ref)
                                   ($$atom source2)
                                   ($$atom 0))))
                               (($$atom cdr) ($$atom body1)))
                              ($$atom env1))
                             (if (let ((source2 (($$atom car) ($$atom body1))))
                                   (($$atom mymatch)
                                    ($$atom **include-sym)
                                    ($$atom 1)
                                    ($$atom source2)))
                                 (begin
                                   (if ($$atom *ptree-port*)
                                       (($$atom display)
                                        ($$atom "  ")
                                        ($$atom *ptree-port*))
                                       ($$atom #f))
                                   (let ((x0 (let ((loc0 (($$atom source-locat)
                                                          (($$atom car)
                                                           ($$atom body1))))
                                                   (info-port0
                                                    ($$atom *ptree-port*))
                                                   (filename0
                                                    (($$atom include-filename)
                                                     (($$atom car)
                                                      ($$atom body1)))))
                                               (($$atom file->sources)
                                                (if (($$atom path-absolute?)
                                                     ($$atom filename0))
                                                    ($$atom filename0)
                                                    (($$atom string-append)
                                                     (($$atom file-path)
                                                      (($$atom locat-filename)
                                                       ($$atom loc0)))
                                                     ($$atom filename0)))
                                                ($$atom info-port0)))))
                                     (begin
                                       (if ($$atom *ptree-port*)
                                           (($$atom newline)
                                            ($$atom *ptree-port*))
                                           ($$atom #f))
                                       (($$atom letrec-defines0)
                                        ($$atom source1)
                                        ($$atom use1)
                                        ($$atom vars0)
                                        ($$atom vals0)
                                        ($$atom envs0)
                                        (($$atom ##append-two)
                                         ($$atom x0)
                                         (($$atom cdr) ($$atom body1)))
                                        ($$atom env1)))))
                                 (if (($$atom define-expr?)
                                      (($$atom car) ($$atom body1))
                                      ($$atom env1))
                                     (let ((var**0 (($$atom definition-variable)
                                                    (($$atom car)
                                                     ($$atom body1)))))
                                       (let ((var*0 (($$atom vector-ref)
                                                     ($$atom var**0)
                                                     ($$atom 0))))
                                         (let ((var0 (($$atom env-define-var)
                                                      ($$atom env1)
                                                      ($$atom var*0)
                                                      ($$atom var**0))))
                                           (($$atom letrec-defines0)
                                            ($$atom source1)
                                            ($$atom use1)
                                            (($$atom cons)
                                             ($$atom var0)
                                             ($$atom vars0))
                                            (($$atom cons)
                                             (($$atom definition-value)
                                              (($$atom car) ($$atom body1)))
                                             ($$atom vals0))
                                            (($$atom cons)
                                             ($$atom env1)
                                             ($$atom envs0))
                                            (($$atom cdr) ($$atom body1))
                                            ($$atom env1)))))
                                     (if (let ((source2 (($$atom car)
                                                         ($$atom body1))))
                                           (($$atom mymatch)
                                            ($$atom **declare-sym)
                                            ($$atom -1)
                                            ($$atom source2)))
                                         (($$atom letrec-defines0)
                                          ($$atom source1)
                                          ($$atom use1)
                                          ($$atom vars0)
                                          ($$atom vals0)
                                          ($$atom envs0)
                                          (($$atom cdr) ($$atom body1))
                                          (($$atom add-declarations)
                                           (($$atom car) ($$atom body1))
                                           ($$atom env1)))
                                         (if (($$atom define-macro-expr?)
                                              (($$atom car) ($$atom body1))
                                              ($$atom env1))
                                             (($$atom letrec-defines0)
                                              ($$atom source1)
                                              ($$atom use1)
                                              ($$atom vars0)
                                              ($$atom vals0)
                                              ($$atom envs0)
                                              (($$atom cdr) ($$atom body1))
                                              (($$atom add-macro)
                                               (($$atom car) ($$atom body1))
                                               ($$atom env1)))
                                             (if (($$atom c-declaration-expr?)
                                                  (($$atom car)
                                                   ($$atom body1)))
                                                 (begin
                                                   (let ((declaration-string0
                                                          (let ((x0 (($$atom car)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                             (($$atom cdr)
                              (($$atom source-code)
                               (($$atom car) ($$atom body1)))))))
                    (($$atom vector-ref) ($$atom x0) ($$atom 0)))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                     (begin
                                                       (set! c-interface-decls
                                                             (($$atom cons)
                                                              ($$atom declaration-string0)
                                                              ($$atom c-interface-decls)))
                                                       ($$atom #f)))
                                                   (($$atom letrec-defines0)
                                                    ($$atom source1)
                                                    ($$atom use1)
                                                    ($$atom vars0)
                                                    ($$atom vals0)
                                                    ($$atom envs0)
                                                    (($$atom cdr)
                                                     ($$atom body1))
                                                    ($$atom env1)))
                                                 (if (($$atom c-init-expr?)
                                                      (($$atom car)
                                                       ($$atom body1)))
                                                     (begin
                                                       (let ((initialization-code-string0
                                                              (let ((x0 (($$atom car)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                 (($$atom cdr)
                                  (($$atom source-code)
                                   (($$atom car) ($$atom body1)))))))
                        (($$atom vector-ref) ($$atom x0) ($$atom 0)))))
                 (begin
                   (set! c-interface-inits
                         (($$atom cons)
                          ($$atom initialization-code-string0)
                          ($$atom c-interface-inits)))
                   ($$atom #f)))
               (($$atom letrec-defines0)
                ($$atom source1)
                ($$atom use1)
                ($$atom vars0)
                ($$atom vals0)
                ($$atom envs0)
                (($$atom cdr) ($$atom body1))
                ($$atom env1)))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                     (if (($$atom null?)
                                                          ($$atom vars0))
                                                         (($$atom pt-sequence)
                                                          ($$atom source1)
                                                          ($$atom body1)
                                                          ($$atom env1)
                                                          ($$atom use1))
                                                         (let ((vars*0 (($$atom reverse)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                ($$atom vars0))))
                   (letrec ((loop0 (lambda (source2
                                            use2
                                            body2
                                            env2
                                            vars*1
                                            vals*0
                                            l10
                                            l20)
                                     (if (($$atom null?) ($$atom l10))
                                         (($$atom pt-recursive-let)
                                          ($$atom source2)
                                          ($$atom vars*1)
                                          ($$atom vals*0)
                                          ($$atom body2)
                                          ($$atom env2)
                                          ($$atom use2))
                                         (($$atom loop0)
                                          ($$atom source2)
                                          ($$atom use2)
                                          ($$atom body2)
                                          ($$atom env2)
                                          ($$atom vars*1)
                                          (($$atom cons)
                                           (($$atom pt)
                                            (($$atom car) ($$atom l10))
                                            (($$atom car) ($$atom l20))
                                            ($$atom 'true))
                                           ($$atom vals*0))
                                          (($$atom cdr) ($$atom l10))
                                          (($$atom cdr) ($$atom l20)))))))
                     (($$atom loop0)
                      ($$atom source1)
                      ($$atom use1)
                      ($$atom body1)
                      ($$atom env1)
                      ($$atom vars*0)
                      ($$atom '())
                      ($$atom vals0)
                      ($$atom envs0)))))))))))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
       (($$atom letrec-defines0)
        ($$atom source0)
        ($$atom use0)
        ($$atom '())
        ($$atom '())
        ($$atom '())
        ($$atom body0)
        (($$atom env-frame) ($$atom env0) ($$atom '()))))))
 (define pt-sequence
   (lambda (source0 seq0 env0 use0)
     (if (($$atom length?) ($$atom seq0) ($$atom 1))
         (($$atom pt) (($$atom car) ($$atom seq0)) ($$atom env0) ($$atom use0))
         (let ((after0 (($$atom pt-sequence)
                        ($$atom source0)
                        (($$atom cdr) ($$atom seq0))
                        ($$atom env0)
                        ($$atom use0)))
               (before0 (($$atom pt)
                         (($$atom car) ($$atom seq0))
                         ($$atom env0)
                         ($$atom 'none))))
           (($$atom new-call*)
            ($$atom source0)
            ($$atom env0)
            (($$atom new-prc)
             ($$atom source0)
             ($$atom env0)
             ($$atom #f)
             ($$atom 1)
             ($$atom #f)
             (($$atom new-temps) ($$atom source0) ($$atom '(temp)))
             ($$atom after0))
            (($$atom list) ($$atom before0)))))))
 (define pt-if
   (lambda (source0 env0 use0)
     (let ((code0 (($$atom vector-ref) ($$atom source0) ($$atom 0))))
       (let ((alt0 (if (($$atom length?) ($$atom code0) ($$atom 3))
                       (($$atom vector)
                        ($$atom cst-tag)
                        ($$atom #f)
                        ($$atom '())
                        ($$atom #t)
                        ($$atom env0)
                        ($$atom source0)
                        ($$atom '|#[undefined]|))
                       (($$atom pt)
                        (($$atom car)
                         (($$atom cdr)
                          (($$atom cdr) (($$atom cdr) ($$atom code0)))))
                        ($$atom env0)
                        ($$atom use0))))
             (con0 (($$atom pt)
                    (($$atom car) (($$atom cdr) (($$atom cdr) ($$atom code0))))
                    ($$atom env0)
                    ($$atom use0)))
             (pre0 (($$atom pt)
                    (($$atom car) (($$atom cdr) ($$atom code0)))
                    ($$atom env0)
                    ($$atom 'pred))))
         (let ((node0 (let ((children0
                             (($$atom list)
                              ($$atom pre0)
                              ($$atom con0)
                              ($$atom alt0))))
                        (($$atom vector)
                         ($$atom tst-tag)
                         ($$atom #f)
                         ($$atom children0)
                         ($$atom #t)
                         ($$atom env0)
                         ($$atom source0)))))
           (begin
             (($$atom vector-set!) ($$atom pre0) ($$atom 1) ($$atom node0))
             (($$atom vector-set!) ($$atom con0) ($$atom 1) ($$atom node0))
             (($$atom vector-set!) ($$atom alt0) ($$atom 1) ($$atom node0))
             ($$atom node0)))))))
 (define pt-cond
   (lambda (source0 env0 use0)
     (letrec ((pt-clauses0
               (lambda (source1 env1 use1 clauses0)
                 (if (($$atom length?) ($$atom clauses0) ($$atom 0))
                     (($$atom vector)
                      ($$atom cst-tag)
                      ($$atom #f)
                      ($$atom '())
                      ($$atom #t)
                      ($$atom env1)
                      ($$atom source1)
                      ($$atom '|#[undefined]|))
                     (let ((clause*0 (($$atom car) ($$atom clauses0))))
                       (let ((clause0 (($$atom vector-ref)
                                       ($$atom clause*0)
                                       ($$atom 0))))
                         (if (($$atom eq?)
                              (let ((x0 (($$atom car) ($$atom clause0))))
                                (($$atom vector-ref) ($$atom x0) ($$atom 0)))
                              ($$atom else-sym))
                             (($$atom pt-sequence)
                              ($$atom clause*0)
                              (($$atom cdr) ($$atom clause0))
                              ($$atom env1)
                              ($$atom use1))
                             (if (($$atom length?) ($$atom clause0) ($$atom 1))
                                 (let ((alt0 (($$atom pt-clauses0)
                                              ($$atom source1)
                                              ($$atom env1)
                                              ($$atom use1)
                                              (($$atom cdr)
                                               ($$atom clauses0))))
                                       (pre0 (($$atom pt)
                                              (($$atom car) ($$atom clause0))
                                              ($$atom env1)
                                              (if (($$atom eq?)
                                                   ($$atom use1)
                                                   ($$atom 'true))
                                                  ($$atom 'true)
                                                  ($$atom 'pred)))))
                                   (let ((node0 (let ((children0
                                                       (($$atom list)
                                                        ($$atom pre0)
                                                        ($$atom alt0))))
                                                  (($$atom vector)
                                                   ($$atom disj-tag)
                                                   ($$atom #f)
                                                   ($$atom children0)
                                                   ($$atom #t)
                                                   ($$atom env1)
                                                   ($$atom clause*0)))))
                                     (begin
                                       (($$atom vector-set!)
                                        ($$atom pre0)
                                        ($$atom 1)
                                        ($$atom node0))
                                       (($$atom vector-set!)
                                        ($$atom alt0)
                                        ($$atom 1)
                                        ($$atom node0))
                                       ($$atom node0))))
                                 (if (($$atom eq?)
                                      (let ((x0 (($$atom car)
                                                 (($$atom cdr)
                                                  ($$atom clause0)))))
                                        (($$atom vector-ref)
                                         ($$atom x0)
                                         ($$atom 0)))
                                      ($$atom =>-sym))
                                     (($$atom new-disj-call)
                                      ($$atom clause*0)
                                      ($$atom env1)
                                      (($$atom pt)
                                       (($$atom car) ($$atom clause0))
                                       ($$atom env1)
                                       ($$atom 'true))
                                      (($$atom pt)
                                       (($$atom car)
                                        (($$atom cdr)
                                         (($$atom cdr) ($$atom clause0))))
                                       ($$atom env1)
                                       ($$atom 'true))
                                      (($$atom pt-clauses0)
                                       ($$atom source1)
                                       ($$atom env1)
                                       ($$atom use1)
                                       (($$atom cdr) ($$atom clauses0))))
                                     (($$atom new-tst)
                                      ($$atom clause*0)
                                      ($$atom env1)
                                      (($$atom pt)
                                       (($$atom car) ($$atom clause0))
                                       ($$atom env1)
                                       ($$atom 'pred))
                                      (($$atom pt-sequence)
                                       ($$atom clause*0)
                                       (($$atom cdr) ($$atom clause0))
                                       ($$atom env1)
                                       ($$atom use1))
                                      (($$atom pt-clauses0)
                                       ($$atom source1)
                                       ($$atom env1)
                                       ($$atom use1)
                                       (($$atom cdr)
                                        ($$atom clauses0)))))))))))))
       (($$atom pt-clauses0)
        ($$atom source0)
        ($$atom env0)
        ($$atom use0)
        (($$atom cdr) (($$atom vector-ref) ($$atom source0) ($$atom 0)))))))
 (define pt-and
   (lambda (source0 env0 use0)
     (letrec ((pt-exprs0
               (lambda (source1 env1 use1 exprs0)
                 (if (($$atom length?) ($$atom exprs0) ($$atom 0))
                     (($$atom vector)
                      ($$atom cst-tag)
                      ($$atom #f)
                      ($$atom '())
                      ($$atom #t)
                      ($$atom env1)
                      ($$atom source1)
                      ($$atom #t))
                     (if (($$atom length?) ($$atom exprs0) ($$atom 1))
                         (($$atom pt)
                          (($$atom car) ($$atom exprs0))
                          ($$atom env1)
                          ($$atom use1))
                         (let ((alt0 (($$atom pt-exprs0)
                                      ($$atom source1)
                                      ($$atom env1)
                                      ($$atom use1)
                                      (($$atom cdr) ($$atom exprs0))))
                               (pre0 (($$atom pt)
                                      (($$atom car) ($$atom exprs0))
                                      ($$atom env1)
                                      (if (($$atom eq?)
                                           ($$atom use1)
                                           ($$atom 'true))
                                          ($$atom 'true)
                                          ($$atom 'pred))))
                               (source2 (($$atom car) ($$atom exprs0))))
                           (let ((node0 (let ((children0
                                               (($$atom list)
                                                ($$atom pre0)
                                                ($$atom alt0))))
                                          (($$atom vector)
                                           ($$atom conj-tag)
                                           ($$atom #f)
                                           ($$atom children0)
                                           ($$atom #t)
                                           ($$atom env1)
                                           ($$atom source2)))))
                             (begin
                               (($$atom vector-set!)
                                ($$atom pre0)
                                ($$atom 1)
                                ($$atom node0))
                               (($$atom vector-set!)
                                ($$atom alt0)
                                ($$atom 1)
                                ($$atom node0))
                               ($$atom node0)))))))))
       (($$atom pt-exprs0)
        ($$atom source0)
        ($$atom env0)
        ($$atom use0)
        (($$atom cdr) (($$atom vector-ref) ($$atom source0) ($$atom 0)))))))
 (define pt-or
   (lambda (source0 env0 use0)
     (letrec ((pt-exprs0
               (lambda (source1 env1 use1 exprs0)
                 (if (($$atom length?) ($$atom exprs0) ($$atom 0))
                     (($$atom vector)
                      ($$atom cst-tag)
                      ($$atom #f)
                      ($$atom '())
                      ($$atom #t)
                      ($$atom env1)
                      ($$atom source1)
                      ($$atom #f))
                     (if (($$atom length?) ($$atom exprs0) ($$atom 1))
                         (($$atom pt)
                          (($$atom car) ($$atom exprs0))
                          ($$atom env1)
                          ($$atom use1))
                         (let ((alt0 (($$atom pt-exprs0)
                                      ($$atom source1)
                                      ($$atom env1)
                                      ($$atom use1)
                                      (($$atom cdr) ($$atom exprs0))))
                               (pre0 (($$atom pt)
                                      (($$atom car) ($$atom exprs0))
                                      ($$atom env1)
                                      (if (($$atom eq?)
                                           ($$atom use1)
                                           ($$atom 'true))
                                          ($$atom 'true)
                                          ($$atom 'pred))))
                               (source2 (($$atom car) ($$atom exprs0))))
                           (let ((node0 (let ((children0
                                               (($$atom list)
                                                ($$atom pre0)
                                                ($$atom alt0))))
                                          (($$atom vector)
                                           ($$atom disj-tag)
                                           ($$atom #f)
                                           ($$atom children0)
                                           ($$atom #t)
                                           ($$atom env1)
                                           ($$atom source2)))))
                             (begin
                               (($$atom vector-set!)
                                ($$atom pre0)
                                ($$atom 1)
                                ($$atom node0))
                               (($$atom vector-set!)
                                ($$atom alt0)
                                ($$atom 1)
                                ($$atom node0))
                               ($$atom node0)))))))))
       (($$atom pt-exprs0)
        ($$atom source0)
        ($$atom env0)
        ($$atom use0)
        (($$atom cdr) (($$atom vector-ref) ($$atom source0) ($$atom 0)))))))
 (define pt-case
   (lambda (source0 env0 use0)
     (let ((temp0 (($$atom new-temps) ($$atom source0) ($$atom '(temp))))
           (code0 (($$atom vector-ref) ($$atom source0) ($$atom 0))))
       (letrec ((pt-clauses0
                 (lambda (source1 env1 use1 temp1 clauses0)
                   (if (($$atom length?) ($$atom clauses0) ($$atom 0))
                       (($$atom vector)
                        ($$atom cst-tag)
                        ($$atom #f)
                        ($$atom '())
                        ($$atom #t)
                        ($$atom env1)
                        ($$atom source1)
                        ($$atom '|#[undefined]|))
                       (let ((clause*0 (($$atom car) ($$atom clauses0))))
                         (let ((clause0 (($$atom vector-ref)
                                         ($$atom clause*0)
                                         ($$atom 0))))
                           (if (($$atom eq?)
                                (let ((x0 (($$atom car) ($$atom clause0))))
                                  (($$atom vector-ref) ($$atom x0) ($$atom 0)))
                                ($$atom else-sym))
                               (($$atom pt-sequence)
                                ($$atom clause*0)
                                (($$atom cdr) ($$atom clause0))
                                ($$atom env1)
                                ($$atom use1))
                               (let ((alt0 (($$atom pt-clauses0)
                                            ($$atom source1)
                                            ($$atom env1)
                                            ($$atom use1)
                                            ($$atom temp1)
                                            (($$atom cdr) ($$atom clauses0))))
                                     (con0 (($$atom pt-sequence)
                                            ($$atom clause*0)
                                            (($$atom cdr) ($$atom clause0))
                                            ($$atom env1)
                                            ($$atom use1)))
                                     (pre0 (($$atom new-call*)
                                            ($$atom clause*0)
                                            (let ((d0 (($$atom list)
                                                       ($$atom safe-sym)
                                                       ($$atom #f))))
                                              (($$atom vector)
                                               (($$atom vector-ref)
                                                ($$atom env1)
                                                ($$atom 0))
                                               (($$atom vector-ref)
                                                ($$atom env1)
                                                ($$atom 1))
                                               (($$atom cons)
                                                ($$atom d0)
                                                (($$atom vector-ref)
                                                 ($$atom env1)
                                                 ($$atom 2)))
                                               (($$atom vector-ref)
                                                ($$atom env1)
                                                ($$atom 3))))
                                            (($$atom new-ref-extended-bindings)
                                             ($$atom clause*0)
                                             ($$atom **case-memv-sym)
                                             ($$atom env1))
                                            (($$atom list)
                                             (($$atom new-ref)
                                              ($$atom clause*0)
                                              ($$atom env1)
                                              (($$atom car) ($$atom temp1)))
                                             (($$atom new-cst)
                                              (($$atom car) ($$atom clause0))
                                              ($$atom env1)
                                              (($$atom source->expression)
                                               (($$atom car)
                                                ($$atom clause0))))))))
                                 (let ((node0 (let ((children0
                                                     (($$atom list)
                                                      ($$atom pre0)
                                                      ($$atom con0)
                                                      ($$atom alt0))))
                                                (($$atom vector)
                                                 ($$atom tst-tag)
                                                 ($$atom #f)
                                                 ($$atom children0)
                                                 ($$atom #t)
                                                 ($$atom env1)
                                                 ($$atom clause*0)))))
                                   (begin
                                     (($$atom vector-set!)
                                      ($$atom pre0)
                                      ($$atom 1)
                                      ($$atom node0))
                                     (($$atom vector-set!)
                                      ($$atom con0)
                                      ($$atom 1)
                                      ($$atom node0))
                                     (($$atom vector-set!)
                                      ($$atom alt0)
                                      ($$atom 1)
                                      ($$atom node0))
                                     ($$atom node0)))))))))))
         (($$atom new-call*)
          ($$atom source0)
          ($$atom env0)
          (($$atom new-prc)
           ($$atom source0)
           ($$atom env0)
           ($$atom #f)
           ($$atom 1)
           ($$atom #f)
           ($$atom temp0)
           (($$atom pt-clauses0)
            ($$atom source0)
            ($$atom env0)
            ($$atom use0)
            ($$atom temp0)
            (($$atom cdr) (($$atom cdr) ($$atom code0)))))
          (($$atom list)
           (($$atom pt)
            (($$atom car) (($$atom cdr) ($$atom code0)))
            ($$atom env0)
            ($$atom 'true))))))))
 (define pt-let
   (lambda (source0 env0 use0)
     (let ((code0 (($$atom vector-ref) ($$atom source0) ($$atom 0))))
       (if (($$atom bindable-var?)
            (($$atom car) (($$atom cdr) ($$atom code0)))
            ($$atom env0))
           (let ((self0 (($$atom new-variables)
                         (($$atom list)
                          (($$atom car) (($$atom cdr) ($$atom code0)))))))
             (let ((bindings0
                    (($$atom map)
                     ($$atom source-code)
                     (let ((x0 (($$atom car)
                                (($$atom cdr) (($$atom cdr) ($$atom code0))))))
                       (($$atom vector-ref) ($$atom x0) ($$atom 0))))))
               (let ((vars0 (($$atom new-variables)
                             (($$atom map) ($$atom car) ($$atom bindings0)))))
                 (let ((vals0 (($$atom map)
                               (lambda (x0)
                                 (($$atom pt)
                                  (($$atom car) (($$atom cdr) ($$atom x0)))
                                  ($$atom env0)
                                  ($$atom 'true)))
                               ($$atom bindings0))))
                   (let ((env1 (let ((env1 (($$atom env-frame)
                                            ($$atom env0)
                                            ($$atom vars0))))
                                 (($$atom vector)
                                  (($$atom cons) ($$atom self0) ($$atom #f))
                                  ($$atom '())
                                  ($$atom '())
                                  ($$atom env1)))))
                     (let ((self-proc0
                            (($$atom list)
                             (($$atom new-prc)
                              ($$atom source0)
                              ($$atom env1)
                              ($$atom #f)
                              (($$atom length) ($$atom vars0))
                              ($$atom #f)
                              ($$atom vars0)
                              (($$atom pt-body)
                               ($$atom source0)
                               (($$atom cdr)
                                (($$atom cdr) (($$atom cdr) ($$atom code0))))
                               ($$atom env1)
                               ($$atom use0))))))
                       (begin
                         (($$atom set-prc-names!)
                          ($$atom self0)
                          ($$atom self-proc0))
                         (($$atom set-prc-names!)
                          ($$atom vars0)
                          ($$atom vals0))
                         (($$atom new-call*)
                          ($$atom source0)
                          ($$atom env1)
                          (($$atom new-prc)
                           ($$atom source0)
                           ($$atom env1)
                           ($$atom #f)
                           ($$atom 1)
                           ($$atom #f)
                           ($$atom self0)
                           (($$atom new-call*)
                            ($$atom source0)
                            ($$atom env1)
                            (($$atom new-ref)
                             ($$atom source0)
                             ($$atom env1)
                             (($$atom car) ($$atom self0)))
                            ($$atom vals0)))
                          ($$atom self-proc0)))))))))
           (if (($$atom null?)
                (let ((x0 (($$atom car) (($$atom cdr) ($$atom code0)))))
                  (($$atom vector-ref) ($$atom x0) ($$atom 0))))
               (($$atom pt-body)
                ($$atom source0)
                (($$atom cdr) (($$atom cdr) ($$atom code0)))
                ($$atom env0)
                ($$atom use0))
               (let ((bindings0
                      (($$atom map)
                       ($$atom source-code)
                       (let ((x0 (($$atom car) (($$atom cdr) ($$atom code0)))))
                         (($$atom vector-ref) ($$atom x0) ($$atom 0))))))
                 (let ((vars0 (($$atom new-variables)
                               (($$atom map)
                                ($$atom car)
                                ($$atom bindings0)))))
                   (let ((vals0 (($$atom map)
                                 (lambda (x0)
                                   (($$atom pt)
                                    (($$atom car) (($$atom cdr) ($$atom x0)))
                                    ($$atom env0)
                                    ($$atom 'true)))
                                 ($$atom bindings0))))
                     (let ((env1 (($$atom env-frame)
                                  ($$atom env0)
                                  ($$atom vars0))))
                       (begin
                         (($$atom set-prc-names!)
                          ($$atom vars0)
                          ($$atom vals0))
                         (($$atom new-call*)
                          ($$atom source0)
                          ($$atom env1)
                          (($$atom new-prc)
                           ($$atom source0)
                           ($$atom env1)
                           ($$atom #f)
                           (($$atom length) ($$atom vars0))
                           ($$atom #f)
                           ($$atom vars0)
                           (($$atom pt-body)
                            ($$atom source0)
                            (($$atom cdr) (($$atom cdr) ($$atom code0)))
                            ($$atom env1)
                            ($$atom use0)))
                          ($$atom vals0))))))))))))
 (define pt-let*
   (lambda (source0 env0 use0)
     (let ((code0 (($$atom vector-ref) ($$atom source0) ($$atom 0))))
       (letrec ((pt-bindings0
                 (lambda (source1 code1 bindings0 env1 use1)
                   (if (($$atom null?) ($$atom bindings0))
                       (($$atom pt-body)
                        ($$atom source1)
                        (($$atom cdr) (($$atom cdr) ($$atom code1)))
                        ($$atom env1)
                        ($$atom use1))
                       (let ((binding*0 (($$atom car) ($$atom bindings0))))
                         (let ((binding0
                                (($$atom vector-ref)
                                 ($$atom binding*0)
                                 ($$atom 0))))
                           (let ((vars0 (($$atom new-variables)
                                         (($$atom list)
                                          (($$atom car) ($$atom binding0))))))
                             (let ((vals0 (($$atom list)
                                           (($$atom pt)
                                            (($$atom car)
                                             (($$atom cdr) ($$atom binding0)))
                                            ($$atom env1)
                                            ($$atom 'true)))))
                               (let ((env2 (($$atom env-frame)
                                            ($$atom env1)
                                            ($$atom vars0))))
                                 (begin
                                   (($$atom set-prc-names!)
                                    ($$atom vars0)
                                    ($$atom vals0))
                                   (($$atom new-call*)
                                    ($$atom binding*0)
                                    ($$atom env2)
                                    (($$atom new-prc)
                                     ($$atom binding*0)
                                     ($$atom env2)
                                     ($$atom #f)
                                     ($$atom 1)
                                     ($$atom #f)
                                     ($$atom vars0)
                                     (($$atom pt-bindings0)
                                      ($$atom source1)
                                      ($$atom code1)
                                      (($$atom cdr) ($$atom bindings0))
                                      ($$atom env2)
                                      ($$atom use1)))
                                    ($$atom vals0))))))))))))
         (($$atom pt-bindings0)
          ($$atom source0)
          ($$atom code0)
          (let ((x0 (($$atom car) (($$atom cdr) ($$atom code0)))))
            (($$atom vector-ref) ($$atom x0) ($$atom 0)))
          ($$atom env0)
          ($$atom use0))))))
 (define pt-letrec
   (lambda (source0 env0 use0)
     (let ((code0 (($$atom vector-ref) ($$atom source0) ($$atom 0))))
       (let ((bindings0
              (($$atom map)
               ($$atom source-code)
               (let ((x0 (($$atom car) (($$atom cdr) ($$atom code0)))))
                 (($$atom vector-ref) ($$atom x0) ($$atom 0))))))
         (let ((vars*0 (($$atom new-variables)
                        (($$atom map) ($$atom car) ($$atom bindings0)))))
           (let ((env*0 (($$atom env-frame) ($$atom env0) ($$atom vars*0))))
             (($$atom pt-recursive-let)
              ($$atom source0)
              ($$atom vars*0)
              (($$atom map)
               (lambda (x0)
                 (($$atom pt)
                  (($$atom car) (($$atom cdr) ($$atom x0)))
                  ($$atom env*0)
                  ($$atom 'true)))
               ($$atom bindings0))
              (($$atom cdr) (($$atom cdr) ($$atom code0)))
              ($$atom env*0)
              ($$atom use0))))))))
 (define pt-recursive-let
   (lambda (source0 vars0 vals0 body0 env0 use0)
     (letrec ((bind-in-order0
               (lambda (source1 vars1 vals1 body1 env1 use1 order0)
                 (if (($$atom null?) ($$atom order0))
                     (($$atom pt-body)
                      ($$atom source1)
                      ($$atom body1)
                      ($$atom env1)
                      ($$atom use1))
                     (let ((vars-set0 (($$atom car) ($$atom order0))))
                       (letrec ((loop10 (lambda (source2
                                                 vars2
                                                 vals2
                                                 body2
                                                 env2
                                                 use2
                                                 order1
                                                 vars-set1
                                                 l0
                                                 vars-b0
                                                 vals-b0
                                                 vars-a0)
                                          (if (($$atom null?) ($$atom l0))
                                              (let ((result10
                                                     (letrec ((loop20 (lambda (source3
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                       vars3
                                       vals3
                                       body3
                                       env3
                                       use3
                                       order2
                                       l1)
                                (if (($$atom null?) ($$atom l1))
                                    (($$atom bind-in-order0)
                                     ($$atom source3)
                                     ($$atom vars3)
                                     ($$atom vals3)
                                     ($$atom body3)
                                     ($$atom env3)
                                     ($$atom use3)
                                     (($$atom cdr) ($$atom order2)))
                                    (let ((var0 (($$atom car) ($$atom l1))))
                                      (let ((val0 (($$atom val-of0)
                                                   ($$atom vars3)
                                                   ($$atom vals3)
                                                   ($$atom var0))))
                                        (let ((after0 (($$atom loop20)
                                                       ($$atom source3)
                                                       ($$atom vars3)
                                                       ($$atom vals3)
                                                       ($$atom body3)
                                                       ($$atom env3)
                                                       ($$atom use3)
                                                       ($$atom order2)
                                                       (($$atom cdr)
                                                        ($$atom l1))))
                                              (before0 (($$atom new-set)
                                                        ($$atom source3)
                                                        ($$atom env3)
                                                        ($$atom var0)
                                                        ($$atom val0))))
                                          (($$atom new-call*)
                                           ($$atom source3)
                                           ($$atom env3)
                                           (($$atom new-prc)
                                            ($$atom source3)
                                            ($$atom env3)
                                            ($$atom #f)
                                            ($$atom 1)
                                            ($$atom #f)
                                            (($$atom new-temps)
                                             ($$atom source3)
                                             ($$atom '(temp)))
                                            ($$atom after0))
                                           (($$atom list)
                                            ($$atom before0))))))))))
               (($$atom loop20)
                ($$atom source2)
                ($$atom vars2)
                ($$atom vals2)
                ($$atom body2)
                ($$atom env2)
                ($$atom use2)
                ($$atom order1)
                ($$atom vars-a0)))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                (let ((result20
                                                       (if (($$atom null?)
                                                            ($$atom vars-b0))
                                                           ($$atom result10)
                                                           (($$atom new-call*)
                                                            ($$atom source2)
                                                            ($$atom env2)
                                                            (($$atom new-prc)
                                                             ($$atom source2)
                                                             ($$atom env2)
                                                             ($$atom #f)
                                                             (($$atom length)
                                                              ($$atom vars-b0))
                                                             ($$atom #f)
                                                             ($$atom vars-b0)
                                                             ($$atom result10))
                                                            ($$atom vals-b0)))))
                                                  (let ((result30
                                                         (if (($$atom null?)
                                                              ($$atom vars-a0))
                                                             ($$atom result20)
                                                             (($$atom new-call*)
                                                              ($$atom source2)
                                                              ($$atom env2)
                                                              (($$atom new-prc)
                                                               ($$atom source2)
                                                               ($$atom env2)
                                                               ($$atom #f)
                                                               (($$atom length)
                                                                ($$atom vars-a0))
                                                               ($$atom #f)
                                                               ($$atom vars-a0)
                                                               ($$atom result20))
                                                              (($$atom map)
                                                               (lambda (var0)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                         (($$atom vector)
                          ($$atom cst-tag)
                          ($$atom #f)
                          ($$atom '())
                          ($$atom #t)
                          ($$atom env2)
                          ($$atom source2)
                          ($$atom '|#[undefined]|)))
                       ($$atom vars-a0))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                    ($$atom result30))))
                                              (let ((var0 (($$atom car)
                                                           ($$atom l0))))
                                                (let ((val0 (($$atom val-of0)
                                                             ($$atom vars2)
                                                             ($$atom vals2)
                                                             ($$atom var0))))
                                                  (if (let ((g480 (($$atom prc?)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                           ($$atom val0))))
                (if ($$atom g480)
                    ($$atom g480)
                    (let ((set0 (($$atom set-intersection)
                                 (($$atom free-variables) ($$atom val0))
                                 ($$atom vars-set1))))
                      (($$atom null?) ($$atom set0)))))
              (($$atom loop10)
               ($$atom source2)
               ($$atom vars2)
               ($$atom vals2)
               ($$atom body2)
               ($$atom env2)
               ($$atom use2)
               ($$atom order1)
               ($$atom vars-set1)
               (($$atom cdr) ($$atom l0))
               (($$atom cons) ($$atom var0) ($$atom vars-b0))
               (($$atom cons) ($$atom val0) ($$atom vals-b0))
               ($$atom vars-a0))
              (($$atom loop10)
               ($$atom source2)
               ($$atom vars2)
               ($$atom vals2)
               ($$atom body2)
               ($$atom env2)
               ($$atom use2)
               ($$atom order1)
               ($$atom vars-set1)
               (($$atom cdr) ($$atom l0))
               ($$atom vars-b0)
               ($$atom vals-b0)
               (($$atom cons) ($$atom var0) ($$atom vars-a0))))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                         (($$atom loop10)
                          ($$atom source1)
                          ($$atom vars1)
                          ($$atom vals1)
                          ($$atom body1)
                          ($$atom env1)
                          ($$atom use1)
                          ($$atom order0)
                          ($$atom vars-set0)
                          (($$atom reverse) ($$atom vars-set0))
                          ($$atom '())
                          ($$atom '())
                          ($$atom '())))))))
              (val-of0 (lambda (vars1 vals1 var0)
                         (($$atom list-ref)
                          ($$atom vals1)
                          (($$atom -)
                           (($$atom length) ($$atom vars1))
                           (($$atom length)
                            (($$atom memq) ($$atom var0) ($$atom vars1))))))))
       (begin
         (($$atom set-prc-names!) ($$atom vars0) ($$atom vals0))
         (($$atom bind-in-order0)
          ($$atom source0)
          ($$atom vars0)
          ($$atom vals0)
          ($$atom body0)
          ($$atom env0)
          ($$atom use0)
          (($$atom topological-sort)
           (($$atom transitive-closure)
            (letrec ((dgraph0 (lambda (vars1 vars*0 vals*0)
                                (if (($$atom null?) ($$atom vars*0))
                                    ($$atom '())
                                    (let ((var0 (($$atom car) ($$atom vars*0)))
                                          (val0 (($$atom car)
                                                 ($$atom vals*0))))
                                      (let ((set0 (($$atom dgraph0)
                                                   ($$atom vars1)
                                                   (($$atom cdr)
                                                    ($$atom vars*0))
                                                   (($$atom cdr)
                                                    ($$atom vals*0))))
                                            (x0 (let ((edges0 (($$atom set-intersection)
                                                               ($$atom vars1)
                                                               (($$atom free-variables)
                                                                ($$atom val0)))))
                                                  (($$atom vector)
                                                   ($$atom var0)
                                                   ($$atom edges0)))))
                                        (if (($$atom memq)
                                             ($$atom x0)
                                             ($$atom set0))
                                            ($$atom set0)
                                            (($$atom cons)
                                             ($$atom x0)
                                             ($$atom set0)))))))))
              (($$atom dgraph0)
               ($$atom vars0)
               ($$atom vars0)
               ($$atom vals0))))))))))
 (define pt-begin
   (lambda (source0 env0 use0)
     (($$atom pt-sequence)
      ($$atom source0)
      (($$atom cdr) (($$atom vector-ref) ($$atom source0) ($$atom 0)))
      ($$atom env0)
      ($$atom use0))))
 (define pt-do
   (lambda (source0 env0 use0)
     (let ((code0 (($$atom vector-ref) ($$atom source0) ($$atom 0))))
       (let ((loop0 (($$atom new-temps) ($$atom source0) ($$atom '(loop)))))
         (let ((bindings0
                (($$atom map)
                 ($$atom source-code)
                 (let ((x0 (($$atom car) (($$atom cdr) ($$atom code0)))))
                   (($$atom vector-ref) ($$atom x0) ($$atom 0))))))
           (let ((vars0 (($$atom new-variables)
                         (($$atom map) ($$atom car) ($$atom bindings0)))))
             (let ((init0 (($$atom map)
                           (lambda (x0)
                             (($$atom pt)
                              (($$atom car) (($$atom cdr) ($$atom x0)))
                              ($$atom env0)
                              ($$atom 'true)))
                           ($$atom bindings0))))
               (let ((env1 (($$atom env-frame) ($$atom env0) ($$atom vars0))))
                 (let ((step0 (($$atom map)
                               (lambda (x0)
                                 (($$atom pt)
                                  (if (($$atom length?) ($$atom x0) ($$atom 2))
                                      (($$atom car) ($$atom x0))
                                      (($$atom car)
                                       (($$atom cdr)
                                        (($$atom cdr) ($$atom x0)))))
                                  ($$atom env1)
                                  ($$atom 'true)))
                               ($$atom bindings0))))
                   (let ((exit0 (let ((x0 (($$atom car)
                                           (($$atom cdr)
                                            (($$atom cdr) ($$atom code0))))))
                                  (($$atom vector-ref)
                                   ($$atom x0)
                                   ($$atom 0)))))
                     (begin
                       (($$atom set-prc-names!) ($$atom vars0) ($$atom init0))
                       (let ((args0 (($$atom list)
                                     (($$atom new-prc)
                                      ($$atom source0)
                                      (($$atom env-declarations) ($$atom env1))
                                      ($$atom #f)
                                      (($$atom length) ($$atom vars0))
                                      ($$atom #f)
                                      ($$atom vars0)
                                      (($$atom new-tst)
                                       ($$atom source0)
                                       (($$atom env-declarations)
                                        ($$atom env1))
                                       (($$atom pt)
                                        (($$atom car) ($$atom exit0))
                                        ($$atom env1)
                                        ($$atom 'pred))
                                       (if (($$atom length?)
                                            ($$atom exit0)
                                            ($$atom 1))
                                           (($$atom new-cst)
                                            (($$atom car)
                                             (($$atom cdr)
                                              (($$atom cdr) ($$atom code0))))
                                            (($$atom env-declarations)
                                             ($$atom env1))
                                            ($$atom '|#[undefined]|))
                                           (($$atom pt-sequence)
                                            (($$atom car)
                                             (($$atom cdr)
                                              (($$atom cdr) ($$atom code0))))
                                            (($$atom cdr) ($$atom exit0))
                                            ($$atom env1)
                                            ($$atom use0)))
                                       (if (($$atom length?)
                                            ($$atom code0)
                                            ($$atom 3))
                                           (($$atom new-call*)
                                            ($$atom source0)
                                            (($$atom env-declarations)
                                             ($$atom env1))
                                            (($$atom new-ref)
                                             ($$atom source0)
                                             (($$atom env-declarations)
                                              ($$atom env1))
                                             (($$atom car) ($$atom loop0)))
                                            ($$atom step0))
                                           (($$atom new-seq)
                                            ($$atom source0)
                                            (($$atom env-declarations)
                                             ($$atom env1))
                                            (($$atom pt-sequence)
                                             ($$atom source0)
                                             (($$atom cdr)
                                              (($$atom cdr)
                                               (($$atom cdr) ($$atom code0))))
                                             ($$atom env1)
                                             ($$atom 'none))
                                            (($$atom new-call*)
                                             ($$atom source0)
                                             (($$atom env-declarations)
                                              ($$atom env1))
                                             (($$atom new-ref)
                                              ($$atom source0)
                                              (($$atom env-declarations)
                                               ($$atom env1))
                                              (($$atom car) ($$atom loop0)))
                                             ($$atom step0))))))))
                             (oper0 (($$atom new-prc)
                                     ($$atom source0)
                                     ($$atom env1)
                                     ($$atom #f)
                                     ($$atom 1)
                                     ($$atom #f)
                                     ($$atom loop0)
                                     (($$atom new-call*)
                                      ($$atom source0)
                                      ($$atom env1)
                                      (($$atom new-ref)
                                       ($$atom source0)
                                       ($$atom env1)
                                       (($$atom car) ($$atom loop0)))
                                      ($$atom init0)))))
                         (begin
                           (if ($$atom *ptree-port*)
                               (if (if (($$atom vector?) ($$atom oper0))
                                       (if (($$atom >)
                                            (($$atom vector-length)
                                             ($$atom oper0))
                                            ($$atom 0))
                                           (($$atom eq?)
                                            (($$atom vector-ref)
                                             ($$atom oper0)
                                             ($$atom 0))
                                            ($$atom ref-tag))
                                           ($$atom #f))
                                       ($$atom #f))
                                   (let ((var0 (($$atom vector-ref)
                                                ($$atom oper0)
                                                ($$atom 6))))
                                     (if (($$atom vector-ref)
                                          ($$atom var0)
                                          ($$atom 2))
                                         ($$atom #f)
                                         (let ((proc0 (let ((name0 (($$atom vector-ref)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                            ($$atom var0)
                            ($$atom 1)))
                    (decl0 (($$atom vector-ref) ($$atom oper0) ($$atom 4))))
                (let ((g490 (($$atom assq)
                             ($$atom name0)
                             (let ((dialect0
                                    (($$atom declaration-value)
                                     ($$atom 'dialect)
                                     ($$atom #f)
                                     ($$atom ieee-scheme-sym)
                                     ($$atom decl0))))
                               (if (($$atom eq?)
                                    ($$atom dialect0)
                                    ($$atom ieee-scheme-sym))
                                   ($$atom ieee-scheme-specific-procedures)
                                   (if (($$atom eq?)
                                        ($$atom dialect0)
                                        ($$atom r4rs-scheme-sym))
                                       ($$atom r4rs-scheme-specific-procedures)
                                       (if (($$atom eq?)
                                            ($$atom dialect0)
                                            ($$atom multilisp-sym))
                                           ($$atom multilisp-specific-procedures)
                                           (($$atom compiler-internal-error)
                                            ($$atom "dialect-specific-procedures, unknown dialect")
                                            ($$atom dialect0)))))))))
                  (if ($$atom g490)
                      ($$atom g490)
                      (($$atom assq)
                       ($$atom name0)
                       ($$atom common-procedures)))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                           (if (if ($$atom proc0)
                                                   (($$atom not)
                                                    (let ((n0 (($$atom length)
                                                               ($$atom args0)))
                                                          (call-pat0
                                                           (($$atom cdr)
                                                            ($$atom proc0))))
                                                      (if (($$atom pair?)
                                                           ($$atom call-pat0))
                                                          (if (($$atom =)
                                                               (($$atom car)
                                                                ($$atom call-pat0))
                                                               ($$atom n0))
                                                              ($$atom #t)
                                                              (($$atom pattern-member?)
                                                               ($$atom n0)
                                                               (($$atom cdr)
                                                                ($$atom call-pat0))))
                                                          (if (($$atom null?)
                                                               ($$atom call-pat0))
                                                              ($$atom #f)
                                                              (($$atom <=)
                                                               ($$atom call-pat0)
                                                               ($$atom n0))))))
                                                   ($$atom #f))
                                               (begin
                                                 (($$atom display)
                                                  ($$atom "*** WARNING -- \"")
                                                  ($$atom *ptree-port*))
                                                 (($$atom display)
                                                  (($$atom vector-ref)
                                                   ($$atom var0)
                                                   ($$atom 1))
                                                  ($$atom *ptree-port*))
                                                 (($$atom display)
                                                  ($$atom "\" is called with ")
                                                  ($$atom *ptree-port*))
                                                 (($$atom display)
                                                  (($$atom length)
                                                   ($$atom args0))
                                                  ($$atom *ptree-port*))
                                                 (($$atom display)
                                                  ($$atom " argument(s).")
                                                  ($$atom *ptree-port*))
                                                 (($$atom newline)
                                                  ($$atom *ptree-port*)))
                                               ($$atom #f)))))
                                   ($$atom #f))
                               ($$atom #f))
                           (($$atom new-call)
                            ($$atom source0)
                            ($$atom env1)
                            ($$atom oper0)
                            ($$atom args0)))))))))))))))
 (define pt-combination
   (lambda (source0 env0 use0)
     (let ((code0 (($$atom vector-ref) ($$atom source0) ($$atom 0))))
       (let ((oper0 (($$atom pt)
                     (($$atom car) ($$atom code0))
                     ($$atom env0)
                     ($$atom 'true))))
         (begin
           (($$atom vector-ref) ($$atom oper0) ($$atom 4))
           (($$atom new-call*)
            ($$atom source0)
            ($$atom env0)
            ($$atom oper0)
            (($$atom map)
             (lambda (x0)
               (($$atom pt) ($$atom x0) ($$atom env0) ($$atom 'true)))
             (($$atom cdr) ($$atom code0)))))))))
 (define pt-delay
   (lambda (source0 env0 use0)
     (let ((code0 (($$atom vector-ref) ($$atom source0) ($$atom 0))))
       (($$atom new-call*)
        ($$atom source0)
        (($$atom add-not-safe) ($$atom env0))
        (($$atom new-ref-extended-bindings)
         ($$atom source0)
         ($$atom **make-placeholder-sym)
         ($$atom env0))
        (($$atom list)
         (($$atom new-prc)
          ($$atom source0)
          ($$atom env0)
          ($$atom #f)
          ($$atom 0)
          ($$atom #f)
          ($$atom '())
          (($$atom pt)
           (($$atom car) (($$atom cdr) ($$atom code0)))
           ($$atom env0)
           ($$atom 'true))))))))
 (define pt-future
   (lambda (source0 env0 use0)
     (let ((code0 (($$atom vector-ref) ($$atom source0) ($$atom 0))))
       (($$atom new-fut)
        ($$atom source0)
        ($$atom env0)
        (($$atom pt)
         (($$atom car) (($$atom cdr) ($$atom code0)))
         ($$atom env0)
         ($$atom 'true))))))
 (define self-eval-expr?
   (lambda (source0)
     (let ((code0 (($$atom vector-ref) ($$atom source0) ($$atom 0))))
       (if (($$atom pair?) ($$atom code0))
           ($$atom #f)
           (($$atom not) (($$atom symbol-object?) ($$atom code0)))))))
 (define quote-expr?
   (lambda (source0)
     (($$atom mymatch) ($$atom quote-sym) ($$atom 1) ($$atom source0))))
 (define quasiquote-expr?
   (lambda (source0)
     (($$atom mymatch) ($$atom quasiquote-sym) ($$atom 1) ($$atom source0))))
 (define unquote-expr?
   (lambda (source0)
     (($$atom mymatch) ($$atom unquote-sym) ($$atom 1) ($$atom source0))))
 (define unquote-splicing-expr?
   (lambda (source0)
     (($$atom mymatch)
      ($$atom unquote-splicing-sym)
      ($$atom 1)
      ($$atom source0))))
 (define var-expr?
   (lambda (source0 env0)
     (let ((code0 (($$atom vector-ref) ($$atom source0) ($$atom 0))))
       (if (($$atom symbol-object?) ($$atom code0))
           (if (($$atom not-keyword)
                ($$atom source0)
                ($$atom env0)
                ($$atom code0))
               (($$atom not-macro)
                ($$atom source0)
                ($$atom env0)
                ($$atom code0))
               ($$atom #f))
           ($$atom #f)))))
 (define not-macro
   (lambda (source0 env0 name0)
     (if (($$atom env-lookup-macro) ($$atom env0) ($$atom name0))
         (($$atom pt-syntax-error)
          ($$atom source0)
          ($$atom "Macro name can't be used as a variable:")
          ($$atom name0))
         ($$atom #t))))
 (define bindable-var?
   (lambda (source0 env0)
     (let ((code0 (($$atom vector-ref) ($$atom source0) ($$atom 0))))
       (if (($$atom symbol-object?) ($$atom code0))
           (($$atom not-keyword) ($$atom source0) ($$atom env0) ($$atom code0))
           ($$atom #f)))))
 (define not-keyword
   (lambda (source0 env0 name0)
     (if (let ((g500 (($$atom memq) ($$atom name0) ($$atom common-keywords))))
           (if ($$atom g500)
               ($$atom g500)
               (($$atom memq)
                ($$atom name0)
                (($$atom dialect-specific-keywords)
                 (($$atom declaration-value)
                  ($$atom 'dialect)
                  ($$atom #f)
                  ($$atom ieee-scheme-sym)
                  ($$atom env0))))))
         (($$atom pt-syntax-error)
          ($$atom source0)
          ($$atom "Predefined keyword can't be used as a variable:")
          ($$atom name0))
         ($$atom #t))))
 (define set!-expr?
   (lambda (source0 env0)
     (if (($$atom mymatch) ($$atom set!-sym) ($$atom 2) ($$atom source0))
         (($$atom var-expr?)
          (($$atom car)
           (($$atom cdr) (($$atom vector-ref) ($$atom source0) ($$atom 0))))
          ($$atom env0))
         ($$atom #f))))
 (define lambda-expr?
   (lambda (source0 env0)
     (if (($$atom mymatch) ($$atom lambda-sym) ($$atom -2) ($$atom source0))
         (($$atom proper-parms?)
          (($$atom source->parms)
           (($$atom car)
            (($$atom cdr) (($$atom vector-ref) ($$atom source0) ($$atom 0)))))
          ($$atom env0))
         ($$atom #f))))
 (define if-expr?
   (lambda (source0)
     (if (($$atom mymatch) ($$atom if-sym) ($$atom -2) ($$atom source0))
         (let ((g510 (($$atom <=)
                      (($$atom length)
                       (($$atom vector-ref) ($$atom source0) ($$atom 0)))
                      ($$atom 4))))
           (if ($$atom g510)
               ($$atom g510)
               (($$atom pt-syntax-error)
                ($$atom source0)
                ($$atom "Ill-formed special form")
                ($$atom if-sym))))
         ($$atom #f))))
 (define cond-expr?
   (lambda (source0)
     (if (($$atom mymatch) ($$atom cond-sym) ($$atom -1) ($$atom source0))
         (($$atom proper-clauses?) ($$atom source0))
         ($$atom #f))))
 (define and-expr?
   (lambda (source0)
     (($$atom mymatch) ($$atom and-sym) ($$atom 0) ($$atom source0))))
 (define or-expr?
   (lambda (source0)
     (($$atom mymatch) ($$atom or-sym) ($$atom 0) ($$atom source0))))
 (define case-expr?
   (lambda (source0)
     (if (($$atom mymatch) ($$atom case-sym) ($$atom -2) ($$atom source0))
         (($$atom proper-case-clauses?) ($$atom source0))
         ($$atom #f))))
 (define let-expr?
   (lambda (source0 env0)
     (if (($$atom mymatch) ($$atom let-sym) ($$atom -2) ($$atom source0))
         (let ((code0 (($$atom vector-ref) ($$atom source0) ($$atom 0))))
           (if (($$atom bindable-var?)
                (($$atom car) (($$atom cdr) ($$atom code0)))
                ($$atom env0))
               (if (($$atom proper-bindings?)
                    (($$atom car) (($$atom cdr) (($$atom cdr) ($$atom code0))))
                    ($$atom #t)
                    ($$atom env0))
                   (let ((g520 (($$atom >)
                                (($$atom length) ($$atom code0))
                                ($$atom 3))))
                     (if ($$atom g520)
                         ($$atom g520)
                         (($$atom pt-syntax-error)
                          ($$atom source0)
                          ($$atom "Ill-formed named 'let'"))))
                   ($$atom #f))
               (($$atom proper-bindings?)
                (($$atom car) (($$atom cdr) ($$atom code0)))
                ($$atom #t)
                ($$atom env0))))
         ($$atom #f))))
 (define let*-expr?
   (lambda (source0 env0)
     (if (($$atom mymatch) ($$atom let*-sym) ($$atom -2) ($$atom source0))
         (($$atom proper-bindings?)
          (($$atom car)
           (($$atom cdr) (($$atom vector-ref) ($$atom source0) ($$atom 0))))
          ($$atom #f)
          ($$atom env0))
         ($$atom #f))))
 (define letrec-expr?
   (lambda (source0 env0)
     (if (($$atom mymatch) ($$atom letrec-sym) ($$atom -2) ($$atom source0))
         (($$atom proper-bindings?)
          (($$atom car)
           (($$atom cdr) (($$atom vector-ref) ($$atom source0) ($$atom 0))))
          ($$atom #t)
          ($$atom env0))
         ($$atom #f))))
 (define begin-expr?
   (lambda (source0)
     (($$atom mymatch) ($$atom begin-sym) ($$atom -1) ($$atom source0))))
 (define do-expr?
   (lambda (source0 env0)
     (if (($$atom mymatch) ($$atom do-sym) ($$atom -2) ($$atom source0))
         (if (($$atom proper-do-bindings?) ($$atom source0) ($$atom env0))
             (($$atom proper-do-exit?) ($$atom source0))
             ($$atom #f))
         ($$atom #f))))
 (define define-expr?
   (lambda (source0 env0)
     (if (($$atom mymatch) ($$atom define-sym) ($$atom -1) ($$atom source0))
         (if (($$atom proper-definition?) ($$atom source0) ($$atom env0))
             (let ((v0 (($$atom definition-variable) ($$atom source0))))
               (($$atom not-macro)
                ($$atom v0)
                ($$atom env0)
                (($$atom vector-ref) ($$atom v0) ($$atom 0))))
             ($$atom #f))
         ($$atom #f))))
 (define combination-expr?
   (lambda (source0)
     (let ((length0 (($$atom proper-length)
                     (($$atom vector-ref) ($$atom source0) ($$atom 0)))))
       (if ($$atom length0)
           (let ((g530 (($$atom >) ($$atom length0) ($$atom 0))))
             (if ($$atom g530)
                 ($$atom g530)
                 (($$atom pt-syntax-error)
                  ($$atom source0)
                  ($$atom "Ill-formed procedure call"))))
           (($$atom pt-syntax-error)
            ($$atom source0)
            ($$atom "Ill-terminated procedure call"))))))
 (define delay-expr?
   (lambda (source0 env0)
     (if (($$atom eq?)
          (($$atom declaration-value)
           ($$atom 'dialect)
           ($$atom #f)
           ($$atom ieee-scheme-sym)
           ($$atom env0))
          ($$atom ieee-scheme-sym))
         ($$atom #f)
         (($$atom mymatch) ($$atom delay-sym) ($$atom 1) ($$atom source0)))))
 (define future-expr?
   (lambda (source0 env0)
     (if (($$atom eq?)
          (($$atom declaration-value)
           ($$atom 'dialect)
           ($$atom #f)
           ($$atom ieee-scheme-sym)
           ($$atom env0))
          ($$atom multilisp-sym))
         (($$atom mymatch) ($$atom future-sym) ($$atom 1) ($$atom source0))
         ($$atom #f))))
 (define macro-expr?
   (lambda (source0 env0)
     (let ((code0 (($$atom vector-ref) ($$atom source0) ($$atom 0))))
       (if (($$atom pair?) ($$atom code0))
           (if (($$atom symbol-object?)
                (let ((x0 (($$atom car) ($$atom code0))))
                  (($$atom vector-ref) ($$atom x0) ($$atom 0))))
               (let ((macr0 (($$atom env-lookup-macro)
                             ($$atom env0)
                             (let ((x0 (($$atom car) ($$atom code0))))
                               (($$atom vector-ref) ($$atom x0) ($$atom 0))))))
                 (if ($$atom macr0)
                     (let ((len0 (($$atom proper-length)
                                  (($$atom cdr) ($$atom code0)))))
                       (if ($$atom len0)
                           (let ((size0 (($$atom car) ($$atom macr0)))
                                 (len*0 (($$atom +) ($$atom len0) ($$atom 1))))
                             (let ((g540 (if (($$atom >)
                                              ($$atom size0)
                                              ($$atom 0))
                                             (($$atom =)
                                              ($$atom len*0)
                                              ($$atom size0))
                                             (($$atom >=)
                                              ($$atom len*0)
                                              (($$atom *)
                                               ($$atom -1)
                                               ($$atom size0))))))
                               (if ($$atom g540)
                                   ($$atom g540)
                                   (($$atom pt-syntax-error)
                                    ($$atom source0)
                                    ($$atom "Ill-formed macro form")))))
                           (($$atom pt-syntax-error)
                            ($$atom source0)
                            ($$atom "Ill-terminated macro form"))))
                     ($$atom #f)))
               ($$atom #f))
           ($$atom #f)))))
 (define define-macro-expr?
   (lambda (source0 env0)
     (if (($$atom mymatch)
          ($$atom **define-macro-sym)
          ($$atom -1)
          ($$atom source0))
         (($$atom proper-definition?) ($$atom source0) ($$atom env0))
         ($$atom #f))))
 (define declare-expr?
   (lambda (source0)
     (($$atom mymatch) ($$atom **declare-sym) ($$atom -1) ($$atom source0))))
 (define include-expr?
   (lambda (source0)
     (($$atom mymatch) ($$atom **include-sym) ($$atom 1) ($$atom source0))))
 (define begin-defs-expr?
   (lambda (source0)
     (($$atom mymatch) ($$atom begin-sym) ($$atom 0) ($$atom source0))))
 (define mymatch
   (lambda (keyword0 size0 source0)
     (let ((code0 (($$atom vector-ref) ($$atom source0) ($$atom 0))))
       (if (($$atom pair?) ($$atom code0))
           (if (($$atom eq?)
                (let ((x0 (($$atom car) ($$atom code0))))
                  (($$atom vector-ref) ($$atom x0) ($$atom 0)))
                ($$atom keyword0))
               (let ((length0 (($$atom proper-length)
                               (($$atom cdr) ($$atom code0)))))
                 (if ($$atom length0)
                     (let ((g550 (if (($$atom >) ($$atom size0) ($$atom 0))
                                     (($$atom =)
                                      ($$atom length0)
                                      ($$atom size0))
                                     (($$atom >=)
                                      ($$atom length0)
                                      (($$atom *)
                                       ($$atom -1)
                                       ($$atom size0))))))
                       (if ($$atom g550)
                           ($$atom g550)
                           (($$atom pt-syntax-error)
                            ($$atom source0)
                            ($$atom "Ill-formed special form")
                            ($$atom keyword0))))
                     (($$atom pt-syntax-error)
                      ($$atom source0)
                      ($$atom "Ill-terminated special form")
                      ($$atom keyword0))))
               ($$atom #f))
           ($$atom #f)))))
 (define proper-length
   (lambda (l0)
     (letrec ((length0 (lambda (l1 n0)
                         (if (($$atom pair?) ($$atom l1))
                             (($$atom length0)
                              (($$atom cdr) ($$atom l1))
                              (($$atom +) ($$atom n0) ($$atom 1)))
                             (if (($$atom null?) ($$atom l1))
                                 ($$atom n0)
                                 ($$atom #f))))))
       (($$atom length0) ($$atom l0) ($$atom 0)))))
 (define proper-definition?
   (lambda (source0 env0)
     (let ((code0 (($$atom vector-ref) ($$atom source0) ($$atom 0))))
       (let ((pattern*0 (($$atom car) (($$atom cdr) ($$atom code0)))))
         (let ((pattern0 (($$atom vector-ref) ($$atom pattern*0) ($$atom 0))))
           (let ((body0 (($$atom cdr) (($$atom cdr) ($$atom code0)))))
             (if (($$atom bindable-var?) ($$atom pattern*0) ($$atom env0))
                 (if (($$atom length?) ($$atom body0) ($$atom 0))
                     ($$atom #t)
                     (if (($$atom length?) ($$atom body0) ($$atom 1))
                         ($$atom #t)
                         (($$atom pt-syntax-error)
                          ($$atom source0)
                          ($$atom "Ill-formed definition body"))))
                 (if (($$atom pair?) ($$atom pattern0))
                     (begin
                       (if (($$atom length?) ($$atom body0) ($$atom 0))
                           (($$atom pt-syntax-error)
                            ($$atom source0)
                            ($$atom "Body of a definition must have at least one expression"))
                           ($$atom #f))
                       (if (($$atom bindable-var?)
                            (($$atom car) ($$atom pattern0))
                            ($$atom env0))
                           (($$atom proper-parms?)
                            (($$atom cdr) ($$atom pattern0))
                            ($$atom env0))
                           (($$atom pt-syntax-error)
                            (($$atom car) ($$atom pattern0))
                            ($$atom "Procedure name must be an identifier"))))
                     (($$atom pt-syntax-error)
                      ($$atom pattern*0)
                      ($$atom "Ill-formed definition pattern"))))))))))
 (define definition-variable
   (lambda (def0)
     (let ((code0 (($$atom vector-ref) ($$atom def0) ($$atom 0))))
       (let ((pattern0 (($$atom car) (($$atom cdr) ($$atom code0)))))
         (if (($$atom pair?)
              (($$atom vector-ref) ($$atom pattern0) ($$atom 0)))
             (($$atom car) (($$atom vector-ref) ($$atom pattern0) ($$atom 0)))
             ($$atom pattern0))))))
 (define definition-value
   (lambda (def0)
     (let ((loc0 (($$atom vector-ref) ($$atom def0) ($$atom 1)))
           (code0 (($$atom vector-ref) ($$atom def0) ($$atom 0))))
       (if (($$atom pair?)
            (let ((x0 (($$atom car) (($$atom cdr) ($$atom code0)))))
              (($$atom vector-ref) ($$atom x0) ($$atom 0))))
           (let ((code1 (($$atom cons)
                         (($$atom vector) ($$atom lambda-sym) ($$atom loc0))
                         (($$atom cons)
                          (let ((parms0 (($$atom cdr)
                                         (let ((x0 (($$atom car)
                                                    (($$atom cdr)
                                                     ($$atom code0)))))
                                           (($$atom vector-ref)
                                            ($$atom x0)
                                            ($$atom 0))))))
                            (if (let ((g560 (($$atom pair?) ($$atom parms0))))
                                  (if ($$atom g560)
                                      ($$atom g560)
                                      (($$atom null?) ($$atom parms0))))
                                (($$atom vector) ($$atom parms0) ($$atom loc0))
                                ($$atom parms0)))
                          (($$atom cdr) (($$atom cdr) ($$atom code0)))))))
             (($$atom vector) ($$atom code1) ($$atom loc0)))
           (if (($$atom null?) (($$atom cdr) (($$atom cdr) ($$atom code0))))
               (let ((code1 (($$atom list)
                             (($$atom vector) ($$atom quote-sym) ($$atom loc0))
                             (($$atom vector)
                              ($$atom '|#[undefined]|)
                              ($$atom loc0)))))
                 (($$atom vector) ($$atom code1) ($$atom loc0)))
               (($$atom car) (($$atom cdr) (($$atom cdr) ($$atom code0)))))))))
 (define parms->source
   (lambda (parms0 loc0)
     (if (let ((g570 (($$atom pair?) ($$atom parms0))))
           (if ($$atom g570) ($$atom g570) (($$atom null?) ($$atom parms0))))
         (($$atom vector) ($$atom parms0) ($$atom loc0))
         ($$atom parms0))))
 (define proper-parms?
   (lambda (parms0 env0)
     (letrec ((proper-parms0
               (lambda (env1 parms1 seen0 optional-seen0)
                 (if (($$atom pair?) ($$atom parms1))
                     (let ((parm*0 (($$atom car) ($$atom parms1))))
                       (let ((parm0 (($$atom vector-ref)
                                     ($$atom parm*0)
                                     ($$atom 0))))
                         (if (($$atom pair?) ($$atom parm0))
                             (if (($$atom eq?)
                                  (($$atom declaration-value)
                                   ($$atom 'dialect)
                                   ($$atom #f)
                                   ($$atom ieee-scheme-sym)
                                   ($$atom env1))
                                  ($$atom multilisp-sym))
                                 (let ((length0 (($$atom proper-length)
                                                 ($$atom parm0))))
                                   (if (let ((g580 (if (($$atom number?)
                                                        ($$atom length0))
                                                       (if (($$atom number?)
                                                            ($$atom 1))
                                                           (($$atom =)
                                                            ($$atom length0)
                                                            ($$atom 1))
                                                           ($$atom #f))
                                                       (($$atom eq?)
                                                        ($$atom length0)
                                                        ($$atom 1)))))
                                         (if ($$atom g580)
                                             ($$atom g580)
                                             (if (($$atom number?)
                                                  ($$atom length0))
                                                 (if (($$atom number?)
                                                      ($$atom 2))
                                                     (($$atom =)
                                                      ($$atom length0)
                                                      ($$atom 2))
                                                     ($$atom #f))
                                                 (($$atom eq?)
                                                  ($$atom length0)
                                                  ($$atom 2)))))
                                       (let ((var0 (($$atom car)
                                                    ($$atom parm0))))
                                         (if (($$atom bindable-var?)
                                              ($$atom var0)
                                              ($$atom env1))
                                             (if (($$atom memq)
                                                  (($$atom vector-ref)
                                                   ($$atom var0)
                                                   ($$atom 0))
                                                  ($$atom seen0))
                                                 (($$atom pt-syntax-error)
                                                  ($$atom var0)
                                                  ($$atom "Duplicate parameter in parameter list"))
                                                 (($$atom proper-parms0)
                                                  ($$atom env1)
                                                  (($$atom cdr)
                                                   ($$atom parms1))
                                                  (($$atom cons)
                                                   (($$atom vector-ref)
                                                    ($$atom var0)
                                                    ($$atom 0))
                                                   ($$atom seen0))
                                                  ($$atom #t)))
                                             (($$atom pt-syntax-error)
                                              ($$atom var0)
                                              ($$atom "Parameter must be an identifier"))))
                                       (($$atom pt-syntax-error)
                                        ($$atom parm*0)
                                        ($$atom "Ill-formed optional parameter"))))
                                 (($$atom pt-syntax-error)
                                  ($$atom parm*0)
                                  ($$atom "optional parameters illegal in this dialect")))
                             (if ($$atom optional-seen0)
                                 (($$atom pt-syntax-error)
                                  ($$atom parm*0)
                                  ($$atom "Optional parameter expected"))
                                 (if (($$atom bindable-var?)
                                      ($$atom parm*0)
                                      ($$atom env1))
                                     (begin
                                       (if (($$atom memq)
                                            ($$atom parm0)
                                            ($$atom seen0))
                                           (($$atom pt-syntax-error)
                                            ($$atom parm*0)
                                            ($$atom "Duplicate parameter in parameter list"))
                                           ($$atom #f))
                                       (($$atom proper-parms0)
                                        ($$atom env1)
                                        (($$atom cdr) ($$atom parms1))
                                        (($$atom cons)
                                         ($$atom parm0)
                                         ($$atom seen0))
                                        ($$atom #f)))
                                     (($$atom pt-syntax-error)
                                      ($$atom parm*0)
                                      ($$atom "Parameter must be an identifier")))))))
                     (if (($$atom null?) ($$atom parms1))
                         ($$atom #t)
                         (if (($$atom bindable-var?)
                              ($$atom parms1)
                              ($$atom env1))
                             (if (($$atom memq)
                                  (($$atom vector-ref)
                                   ($$atom parms1)
                                   ($$atom 0))
                                  ($$atom seen0))
                                 (($$atom pt-syntax-error)
                                  ($$atom parms1)
                                  ($$atom "Duplicate parameter in parameter list"))
                                 ($$atom #t))
                             (($$atom pt-syntax-error)
                              ($$atom parms1)
                              ($$atom "Rest parameter must be an identifier"))))))))
       (($$atom proper-parms0)
        ($$atom env0)
        ($$atom parms0)
        ($$atom '())
        ($$atom #f)))))
 (define proper-clauses?
   (lambda (source0)
     (letrec ((proper-clauses0
               (lambda (clauses0)
                 (let ((g590 (($$atom null?) ($$atom clauses0))))
                   (if ($$atom g590)
                       ($$atom g590)
                       (let ((clause*0 (($$atom car) ($$atom clauses0))))
                         (let ((clause0 (($$atom vector-ref)
                                         ($$atom clause*0)
                                         ($$atom 0))))
                           (let ((length0 (($$atom proper-length)
                                           ($$atom clause0))))
                             (if ($$atom length0)
                                 (if (($$atom >=) ($$atom length0) ($$atom 1))
                                     (if (($$atom eq?)
                                          (let ((x0 (($$atom car)
                                                     ($$atom clause0))))
                                            (($$atom vector-ref)
                                             ($$atom x0)
                                             ($$atom 0)))
                                          ($$atom else-sym))
                                         (if (($$atom =)
                                              ($$atom length0)
                                              ($$atom 1))
                                             (($$atom pt-syntax-error)
                                              ($$atom clause*0)
                                              ($$atom "Else clause must have a body"))
                                             (if (($$atom null?)
                                                  (($$atom cdr)
                                                   ($$atom clauses0)))
                                                 (($$atom proper-clauses0)
                                                  (($$atom cdr)
                                                   ($$atom clauses0)))
                                                 (($$atom pt-syntax-error)
                                                  ($$atom clause*0)
                                                  ($$atom "Else clause must be the last clause"))))
                                         (if (if (($$atom >=)
                                                  ($$atom length0)
                                                  ($$atom 2))
                                                 (if (($$atom eq?)
                                                      (let ((x0 (($$atom car)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                         (($$atom cdr) ($$atom clause0)))))
                (($$atom vector-ref) ($$atom x0) ($$atom 0)))
              ($$atom =>-sym))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                     (($$atom not)
                                                      (($$atom =)
                                                       ($$atom length0)
                                                       ($$atom 3)))
                                                     ($$atom #f))
                                                 ($$atom #f))
                                             (($$atom pt-syntax-error)
                                              (($$atom car)
                                               (($$atom cdr) ($$atom clause0)))
                                              ($$atom "'=>' must be followed by a single expression"))
                                             (($$atom proper-clauses0)
                                              (($$atom cdr)
                                               ($$atom clauses0)))))
                                     (($$atom pt-syntax-error)
                                      ($$atom clause*0)
                                      ($$atom "Ill-formed 'cond' clause")))
                                 (($$atom pt-syntax-error)
                                  ($$atom clause*0)
                                  ($$atom "Ill-terminated 'cond' clause")))))))))))
       (($$atom proper-clauses0)
        (($$atom cdr) (($$atom vector-ref) ($$atom source0) ($$atom 0)))))))
 (define proper-case-clauses?
   (lambda (source0)
     (letrec ((proper-case-clauses0
               (lambda (clauses0)
                 (let ((g600 (($$atom null?) ($$atom clauses0))))
                   (if ($$atom g600)
                       ($$atom g600)
                       (let ((clause*0 (($$atom car) ($$atom clauses0))))
                         (let ((clause0 (($$atom vector-ref)
                                         ($$atom clause*0)
                                         ($$atom 0))))
                           (let ((length0 (($$atom proper-length)
                                           ($$atom clause0))))
                             (if ($$atom length0)
                                 (if (($$atom >=) ($$atom length0) ($$atom 2))
                                     (if (($$atom eq?)
                                          (let ((x0 (($$atom car)
                                                     ($$atom clause0))))
                                            (($$atom vector-ref)
                                             ($$atom x0)
                                             ($$atom 0)))
                                          ($$atom else-sym))
                                         (if (($$atom null?)
                                              (($$atom cdr) ($$atom clauses0)))
                                             (($$atom proper-case-clauses0)
                                              (($$atom cdr) ($$atom clauses0)))
                                             (($$atom pt-syntax-error)
                                              ($$atom clause*0)
                                              ($$atom "Else clause must be the last clause")))
                                         (begin
                                           (($$atom proper-selector-list?)
                                            (($$atom car) ($$atom clause0)))
                                           (($$atom proper-case-clauses0)
                                            (($$atom cdr) ($$atom clauses0)))))
                                     (($$atom pt-syntax-error)
                                      ($$atom clause*0)
                                      ($$atom "A 'case' clause must have a selector list and a body")))
                                 (($$atom pt-syntax-error)
                                  ($$atom clause*0)
                                  ($$atom "Ill-terminated 'case' clause")))))))))))
       (($$atom proper-case-clauses0)
        (($$atom cdr)
         (($$atom cdr) (($$atom vector-ref) ($$atom source0) ($$atom 0))))))))
 (define proper-selector-list?
   (lambda (source0)
     (let ((code0 (($$atom vector-ref) ($$atom source0) ($$atom 0))))
       (let ((length0 (($$atom proper-length) ($$atom code0))))
         (if ($$atom length0)
             (let ((g610 (($$atom >=) ($$atom length0) ($$atom 1))))
               (if ($$atom g610)
                   ($$atom g610)
                   (($$atom pt-syntax-error)
                    ($$atom source0)
                    ($$atom "Selector list must contain at least one element"))))
             (($$atom pt-syntax-error)
              ($$atom source0)
              ($$atom "Ill-terminated selector list")))))))
 (define proper-bindings?
   (lambda (bindings0 check-dupl?0 env0)
     (letrec ((proper-bindings0
               (lambda (bindings1 check-dupl?1 env1 l0 seen0)
                 (if (($$atom pair?) ($$atom l0))
                     (let ((binding*0 (($$atom car) ($$atom l0))))
                       (let ((binding0
                              (($$atom vector-ref)
                               ($$atom binding*0)
                               ($$atom 0))))
                         (if (let ((g620 (($$atom proper-length)
                                          ($$atom binding0))))
                               (if (($$atom number?) ($$atom g620))
                                   (if (($$atom number?) ($$atom 2))
                                       (($$atom =) ($$atom g620) ($$atom 2))
                                       ($$atom #f))
                                   (($$atom eq?) ($$atom g620) ($$atom 2))))
                             (let ((var0 (($$atom car) ($$atom binding0))))
                               (if (($$atom bindable-var?)
                                    ($$atom var0)
                                    ($$atom env1))
                                   (if (if ($$atom check-dupl?1)
                                           (($$atom memq)
                                            (($$atom vector-ref)
                                             ($$atom var0)
                                             ($$atom 0))
                                            ($$atom seen0))
                                           ($$atom #f))
                                       (($$atom pt-syntax-error)
                                        ($$atom var0)
                                        ($$atom "Duplicate variable in bindings"))
                                       (($$atom proper-bindings0)
                                        ($$atom bindings1)
                                        ($$atom check-dupl?1)
                                        ($$atom env1)
                                        (($$atom cdr) ($$atom l0))
                                        (($$atom cons)
                                         (($$atom vector-ref)
                                          ($$atom var0)
                                          ($$atom 0))
                                         ($$atom seen0))))
                                   (($$atom pt-syntax-error)
                                    ($$atom var0)
                                    ($$atom "Binding variable must be an identifier"))))
                             (($$atom pt-syntax-error)
                              ($$atom binding*0)
                              ($$atom "Ill-formed binding")))))
                     (if (($$atom null?) ($$atom l0))
                         ($$atom #t)
                         (($$atom pt-syntax-error)
                          ($$atom bindings1)
                          ($$atom "Ill-terminated binding list")))))))
       (($$atom proper-bindings0)
        ($$atom bindings0)
        ($$atom check-dupl?0)
        ($$atom env0)
        (($$atom vector-ref) ($$atom bindings0) ($$atom 0))
        ($$atom '())))))
 (define proper-do-bindings?
   (lambda (source0 env0)
     (let ((bindings0
            (($$atom car)
             (($$atom cdr)
              (($$atom vector-ref) ($$atom source0) ($$atom 0))))))
       (letrec ((proper-bindings0
                 (lambda (env1 bindings1 l0 seen0)
                   (if (($$atom pair?) ($$atom l0))
                       (let ((binding*0 (($$atom car) ($$atom l0))))
                         (let ((binding0
                                (($$atom vector-ref)
                                 ($$atom binding*0)
                                 ($$atom 0))))
                           (let ((length0 (($$atom proper-length)
                                           ($$atom binding0))))
                             (if (let ((g630 (if (($$atom number?)
                                                  ($$atom length0))
                                                 (if (($$atom number?)
                                                      ($$atom 2))
                                                     (($$atom =)
                                                      ($$atom length0)
                                                      ($$atom 2))
                                                     ($$atom #f))
                                                 (($$atom eq?)
                                                  ($$atom length0)
                                                  ($$atom 2)))))
                                   (if ($$atom g630)
                                       ($$atom g630)
                                       (if (($$atom number?) ($$atom length0))
                                           (if (($$atom number?) ($$atom 3))
                                               (($$atom =)
                                                ($$atom length0)
                                                ($$atom 3))
                                               ($$atom #f))
                                           (($$atom eq?)
                                            ($$atom length0)
                                            ($$atom 3)))))
                                 (let ((var0 (($$atom car) ($$atom binding0))))
                                   (if (($$atom bindable-var?)
                                        ($$atom var0)
                                        ($$atom env1))
                                       (if (($$atom memq)
                                            (($$atom vector-ref)
                                             ($$atom var0)
                                             ($$atom 0))
                                            ($$atom seen0))
                                           (($$atom pt-syntax-error)
                                            ($$atom var0)
                                            ($$atom "Duplicate variable in bindings"))
                                           (($$atom proper-bindings0)
                                            ($$atom env1)
                                            ($$atom bindings1)
                                            (($$atom cdr) ($$atom l0))
                                            (($$atom cons)
                                             (($$atom vector-ref)
                                              ($$atom var0)
                                              ($$atom 0))
                                             ($$atom seen0))))
                                       (($$atom pt-syntax-error)
                                        ($$atom var0)
                                        ($$atom "Binding variable must be an identifier"))))
                                 (($$atom pt-syntax-error)
                                  ($$atom binding*0)
                                  ($$atom "Ill-formed binding"))))))
                       (if (($$atom null?) ($$atom l0))
                           ($$atom #t)
                           (($$atom pt-syntax-error)
                            ($$atom bindings1)
                            ($$atom "Ill-terminated binding list")))))))
         (($$atom proper-bindings0)
          ($$atom env0)
          ($$atom bindings0)
          (($$atom vector-ref) ($$atom bindings0) ($$atom 0))
          ($$atom '()))))))
 (define proper-do-exit?
   (lambda (source0)
     (let ((code0 (let ((x0 (($$atom car)
                             (($$atom cdr)
                              (($$atom cdr)
                               (($$atom vector-ref)
                                ($$atom source0)
                                ($$atom 0)))))))
                    (($$atom vector-ref) ($$atom x0) ($$atom 0)))))
       (let ((length0 (($$atom proper-length) ($$atom code0))))
         (if ($$atom length0)
             (let ((g640 (($$atom >) ($$atom length0) ($$atom 0))))
               (if ($$atom g640)
                   ($$atom g640)
                   (($$atom pt-syntax-error)
                    ($$atom source0)
                    ($$atom "Ill-formed exit clause"))))
             (($$atom pt-syntax-error)
              ($$atom source0)
              ($$atom "Ill-terminated exit clause")))))))
 (define include-filename
   (lambda (source0)
     (let ((x0 (($$atom car)
                (($$atom cdr)
                 (($$atom vector-ref) ($$atom source0) ($$atom 0))))))
       (($$atom vector-ref) ($$atom x0) ($$atom 0)))))
 (define begin-defs-body
   (lambda (source0)
     (($$atom cdr) (($$atom vector-ref) ($$atom source0) ($$atom 0)))))
 (define length?
   (lambda (l0 n0)
     (if (($$atom null?) ($$atom l0))
         (($$atom =) ($$atom n0) ($$atom 0))
         (if (($$atom >) ($$atom n0) ($$atom 0))
             (($$atom length?)
              (($$atom cdr) ($$atom l0))
              (($$atom -) ($$atom n0) ($$atom 1)))
             ($$atom #f)))))
 (define transform-declaration
   (lambda (source0)
     (let ((code0 (($$atom vector-ref) ($$atom source0) ($$atom 0))))
       (if (($$atom pair?) ($$atom code0))
           (let ((pos0 (($$atom not)
                        (($$atom eq?)
                         (let ((x0 (($$atom car) ($$atom code0))))
                           (($$atom vector-ref) ($$atom x0) ($$atom 0)))
                         ($$atom not-sym)))))
             (let ((x0 (if ($$atom pos0)
                           ($$atom code0)
                           (($$atom cdr) ($$atom code0)))))
               (if (($$atom pair?) ($$atom x0))
                   (let ((id*0 (($$atom car) ($$atom x0))))
                     (let ((id0 (($$atom vector-ref)
                                 ($$atom id*0)
                                 ($$atom 0))))
                       (if (($$atom symbol-object?) ($$atom id0))
                           (if (($$atom assq)
                                ($$atom id0)
                                ($$atom flag-declarations))
                               (if ($$atom pos0)
                                   (if (($$atom null?)
                                        (($$atom cdr) ($$atom x0)))
                                       (let ((type0 (($$atom cdr)
                                                     (($$atom assq)
                                                      ($$atom id0)
                                                      ($$atom flag-declarations)))))
                                         (($$atom list)
                                          ($$atom type0)
                                          ($$atom id0)))
                                       (($$atom pt-syntax-error)
                                        ($$atom source0)
                                        ($$atom "Ill-formed declaration")))
                                   (($$atom pt-syntax-error)
                                    ($$atom id*0)
                                    ($$atom "Declaration can't be negated")))
                               (if (($$atom memq)
                                    ($$atom id0)
                                    ($$atom parameterized-declarations))
                                   (if ($$atom pos0)
                                       (if (let ((g650 (($$atom proper-length)
                                                        ($$atom x0))))
                                             (if (($$atom number?)
                                                  ($$atom g650))
                                                 (if (($$atom number?)
                                                      ($$atom 2))
                                                     (($$atom =)
                                                      ($$atom g650)
                                                      ($$atom 2))
                                                     ($$atom #f))
                                                 (($$atom eq?)
                                                  ($$atom g650)
                                                  ($$atom 2))))
                                           (let ((parm0 (($$atom source->expression)
                                                         (($$atom car)
                                                          (($$atom cdr)
                                                           ($$atom x0))))))
                                             (($$atom list)
                                              ($$atom id0)
                                              ($$atom parm0)))
                                           (($$atom pt-syntax-error)
                                            ($$atom source0)
                                            ($$atom "Ill-formed declaration")))
                                       (($$atom pt-syntax-error)
                                        ($$atom id*0)
                                        ($$atom "Declaration can't be negated")))
                                   (if (($$atom memq)
                                        ($$atom id0)
                                        ($$atom boolean-declarations))
                                       (if (($$atom null?)
                                            (($$atom cdr) ($$atom x0)))
                                           (($$atom list)
                                            ($$atom id0)
                                            ($$atom pos0))
                                           (($$atom pt-syntax-error)
                                            ($$atom source0)
                                            ($$atom "Ill-formed declaration")))
                                       (if (($$atom assq)
                                            ($$atom id0)
                                            ($$atom namable-declarations))
                                           (if ($$atom pos0)
                                               (let ((names0 (($$atom map)
                                                              ($$atom source->expression)
                                                              (($$atom cdr)
                                                               ($$atom x0))))
                                                     (type0 (($$atom cdr)
                                                             (($$atom assq)
                                                              ($$atom id0)
                                                              ($$atom namable-declarations)))))
                                                 (($$atom cons)
                                                  ($$atom type0)
                                                  (($$atom cons)
                                                   ($$atom id0)
                                                   ($$atom names0))))
                                               (($$atom pt-syntax-error)
                                                ($$atom id*0)
                                                ($$atom "Declaration can't be negated")))
                                           (if (($$atom memq)
                                                ($$atom id0)
                                                ($$atom namable-boolean-declarations))
                                               (let ((names0 (($$atom map)
                                                              ($$atom source->expression)
                                                              (($$atom cdr)
                                                               ($$atom x0)))))
                                                 (($$atom cons)
                                                  ($$atom id0)
                                                  (($$atom cons)
                                                   ($$atom pos0)
                                                   ($$atom names0))))
                                               (if (($$atom memq)
                                                    ($$atom id0)
                                                    ($$atom namable-string-declarations))
                                                   (if (($$atom pair?)
                                                        (($$atom cdr)
                                                         ($$atom x0)))
                                                       (let ((str*0 (($$atom car)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                             (($$atom cdr) ($$atom x0)))))
                 (let ((str0 (($$atom vector-ref) ($$atom str*0) ($$atom 0))))
                   (if ($$atom pos0)
                       (if (($$atom string?) ($$atom str0))
                           (($$atom namable-string-decl)
                            ($$atom source0)
                            ($$atom id0)
                            ($$atom str0)
                            (($$atom map)
                             ($$atom source->expression)
                             (($$atom cdr) (($$atom cdr) ($$atom x0)))))
                           (($$atom pt-syntax-error)
                            ($$atom str*0)
                            ($$atom "String expected")))
                       (($$atom pt-syntax-error)
                        ($$atom id*0)
                        ($$atom "Declaration can't be negated")))))
               (($$atom pt-syntax-error)
                ($$atom source0)
                ($$atom "Ill-formed declaration")))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                   (($$atom pt-syntax-error)
                                                    ($$atom id*0)
                                                    ($$atom "Unknown declaration"))))))))
                           (($$atom pt-syntax-error)
                            ($$atom id*0)
                            ($$atom "Declaration name must be an identifier")))))
                   (($$atom pt-syntax-error)
                    ($$atom source0)
                    ($$atom "Ill-formed declaration")))))
           (($$atom pt-syntax-error)
            ($$atom source0)
            ($$atom "Ill-formed declaration"))))))
 (define add-declarations
   (lambda (source0 env0)
     (letrec ((loop0 (lambda (l0 env1)
                       (if (($$atom pair?) ($$atom l0))
                           (let ((env2 (($$atom env-declare)
                                        ($$atom env1)
                                        (($$atom transform-declaration)
                                         (($$atom car) ($$atom l0)))))
                                 (l1 (($$atom cdr) ($$atom l0))))
                             (if (($$atom pair?) ($$atom l1))
                                 (($$atom loop0)
                                  (($$atom cdr) ($$atom l1))
                                  (($$atom env-declare)
                                   ($$atom env2)
                                   (($$atom transform-declaration)
                                    (($$atom car) ($$atom l1)))))
                                 ($$atom env2)))
                           ($$atom env1)))))
       (($$atom loop0)
        (($$atom cdr) (($$atom vector-ref) ($$atom source0) ($$atom 0)))
        ($$atom env0)))))
 (define add-decl
   (lambda (d0 decl0) (($$atom env-declare) ($$atom decl0) ($$atom d0))))
 (define add-macro
   (lambda (source0 env0)
     (let ((proc0 (($$atom definition-value) ($$atom source0)))
           (var0 (($$atom definition-variable) ($$atom source0))))
       (if (($$atom lambda-expr?) ($$atom proc0) ($$atom env0))
           (($$atom env-macro)
            ($$atom env0)
            (($$atom vector-ref) ($$atom var0) ($$atom 0))
            (($$atom cons)
             (let ((parms0 (($$atom source->parms)
                            (($$atom car)
                             (($$atom cdr)
                              (($$atom vector-ref)
                               ($$atom proc0)
                               ($$atom 0)))))))
               (letrec ((loop0 (lambda (l0 n0)
                                 (if (($$atom pair?) ($$atom l0))
                                     (($$atom loop0)
                                      (($$atom cdr) ($$atom l0))
                                      (($$atom +) ($$atom n0) ($$atom 1)))
                                     (if (($$atom null?) ($$atom l0))
                                         ($$atom n0)
                                         (($$atom *)
                                          ($$atom -1)
                                          ($$atom n0)))))))
                 (($$atom loop0) ($$atom parms0) ($$atom 1))))
             (let ((expr0 (($$atom source->expression) ($$atom proc0))))
               (($$atom NYIquasi-list) ($$atom 'eval) ($$atom expr0)))))
           (($$atom pt-syntax-error)
            ($$atom source0)
            ($$atom "Macro value must be a lambda expression"))))))
 (define ptree.begin!
   (lambda (info-port0)
     (begin (set! *ptree-port* ($$atom info-port0)) ($$atom '()))))
 (define ptree.end! (lambda () ($$atom '())))
 (define *ptree-port* ($$atom '()))
 (define normalize-parse-tree
   (lambda (ptree0 env0)
     (let ((normalize0
            (lambda (env1 ptree1)
              (let ((tree0 (($$atom assignment-convert)
                            (($$atom pe) ($$atom ptree1) ($$atom '()))
                            ($$atom env1))))
                (begin
                  (($$atom lambda-lift!) ($$atom tree0))
                  ($$atom tree0))))))
       (if (($$atom def?) ($$atom ptree0))
           (begin
             (($$atom node-children-set!)
              ($$atom ptree0)
              (($$atom list)
               (($$atom normalize0)
                ($$atom env0)
                (($$atom def-val) ($$atom ptree0)))))
             ($$atom ptree0))
           (($$atom normalize0) ($$atom env0) ($$atom ptree0))))))
 (define partial-evaluate
   (lambda (ptree0) (($$atom pe) ($$atom ptree0) ($$atom '()))))
 (define pe
   (lambda (ptree0 consts0)
     (if (($$atom cst?) ($$atom ptree0))
         (let ((val0 (($$atom cst-val) ($$atom ptree0)))
               (decl0 (($$atom node-decl) ($$atom ptree0)))
               (source0 (($$atom vector-ref) ($$atom ptree0) ($$atom 5))))
           (($$atom vector)
            ($$atom cst-tag)
            ($$atom #f)
            ($$atom '())
            ($$atom #t)
            ($$atom decl0)
            ($$atom source0)
            ($$atom val0)))
         (if (($$atom ref?) ($$atom ptree0))
             (let ((var0 (($$atom vector-ref) ($$atom ptree0) ($$atom 6))))
               (begin
                 (let ((y0 (($$atom set-remove)
                            (($$atom vector-ref) ($$atom var0) ($$atom 3))
                            ($$atom ptree0))))
                   (($$atom vector-set!) ($$atom var0) ($$atom 3) ($$atom y0)))
                 (let ((x0 (($$atom assq) ($$atom var0) ($$atom consts0))))
                   (if ($$atom x0)
                       (let ((val0 (($$atom cdr) ($$atom x0)))
                             (decl0 (($$atom node-decl) ($$atom ptree0)))
                             (source0 (($$atom vector-ref)
                                       ($$atom ptree0)
                                       ($$atom 5))))
                         (($$atom vector)
                          ($$atom cst-tag)
                          ($$atom #f)
                          ($$atom '())
                          ($$atom #t)
                          ($$atom decl0)
                          ($$atom source0)
                          ($$atom val0)))
                       (let ((y0 (($$atom global-val) ($$atom var0))))
                         (if (if ($$atom y0)
                                 (($$atom cst?) ($$atom y0))
                                 ($$atom #f))
                             (let ((val0 (($$atom cst-val) ($$atom y0)))
                                   (decl0 (($$atom node-decl) ($$atom ptree0)))
                                   (source0 (($$atom vector-ref)
                                             ($$atom ptree0)
                                             ($$atom 5))))
                               (($$atom vector)
                                ($$atom cst-tag)
                                ($$atom #f)
                                ($$atom '())
                                ($$atom #t)
                                ($$atom decl0)
                                ($$atom source0)
                                ($$atom val0)))
                             (($$atom new-ref)
                              (($$atom vector-ref) ($$atom ptree0) ($$atom 5))
                              (($$atom vector-ref) ($$atom ptree0) ($$atom 4))
                              ($$atom var0))))))))
             (if (($$atom set?) ($$atom ptree0))
                 (let ((val0 (($$atom pe)
                              (($$atom set-val) ($$atom ptree0))
                              ($$atom consts0)))
                       (var0 (($$atom vector-ref) ($$atom ptree0) ($$atom 6))))
                   (begin
                     (let ((y0 (($$atom set-remove)
                                (($$atom vector-ref) ($$atom var0) ($$atom 4))
                                ($$atom ptree0))))
                       (($$atom vector-set!)
                        ($$atom var0)
                        ($$atom 4)
                        ($$atom y0)))
                     (($$atom new-set)
                      (($$atom vector-ref) ($$atom ptree0) ($$atom 5))
                      (($$atom vector-ref) ($$atom ptree0) ($$atom 4))
                      ($$atom var0)
                      ($$atom val0))))
                 (if (($$atom tst?) ($$atom ptree0))
                     (let ((pre0 (($$atom pe)
                                  (($$atom tst-pre) ($$atom ptree0))
                                  ($$atom consts0))))
                       (if (($$atom cst?) ($$atom pre0))
                           (let ((val0 (($$atom vector-ref)
                                        ($$atom pre0)
                                        ($$atom 6))))
                             (if (($$atom eq?) ($$atom val0) ($$atom #f))
                                 (($$atom pe)
                                  (($$atom tst-alt) ($$atom ptree0))
                                  ($$atom consts0))
                                 (($$atom pe)
                                  (($$atom tst-con) ($$atom ptree0))
                                  ($$atom consts0))))
                           (($$atom new-tst)
                            (($$atom vector-ref) ($$atom ptree0) ($$atom 5))
                            (($$atom vector-ref) ($$atom ptree0) ($$atom 4))
                            ($$atom pre0)
                            (($$atom pe)
                             (($$atom tst-con) ($$atom ptree0))
                             ($$atom consts0))
                            (($$atom pe)
                             (($$atom tst-alt) ($$atom ptree0))
                             ($$atom consts0)))))
                     (if (($$atom conj?) ($$atom ptree0))
                         (let ((pre0 (($$atom pe)
                                      (($$atom conj-pre) ($$atom ptree0))
                                      ($$atom consts0))))
                           (if (($$atom cst?) ($$atom pre0))
                               (let ((val0 (($$atom vector-ref)
                                            ($$atom pre0)
                                            ($$atom 6))))
                                 (if (($$atom eq?) ($$atom val0) ($$atom #f))
                                     ($$atom pre0)
                                     (($$atom pe)
                                      (($$atom conj-alt) ($$atom ptree0))
                                      ($$atom consts0))))
                               (($$atom new-conj)
                                (($$atom vector-ref)
                                 ($$atom ptree0)
                                 ($$atom 5))
                                (($$atom vector-ref)
                                 ($$atom ptree0)
                                 ($$atom 4))
                                ($$atom pre0)
                                (($$atom pe)
                                 (($$atom conj-alt) ($$atom ptree0))
                                 ($$atom consts0)))))
                         (if (($$atom disj?) ($$atom ptree0))
                             (let ((pre0 (($$atom pe)
                                          (($$atom disj-pre) ($$atom ptree0))
                                          ($$atom consts0))))
                               (if (($$atom cst?) ($$atom pre0))
                                   (let ((val0 (($$atom vector-ref)
                                                ($$atom pre0)
                                                ($$atom 6))))
                                     (if (($$atom eq?)
                                          ($$atom val0)
                                          ($$atom #f))
                                         (($$atom pe)
                                          (($$atom disj-alt) ($$atom ptree0))
                                          ($$atom consts0))
                                         ($$atom pre0)))
                                   (($$atom new-disj)
                                    (($$atom vector-ref)
                                     ($$atom ptree0)
                                     ($$atom 5))
                                    (($$atom vector-ref)
                                     ($$atom ptree0)
                                     ($$atom 4))
                                    ($$atom pre0)
                                    (($$atom pe)
                                     (($$atom disj-alt) ($$atom ptree0))
                                     ($$atom consts0)))))
                             (if (($$atom prc?) ($$atom ptree0))
                                 (($$atom new-prc)
                                  (($$atom vector-ref)
                                   ($$atom ptree0)
                                   ($$atom 5))
                                  (($$atom vector-ref)
                                   ($$atom ptree0)
                                   ($$atom 4))
                                  (($$atom vector-ref)
                                   ($$atom ptree0)
                                   ($$atom 6))
                                  (($$atom vector-ref)
                                   ($$atom ptree0)
                                   ($$atom 7))
                                  (($$atom vector-ref)
                                   ($$atom ptree0)
                                   ($$atom 8))
                                  (($$atom vector-ref)
                                   ($$atom ptree0)
                                   ($$atom 9))
                                  (($$atom pe)
                                   (($$atom prc-body) ($$atom ptree0))
                                   ($$atom consts0)))
                                 (if (($$atom app?) ($$atom ptree0))
                                     (let ((args0 (($$atom app-args)
                                                   ($$atom ptree0)))
                                           (oper0 (($$atom app-oper)
                                                   ($$atom ptree0))))
                                       (if (if (($$atom prc?) ($$atom oper0))
                                               (if (($$atom vector-ref)
                                                    ($$atom oper0)
                                                    ($$atom 8))
                                                   ($$atom #f)
                                                   (($$atom =)
                                                    (($$atom length)
                                                     (($$atom vector-ref)
                                                      ($$atom oper0)
                                                      ($$atom 9)))
                                                    (($$atom length)
                                                     ($$atom args0))))
                                               ($$atom #f))
                                           (($$atom pe-let)
                                            ($$atom ptree0)
                                            ($$atom consts0))
                                           (($$atom new-call)
                                            (($$atom vector-ref)
                                             ($$atom ptree0)
                                             ($$atom 5))
                                            (($$atom vector-ref)
                                             ($$atom ptree0)
                                             ($$atom 4))
                                            (($$atom pe)
                                             ($$atom oper0)
                                             ($$atom consts0))
                                            (($$atom map)
                                             (lambda (x0)
                                               (($$atom pe)
                                                ($$atom x0)
                                                ($$atom consts0)))
                                             ($$atom args0)))))
                                     (if (($$atom fut?) ($$atom ptree0))
                                         (($$atom new-fut)
                                          (($$atom vector-ref)
                                           ($$atom ptree0)
                                           ($$atom 5))
                                          (($$atom vector-ref)
                                           ($$atom ptree0)
                                           ($$atom 4))
                                          (($$atom pe)
                                           (($$atom fut-val) ($$atom ptree0))
                                           ($$atom consts0)))
                                         (($$atom compiler-internal-error)
                                          ($$atom "pe, unknown parse tree node type")))))))))))))
 (define pe-let
   (lambda (ptree0 consts0)
     (let ((proc0 (($$atom app-oper) ($$atom ptree0))))
       (let ((vals0 (($$atom app-args) ($$atom ptree0))))
         (let ((vars0 (($$atom vector-ref) ($$atom proc0) ($$atom 9))))
           (let ((non-mut-vars0
                  (($$atom set-keep) ($$atom not-mutable?) ($$atom vars0))))
             (begin
               (($$atom for-each)
                (lambda (var0)
                  (begin
                    (($$atom vector-set!)
                     ($$atom var0)
                     ($$atom 3)
                     ($$atom '()))
                    (($$atom vector-set!)
                     ($$atom var0)
                     ($$atom 4)
                     ($$atom '()))))
                ($$atom vars0))
               (letrec ((loop0 (lambda (ptree1
                                        consts1
                                        proc1
                                        non-mut-vars1
                                        l0
                                        v0
                                        new-vars0
                                        new-vals42
                                        new-consts0)
                                 (if (($$atom null?) ($$atom l0))
                                     (if (($$atom null?) ($$atom new-vars0))
                                         (($$atom pe)
                                          (($$atom prc-body) ($$atom proc1))
                                          ($$atom new-consts0))
                                         (let ((args0 (($$atom reverse)
                                                       ($$atom new-vals42)))
                                               (oper0 (($$atom new-prc)
                                                       (($$atom vector-ref)
                                                        ($$atom proc1)
                                                        ($$atom 5))
                                                       (($$atom node-decl)
                                                        ($$atom proc1))
                                                       ($$atom #f)
                                                       (($$atom length)
                                                        ($$atom new-vars0))
                                                       ($$atom #f)
                                                       (($$atom reverse)
                                                        ($$atom new-vars0))
                                                       (($$atom pe)
                                                        (($$atom prc-body)
                                                         ($$atom proc1))
                                                        ($$atom new-consts0))))
                                               (decl0 (($$atom vector-ref)
                                                       ($$atom ptree1)
                                                       ($$atom 4)))
                                               (source0 (($$atom vector-ref)
                                                         ($$atom ptree1)
                                                         ($$atom 5))))
                                           (let ((node0 (let ((children0
                                                               (($$atom cons)
                                                                ($$atom oper0)
                                                                ($$atom args0))))
                                                          (($$atom vector)
                                                           ($$atom app-tag)
                                                           ($$atom #f)
                                                           ($$atom children0)
                                                           ($$atom #t)
                                                           ($$atom decl0)
                                                           ($$atom source0)))))
                                             (begin
                                               (($$atom vector-set!)
                                                ($$atom oper0)
                                                ($$atom 1)
                                                ($$atom node0))
                                               (($$atom for-each)
                                                (lambda (x0)
                                                  (($$atom vector-set!)
                                                   ($$atom x0)
                                                   ($$atom 1)
                                                   ($$atom node0)))
                                                ($$atom args0))
                                               ($$atom node0)))))
                                     (let ((val0 (($$atom pe)
                                                  (($$atom car) ($$atom v0))
                                                  ($$atom consts1)))
                                           (var0 (($$atom car) ($$atom l0))))
                                       (if (if (($$atom memq)
                                                ($$atom var0)
                                                ($$atom non-mut-vars1))
                                               (($$atom cst?) ($$atom val0))
                                               ($$atom #f))
                                           (($$atom loop0)
                                            ($$atom ptree1)
                                            ($$atom consts1)
                                            ($$atom proc1)
                                            ($$atom non-mut-vars1)
                                            (($$atom cdr) ($$atom l0))
                                            (($$atom cdr) ($$atom v0))
                                            ($$atom new-vars0)
                                            ($$atom new-vals42)
                                            (($$atom cons)
                                             (($$atom cons)
                                              ($$atom var0)
                                              (($$atom vector-ref)
                                               ($$atom val0)
                                               ($$atom 6)))
                                             ($$atom new-consts0)))
                                           (($$atom loop0)
                                            ($$atom ptree1)
                                            ($$atom consts1)
                                            ($$atom proc1)
                                            ($$atom non-mut-vars1)
                                            (($$atom cdr) ($$atom l0))
                                            (($$atom cdr) ($$atom v0))
                                            (($$atom cons)
                                             ($$atom var0)
                                             ($$atom new-vars0))
                                            (($$atom cons)
                                             ($$atom val0)
                                             ($$atom new-vals42))
                                            ($$atom new-consts0))))))))
                 (($$atom loop0)
                  ($$atom ptree0)
                  ($$atom consts0)
                  ($$atom proc0)
                  ($$atom non-mut-vars0)
                  ($$atom vars0)
                  ($$atom vals0)
                  ($$atom '())
                  ($$atom '())
                  ($$atom consts0))))))))))
 (define assignment-convert
   (lambda (ptree0 env0)
     (($$atom ac)
      ($$atom ptree0)
      (($$atom env-declare)
       ($$atom env0)
       (($$atom list) ($$atom safe-sym) ($$atom #f)))
      ($$atom '()))))
 (define ac
   (lambda (ptree0 env0 mut0)
     (if (($$atom cst?) ($$atom ptree0))
         ($$atom ptree0)
         (if (($$atom ref?) ($$atom ptree0))
             (let ((var0 (($$atom vector-ref) ($$atom ptree0) ($$atom 6))))
               (if (($$atom global?) ($$atom var0))
                   ($$atom ptree0)
                   (let ((x0 (($$atom assq) ($$atom var0) ($$atom mut0))))
                     (if ($$atom x0)
                         (let ((source0 (($$atom vector-ref)
                                         ($$atom ptree0)
                                         ($$atom 5))))
                           (begin
                             (let ((y0 (($$atom set-remove)
                                        (($$atom vector-ref)
                                         ($$atom var0)
                                         ($$atom 3))
                                        ($$atom ptree0))))
                               (($$atom vector-set!)
                                ($$atom var0)
                                ($$atom 3)
                                ($$atom y0)))
                             (($$atom new-call)
                              ($$atom source0)
                              (($$atom vector-ref) ($$atom ptree0) ($$atom 4))
                              (($$atom new-ref-extended-bindings)
                               ($$atom source0)
                               ($$atom **cell-ref-sym)
                               ($$atom env0))
                              (($$atom list)
                               (($$atom new-ref)
                                ($$atom source0)
                                (($$atom vector-ref)
                                 ($$atom ptree0)
                                 ($$atom 4))
                                (($$atom cdr) ($$atom x0)))))))
                         ($$atom ptree0)))))
             (if (($$atom set?) ($$atom ptree0))
                 (let ((val0 (($$atom ac)
                              (($$atom set-val) ($$atom ptree0))
                              ($$atom env0)
                              ($$atom mut0)))
                       (source0 (($$atom vector-ref)
                                 ($$atom ptree0)
                                 ($$atom 5)))
                       (var0 (($$atom vector-ref) ($$atom ptree0) ($$atom 6))))
                   (begin
                     (let ((y0 (($$atom set-remove)
                                (($$atom vector-ref) ($$atom var0) ($$atom 4))
                                ($$atom ptree0))))
                       (($$atom vector-set!)
                        ($$atom var0)
                        ($$atom 4)
                        ($$atom y0)))
                     (if (($$atom global?) ($$atom var0))
                         (($$atom new-set)
                          ($$atom source0)
                          (($$atom vector-ref) ($$atom ptree0) ($$atom 4))
                          ($$atom var0)
                          ($$atom val0))
                         (let ((args0 (($$atom list)
                                       (($$atom new-ref)
                                        ($$atom source0)
                                        (($$atom node-decl) ($$atom ptree0))
                                        (($$atom cdr)
                                         (($$atom assq)
                                          ($$atom var0)
                                          ($$atom mut0))))
                                       ($$atom val0)))
                               (oper0 (($$atom new-ref-extended-bindings)
                                       ($$atom source0)
                                       ($$atom **cell-set!-sym)
                                       ($$atom env0)))
                               (decl0 (($$atom node-decl) ($$atom ptree0))))
                           (let ((node0 (let ((children0
                                               (($$atom cons)
                                                ($$atom oper0)
                                                ($$atom args0))))
                                          (($$atom vector)
                                           ($$atom app-tag)
                                           ($$atom #f)
                                           ($$atom children0)
                                           ($$atom #t)
                                           ($$atom decl0)
                                           ($$atom source0)))))
                             (begin
                               (($$atom vector-set!)
                                ($$atom oper0)
                                ($$atom 1)
                                ($$atom node0))
                               (($$atom for-each)
                                (lambda (x0)
                                  (($$atom vector-set!)
                                   ($$atom x0)
                                   ($$atom 1)
                                   ($$atom node0)))
                                ($$atom args0))
                               ($$atom node0)))))))
                 (if (($$atom tst?) ($$atom ptree0))
                     (let ((alt0 (($$atom ac)
                                  (($$atom tst-alt) ($$atom ptree0))
                                  ($$atom env0)
                                  ($$atom mut0)))
                           (con0 (($$atom ac)
                                  (($$atom tst-con) ($$atom ptree0))
                                  ($$atom env0)
                                  ($$atom mut0)))
                           (pre0 (($$atom ac)
                                  (($$atom tst-pre) ($$atom ptree0))
                                  ($$atom env0)
                                  ($$atom mut0)))
                           (decl0 (($$atom node-decl) ($$atom ptree0)))
                           (source0 (($$atom node-source) ($$atom ptree0))))
                       (let ((node0 (let ((children0
                                           (($$atom list)
                                            ($$atom pre0)
                                            ($$atom con0)
                                            ($$atom alt0))))
                                      (($$atom vector)
                                       ($$atom tst-tag)
                                       ($$atom #f)
                                       ($$atom children0)
                                       ($$atom #t)
                                       ($$atom decl0)
                                       ($$atom source0)))))
                         (begin
                           (($$atom vector-set!)
                            ($$atom pre0)
                            ($$atom 1)
                            ($$atom node0))
                           (($$atom vector-set!)
                            ($$atom con0)
                            ($$atom 1)
                            ($$atom node0))
                           (($$atom vector-set!)
                            ($$atom alt0)
                            ($$atom 1)
                            ($$atom node0))
                           ($$atom node0))))
                     (if (($$atom conj?) ($$atom ptree0))
                         (let ((alt0 (($$atom ac)
                                      (($$atom conj-alt) ($$atom ptree0))
                                      ($$atom env0)
                                      ($$atom mut0)))
                               (pre0 (($$atom ac)
                                      (($$atom conj-pre) ($$atom ptree0))
                                      ($$atom env0)
                                      ($$atom mut0)))
                               (decl0 (($$atom node-decl) ($$atom ptree0)))
                               (source0 (($$atom node-source)
                                         ($$atom ptree0))))
                           (let ((node0 (let ((children0
                                               (($$atom list)
                                                ($$atom pre0)
                                                ($$atom alt0))))
                                          (($$atom vector)
                                           ($$atom conj-tag)
                                           ($$atom #f)
                                           ($$atom children0)
                                           ($$atom #t)
                                           ($$atom decl0)
                                           ($$atom source0)))))
                             (begin
                               (($$atom vector-set!)
                                ($$atom pre0)
                                ($$atom 1)
                                ($$atom node0))
                               (($$atom vector-set!)
                                ($$atom alt0)
                                ($$atom 1)
                                ($$atom node0))
                               ($$atom node0))))
                         (if (($$atom disj?) ($$atom ptree0))
                             (let ((alt0 (($$atom ac)
                                          (($$atom disj-alt) ($$atom ptree0))
                                          ($$atom env0)
                                          ($$atom mut0)))
                                   (pre0 (($$atom ac)
                                          (($$atom disj-pre) ($$atom ptree0))
                                          ($$atom env0)
                                          ($$atom mut0)))
                                   (decl0 (($$atom node-decl) ($$atom ptree0)))
                                   (source0 (($$atom node-source)
                                             ($$atom ptree0))))
                               (let ((node0 (let ((children0
                                                   (($$atom list)
                                                    ($$atom pre0)
                                                    ($$atom alt0))))
                                              (($$atom vector)
                                               ($$atom disj-tag)
                                               ($$atom #f)
                                               ($$atom children0)
                                               ($$atom #t)
                                               ($$atom decl0)
                                               ($$atom source0)))))
                                 (begin
                                   (($$atom vector-set!)
                                    ($$atom pre0)
                                    ($$atom 1)
                                    ($$atom node0))
                                   (($$atom vector-set!)
                                    ($$atom alt0)
                                    ($$atom 1)
                                    ($$atom node0))
                                   ($$atom node0))))
                             (if (($$atom prc?) ($$atom ptree0))
                                 (($$atom ac-proc)
                                  ($$atom ptree0)
                                  ($$atom env0)
                                  ($$atom mut0))
                                 (if (($$atom app?) ($$atom ptree0))
                                     (let ((args0 (($$atom app-args)
                                                   ($$atom ptree0)))
                                           (oper0 (($$atom app-oper)
                                                   ($$atom ptree0))))
                                       (if (if (($$atom prc?) ($$atom oper0))
                                               (if (($$atom vector-ref)
                                                    ($$atom oper0)
                                                    ($$atom 8))
                                                   ($$atom #f)
                                                   (($$atom =)
                                                    (($$atom length)
                                                     (($$atom vector-ref)
                                                      ($$atom oper0)
                                                      ($$atom 9)))
                                                    (($$atom length)
                                                     ($$atom args0))))
                                               ($$atom #f))
                                           (($$atom ac-let)
                                            ($$atom ptree0)
                                            ($$atom env0)
                                            ($$atom mut0))
                                           (($$atom new-call)
                                            (($$atom vector-ref)
                                             ($$atom ptree0)
                                             ($$atom 5))
                                            (($$atom vector-ref)
                                             ($$atom ptree0)
                                             ($$atom 4))
                                            (($$atom ac)
                                             ($$atom oper0)
                                             ($$atom env0)
                                             ($$atom mut0))
                                            (($$atom map)
                                             (lambda (x0)
                                               (($$atom ac)
                                                ($$atom x0)
                                                ($$atom env0)
                                                ($$atom mut0)))
                                             ($$atom args0)))))
                                     (if (($$atom fut?) ($$atom ptree0))
                                         (($$atom new-fut)
                                          (($$atom vector-ref)
                                           ($$atom ptree0)
                                           ($$atom 5))
                                          (($$atom vector-ref)
                                           ($$atom ptree0)
                                           ($$atom 4))
                                          (($$atom ac)
                                           (($$atom fut-val) ($$atom ptree0))
                                           ($$atom env0)
                                           ($$atom mut0)))
                                         (($$atom compiler-internal-error)
                                          ($$atom "ac, unknown parse tree node type")))))))))))))
 (define ac-proc
   (lambda (ptree0 env0 mut0)
     (let ((mut-parms0
            (($$atom ac-mutables)
             (($$atom vector-ref) ($$atom ptree0) ($$atom 9)))))
       (let ((mut-parms-copies0
              (($$atom map) ($$atom var-copy) ($$atom mut-parms0))))
         (let ((mut1 (($$atom ##append-two)
                      (($$atom pair-up)
                       ($$atom mut-parms0)
                       ($$atom mut-parms-copies0))
                      ($$atom mut0))))
           (let ((new-body0
                  (($$atom ac)
                   (($$atom prc-body) ($$atom ptree0))
                   ($$atom env0)
                   ($$atom mut1))))
             (let ((body0 (if (($$atom null?) ($$atom mut-parms0))
                              ($$atom new-body0)
                              (let ((source0 (($$atom vector-ref)
                                              ($$atom ptree0)
                                              ($$atom 5)))
                                    (decl0 (($$atom vector-ref)
                                            ($$atom ptree0)
                                            ($$atom 4)))
                                    (oper0 (($$atom new-prc)
                                            (($$atom vector-ref)
                                             ($$atom ptree0)
                                             ($$atom 5))
                                            (($$atom node-decl)
                                             ($$atom ptree0))
                                            ($$atom #f)
                                            (($$atom length)
                                             ($$atom mut-parms-copies0))
                                            ($$atom #f)
                                            ($$atom mut-parms-copies0)
                                            ($$atom new-body0)))
                                    (args0 (($$atom map)
                                            (lambda (var0)
                                              (($$atom new-call)
                                               (($$atom var-source)
                                                ($$atom var0))
                                               (($$atom node-decl)
                                                ($$atom ptree0))
                                               (($$atom new-ref-extended-bindings)
                                                (($$atom var-source)
                                                 ($$atom var0))
                                                ($$atom **make-cell-sym)
                                                ($$atom env0))
                                               (($$atom list)
                                                (($$atom new-ref)
                                                 (($$atom var-source)
                                                  ($$atom var0))
                                                 (($$atom node-decl)
                                                  ($$atom ptree0))
                                                 ($$atom var0)))))
                                            ($$atom mut-parms0))))
                                (let ((node0 (let ((children0
                                                    (($$atom cons)
                                                     ($$atom oper0)
                                                     ($$atom args0))))
                                               (($$atom vector)
                                                ($$atom app-tag)
                                                ($$atom #f)
                                                ($$atom children0)
                                                ($$atom #t)
                                                ($$atom decl0)
                                                ($$atom source0)))))
                                  (begin
                                    (($$atom vector-set!)
                                     ($$atom oper0)
                                     ($$atom 1)
                                     ($$atom node0))
                                    (($$atom for-each)
                                     (lambda (x0)
                                       (($$atom vector-set!)
                                        ($$atom x0)
                                        ($$atom 1)
                                        ($$atom node0)))
                                     ($$atom args0))
                                    ($$atom node0))))))
                   (parms0 (($$atom vector-ref) ($$atom ptree0) ($$atom 9)))
                   (rest0 (($$atom vector-ref) ($$atom ptree0) ($$atom 8)))
                   (min0 (($$atom vector-ref) ($$atom ptree0) ($$atom 7)))
                   (name0 (($$atom vector-ref) ($$atom ptree0) ($$atom 6)))
                   (decl0 (($$atom vector-ref) ($$atom ptree0) ($$atom 4)))
                   (source0 (($$atom vector-ref) ($$atom ptree0) ($$atom 5))))
               (let ((node0 (let ((children0 (($$atom list) ($$atom body0))))
                              (($$atom vector)
                               ($$atom prc-tag)
                               ($$atom #f)
                               ($$atom children0)
                               ($$atom #t)
                               ($$atom decl0)
                               ($$atom source0)
                               ($$atom name0)
                               ($$atom min0)
                               ($$atom rest0)
                               ($$atom parms0)))))
                 (begin
                   (($$atom for-each)
                    (lambda (x0)
                      (($$atom vector-set!)
                       ($$atom x0)
                       ($$atom 2)
                       ($$atom node0)))
                    ($$atom parms0))
                   (($$atom vector-set!)
                    ($$atom body0)
                    ($$atom 1)
                    ($$atom node0))
                   ($$atom node0))))))))))
 (define ac-let
   (lambda (ptree0 env0 mut0)
     (let ((proc0 (($$atom app-oper) ($$atom ptree0))))
       (let ((vals0 (($$atom app-args) ($$atom ptree0))))
         (let ((vars0 (($$atom vector-ref) ($$atom proc0) ($$atom 9))))
           (let ((vals-fv0
                  (($$atom apply)
                   ($$atom set-union)
                   (($$atom map) ($$atom free-variables) ($$atom vals0)))))
             (let ((mut-parms0 (($$atom ac-mutables) ($$atom vars0))))
               (let ((mut-parms-copies0
                      (($$atom map) ($$atom var-copy) ($$atom mut-parms0))))
                 (let ((mut1 (($$atom ##append-two)
                              (($$atom pair-up)
                               ($$atom mut-parms0)
                               ($$atom mut-parms-copies0))
                              ($$atom mut0))))
                   (letrec ((loop0 (lambda (ptree1
                                            env1
                                            proc1
                                            vals-fv1
                                            mut-parms1
                                            mut2
                                            l0
                                            v0
                                            new-vars0
                                            new-vals0
                                            new-body0)
                                     (if (($$atom null?) ($$atom l0))
                                         (($$atom new-let)
                                          ($$atom ptree1)
                                          ($$atom proc1)
                                          ($$atom new-vars0)
                                          ($$atom new-vals0)
                                          ($$atom new-body0))
                                         (let ((val0 (($$atom car)
                                                      ($$atom v0)))
                                               (var0 (($$atom car)
                                                      ($$atom l0))))
                                           (if (($$atom memq)
                                                ($$atom var0)
                                                ($$atom mut-parms1))
                                               (let ((var*0 (($$atom cdr)
                                                             (($$atom assq)
                                                              ($$atom var0)
                                                              ($$atom mut2))))
                                                     (decl0 (($$atom vector-ref)
                                                             ($$atom val0)
                                                             ($$atom 4)))
                                                     (src0 (($$atom vector-ref)
                                                            ($$atom val0)
                                                            ($$atom 5))))
                                                 (if (($$atom memq)
                                                      ($$atom var0)
                                                      ($$atom vals-fv1))
                                                     (($$atom loop0)
                                                      ($$atom ptree1)
                                                      ($$atom env1)
                                                      ($$atom proc1)
                                                      ($$atom vals-fv1)
                                                      ($$atom mut-parms1)
                                                      ($$atom mut2)
                                                      (($$atom cdr)
                                                       ($$atom l0))
                                                      (($$atom cdr)
                                                       ($$atom v0))
                                                      (($$atom cons)
                                                       ($$atom var*0)
                                                       ($$atom new-vars0))
                                                      (($$atom cons)
                                                       (($$atom new-call)
                                                        ($$atom src0)
                                                        ($$atom decl0)
                                                        (($$atom new-ref-extended-bindings)
                                                         ($$atom src0)
                                                         ($$atom **make-cell-sym)
                                                         ($$atom env1))
                                                        (($$atom list)
                                                         (($$atom new-cst)
                                                          ($$atom src0)
                                                          ($$atom decl0)
                                                          ($$atom '|#[undefined]|))))
                                                       ($$atom new-vals0))
                                                      (let ((before0 (($$atom new-call)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                              ($$atom src0)
                              ($$atom decl0)
                              (($$atom new-ref)
                               ($$atom src0)
                               (($$atom add-extended-bindings) ($$atom env1))
                               (($$atom env-lookup-global-var)
                                ($$atom env1)
                                ($$atom **cell-set!-sym)))
                              (($$atom list)
                               (($$atom new-ref)
                                ($$atom src0)
                                ($$atom decl0)
                                ($$atom var*0))
                               (($$atom ac)
                                ($$atom val0)
                                ($$atom env1)
                                ($$atom mut2))))))
                (($$atom new-call*)
                 ($$atom src0)
                 ($$atom decl0)
                 (($$atom new-prc)
                  ($$atom src0)
                  ($$atom decl0)
                  ($$atom #f)
                  ($$atom 1)
                  ($$atom #f)
                  (($$atom new-temps) ($$atom src0) ($$atom '(temp)))
                  ($$atom new-body0))
                 (($$atom list) ($$atom before0)))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                     (($$atom loop0)
                                                      ($$atom ptree1)
                                                      ($$atom env1)
                                                      ($$atom proc1)
                                                      ($$atom vals-fv1)
                                                      ($$atom mut-parms1)
                                                      ($$atom mut2)
                                                      (($$atom cdr)
                                                       ($$atom l0))
                                                      (($$atom cdr)
                                                       ($$atom v0))
                                                      (($$atom cons)
                                                       ($$atom var*0)
                                                       ($$atom new-vars0))
                                                      (($$atom cons)
                                                       (($$atom new-call)
                                                        ($$atom src0)
                                                        ($$atom decl0)
                                                        (($$atom new-ref-extended-bindings)
                                                         ($$atom src0)
                                                         ($$atom **make-cell-sym)
                                                         ($$atom env1))
                                                        (($$atom list)
                                                         (($$atom ac)
                                                          ($$atom val0)
                                                          ($$atom env1)
                                                          ($$atom mut2))))
                                                       ($$atom new-vals0))
                                                      ($$atom new-body0))))
                                               (($$atom loop0)
                                                ($$atom ptree1)
                                                ($$atom env1)
                                                ($$atom proc1)
                                                ($$atom vals-fv1)
                                                ($$atom mut-parms1)
                                                ($$atom mut2)
                                                (($$atom cdr) ($$atom l0))
                                                (($$atom cdr) ($$atom v0))
                                                (($$atom cons)
                                                 ($$atom var0)
                                                 ($$atom new-vars0))
                                                (($$atom cons)
                                                 (($$atom ac)
                                                  ($$atom val0)
                                                  ($$atom env1)
                                                  ($$atom mut2))
                                                 ($$atom new-vals0))
                                                ($$atom new-body0))))))))
                     (($$atom loop0)
                      ($$atom ptree0)
                      ($$atom env0)
                      ($$atom proc0)
                      ($$atom vals-fv0)
                      ($$atom mut-parms0)
                      ($$atom mut1)
                      ($$atom vars0)
                      ($$atom vals0)
                      ($$atom '())
                      ($$atom '())
                      (($$atom ac)
                       (($$atom prc-body) ($$atom proc0))
                       ($$atom env0)
                       ($$atom mut1)))))))))))))
 (define ac-mutables
   (lambda (l0)
     (if (($$atom pair?) ($$atom l0))
         (let ((rest0 (($$atom ac-mutables) (($$atom cdr) ($$atom l0))))
               (var0 (($$atom car) ($$atom l0))))
           (if (($$atom mutable?) ($$atom var0))
               (($$atom cons) ($$atom var0) ($$atom rest0))
               ($$atom rest0)))
         ($$atom '()))))
 (define lambda-lift!
   (lambda (ptree0) (($$atom ll!) ($$atom ptree0) ($$atom '()) ($$atom '()))))
 (define ll!
   (lambda (ptree0 cst-procs0 env0)
     (let ((new-env0
            (lambda (env1 vars0)
              (letrec ((loop0 (lambda (env2 i0 l0)
                                (if (($$atom pair?) ($$atom l0))
                                    (let ((var0 (($$atom car) ($$atom l0))))
                                      (($$atom cons)
                                       (($$atom cons)
                                        ($$atom var0)
                                        (($$atom cons)
                                         (($$atom length)
                                          (let ((set0 (($$atom vector-ref)
                                                       ($$atom var0)
                                                       ($$atom 3))))
                                            ($$atom set0)))
                                         ($$atom i0)))
                                       (($$atom loop0)
                                        ($$atom env2)
                                        (($$atom +) ($$atom i0) ($$atom 1))
                                        (($$atom cdr) ($$atom l0)))))
                                    ($$atom env2)))))
                (($$atom loop0)
                 ($$atom env1)
                 (($$atom length) ($$atom env1))
                 ($$atom vars0))))))
       (if (let ((g660 (($$atom cst?) ($$atom ptree0))))
             (if ($$atom g660)
                 ($$atom g660)
                 (let ((g670 (($$atom ref?) ($$atom ptree0))))
                   (if ($$atom g670)
                       ($$atom g670)
                       (let ((g680 (($$atom set?) ($$atom ptree0))))
                         (if ($$atom g680)
                             ($$atom g680)
                             (let ((g690 (($$atom tst?) ($$atom ptree0))))
                               (if ($$atom g690)
                                   ($$atom g690)
                                   (let ((g700 (($$atom conj?)
                                                ($$atom ptree0))))
                                     (if ($$atom g700)
                                         ($$atom g700)
                                         (let ((g710 (($$atom disj?)
                                                      ($$atom ptree0))))
                                           (if ($$atom g710)
                                               ($$atom g710)
                                               (($$atom fut?)
                                                ($$atom ptree0))))))))))))))
           (($$atom for-each)
            (lambda (child0)
              (($$atom ll!) ($$atom child0) ($$atom cst-procs0) ($$atom env0)))
            (($$atom vector-ref) ($$atom ptree0) ($$atom 2)))
           (if (($$atom prc?) ($$atom ptree0))
               (($$atom ll!)
                (($$atom prc-body) ($$atom ptree0))
                ($$atom cst-procs0)
                (($$atom new-env0)
                 ($$atom env0)
                 (($$atom vector-ref) ($$atom ptree0) ($$atom 9))))
               (if (($$atom app?) ($$atom ptree0))
                   (let ((args0 (($$atom app-args) ($$atom ptree0)))
                         (oper0 (($$atom app-oper) ($$atom ptree0))))
                     (if (if (($$atom prc?) ($$atom oper0))
                             (if (($$atom vector-ref)
                                  ($$atom oper0)
                                  ($$atom 8))
                                 ($$atom #f)
                                 (($$atom =)
                                  (($$atom length)
                                   (($$atom vector-ref)
                                    ($$atom oper0)
                                    ($$atom 9)))
                                  (($$atom length) ($$atom args0))))
                             ($$atom #f))
                         (($$atom ll!-let)
                          ($$atom ptree0)
                          ($$atom cst-procs0)
                          (($$atom new-env0)
                           ($$atom env0)
                           (($$atom vector-ref) ($$atom oper0) ($$atom 9))))
                         (($$atom for-each)
                          (lambda (child0)
                            (($$atom ll!)
                             ($$atom child0)
                             ($$atom cst-procs0)
                             ($$atom env0)))
                          (($$atom vector-ref) ($$atom ptree0) ($$atom 2)))))
                   (($$atom compiler-internal-error)
                    ($$atom "ll!, unknown parse tree node type"))))))))
 (define ll!-let
   (lambda (ptree0 cst-procs0 env0)
     (let ((proc0 (($$atom app-oper) ($$atom ptree0))))
       (let ((vals0 (($$atom app-args) ($$atom ptree0))))
         (let ((vars0 (($$atom vector-ref) ($$atom proc0) ($$atom 9))))
           (let ((var-val-map0
                  (($$atom pair-up) ($$atom vars0) ($$atom vals0))))
             (let ((var->val0
                    (lambda (var-val-map1 var0)
                      (($$atom cdr)
                       (($$atom assq) ($$atom var0) ($$atom var-val-map1))))))
               (let ((tcfv-map0
                      (let ((vars1 (letrec ((loop0 (lambda (vars1
                                                            var-val-map1
                                                            cst-proc-vars0)
                                                     (let ((non-cst-proc-vars0
                                                            (let ((keep?0 (lambda (var0)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                    (let ((val0 (($$atom var->val0)
                                                 ($$atom var-val-map1)
                                                 ($$atom var0))))
                                      (if (($$atom prc?) ($$atom val0))
                                          (($$atom not)
                                           (($$atom memq)
                                            ($$atom var0)
                                            ($$atom cst-proc-vars0)))
                                          ($$atom #f))))))
                      (if (($$atom null?) ($$atom vars1))
                          ($$atom '())
                          (if (($$atom keep?0) (($$atom car) ($$atom vars1)))
                              (($$atom cons)
                               (($$atom car) ($$atom vars1))
                               (($$atom set-keep)
                                ($$atom keep?0)
                                (($$atom cdr) ($$atom vars1))))
                              (($$atom set-keep)
                               ($$atom keep?0)
                               (($$atom cdr) ($$atom vars1))))))))
               (let ((cst-proc-vars*0
                      (let ((keep?0 (lambda (var0)
                                      (let ((val0 (($$atom var->val0)
                                                   ($$atom var-val-map1)
                                                   ($$atom var0))))
                                        (let ((set0 (($$atom set-intersection)
                                                     (($$atom free-variables)
                                                      ($$atom val0))
                                                     ($$atom non-cst-proc-vars0))))
                                          (($$atom null?) ($$atom set0)))))))
                        (if (($$atom null?) ($$atom cst-proc-vars0))
                            ($$atom '())
                            (if (($$atom keep?0)
                                 (($$atom car) ($$atom cst-proc-vars0)))
                                (($$atom cons)
                                 (($$atom car) ($$atom cst-proc-vars0))
                                 (($$atom set-keep)
                                  ($$atom keep?0)
                                  (($$atom cdr) ($$atom cst-proc-vars0))))
                                (($$atom set-keep)
                                 ($$atom keep?0)
                                 (($$atom cdr) ($$atom cst-proc-vars0))))))))
                 (if (($$atom set-equal?)
                      ($$atom cst-proc-vars0)
                      ($$atom cst-proc-vars*0))
                     ($$atom cst-proc-vars0)
                     (($$atom loop0)
                      ($$atom vars1)
                      ($$atom var-val-map1)
                      ($$atom cst-proc-vars*0))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                     (($$atom loop0)
                                      ($$atom vars0)
                                      ($$atom var-val-map0)
                                      (let ((keep?0 (lambda (var0)
                                                      (let ((val0 (($$atom cdr)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                           (($$atom assq)
                            ($$atom var0)
                            ($$atom var-val-map0)))))
                (if (($$atom prc?) ($$atom val0))
                    (if (let ((decl0 (($$atom vector-ref)
                                      ($$atom val0)
                                      ($$atom 4))))
                          (($$atom declaration-value)
                           ($$atom lambda-lift-sym)
                           ($$atom #f)
                           ($$atom #t)
                           ($$atom decl0)))
                        (($$atom set-every?)
                         ($$atom oper-pos?)
                         (($$atom vector-ref) ($$atom var0) ($$atom 3)))
                        ($$atom #f))
                    ($$atom #f))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                        (if (($$atom null?) ($$atom vars0))
                                            ($$atom '())
                                            (if (($$atom keep?0)
                                                 (($$atom car) ($$atom vars0)))
                                                (($$atom cons)
                                                 (($$atom car) ($$atom vars0))
                                                 (($$atom set-keep)
                                                  ($$atom keep?0)
                                                  (($$atom cdr)
                                                   ($$atom vars0))))
                                                (($$atom set-keep)
                                                 ($$atom keep?0)
                                                 (($$atom cdr)
                                                  ($$atom vars0))))))))))
                        (let ((tcfv-map0
                               (($$atom map)
                                (lambda (var0)
                                  (($$atom cons)
                                   ($$atom var0)
                                   (($$atom free-variables)
                                    (($$atom var->val0)
                                     ($$atom var-val-map0)
                                     ($$atom var0)))))
                                ($$atom vars1))))
                          (letrec ((loop0 (lambda (tcfv-map1 changed?0)
                                            (let ((changed?1
                                                   (($$atom ##box)
                                                    ($$atom changed?0))))
                                              (begin
                                                (($$atom for-each)
                                                 (lambda (var-tcfv0)
                                                   (letrec ((loop20 (lambda (tcfv-map2
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                     changed?2
                                     var-tcfv1
                                     l0
                                     fv0)
                              (if (($$atom null?) ($$atom l0))
                                  (if (($$atom set-equal?)
                                       ($$atom fv0)
                                       (($$atom cdr) ($$atom var-tcfv1)))
                                      ($$atom #f)
                                      (begin
                                        (($$atom set-cdr!)
                                         ($$atom var-tcfv1)
                                         ($$atom fv0))
                                        (($$atom ##set-box!)
                                         ($$atom changed?2)
                                         ($$atom #t))))
                                  (let ((x0 (($$atom assq)
                                             (($$atom car) ($$atom l0))
                                             ($$atom tcfv-map2))))
                                    (($$atom loop20)
                                     ($$atom tcfv-map2)
                                     ($$atom changed?2)
                                     ($$atom var-tcfv1)
                                     (($$atom cdr) ($$atom l0))
                                     (if ($$atom x0)
                                         (($$atom set-union)
                                          ($$atom fv0)
                                          (($$atom cdr) ($$atom x0)))
                                         ($$atom fv0))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                     (($$atom loop20)
                                                      ($$atom tcfv-map1)
                                                      ($$atom changed?1)
                                                      ($$atom var-tcfv0)
                                                      (let ((set0 (($$atom cdr)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                           ($$atom var-tcfv0))))
                ($$atom set0))
              (($$atom cdr) ($$atom var-tcfv0)))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                 ($$atom tcfv-map1))
                                                (if (($$atom ##unbox)
                                                     ($$atom changed?1))
                                                    (($$atom loop0)
                                                     ($$atom tcfv-map1)
                                                     ($$atom #f))
                                                    ($$atom tcfv-map1)))))))
                            (($$atom loop0)
                             ($$atom tcfv-map0)
                             ($$atom #f)))))))
                 (let ((cst-proc-vars-list0
                        (($$atom map) ($$atom car) ($$atom tcfv-map0))))
                   (let ((cst-procs*0
                          (($$atom set-union)
                           ($$atom cst-proc-vars-list0)
                           ($$atom cst-procs0))))
                     (letrec ((lift-prc!0
                               (lambda (var0)
                                 (let ((val0 (($$atom var->val0)
                                              ($$atom var-val-map0)
                                              ($$atom var0))))
                                   (let ((vars1 (($$atom lifted-vars0)
                                                 ($$atom env0)
                                                 ($$atom tcfv-map0)
                                                 ($$atom cst-procs*0)
                                                 ($$atom var0))))
                                     (if (($$atom null?) ($$atom vars1))
                                         ($$atom #f)
                                         (let ((var-copies0
                                                (($$atom map)
                                                 ($$atom var-copy)
                                                 ($$atom vars1))))
                                           (begin
                                             (let ((y0 (($$atom ##append-two)
                                                        ($$atom var-copies0)
                                                        (($$atom vector-ref)
                                                         ($$atom val0)
                                                         ($$atom 9)))))
                                               (($$atom vector-set!)
                                                ($$atom val0)
                                                ($$atom 9)
                                                ($$atom y0)))
                                             (($$atom for-each)
                                              (lambda (x0)
                                                (($$atom vector-set!)
                                                 ($$atom x0)
                                                 ($$atom 2)
                                                 ($$atom val0)))
                                              ($$atom var-copies0))
                                             (($$atom node-fv-invalidate!)
                                              ($$atom val0))
                                             (let ((y0 (($$atom +)
                                                        (($$atom vector-ref)
                                                         ($$atom val0)
                                                         ($$atom 7))
                                                        (($$atom length)
                                                         ($$atom vars1)))))
                                               (($$atom vector-set!)
                                                ($$atom val0)
                                                ($$atom 7)
                                                ($$atom y0)))
                                             (($$atom ll-rename!)
                                              ($$atom val0)
                                              (($$atom pair-up)
                                               ($$atom vars1)
                                               ($$atom var-copies0))))))))))
                              (lift-app!0
                               (lambda (var0)
                                 (let ((val0 (($$atom var->val0)
                                              ($$atom var-val-map0)
                                              ($$atom var0))))
                                   (let ((vars1 (($$atom lifted-vars0)
                                                 ($$atom env0)
                                                 ($$atom tcfv-map0)
                                                 ($$atom cst-procs*0)
                                                 ($$atom var0))))
                                     (let ((new-ref*0
                                            (lambda (var1)
                                              (($$atom new-ref)
                                               (($$atom vector-ref)
                                                ($$atom var1)
                                                ($$atom 5))
                                               (($$atom vector-ref)
                                                ($$atom val0)
                                                ($$atom 4))
                                               ($$atom var1)))))
                                       (if (($$atom null?) ($$atom vars1))
                                           ($$atom #f)
                                           (($$atom for-each)
                                            (lambda (oper0)
                                              (let ((node0 (($$atom vector-ref)
                                                            ($$atom oper0)
                                                            ($$atom 1))))
                                                (let ((y0 (($$atom cons)
                                                           (($$atom app-oper)
                                                            ($$atom node0))
                                                           (($$atom ##append-two)
                                                            (($$atom map)
                                                             ($$atom new-ref*0)
                                                             ($$atom vars1))
                                                            (($$atom app-args)
                                                             ($$atom node0))))))
                                                  (begin
                                                    (($$atom vector-set!)
                                                     ($$atom node0)
                                                     ($$atom 2)
                                                     ($$atom y0))
                                                    (($$atom for-each)
                                                     (lambda (child0)
                                                       (($$atom vector-set!)
                                                        ($$atom child0)
                                                        ($$atom 1)
                                                        ($$atom node0)))
                                                     ($$atom y0))
                                                    (($$atom node-fv-invalidate!)
                                                     ($$atom node0))))))
                                            (let ((set0 (($$atom vector-ref)
                                                         ($$atom var0)
                                                         ($$atom 3))))
                                              ($$atom set0)))))))))
                              (lifted-vars0
                               (lambda (env1 tcfv-map1 cst-procs*1 var0)
                                 (let ((vars1 (let ((set0 (($$atom set-difference)
                                                           (($$atom cdr)
                                                            (($$atom assq)
                                                             ($$atom var0)
                                                             ($$atom tcfv-map1)))
                                                           ($$atom cst-procs*1))))
                                                ($$atom set0))))
                                   (($$atom map)
                                    ($$atom car)
                                    (($$atom sort-list)
                                     (($$atom map)
                                      (lambda (var1)
                                        (($$atom assq)
                                         ($$atom var1)
                                         ($$atom env1)))
                                      ($$atom vars1))
                                     (lambda (x0 y0)
                                       (if (($$atom =)
                                            (($$atom car)
                                             (($$atom cdr) ($$atom x0)))
                                            (($$atom car)
                                             (($$atom cdr) ($$atom y0))))
                                           (($$atom <)
                                            (($$atom cdr)
                                             (($$atom cdr) ($$atom x0)))
                                            (($$atom cdr)
                                             (($$atom cdr) ($$atom y0))))
                                           (($$atom <)
                                            (($$atom car)
                                             (($$atom cdr) ($$atom x0)))
                                            (($$atom car)
                                             (($$atom cdr)
                                              ($$atom y0)))))))))))
                              (order-vars0
                               (lambda (env1 vars1)
                                 (($$atom map)
                                  ($$atom car)
                                  (($$atom sort-list)
                                   (($$atom map)
                                    (lambda (var0)
                                      (($$atom assq)
                                       ($$atom var0)
                                       ($$atom env1)))
                                    ($$atom vars1))
                                   (lambda (x0 y0)
                                     (if (($$atom =)
                                          (($$atom car)
                                           (($$atom cdr) ($$atom x0)))
                                          (($$atom car)
                                           (($$atom cdr) ($$atom y0))))
                                         (($$atom <)
                                          (($$atom cdr)
                                           (($$atom cdr) ($$atom x0)))
                                          (($$atom cdr)
                                           (($$atom cdr) ($$atom y0))))
                                         (($$atom <)
                                          (($$atom car)
                                           (($$atom cdr) ($$atom x0)))
                                          (($$atom car)
                                           (($$atom cdr) ($$atom y0))))))))))
                              (var->tcfv0
                               (lambda (tcfv-map1 var0)
                                 (($$atom cdr)
                                  (($$atom assq)
                                   ($$atom var0)
                                   ($$atom tcfv-map1))))))
                       (begin
                         (($$atom for-each)
                          ($$atom lift-app!0)
                          ($$atom cst-proc-vars-list0))
                         (($$atom for-each)
                          ($$atom lift-prc!0)
                          ($$atom cst-proc-vars-list0))
                         (($$atom for-each)
                          (lambda (node0)
                            (($$atom ll!)
                             ($$atom node0)
                             ($$atom cst-procs*0)
                             ($$atom env0)))
                          ($$atom vals0))
                         (($$atom ll!)
                          (($$atom prc-body) ($$atom proc0))
                          ($$atom cst-procs*0)
                          ($$atom env0))))))))))))))
 (define ll-rename!
   (lambda (ptree0 var-map0)
     (begin
       (if (($$atom ref?) ($$atom ptree0))
           (let ((var0 (($$atom vector-ref) ($$atom ptree0) ($$atom 6))))
             (let ((x0 (($$atom assq) ($$atom var0) ($$atom var-map0))))
               (if ($$atom x0)
                   (begin
                     (let ((y0 (($$atom set-remove)
                                (($$atom vector-ref) ($$atom var0) ($$atom 3))
                                ($$atom ptree0))))
                       (($$atom vector-set!)
                        ($$atom var0)
                        ($$atom 3)
                        ($$atom y0)))
                     (let ((y0 (let ((set0 (($$atom var-refs)
                                            (($$atom cdr) ($$atom x0)))))
                                 (if (($$atom memq)
                                      ($$atom ptree0)
                                      ($$atom set0))
                                     ($$atom set0)
                                     (($$atom cons)
                                      ($$atom ptree0)
                                      ($$atom set0)))))
                           (x1 (($$atom cdr) ($$atom x0))))
                       (($$atom vector-set!)
                        ($$atom x1)
                        ($$atom 3)
                        ($$atom y0)))
                     (let ((y0 (($$atom cdr) ($$atom x0))))
                       (($$atom vector-set!)
                        ($$atom ptree0)
                        ($$atom 6)
                        ($$atom y0))))
                   ($$atom #f))))
           (if (($$atom set?) ($$atom ptree0))
               (let ((var0 (($$atom vector-ref) ($$atom ptree0) ($$atom 6))))
                 (let ((x0 (($$atom assq) ($$atom var0) ($$atom var-map0))))
                   (if ($$atom x0)
                       (begin
                         (let ((y0 (($$atom set-remove)
                                    (($$atom vector-ref)
                                     ($$atom var0)
                                     ($$atom 4))
                                    ($$atom ptree0))))
                           (($$atom vector-set!)
                            ($$atom var0)
                            ($$atom 4)
                            ($$atom y0)))
                         (let ((y0 (let ((set0 (($$atom var-sets)
                                                (($$atom cdr) ($$atom x0)))))
                                     (if (($$atom memq)
                                          ($$atom ptree0)
                                          ($$atom set0))
                                         ($$atom set0)
                                         (($$atom cons)
                                          ($$atom ptree0)
                                          ($$atom set0)))))
                               (x1 (($$atom cdr) ($$atom x0))))
                           (($$atom vector-set!)
                            ($$atom x1)
                            ($$atom 4)
                            ($$atom y0)))
                         (let ((y0 (($$atom cdr) ($$atom x0))))
                           (($$atom vector-set!)
                            ($$atom ptree0)
                            ($$atom 6)
                            ($$atom y0))))
                       ($$atom #f))))
               ($$atom #f)))
       (($$atom vector-set!) ($$atom ptree0) ($$atom 3) ($$atom #t))
       (($$atom for-each)
        (lambda (child0)
          (($$atom ll-rename!) ($$atom child0) ($$atom var-map0)))
        (($$atom vector-ref) ($$atom ptree0) ($$atom 2))))))
 (define parse-tree->expression
   (lambda (ptree0)
     (($$atom se) ($$atom ptree0) ($$atom '()) (($$atom list) ($$atom 0)))))
 (define se
   (lambda (ptree0 env0 num0)
     (if (($$atom cst?) ($$atom ptree0))
         (($$atom list)
          ($$atom quote-sym)
          (($$atom vector-ref) ($$atom ptree0) ($$atom 6)))
         (if (($$atom ref?) ($$atom ptree0))
             (let ((x0 (($$atom assq)
                        (($$atom vector-ref) ($$atom ptree0) ($$atom 6))
                        ($$atom env0))))
               (if ($$atom x0)
                   (($$atom cdr) ($$atom x0))
                   (let ((x1 (($$atom ref-var) ($$atom ptree0))))
                     (($$atom vector-ref) ($$atom x1) ($$atom 1)))))
             (if (($$atom set?) ($$atom ptree0))
                 (($$atom list)
                  ($$atom set!-sym)
                  (let ((x0 (($$atom assq)
                             (($$atom vector-ref) ($$atom ptree0) ($$atom 6))
                             ($$atom env0))))
                    (if ($$atom x0)
                        (($$atom cdr) ($$atom x0))
                        (let ((x1 (($$atom set-var) ($$atom ptree0))))
                          (($$atom vector-ref) ($$atom x1) ($$atom 1)))))
                  (($$atom se)
                   (($$atom set-val) ($$atom ptree0))
                   ($$atom env0)
                   ($$atom num0)))
                 (if (($$atom def?) ($$atom ptree0))
                     (($$atom list)
                      ($$atom define-sym)
                      (let ((x0 (($$atom assq)
                                 (($$atom vector-ref)
                                  ($$atom ptree0)
                                  ($$atom 6))
                                 ($$atom env0))))
                        (if ($$atom x0)
                            (($$atom cdr) ($$atom x0))
                            (let ((x1 (($$atom def-var) ($$atom ptree0))))
                              (($$atom vector-ref) ($$atom x1) ($$atom 1)))))
                      (($$atom se)
                       (($$atom def-val) ($$atom ptree0))
                       ($$atom env0)
                       ($$atom num0)))
                     (if (($$atom tst?) ($$atom ptree0))
                         (($$atom list)
                          ($$atom if-sym)
                          (($$atom se)
                           (($$atom tst-pre) ($$atom ptree0))
                           ($$atom env0)
                           ($$atom num0))
                          (($$atom se)
                           (($$atom tst-con) ($$atom ptree0))
                           ($$atom env0)
                           ($$atom num0))
                          (($$atom se)
                           (($$atom tst-alt) ($$atom ptree0))
                           ($$atom env0)
                           ($$atom num0)))
                         (if (($$atom conj?) ($$atom ptree0))
                             (($$atom list)
                              ($$atom and-sym)
                              (($$atom se)
                               (($$atom conj-pre) ($$atom ptree0))
                               ($$atom env0)
                               ($$atom num0))
                              (($$atom se)
                               (($$atom conj-alt) ($$atom ptree0))
                               ($$atom env0)
                               ($$atom num0)))
                             (if (($$atom disj?) ($$atom ptree0))
                                 (($$atom list)
                                  ($$atom or-sym)
                                  (($$atom se)
                                   (($$atom disj-pre) ($$atom ptree0))
                                   ($$atom env0)
                                   ($$atom num0))
                                  (($$atom se)
                                   (($$atom disj-alt) ($$atom ptree0))
                                   ($$atom env0)
                                   ($$atom num0)))
                                 (if (($$atom prc?) ($$atom ptree0))
                                     (let ((new-env0
                                            (($$atom se-rename)
                                             (($$atom vector-ref)
                                              ($$atom ptree0)
                                              ($$atom 9))
                                             ($$atom env0)
                                             ($$atom num0))))
                                       (($$atom list)
                                        ($$atom lambda-sym)
                                        (($$atom se-parameters)
                                         (($$atom vector-ref)
                                          ($$atom ptree0)
                                          ($$atom 9))
                                         (($$atom vector-ref)
                                          ($$atom ptree0)
                                          ($$atom 8))
                                         (($$atom vector-ref)
                                          ($$atom ptree0)
                                          ($$atom 7))
                                         ($$atom new-env0))
                                        (($$atom se)
                                         (($$atom prc-body) ($$atom ptree0))
                                         ($$atom new-env0)
                                         ($$atom num0))))
                                     (if (($$atom app?) ($$atom ptree0))
                                         (let ((args0 (($$atom app-args)
                                                       ($$atom ptree0)))
                                               (oper0 (($$atom app-oper)
                                                       ($$atom ptree0))))
                                           (if (if (($$atom prc?)
                                                    ($$atom oper0))
                                                   (if (($$atom vector-ref)
                                                        ($$atom oper0)
                                                        ($$atom 8))
                                                       ($$atom #f)
                                                       (($$atom =)
                                                        (($$atom length)
                                                         (($$atom vector-ref)
                                                          ($$atom oper0)
                                                          ($$atom 9)))
                                                        (($$atom length)
                                                         ($$atom args0))))
                                                   ($$atom #f))
                                               (let ((new-env0
                                                      (($$atom se-rename)
                                                       (($$atom vector-ref)
                                                        ($$atom oper0)
                                                        ($$atom 9))
                                                       ($$atom env0)
                                                       ($$atom num0))))
                                                 (($$atom list)
                                                  (if (let ((set0 (($$atom set-intersection)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                           (let ((list0 (($$atom vector-ref)
                                         ($$atom oper0)
                                         ($$atom 9))))
                             ($$atom list0))
                           (($$atom apply)
                            ($$atom set-union)
                            (($$atom map)
                             ($$atom free-variables)
                             ($$atom args0))))))
                (($$atom null?) ($$atom set0)))
              ($$atom let-sym)
              ($$atom letrec-sym))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                  (($$atom se-bindings)
                                                   (($$atom vector-ref)
                                                    ($$atom oper0)
                                                    ($$atom 9))
                                                   ($$atom args0)
                                                   ($$atom new-env0)
                                                   ($$atom num0))
                                                  (($$atom se)
                                                   (($$atom prc-body)
                                                    ($$atom oper0))
                                                   ($$atom new-env0)
                                                   ($$atom num0))))
                                               (($$atom map)
                                                (lambda (x0)
                                                  (($$atom se)
                                                   ($$atom x0)
                                                   ($$atom env0)
                                                   ($$atom num0)))
                                                (($$atom cons)
                                                 ($$atom oper0)
                                                 ($$atom args0)))))
                                         (if (($$atom fut?) ($$atom ptree0))
                                             (($$atom list)
                                              ($$atom future-sym)
                                              (($$atom se)
                                               (($$atom fut-val)
                                                ($$atom ptree0))
                                               ($$atom env0)
                                               ($$atom num0)))
                                             (($$atom compiler-internal-error)
                                              ($$atom "se, unknown parse tree node type"))))))))))))))
 (define se-parameters
   (lambda (parms0 rest0 min0 env0)
     (letrec ((se-parms0
               (lambda (parms1 rest1 n0 env1)
                 (if (($$atom null?) ($$atom parms1))
                     ($$atom '())
                     (if (if ($$atom rest1)
                             (($$atom null?) (($$atom cdr) ($$atom parms1)))
                             ($$atom #f))
                         (($$atom cdr)
                          (($$atom assq)
                           (($$atom car) ($$atom parms1))
                           ($$atom env1)))
                         (let ((parm0 (($$atom cdr)
                                       (($$atom assq)
                                        (($$atom car) ($$atom parms1))
                                        ($$atom env1)))))
                           (($$atom cons)
                            (if (($$atom >) ($$atom n0) ($$atom 0))
                                ($$atom parm0)
                                (($$atom list) ($$atom parm0)))
                            (($$atom se-parms0)
                             (($$atom cdr) ($$atom parms1))
                             ($$atom rest1)
                             (($$atom -) ($$atom n0) ($$atom 1))
                             ($$atom env1)))))))))
       (($$atom se-parms0)
        ($$atom parms0)
        ($$atom rest0)
        ($$atom min0)
        ($$atom env0)))))
 (define se-bindings
   (lambda (vars0 vals0 env0 num0)
     (if (($$atom null?) ($$atom vars0))
         ($$atom '())
         (($$atom cons)
          (($$atom list)
           (($$atom cdr)
            (($$atom assq) (($$atom car) ($$atom vars0)) ($$atom env0)))
           (($$atom se)
            (($$atom car) ($$atom vals0))
            ($$atom env0)
            ($$atom num0)))
          (($$atom se-bindings)
           (($$atom cdr) ($$atom vars0))
           (($$atom cdr) ($$atom vals0))
           ($$atom env0)
           ($$atom num0))))))
 (define se-rename
   (lambda (vars0 env0 num0)
     (letrec ((rename0 (lambda (env1 num1 vars1)
                         (if (($$atom null?) ($$atom vars1))
                             ($$atom env1)
                             (($$atom cons)
                              (($$atom cons)
                               (($$atom car) ($$atom vars1))
                               (($$atom string->canonical-symbol)
                                (($$atom string-append)
                                 (($$atom symbol->string)
                                  (let ((x0 (($$atom car) ($$atom vars1))))
                                    (($$atom vector-ref)
                                     ($$atom x0)
                                     ($$atom 1))))
                                 ($$atom "#")
                                 (($$atom number->string)
                                  (($$atom car) ($$atom num1))))))
                              (($$atom rename0)
                               ($$atom env1)
                               ($$atom num1)
                               (($$atom cdr) ($$atom vars1))))))))
       (begin
         (($$atom set-car!)
          ($$atom num0)
          (($$atom +) (($$atom car) ($$atom num0)) ($$atom 1)))
         (($$atom rename0) ($$atom env0) ($$atom num0) ($$atom vars0))))))
 (define *opnd-table* ($$atom '()))
 (define *opnd-table-alloc* ($$atom '()))
 (define opnd-table-size ($$atom 10000))
 (define enter-opnd
   (lambda (arg10 arg20)
     (letrec ((loop0 (lambda (arg11 arg21 i0)
                       (if (($$atom <) ($$atom i0) ($$atom *opnd-table-alloc*))
                           (let ((x0 (($$atom vector-ref)
                                      ($$atom *opnd-table*)
                                      ($$atom i0))))
                             (if (if (let ((g720 (($$atom car) ($$atom x0))))
                                       (if (($$atom number?) ($$atom g720))
                                           (if (($$atom number?)
                                                ($$atom arg11))
                                               (($$atom =)
                                                ($$atom g720)
                                                ($$atom arg11))
                                               ($$atom #f))
                                           (($$atom eq?)
                                            ($$atom g720)
                                            ($$atom arg11))))
                                     (let ((g730 (($$atom cdr) ($$atom x0))))
                                       (if (($$atom number?) ($$atom g730))
                                           (if (($$atom number?)
                                                ($$atom arg21))
                                               (($$atom =)
                                                ($$atom g730)
                                                ($$atom arg21))
                                               ($$atom #f))
                                           (($$atom eq?)
                                            ($$atom g730)
                                            ($$atom arg21))))
                                     ($$atom #f))
                                 ($$atom i0)
                                 (($$atom loop0)
                                  ($$atom arg11)
                                  ($$atom arg21)
                                  (($$atom +) ($$atom i0) ($$atom 1)))))
                           (if (($$atom <)
                                ($$atom *opnd-table-alloc*)
                                ($$atom 10000))
                               (begin
                                 (set! *opnd-table-alloc*
                                       (($$atom +)
                                        ($$atom *opnd-table-alloc*)
                                        ($$atom 1)))
                                 (($$atom vector-set!)
                                  ($$atom *opnd-table*)
                                  ($$atom i0)
                                  (($$atom cons)
                                   ($$atom arg11)
                                   ($$atom arg21)))
                                 ($$atom i0))
                               (($$atom compiler-limitation-error)
                                ($$atom "program is too long [virtual machine operand table overflow]")))))))
       (($$atom loop0) ($$atom arg10) ($$atom arg20) ($$atom 0)))))
 (define contains-opnd?
   (lambda (opnd10 opnd20)
     (if (if (($$atom number?) ($$atom opnd10))
             (if (($$atom number?) ($$atom opnd20))
                 (($$atom =) ($$atom opnd10) ($$atom opnd20))
                 ($$atom #f))
             (($$atom eq?) ($$atom opnd10) ($$atom opnd20)))
         ($$atom #t)
         (if (($$atom clo?) ($$atom opnd20))
             (($$atom contains-opnd?)
              ($$atom opnd10)
              (($$atom clo-base) ($$atom opnd20)))
             ($$atom #f)))))
 (define any-contains-opnd?
   (lambda (opnd0 opnds0)
     (if (($$atom null?) ($$atom opnds0))
         ($$atom #f)
         (let ((g740 (($$atom contains-opnd?)
                      ($$atom opnd0)
                      (($$atom car) ($$atom opnds0)))))
           (if ($$atom g740)
               ($$atom g740)
               (($$atom any-contains-opnd?)
                ($$atom opnd0)
                (($$atom cdr) ($$atom opnds0))))))))
 (define make-reg (lambda (num0) ($$atom num0)))
 (define reg? (lambda (x0) (($$atom <) ($$atom x0) ($$atom 10000))))
 (define reg-num (lambda (x0) (($$atom modulo) ($$atom x0) ($$atom 10000))))
 (define make-stk (lambda (num0) (($$atom +) ($$atom num0) ($$atom 10000))))
 (define stk?
   (lambda (x0)
     (($$atom =) (($$atom quotient) ($$atom x0) ($$atom 10000)) ($$atom 1))))
 (define stk-num (lambda (x0) (($$atom modulo) ($$atom x0) ($$atom 10000))))
 (define make-glo
   (lambda (name0)
     (($$atom +)
      (($$atom enter-opnd) ($$atom name0) ($$atom #t))
      ($$atom 30000))))
 (define glo?
   (lambda (x0)
     (($$atom =) (($$atom quotient) ($$atom x0) ($$atom 10000)) ($$atom 3))))
 (define glo-name
   (lambda (x0)
     (($$atom car)
      (($$atom vector-ref)
       ($$atom *opnd-table*)
       (($$atom modulo) ($$atom x0) ($$atom 10000))))))
 (define make-clo
   (lambda (base0 index0)
     (($$atom +)
      (($$atom enter-opnd) ($$atom base0) ($$atom index0))
      ($$atom 40000))))
 (define clo?
   (lambda (x0)
     (($$atom =) (($$atom quotient) ($$atom x0) ($$atom 10000)) ($$atom 4))))
 (define clo-base
   (lambda (x0)
     (($$atom car)
      (($$atom vector-ref)
       ($$atom *opnd-table*)
       (($$atom modulo) ($$atom x0) ($$atom 10000))))))
 (define clo-index
   (lambda (x0)
     (($$atom cdr)
      (($$atom vector-ref)
       ($$atom *opnd-table*)
       (($$atom modulo) ($$atom x0) ($$atom 10000))))))
 (define make-lbl (lambda (num0) (($$atom +) ($$atom num0) ($$atom 20000))))
 (define lbl?
   (lambda (x0)
     (($$atom =) (($$atom quotient) ($$atom x0) ($$atom 10000)) ($$atom 2))))
 (define lbl-num (lambda (x0) (($$atom modulo) ($$atom x0) ($$atom 10000))))
 (define label-limit ($$atom 9999))
 (define make-obj
   (lambda (val0)
     (($$atom +)
      (($$atom enter-opnd) ($$atom val0) ($$atom #f))
      ($$atom 50000))))
 (define obj?
   (lambda (x0)
     (($$atom =) (($$atom quotient) ($$atom x0) ($$atom 10000)) ($$atom 5))))
 (define obj-val
   (lambda (x0)
     (($$atom car)
      (($$atom vector-ref)
       ($$atom *opnd-table*)
       (($$atom modulo) ($$atom x0) ($$atom 10000))))))
 (define make-pcontext
   (lambda (fs0 map0) (($$atom vector) ($$atom fs0) ($$atom map0))))
 (define pcontext-fs
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 0))))
 (define pcontext-map
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 1))))
 (define make-frame
   (lambda (size0 slots0 regs0 closed0 live0)
     (($$atom vector)
      ($$atom size0)
      ($$atom slots0)
      ($$atom regs0)
      ($$atom closed0)
      ($$atom live0))))
 (define frame-size (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 0))))
 (define frame-slots
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 1))))
 (define frame-regs (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 2))))
 (define frame-closed
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 3))))
 (define frame-live (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 4))))
 (define frame-eq?
   (lambda (x0 y0)
     (($$atom =)
      (($$atom vector-ref) ($$atom x0) ($$atom 0))
      (($$atom vector-ref) ($$atom y0) ($$atom 0)))))
 (define frame-truncate
   (lambda (frame0 nb-slots0)
     (let ((fs0 (($$atom vector-ref) ($$atom frame0) ($$atom 0))))
       (let ((live0 (($$atom frame-live) ($$atom frame0)))
             (closed0 (($$atom frame-closed) ($$atom frame0)))
             (regs0 (($$atom frame-regs) ($$atom frame0)))
             (slots0 (let ((l0 (($$atom frame-slots) ($$atom frame0)))
                           (n0 (($$atom -) ($$atom fs0) ($$atom nb-slots0))))
                       (letrec ((loop0 (lambda (l1 n1)
                                         (if (($$atom >)
                                              ($$atom n1)
                                              ($$atom 0))
                                             (($$atom loop0)
                                              (($$atom cdr) ($$atom l1))
                                              (($$atom -)
                                               ($$atom n1)
                                               ($$atom 1)))
                                             ($$atom l1)))))
                         (($$atom loop0) ($$atom l0) ($$atom n0))))))
         (($$atom vector)
          ($$atom nb-slots0)
          ($$atom slots0)
          ($$atom regs0)
          ($$atom closed0)
          ($$atom live0))))))
 (define frame-live?
   (lambda (var0 frame0)
     (let ((live0 (($$atom vector-ref) ($$atom frame0) ($$atom 4))))
       (if (($$atom eq?) ($$atom var0) ($$atom closure-env-var))
           (let ((closed0 (($$atom vector-ref) ($$atom frame0) ($$atom 3))))
             (if (let ((g750 (($$atom memq) ($$atom var0) ($$atom live0))))
                   (if ($$atom g750)
                       ($$atom g750)
                       (($$atom not)
                        (let ((set0 (($$atom set-intersection)
                                     ($$atom live0)
                                     ($$atom closed0))))
                          (($$atom null?) ($$atom set0))))))
                 ($$atom closed0)
                 ($$atom #f)))
           (if (($$atom memq) ($$atom var0) ($$atom live0))
               ($$atom var0)
               ($$atom #f))))))
 (define frame-first-empty-slot
   (lambda (frame0)
     (letrec ((loop0 (lambda (frame1 i0 s0)
                       (if (($$atom pair?) ($$atom s0))
                           (if (($$atom frame-live?)
                                (($$atom car) ($$atom s0))
                                ($$atom frame1))
                               (($$atom loop0)
                                ($$atom frame1)
                                (($$atom +) ($$atom i0) ($$atom 1))
                                (($$atom cdr) ($$atom s0)))
                               ($$atom i0))
                           ($$atom i0)))))
       (($$atom loop0)
        ($$atom frame0)
        ($$atom 1)
        (($$atom reverse) (($$atom vector-ref) ($$atom frame0) ($$atom 1)))))))
 (define make-proc-obj
   (lambda (name0 primitive?0 code0 call-pat0 side-effects?0 strict-pat0 type0)
     (let ((proc-obj0
            (($$atom vector)
             ($$atom proc-obj-tag)
             ($$atom name0)
             ($$atom primitive?0)
             ($$atom code0)
             ($$atom call-pat0)
             ($$atom #f)
             ($$atom #f)
             ($$atom #f)
             ($$atom side-effects?0)
             ($$atom strict-pat0)
             ($$atom type0))))
       (begin
         (let ((x0 (lambda (decls0) ($$atom proc-obj0))))
           (($$atom vector-set!) ($$atom proc-obj0) ($$atom 7) ($$atom x0)))
         ($$atom proc-obj0)))))
 (define proc-obj-tag (($$atom list) ($$atom 'proc-obj)))
 (define proc-obj?
   (lambda (x0)
     (if (($$atom vector?) ($$atom x0))
         (if (($$atom >) (($$atom vector-length) ($$atom x0)) ($$atom 0))
             (($$atom eq?)
              (($$atom vector-ref) ($$atom x0) ($$atom 0))
              ($$atom proc-obj-tag))
             ($$atom #f))
         ($$atom #f))))
 (define proc-obj-name
   (lambda (obj0) (($$atom vector-ref) ($$atom obj0) ($$atom 1))))
 (define proc-obj-primitive?
   (lambda (obj0) (($$atom vector-ref) ($$atom obj0) ($$atom 2))))
 (define proc-obj-code
   (lambda (obj0) (($$atom vector-ref) ($$atom obj0) ($$atom 3))))
 (define proc-obj-call-pat
   (lambda (obj0) (($$atom vector-ref) ($$atom obj0) ($$atom 4))))
 (define proc-obj-test
   (lambda (obj0) (($$atom vector-ref) ($$atom obj0) ($$atom 5))))
 (define proc-obj-inlinable
   (lambda (obj0) (($$atom vector-ref) ($$atom obj0) ($$atom 6))))
 (define proc-obj-specialize
   (lambda (obj0) (($$atom vector-ref) ($$atom obj0) ($$atom 7))))
 (define proc-obj-side-effects?
   (lambda (obj0) (($$atom vector-ref) ($$atom obj0) ($$atom 8))))
 (define proc-obj-strict-pat
   (lambda (obj0) (($$atom vector-ref) ($$atom obj0) ($$atom 9))))
 (define proc-obj-type
   (lambda (obj0) (($$atom vector-ref) ($$atom obj0) ($$atom 10))))
 (define proc-obj-code-set!
   (lambda (obj0 x0)
     (($$atom vector-set!) ($$atom obj0) ($$atom 3) ($$atom x0))))
 (define proc-obj-test-set!
   (lambda (obj0 x0)
     (($$atom vector-set!) ($$atom obj0) ($$atom 5) ($$atom x0))))
 (define proc-obj-inlinable-set!
   (lambda (obj0 x0)
     (($$atom vector-set!) ($$atom obj0) ($$atom 6) ($$atom x0))))
 (define proc-obj-specialize-set!
   (lambda (obj0 x0)
     (($$atom vector-set!) ($$atom obj0) ($$atom 7) ($$atom x0))))
 (define make-pattern
   (lambda (min-args0 nb-parms0 rest?0)
     (letrec ((loop0 (lambda (min-args1 x0 y0)
                       (let ((z0 (($$atom -) ($$atom y0) ($$atom 1))))
                         (if (($$atom <) ($$atom z0) ($$atom min-args1))
                             ($$atom x0)
                             (($$atom loop0)
                              ($$atom min-args1)
                              (($$atom cons) ($$atom z0) ($$atom x0))
                              ($$atom z0)))))))
       (let ((y0 (if ($$atom rest?0)
                     (($$atom -) ($$atom nb-parms0) ($$atom 1))
                     ($$atom nb-parms0)))
             (x0 (if ($$atom rest?0)
                     (($$atom -) ($$atom nb-parms0) ($$atom 1))
                     (($$atom list) ($$atom nb-parms0)))))
         (let ((z0 (($$atom -) ($$atom y0) ($$atom 1))))
           (if (($$atom <) ($$atom z0) ($$atom min-args0))
               ($$atom x0)
               (($$atom loop0)
                ($$atom min-args0)
                (($$atom cons) ($$atom z0) ($$atom x0))
                ($$atom z0))))))))
 (define pattern-member?
   (lambda (n0 pat0)
     (if (($$atom pair?) ($$atom pat0))
         (if (($$atom =) (($$atom car) ($$atom pat0)) ($$atom n0))
             ($$atom #t)
             (($$atom pattern-member?)
              ($$atom n0)
              (($$atom cdr) ($$atom pat0))))
         (if (($$atom null?) ($$atom pat0))
             ($$atom #f)
             (($$atom <=) ($$atom pat0) ($$atom n0))))))
 (define type-name
   (lambda (type0)
     (if (($$atom pair?) ($$atom type0))
         (($$atom car) ($$atom type0))
         ($$atom type0))))
 (define type-pot-fut? (lambda (type0) (($$atom pair?) ($$atom type0))))
 (define make-bbs
   (lambda ()
     (($$atom vector)
      (($$atom make-counter) ($$atom 1) ($$atom 9999) ($$atom bbs-limit-err))
      (($$atom queue-empty))
      ($$atom '()))))
 (define bbs-limit-err
   (lambda ()
     (($$atom compiler-limitation-error)
      ($$atom "procedure is too long [too many labels]"))))
 (define bbs-lbl-counter
   (lambda (bbs0) (($$atom vector-ref) ($$atom bbs0) ($$atom 0))))
 (define bbs-lbl-counter-set!
   (lambda (bbs0 cntr0)
     (($$atom vector-set!) ($$atom bbs0) ($$atom 0) ($$atom cntr0))))
 (define bbs-bb-queue
   (lambda (bbs0) (($$atom vector-ref) ($$atom bbs0) ($$atom 1))))
 (define bbs-bb-queue-set!
   (lambda (bbs0 bbq0)
     (($$atom vector-set!) ($$atom bbs0) ($$atom 1) ($$atom bbq0))))
 (define bbs-entry-lbl-num
   (lambda (bbs0) (($$atom vector-ref) ($$atom bbs0) ($$atom 2))))
 (define bbs-entry-lbl-num-set!
   (lambda (bbs0 lbl-num0)
     (($$atom vector-set!) ($$atom bbs0) ($$atom 2) ($$atom lbl-num0))))
 (define bbs-new-lbl!
   (lambda (bbs0) ((($$atom vector-ref) ($$atom bbs0) ($$atom 0)))))
 (define lbl-num->bb
   (lambda (lbl-num0 bbs0)
     (letrec ((loop0 (lambda (lbl-num1 bb-list0)
                       (if (($$atom =)
                            (($$atom bb-lbl-num)
                             (($$atom car) ($$atom bb-list0)))
                            ($$atom lbl-num1))
                           (($$atom car) ($$atom bb-list0))
                           (($$atom loop0)
                            ($$atom lbl-num1)
                            (($$atom cdr) ($$atom bb-list0)))))))
       (($$atom loop0)
        ($$atom lbl-num0)
        (let ((queue0 (($$atom vector-ref) ($$atom bbs0) ($$atom 1))))
          (($$atom car) ($$atom queue0)))))))
 (define make-bb
   (lambda (label-instr0 bbs0)
     (let ((bb0 (($$atom vector)
                 ($$atom label-instr0)
                 (($$atom queue-empty))
                 ($$atom '())
                 ($$atom '())
                 ($$atom '()))))
       (begin
         (($$atom queue-put!)
          (($$atom vector-ref) ($$atom bbs0) ($$atom 1))
          ($$atom bb0))
         ($$atom bb0)))))
 (define bb-lbl-num
   (lambda (bb0)
     (let ((gvm-instr0 (($$atom vector-ref) ($$atom bb0) ($$atom 0))))
       (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 3)))))
 (define bb-label-type
   (lambda (bb0)
     (let ((gvm-instr0 (($$atom vector-ref) ($$atom bb0) ($$atom 0))))
       (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 4)))))
 (define bb-label-instr
   (lambda (bb0) (($$atom vector-ref) ($$atom bb0) ($$atom 0))))
 (define bb-label-instr-set!
   (lambda (bb0 l0)
     (($$atom vector-set!) ($$atom bb0) ($$atom 0) ($$atom l0))))
 (define bb-non-branch-instrs
   (lambda (bb0)
     (let ((queue0 (($$atom vector-ref) ($$atom bb0) ($$atom 1))))
       (($$atom car) ($$atom queue0)))))
 (define bb-non-branch-instrs-set!
   (lambda (bb0 l0)
     (($$atom vector-set!)
      ($$atom bb0)
      ($$atom 1)
      (($$atom list->queue) ($$atom l0)))))
 (define bb-branch-instr
   (lambda (bb0) (($$atom vector-ref) ($$atom bb0) ($$atom 2))))
 (define bb-branch-instr-set!
   (lambda (bb0 b0)
     (($$atom vector-set!) ($$atom bb0) ($$atom 2) ($$atom b0))))
 (define bb-references
   (lambda (bb0) (($$atom vector-ref) ($$atom bb0) ($$atom 3))))
 (define bb-references-set!
   (lambda (bb0 l0)
     (($$atom vector-set!) ($$atom bb0) ($$atom 3) ($$atom l0))))
 (define bb-precedents
   (lambda (bb0) (($$atom vector-ref) ($$atom bb0) ($$atom 4))))
 (define bb-precedents-set!
   (lambda (bb0 l0)
     (($$atom vector-set!) ($$atom bb0) ($$atom 4) ($$atom l0))))
 (define bb-entry-frame-size
   (lambda (bb0)
     (let ((x0 (let ((gvm-instr0 (($$atom bb-label-instr) ($$atom bb0))))
                 (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 1)))))
       (($$atom vector-ref) ($$atom x0) ($$atom 0)))))
 (define bb-exit-frame-size
   (lambda (bb0)
     (let ((x0 (let ((gvm-instr0 (($$atom bb-branch-instr) ($$atom bb0))))
                 (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 1)))))
       (($$atom vector-ref) ($$atom x0) ($$atom 0)))))
 (define bb-slots-gained
   (lambda (bb0)
     (($$atom -)
      (($$atom bb-exit-frame-size) ($$atom bb0))
      (($$atom bb-entry-frame-size) ($$atom bb0)))))
 (define bb-put-non-branch!
   (lambda (bb0 gvm-instr0)
     (($$atom queue-put!)
      (($$atom vector-ref) ($$atom bb0) ($$atom 1))
      ($$atom gvm-instr0))))
 (define bb-put-branch!
   (lambda (bb0 gvm-instr0)
     (($$atom vector-set!) ($$atom bb0) ($$atom 2) ($$atom gvm-instr0))))
 (define bb-add-reference!
   (lambda (bb0 ref0)
     (if (($$atom memq)
          ($$atom ref0)
          (($$atom vector-ref) ($$atom bb0) ($$atom 3)))
         ($$atom #f)
         (($$atom vector-set!)
          ($$atom bb0)
          ($$atom 3)
          (($$atom cons)
           ($$atom ref0)
           (($$atom vector-ref) ($$atom bb0) ($$atom 3)))))))
 (define bb-add-precedent!
   (lambda (bb0 prec0)
     (if (($$atom memq)
          ($$atom prec0)
          (($$atom vector-ref) ($$atom bb0) ($$atom 4)))
         ($$atom #f)
         (($$atom vector-set!)
          ($$atom bb0)
          ($$atom 4)
          (($$atom cons)
           ($$atom prec0)
           (($$atom vector-ref) ($$atom bb0) ($$atom 4)))))))
 (define bb-last-non-branch-instr
   (lambda (bb0)
     (let ((non-branch-instrs0 (($$atom bb-non-branch-instrs) ($$atom bb0))))
       (if (($$atom null?) ($$atom non-branch-instrs0))
           (($$atom vector-ref) ($$atom bb0) ($$atom 0))
           (letrec ((loop0 (lambda (l0)
                             (if (($$atom pair?) (($$atom cdr) ($$atom l0)))
                                 (($$atom loop0) (($$atom cdr) ($$atom l0)))
                                 (($$atom car) ($$atom l0))))))
             (($$atom loop0) ($$atom non-branch-instrs0)))))))
 (define gvm-instr-type
   (lambda (gvm-instr0) (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 0))))
 (define gvm-instr-frame
   (lambda (gvm-instr0) (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 1))))
 (define gvm-instr-comment
   (lambda (gvm-instr0) (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 2))))
 (define make-label-simple
   (lambda (lbl-num0 frame0 comment0)
     (($$atom vector)
      ($$atom 'label)
      ($$atom frame0)
      ($$atom comment0)
      ($$atom lbl-num0)
      ($$atom 'simple))))
 (define make-label-entry
   (lambda (lbl-num0 nb-parms0 min0 rest?0 closed?0 frame0 comment0)
     (($$atom vector)
      ($$atom 'label)
      ($$atom frame0)
      ($$atom comment0)
      ($$atom lbl-num0)
      ($$atom 'entry)
      ($$atom nb-parms0)
      ($$atom min0)
      ($$atom rest?0)
      ($$atom closed?0))))
 (define make-label-return
   (lambda (lbl-num0 frame0 comment0)
     (($$atom vector)
      ($$atom 'label)
      ($$atom frame0)
      ($$atom comment0)
      ($$atom lbl-num0)
      ($$atom 'return))))
 (define make-label-task-entry
   (lambda (lbl-num0 frame0 comment0)
     (($$atom vector)
      ($$atom 'label)
      ($$atom frame0)
      ($$atom comment0)
      ($$atom lbl-num0)
      ($$atom 'task-entry))))
 (define make-label-task-return
   (lambda (lbl-num0 frame0 comment0)
     (($$atom vector)
      ($$atom 'label)
      ($$atom frame0)
      ($$atom comment0)
      ($$atom lbl-num0)
      ($$atom 'task-return))))
 (define label-lbl-num
   (lambda (gvm-instr0) (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 3))))
 (define label-lbl-num-set!
   (lambda (gvm-instr0 n0)
     (($$atom vector-set!) ($$atom gvm-instr0) ($$atom 3) ($$atom n0))))
 (define label-type
   (lambda (gvm-instr0) (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 4))))
 (define label-entry-nb-parms
   (lambda (gvm-instr0) (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 5))))
 (define label-entry-min
   (lambda (gvm-instr0) (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 6))))
 (define label-entry-rest?
   (lambda (gvm-instr0) (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 7))))
 (define label-entry-closed?
   (lambda (gvm-instr0) (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 8))))
 (define make-apply
   (lambda (prim0 opnds0 loc0 frame0 comment0)
     (($$atom vector)
      ($$atom 'apply)
      ($$atom frame0)
      ($$atom comment0)
      ($$atom prim0)
      ($$atom opnds0)
      ($$atom loc0))))
 (define apply-prim
   (lambda (gvm-instr0) (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 3))))
 (define apply-opnds
   (lambda (gvm-instr0) (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 4))))
 (define apply-loc
   (lambda (gvm-instr0) (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 5))))
 (define make-copy
   (lambda (opnd0 loc0 frame0 comment0)
     (($$atom vector)
      ($$atom 'copy)
      ($$atom frame0)
      ($$atom comment0)
      ($$atom opnd0)
      ($$atom loc0))))
 (define copy-opnd
   (lambda (gvm-instr0) (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 3))))
 (define copy-loc
   (lambda (gvm-instr0) (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 4))))
 (define make-close
   (lambda (parms0 frame0 comment0)
     (($$atom vector)
      ($$atom 'close)
      ($$atom frame0)
      ($$atom comment0)
      ($$atom parms0))))
 (define close-parms
   (lambda (gvm-instr0) (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 3))))
 (define make-closure-parms
   (lambda (loc0 lbl0 opnds0)
     (($$atom vector) ($$atom loc0) ($$atom lbl0) ($$atom opnds0))))
 (define closure-parms-loc
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 0))))
 (define closure-parms-lbl
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 1))))
 (define closure-parms-opnds
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 2))))
 (define make-ifjump
   (lambda (test0 opnds0 true0 false0 poll?0 frame0 comment0)
     (($$atom vector)
      ($$atom 'ifjump)
      ($$atom frame0)
      ($$atom comment0)
      ($$atom test0)
      ($$atom opnds0)
      ($$atom true0)
      ($$atom false0)
      ($$atom poll?0))))
 (define ifjump-test
   (lambda (gvm-instr0) (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 3))))
 (define ifjump-opnds
   (lambda (gvm-instr0) (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 4))))
 (define ifjump-true
   (lambda (gvm-instr0) (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 5))))
 (define ifjump-false
   (lambda (gvm-instr0) (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 6))))
 (define ifjump-poll?
   (lambda (gvm-instr0) (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 7))))
 (define make-jump
   (lambda (opnd0 nb-args0 poll?0 frame0 comment0)
     (($$atom vector)
      ($$atom 'jump)
      ($$atom frame0)
      ($$atom comment0)
      ($$atom opnd0)
      ($$atom nb-args0)
      ($$atom poll?0))))
 (define jump-opnd
   (lambda (gvm-instr0) (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 3))))
 (define jump-nb-args
   (lambda (gvm-instr0) (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 4))))
 (define jump-poll?
   (lambda (gvm-instr0) (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 5))))
 (define first-class-jump?
   (lambda (gvm-instr0) (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 4))))
 (define make-comment
   (lambda () (($$atom cons) ($$atom 'comment) ($$atom '()))))
 (define comment-put!
   (lambda (comment0 name0 val0)
     (($$atom set-cdr!)
      ($$atom comment0)
      (($$atom cons)
       (($$atom cons) ($$atom name0) ($$atom val0))
       (($$atom cdr) ($$atom comment0))))))
 (define comment-get
   (lambda (comment0 name0)
     (if ($$atom comment0)
         (let ((x0 (($$atom assq)
                    ($$atom name0)
                    (($$atom cdr) ($$atom comment0)))))
           (if ($$atom x0) (($$atom cdr) ($$atom x0)) ($$atom #f)))
         ($$atom #f))))
 (define bbs-purify!
   (lambda (bbs0)
     (letrec ((loop0 (lambda (bbs1)
                       (begin
                         (($$atom bbs-remove-jump-cascades!) ($$atom bbs1))
                         (($$atom bbs-remove-dead-code!) ($$atom bbs1))
                         (let ((changed1?0
                                (($$atom bbs-remove-common-code!)
                                 ($$atom bbs1))))
                           (let ((changed2?0
                                  (($$atom bbs-remove-useless-jumps!)
                                   ($$atom bbs1))))
                             (if (let ((g760 ($$atom changed1?0)))
                                   (if ($$atom g760)
                                       ($$atom g760)
                                       ($$atom changed2?0)))
                                 (($$atom loop0) ($$atom bbs1))
                                 (($$atom bbs-order!) ($$atom bbs1)))))))))
       (($$atom loop0) ($$atom bbs0)))))
 (define bbs-remove-jump-cascades!
   (lambda (bbs0)
     (letrec ((remove-cascade!0
               (lambda (bb0)
                 (let ((branch0 (($$atom vector-ref) ($$atom bb0) ($$atom 2))))
                   (let ((case-temp.2240
                          (($$atom vector-ref) ($$atom branch0) ($$atom 0))))
                     (if (let ((g770 ($$atom 'ifjump)))
                           (if (($$atom number?) ($$atom case-temp.2240))
                               (if (($$atom number?) ($$atom g770))
                                   (($$atom =)
                                    ($$atom case-temp.2240)
                                    ($$atom g770))
                                   ($$atom #f))
                               (($$atom eq?)
                                ($$atom case-temp.2240)
                                ($$atom g770))))
                         (let ((gvm-instr0
                                (let ((test0 (($$atom vector-ref)
                                              ($$atom branch0)
                                              ($$atom 3)))
                                      (opnds0 (($$atom vector-ref)
                                               ($$atom branch0)
                                               ($$atom 4)))
                                      (true0 (($$atom equiv-lbl0)
                                              ($$atom bbs0)
                                              (($$atom vector-ref)
                                               ($$atom branch0)
                                               ($$atom 5))
                                              ($$atom '())))
                                      (false0 (($$atom equiv-lbl0)
                                               ($$atom bbs0)
                                               (($$atom vector-ref)
                                                ($$atom branch0)
                                                ($$atom 6))
                                               ($$atom '())))
                                      (poll?0 (($$atom vector-ref)
                                               ($$atom branch0)
                                               ($$atom 7)))
                                      (frame0 (($$atom vector-ref)
                                               ($$atom branch0)
                                               ($$atom 1)))
                                      (comment0
                                       (($$atom vector-ref)
                                        ($$atom branch0)
                                        ($$atom 2))))
                                  (($$atom vector)
                                   ($$atom 'ifjump)
                                   ($$atom frame0)
                                   ($$atom comment0)
                                   ($$atom test0)
                                   ($$atom opnds0)
                                   ($$atom true0)
                                   ($$atom false0)
                                   ($$atom poll?0)))))
                           (($$atom vector-set!)
                            ($$atom bb0)
                            ($$atom 2)
                            ($$atom gvm-instr0)))
                         (if (let ((g780 ($$atom 'jump)))
                               (if (($$atom number?) ($$atom case-temp.2240))
                                   (if (($$atom number?) ($$atom g780))
                                       (($$atom =)
                                        ($$atom case-temp.2240)
                                        ($$atom g780))
                                       ($$atom #f))
                                   (($$atom eq?)
                                    ($$atom case-temp.2240)
                                    ($$atom g780))))
                             (if (($$atom vector-ref)
                                  ($$atom branch0)
                                  ($$atom 4))
                                 ($$atom #f)
                                 (let ((dest-lbl-num0
                                        (($$atom jump-lbl?) ($$atom branch0))))
                                   (if ($$atom dest-lbl-num0)
                                       (let ((thunk0 (lambda (lbl-num0
                                                              fs0
                                                              poll?0)
                                                       (let ((dest-bb0
                                                              (($$atom lbl-num->bb)
                                                               ($$atom lbl-num0)
                                                               ($$atom bbs0))))
                                                         (let ((last-branch0
                                                                (($$atom bb-branch-instr)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                         ($$atom dest-bb0))))
                   (if (if (($$atom empty-bb?0) ($$atom dest-bb0))
                           (let ((g790 (($$atom not) ($$atom poll?0))))
                             (if ($$atom g790)
                                 ($$atom g790)
                                 (let ((g800 ($$atom put-poll-on-ifjump?)))
                                   (if ($$atom g800)
                                       ($$atom g800)
                                       (($$atom not)
                                        (($$atom eq?)
                                         (($$atom gvm-instr-type)
                                          ($$atom last-branch0))
                                         ($$atom 'ifjump)))))))
                           ($$atom #f))
                       (let ((new-fs0 (($$atom +)
                                       ($$atom fs0)
                                       (($$atom bb-slots-gained)
                                        ($$atom dest-bb0)))))
                         (let ((new-frame0
                                (($$atom frame-truncate)
                                 (($$atom gvm-instr-frame) ($$atom branch0))
                                 ($$atom new-fs0))))
                           (letrec ((adjust-opnd0
                                     (lambda (opnd0)
                                       (if (($$atom stk?) ($$atom opnd0))
                                           (($$atom make-stk)
                                            (($$atom +)
                                             (($$atom -)
                                              ($$atom fs0)
                                              (($$atom bb-entry-frame-size)
                                               ($$atom dest-bb0)))
                                             (($$atom stk-num)
                                              ($$atom opnd0))))
                                           (if (($$atom clo?) ($$atom opnd0))
                                               (($$atom make-clo)
                                                (($$atom adjust-opnd0)
                                                 (($$atom clo-base)
                                                  ($$atom opnd0)))
                                                (($$atom clo-index)
                                                 ($$atom opnd0)))
                                               ($$atom opnd0))))))
                             (let ((case-temp.2250
                                    (($$atom gvm-instr-type)
                                     ($$atom last-branch0))))
                               (if (let ((g810 ($$atom 'ifjump)))
                                     (if (($$atom number?)
                                          ($$atom case-temp.2250))
                                         (if (($$atom number?) ($$atom g810))
                                             (($$atom =)
                                              ($$atom case-temp.2250)
                                              ($$atom g810))
                                             ($$atom #f))
                                         (($$atom eq?)
                                          ($$atom case-temp.2250)
                                          ($$atom g810))))
                                   (($$atom bb-put-branch!)
                                    ($$atom bb0)
                                    (($$atom make-ifjump)
                                     (($$atom ifjump-test)
                                      ($$atom last-branch0))
                                     (($$atom map)
                                      ($$atom adjust-opnd0)
                                      (($$atom ifjump-opnds)
                                       ($$atom last-branch0)))
                                     (($$atom equiv-lbl0)
                                      ($$atom bbs0)
                                      (($$atom ifjump-true)
                                       ($$atom last-branch0))
                                      ($$atom '()))
                                     (($$atom equiv-lbl0)
                                      ($$atom bbs0)
                                      (($$atom ifjump-false)
                                       ($$atom last-branch0))
                                      ($$atom '()))
                                     (let ((g820 ($$atom poll?0)))
                                       (if ($$atom g820)
                                           ($$atom g820)
                                           (($$atom ifjump-poll?)
                                            ($$atom last-branch0))))
                                     ($$atom new-frame0)
                                     (($$atom gvm-instr-comment)
                                      ($$atom last-branch0))))
                                   (if (let ((g830 ($$atom 'jump)))
                                         (if (($$atom number?)
                                              ($$atom case-temp.2250))
                                             (if (($$atom number?)
                                                  ($$atom g830))
                                                 (($$atom =)
                                                  ($$atom case-temp.2250)
                                                  ($$atom g830))
                                                 ($$atom #f))
                                             (($$atom eq?)
                                              ($$atom case-temp.2250)
                                              ($$atom g830))))
                                       (($$atom bb-put-branch!)
                                        ($$atom bb0)
                                        (($$atom make-jump)
                                         (($$atom adjust-opnd0)
                                          (($$atom jump-opnd)
                                           ($$atom last-branch0)))
                                         (($$atom jump-nb-args)
                                          ($$atom last-branch0))
                                         (let ((g840 ($$atom poll?0)))
                                           (if ($$atom g840)
                                               ($$atom g840)
                                               (($$atom jump-poll?)
                                                ($$atom last-branch0))))
                                         ($$atom new-frame0)
                                         (($$atom gvm-instr-comment)
                                          ($$atom last-branch0))))
                                       (($$atom compiler-internal-error)
                                        ($$atom "bbs-remove-jump-cascades!, unknown branch type"))))))))
                       (($$atom bb-put-branch!)
                        ($$atom bb0)
                        (($$atom make-jump)
                         (($$atom make-lbl) ($$atom lbl-num0))
                         (($$atom jump-nb-args) ($$atom branch0))
                         (let ((g850 ($$atom poll?0)))
                           (if ($$atom g850)
                               ($$atom g850)
                               (($$atom jump-poll?) ($$atom branch0))))
                         (($$atom frame-truncate)
                          (($$atom gvm-instr-frame) ($$atom branch0))
                          ($$atom fs0))
                         (($$atom gvm-instr-comment) ($$atom branch0)))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                             (poll?0 (($$atom jump-poll?)
                                                      ($$atom branch0)))
                                             (fs0 (($$atom frame-size)
                                                   (($$atom gvm-instr-frame)
                                                    ($$atom branch0)))))
                                         (if (($$atom memq)
                                              ($$atom dest-lbl-num0)
                                              ($$atom '()))
                                             (($$atom thunk0)
                                              ($$atom dest-lbl-num0)
                                              ($$atom fs0)
                                              ($$atom poll?0))
                                             (let ((bb1 (letrec ((loop0 (lambda (dest-lbl-num1
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                         bb-list0)
                                  (if (($$atom =)
                                       (let ((bb1 (($$atom car)
                                                   ($$atom bb-list0))))
                                         (let ((gvm-instr0
                                                (($$atom vector-ref)
                                                 ($$atom bb1)
                                                 ($$atom 0))))
                                           (($$atom vector-ref)
                                            ($$atom gvm-instr0)
                                            ($$atom 3))))
                                       ($$atom dest-lbl-num1))
                                      (($$atom car) ($$atom bb-list0))
                                      (let ((bb-list1
                                             (($$atom cdr) ($$atom bb-list0))))
                                        (if (($$atom =)
                                             (let ((bb1 (($$atom car)
                                                         ($$atom bb-list1))))
                                               (let ((gvm-instr0
                                                      (($$atom vector-ref)
                                                       ($$atom bb1)
                                                       ($$atom 0))))
                                                 (($$atom vector-ref)
                                                  ($$atom gvm-instr0)
                                                  ($$atom 3))))
                                             ($$atom dest-lbl-num1))
                                            (($$atom car) ($$atom bb-list1))
                                            (let ((bb-list2
                                                   (($$atom cdr)
                                                    ($$atom bb-list1))))
                                              (if (($$atom =)
                                                   (let ((bb1 (($$atom car)
                                                               ($$atom bb-list2))))
                                                     (let ((gvm-instr0
                                                            (($$atom vector-ref)
                                                             ($$atom bb1)
                                                             ($$atom 0))))
                                                       (($$atom vector-ref)
                                                        ($$atom gvm-instr0)
                                                        ($$atom 3))))
                                                   ($$atom dest-lbl-num1))
                                                  (($$atom car)
                                                   ($$atom bb-list2))
                                                  (let ((bb-list3
                                                         (($$atom cdr)
                                                          ($$atom bb-list2))))
                                                    (if (($$atom =)
                                                         (let ((bb1 (($$atom car)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                             ($$atom bb-list3))))
                   (let ((gvm-instr0
                          (($$atom vector-ref) ($$atom bb1) ($$atom 0))))
                     (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 3))))
                 ($$atom dest-lbl-num1))
                (($$atom car) ($$atom bb-list3))
                (let ((bb-list4 (($$atom cdr) ($$atom bb-list3))))
                  (if (($$atom =)
                       (let ((bb1 (($$atom car) ($$atom bb-list4))))
                         (let ((gvm-instr0
                                (($$atom vector-ref) ($$atom bb1) ($$atom 0))))
                           (($$atom vector-ref)
                            ($$atom gvm-instr0)
                            ($$atom 3))))
                       ($$atom dest-lbl-num1))
                      (($$atom car) ($$atom bb-list4))
                      (let ((bb-list5 (($$atom cdr) ($$atom bb-list4))))
                        (if (($$atom =)
                             (let ((bb1 (($$atom car) ($$atom bb-list5))))
                               (let ((gvm-instr0
                                      (($$atom vector-ref)
                                       ($$atom bb1)
                                       ($$atom 0))))
                                 (($$atom vector-ref)
                                  ($$atom gvm-instr0)
                                  ($$atom 3))))
                             ($$atom dest-lbl-num1))
                            (($$atom car) ($$atom bb-list5))
                            (let ((bb-list6 (($$atom cdr) ($$atom bb-list5))))
                              (if (($$atom =)
                                   (let ((bb1 (($$atom car)
                                               ($$atom bb-list6))))
                                     (let ((gvm-instr0
                                            (($$atom vector-ref)
                                             ($$atom bb1)
                                             ($$atom 0))))
                                       (($$atom vector-ref)
                                        ($$atom gvm-instr0)
                                        ($$atom 3))))
                                   ($$atom dest-lbl-num1))
                                  (($$atom car) ($$atom bb-list6))
                                  (($$atom loop0)
                                   ($$atom dest-lbl-num1)
                                   (($$atom cdr)
                                    ($$atom bb-list6)))))))))))))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                  (($$atom loop0)
                   ($$atom dest-lbl-num0)
                   (let ((queue0 (($$atom vector-ref)
                                  ($$atom bbs0)
                                  ($$atom 1))))
                     (($$atom car) ($$atom queue0)))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                               (if (if (($$atom empty-bb?0)
                                                        ($$atom bb1))
                                                       (($$atom <=)
                                                        (($$atom bb-slots-gained)
                                                         ($$atom bb1))
                                                        ($$atom 0))
                                                       ($$atom #f))
                                                   (let ((jump-lbl-num0
                                                          (($$atom jump-to-non-entry-lbl?0)
                                                           (($$atom vector-ref)
                                                            ($$atom bb1)
                                                            ($$atom 2)))))
                                                     (if ($$atom jump-lbl-num0)
                                                         (($$atom jump-cascade-to0)
                                                          ($$atom bbs0)
                                                          ($$atom jump-lbl-num0)
                                                          (($$atom +)
                                                           ($$atom fs0)
                                                           (($$atom bb-slots-gained)
                                                            ($$atom bb1)))
                                                          (let ((g860 ($$atom poll?0)))
                                                            (if ($$atom g860)
                                                                ($$atom g860)
                                                                (($$atom jump-poll?)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                         (($$atom bb-branch-instr) ($$atom bb1)))))
                  (($$atom cons) ($$atom dest-lbl-num0) ($$atom '()))
                  ($$atom thunk0))
                 (($$atom thunk0)
                  ($$atom dest-lbl-num0)
                  ($$atom fs0)
                  ($$atom poll?0))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                   (($$atom thunk0)
                                                    ($$atom dest-lbl-num0)
                                                    ($$atom fs0)
                                                    ($$atom poll?0))))))
                                       ($$atom #f))))
                             (($$atom compiler-internal-error)
                              ($$atom "bbs-remove-jump-cascades!, unknown branch type"))))))))
              (equiv-lbl0
               (lambda (bbs1 lbl-num0 seen0)
                 (if (($$atom memq) ($$atom lbl-num0) ($$atom seen0))
                     ($$atom lbl-num0)
                     (let ((bb0 (($$atom lbl-num->bb)
                                 ($$atom lbl-num0)
                                 ($$atom bbs1))))
                       (if (($$atom empty-bb?0) ($$atom bb0))
                           (let ((jump-lbl-num0
                                  (($$atom jump-to-non-entry-lbl?0)
                                   (($$atom vector-ref)
                                    ($$atom bb0)
                                    ($$atom 2)))))
                             (if (if ($$atom jump-lbl-num0)
                                     (if (let ((gvm-instr0
                                                (($$atom bb-branch-instr)
                                                 ($$atom bb0))))
                                           (($$atom vector-ref)
                                            ($$atom gvm-instr0)
                                            ($$atom 5)))
                                         ($$atom #f)
                                         (($$atom =)
                                          (($$atom bb-slots-gained)
                                           ($$atom bb0))
                                          ($$atom 0)))
                                     ($$atom #f))
                                 (($$atom equiv-lbl0)
                                  ($$atom bbs1)
                                  ($$atom jump-lbl-num0)
                                  (($$atom cons)
                                   ($$atom lbl-num0)
                                   ($$atom seen0)))
                                 ($$atom lbl-num0)))
                           ($$atom lbl-num0))))))
              (jump-cascade-to0
               (lambda (bbs1 lbl-num0 fs0 poll?0 seen0 thunk0)
                 (if (($$atom memq) ($$atom lbl-num0) ($$atom seen0))
                     (($$atom thunk0)
                      ($$atom lbl-num0)
                      ($$atom fs0)
                      ($$atom poll?0))
                     (let ((bb0 (($$atom lbl-num->bb)
                                 ($$atom lbl-num0)
                                 ($$atom bbs1))))
                       (if (if (($$atom empty-bb?0) ($$atom bb0))
                               (($$atom <=)
                                (($$atom bb-slots-gained) ($$atom bb0))
                                ($$atom 0))
                               ($$atom #f))
                           (let ((jump-lbl-num0
                                  (($$atom jump-to-non-entry-lbl?0)
                                   (($$atom vector-ref)
                                    ($$atom bb0)
                                    ($$atom 2)))))
                             (if ($$atom jump-lbl-num0)
                                 (($$atom jump-cascade-to0)
                                  ($$atom bbs1)
                                  ($$atom jump-lbl-num0)
                                  (($$atom +)
                                   ($$atom fs0)
                                   (($$atom bb-slots-gained) ($$atom bb0)))
                                  (let ((g870 ($$atom poll?0)))
                                    (if ($$atom g870)
                                        ($$atom g870)
                                        (let ((gvm-instr0
                                               (($$atom bb-branch-instr)
                                                ($$atom bb0))))
                                          (($$atom vector-ref)
                                           ($$atom gvm-instr0)
                                           ($$atom 5)))))
                                  (($$atom cons)
                                   ($$atom lbl-num0)
                                   ($$atom seen0))
                                  ($$atom thunk0))
                                 (($$atom thunk0)
                                  ($$atom lbl-num0)
                                  ($$atom fs0)
                                  ($$atom poll?0))))
                           (($$atom thunk0)
                            ($$atom lbl-num0)
                            ($$atom fs0)
                            ($$atom poll?0)))))))
              (jump-to-non-entry-lbl?0
               (lambda (branch0)
                 (if (($$atom eq?)
                      (($$atom vector-ref) ($$atom branch0) ($$atom 0))
                      ($$atom 'jump))
                     (if (($$atom vector-ref) ($$atom branch0) ($$atom 4))
                         ($$atom #f)
                         (($$atom jump-lbl?) ($$atom branch0)))
                     ($$atom #f))))
              (empty-bb?0
               (lambda (bb0)
                 (if (($$atom eq?)
                      (($$atom bb-label-type) ($$atom bb0))
                      ($$atom 'simple))
                     (($$atom null?)
                      (($$atom bb-non-branch-instrs) ($$atom bb0)))
                     ($$atom #f)))))
       (($$atom for-each)
        ($$atom remove-cascade!0)
        (let ((queue0 (($$atom vector-ref) ($$atom bbs0) ($$atom 1))))
          (($$atom car) ($$atom queue0)))))))
 (define jump-lbl?
   (lambda (branch0)
     (let ((opnd0 (($$atom vector-ref) ($$atom branch0) ($$atom 3))))
       (if (($$atom lbl?) ($$atom opnd0))
           (($$atom modulo) ($$atom opnd0) ($$atom 10000))
           ($$atom #f)))))
 (define put-poll-on-ifjump? ($$atom #f))
 (set! put-poll-on-ifjump? ($$atom #t))
 (define bbs-remove-dead-code!
   (lambda (bbs0)
     (let ((scan-queue0 (($$atom queue-empty)))
           (new-bb-queue0 (($$atom queue-empty))))
       (letrec ((scan-instr0
                 (lambda (bbs1 scan-queue1 new-bb-queue1 gvm-instr0 bb0)
                   (letrec ((scan-opnd0
                             (lambda (gvm-opnd0)
                               (if (($$atom lbl?) ($$atom gvm-opnd0))
                                   (($$atom reachable0)
                                    ($$atom scan-queue1)
                                    ($$atom new-bb-queue1)
                                    (($$atom lbl-num->bb)
                                     (($$atom modulo)
                                      ($$atom gvm-opnd0)
                                      ($$atom 10000))
                                     ($$atom bbs1))
                                    ($$atom bb0))
                                   (if (($$atom clo?) ($$atom gvm-opnd0))
                                       (($$atom scan-opnd0)
                                        (($$atom clo-base) ($$atom gvm-opnd0)))
                                       ($$atom #f))))))
                     (let ((case-temp.2260
                            (($$atom vector-ref)
                             ($$atom gvm-instr0)
                             ($$atom 0))))
                       (if (let ((g880 ($$atom 'label)))
                             (if (($$atom number?) ($$atom case-temp.2260))
                                 (if (($$atom number?) ($$atom g880))
                                     (($$atom =)
                                      ($$atom case-temp.2260)
                                      ($$atom g880))
                                     ($$atom #f))
                                 (($$atom eq?)
                                  ($$atom case-temp.2260)
                                  ($$atom g880))))
                           ($$atom '())
                           (if (let ((g890 ($$atom 'apply)))
                                 (if (($$atom number?) ($$atom case-temp.2260))
                                     (if (($$atom number?) ($$atom g890))
                                         (($$atom =)
                                          ($$atom case-temp.2260)
                                          ($$atom g890))
                                         ($$atom #f))
                                     (($$atom eq?)
                                      ($$atom case-temp.2260)
                                      ($$atom g890))))
                               (begin
                                 (($$atom for-each)
                                  ($$atom scan-opnd0)
                                  (($$atom vector-ref)
                                   ($$atom gvm-instr0)
                                   ($$atom 4)))
                                 (if (($$atom vector-ref)
                                      ($$atom gvm-instr0)
                                      ($$atom 5))
                                     (($$atom scan-opnd0)
                                      (($$atom vector-ref)
                                       ($$atom gvm-instr0)
                                       ($$atom 5)))
                                     ($$atom #f)))
                               (if (let ((g900 ($$atom 'copy)))
                                     (if (($$atom number?)
                                          ($$atom case-temp.2260))
                                         (if (($$atom number?) ($$atom g900))
                                             (($$atom =)
                                              ($$atom case-temp.2260)
                                              ($$atom g900))
                                             ($$atom #f))
                                         (($$atom eq?)
                                          ($$atom case-temp.2260)
                                          ($$atom g900))))
                                   (begin
                                     (($$atom scan-opnd0)
                                      (($$atom vector-ref)
                                       ($$atom gvm-instr0)
                                       ($$atom 3)))
                                     (($$atom scan-opnd0)
                                      (($$atom vector-ref)
                                       ($$atom gvm-instr0)
                                       ($$atom 4))))
                                   (if (let ((g910 ($$atom 'close)))
                                         (if (($$atom number?)
                                              ($$atom case-temp.2260))
                                             (if (($$atom number?)
                                                  ($$atom g910))
                                                 (($$atom =)
                                                  ($$atom case-temp.2260)
                                                  ($$atom g910))
                                                 ($$atom #f))
                                             (($$atom eq?)
                                              ($$atom case-temp.2260)
                                              ($$atom g910))))
                                       (($$atom for-each)
                                        (lambda (parm0)
                                          (begin
                                            (($$atom reachable0)
                                             ($$atom scan-queue1)
                                             ($$atom new-bb-queue1)
                                             (($$atom lbl-num->bb)
                                              (($$atom vector-ref)
                                               ($$atom parm0)
                                               ($$atom 1))
                                              ($$atom bbs1))
                                             ($$atom bb0))
                                            (($$atom scan-opnd0)
                                             (($$atom vector-ref)
                                              ($$atom parm0)
                                              ($$atom 0)))
                                            (($$atom for-each)
                                             ($$atom scan-opnd0)
                                             (($$atom vector-ref)
                                              ($$atom parm0)
                                              ($$atom 2)))))
                                        (($$atom vector-ref)
                                         ($$atom gvm-instr0)
                                         ($$atom 3)))
                                       (if (let ((g920 ($$atom 'ifjump)))
                                             (if (($$atom number?)
                                                  ($$atom case-temp.2260))
                                                 (if (($$atom number?)
                                                      ($$atom g920))
                                                     (($$atom =)
                                                      ($$atom case-temp.2260)
                                                      ($$atom g920))
                                                     ($$atom #f))
                                                 (($$atom eq?)
                                                  ($$atom case-temp.2260)
                                                  ($$atom g920))))
                                           (begin
                                             (($$atom for-each)
                                              ($$atom scan-opnd0)
                                              (($$atom vector-ref)
                                               ($$atom gvm-instr0)
                                               ($$atom 4)))
                                             (let ((to-bb0 (($$atom lbl-num->bb)
                                                            (($$atom ifjump-true)
                                                             ($$atom gvm-instr0))
                                                            ($$atom bbs1))))
                                               (begin
                                                 (($$atom reachable0)
                                                  ($$atom scan-queue1)
                                                  ($$atom new-bb-queue1)
                                                  ($$atom to-bb0)
                                                  ($$atom bb0))
                                                 (($$atom bb-add-precedent!)
                                                  ($$atom to-bb0)
                                                  ($$atom bb0))))
                                             (let ((to-bb0 (($$atom lbl-num->bb)
                                                            (($$atom ifjump-false)
                                                             ($$atom gvm-instr0))
                                                            ($$atom bbs1))))
                                               (begin
                                                 (($$atom reachable0)
                                                  ($$atom scan-queue1)
                                                  ($$atom new-bb-queue1)
                                                  ($$atom to-bb0)
                                                  ($$atom bb0))
                                                 (($$atom bb-add-precedent!)
                                                  ($$atom to-bb0)
                                                  ($$atom bb0)))))
                                           (if (let ((g930 ($$atom 'jump)))
                                                 (if (($$atom number?)
                                                      ($$atom case-temp.2260))
                                                     (if (($$atom number?)
                                                          ($$atom g930))
                                                         (($$atom =)
                                                          ($$atom case-temp.2260)
                                                          ($$atom g930))
                                                         ($$atom #f))
                                                     (($$atom eq?)
                                                      ($$atom case-temp.2260)
                                                      ($$atom g930))))
                                               (let ((opnd0 (($$atom vector-ref)
                                                             ($$atom gvm-instr0)
                                                             ($$atom 3))))
                                                 (if (($$atom lbl?)
                                                      ($$atom opnd0))
                                                     (let ((to-bb0 (($$atom lbl-num->bb)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                            (($$atom modulo) ($$atom opnd0) ($$atom 10000))
                            ($$atom bbs1))))
               (begin
                 (($$atom reachable0)
                  ($$atom scan-queue1)
                  ($$atom new-bb-queue1)
                  ($$atom to-bb0)
                  ($$atom bb0))
                 (($$atom bb-add-precedent!) ($$atom to-bb0) ($$atom bb0))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                     (($$atom scan-opnd0)
                                                      (($$atom vector-ref)
                                                       ($$atom gvm-instr0)
                                                       ($$atom 3)))))
                                               (($$atom compiler-internal-error)
                                                ($$atom "bbs-remove-dead-code!, unknown GVM instruction type"))))))))))))
                (direct-jump0
                 (lambda (scan-queue1 new-bb-queue1 to-bb0 from-bb0)
                   (begin
                     (($$atom reachable0)
                      ($$atom scan-queue1)
                      ($$atom new-bb-queue1)
                      ($$atom to-bb0)
                      ($$atom from-bb0))
                     (($$atom bb-add-precedent!)
                      ($$atom to-bb0)
                      ($$atom from-bb0)))))
                (reachable0
                 (lambda (scan-queue1 new-bb-queue1 ref0 bb0)
                   (begin
                     (if ($$atom bb0)
                         (($$atom bb-add-reference!)
                          ($$atom bb0)
                          ($$atom ref0))
                         ($$atom #f))
                     (if (($$atom memq)
                          ($$atom ref0)
                          (($$atom car) ($$atom new-bb-queue1)))
                         ($$atom #f)
                         (begin
                           (($$atom vector-set!)
                            ($$atom ref0)
                            ($$atom 3)
                            ($$atom '()))
                           (($$atom vector-set!)
                            ($$atom ref0)
                            ($$atom 4)
                            ($$atom '()))
                           (($$atom queue-put!)
                            ($$atom new-bb-queue1)
                            ($$atom ref0))
                           (($$atom queue-put!)
                            ($$atom scan-queue1)
                            ($$atom ref0))))))))
         (begin
           (($$atom reachable0)
            ($$atom scan-queue0)
            ($$atom new-bb-queue0)
            (($$atom lbl-num->bb)
             (($$atom vector-ref) ($$atom bbs0) ($$atom 2))
             ($$atom bbs0))
            ($$atom #f))
           (letrec ((loop0 (lambda (bbs1 scan-queue1 new-bb-queue1)
                             (if (($$atom queue-empty?) ($$atom scan-queue1))
                                 ($$atom #f)
                                 (let ((bb0 (($$atom queue-get!)
                                             ($$atom scan-queue1))))
                                   (begin
                                     (($$atom scan-instr0)
                                      ($$atom bbs1)
                                      ($$atom scan-queue1)
                                      ($$atom new-bb-queue1)
                                      (($$atom vector-ref)
                                       ($$atom bb0)
                                       ($$atom 0))
                                      ($$atom bb0))
                                     (($$atom for-each)
                                      (lambda (gvm-instr0)
                                        (($$atom scan-instr0)
                                         ($$atom bbs1)
                                         ($$atom scan-queue1)
                                         ($$atom new-bb-queue1)
                                         ($$atom gvm-instr0)
                                         ($$atom bb0)))
                                      (($$atom bb-non-branch-instrs)
                                       ($$atom bb0)))
                                     (($$atom scan-instr0)
                                      ($$atom bbs1)
                                      ($$atom scan-queue1)
                                      ($$atom new-bb-queue1)
                                      (($$atom vector-ref)
                                       ($$atom bb0)
                                       ($$atom 2))
                                      ($$atom bb0))
                                     (($$atom loop0)
                                      ($$atom bbs1)
                                      ($$atom scan-queue1)
                                      ($$atom new-bb-queue1))))))))
             (($$atom loop0)
              ($$atom bbs0)
              ($$atom scan-queue0)
              ($$atom new-bb-queue0)))
           (($$atom vector-set!)
            ($$atom bbs0)
            ($$atom 1)
            ($$atom new-bb-queue0)))))))
 (define bbs-remove-useless-jumps!
   (lambda (bbs0)
     (let ((changed?0 (($$atom ##box) ($$atom #f))))
       (letrec ((remove-useless-jump0
                 (lambda (bb0)
                   (let ((branch0 (($$atom vector-ref)
                                   ($$atom bb0)
                                   ($$atom 2))))
                     (if (if (($$atom eq?)
                              (($$atom vector-ref) ($$atom branch0) ($$atom 0))
                              ($$atom 'jump))
                             (if (($$atom vector-ref)
                                  ($$atom branch0)
                                  ($$atom 4))
                                 ($$atom #f)
                                 (if (($$atom vector-ref)
                                      ($$atom branch0)
                                      ($$atom 5))
                                     ($$atom #f)
                                     (($$atom jump-lbl?) ($$atom branch0))))
                             ($$atom #f))
                         (let ((dest-bb0
                                (($$atom lbl-num->bb)
                                 (($$atom jump-lbl?) ($$atom branch0))
                                 ($$atom bbs0))))
                           (let ((frame10 (let ((gvm-instr0
                                                 (($$atom bb-last-non-branch-instr)
                                                  ($$atom bb0))))
                                            (($$atom vector-ref)
                                             ($$atom gvm-instr0)
                                             ($$atom 1)))))
                             (let ((frame20 (let ((gvm-instr0
                                                   (($$atom bb-label-instr)
                                                    ($$atom dest-bb0))))
                                              (($$atom vector-ref)
                                               ($$atom gvm-instr0)
                                               ($$atom 1)))))
                               (if (if (($$atom eq?)
                                        (($$atom bb-label-type)
                                         ($$atom dest-bb0))
                                        ($$atom 'simple))
                                       (if (($$atom frame-eq?)
                                            ($$atom frame10)
                                            ($$atom frame20))
                                           (($$atom =)
                                            (($$atom length)
                                             (($$atom vector-ref)
                                              ($$atom dest-bb0)
                                              ($$atom 4)))
                                            ($$atom 1))
                                           ($$atom #f))
                                       ($$atom #f))
                                   (begin
                                     (($$atom ##set-box!)
                                      ($$atom changed?0)
                                      ($$atom #t))
                                     (let ((l0 (($$atom append)
                                                (let ((queue0 (($$atom vector-ref)
                                                               ($$atom bb0)
                                                               ($$atom 1))))
                                                  (($$atom car)
                                                   ($$atom queue0)))
                                                (($$atom bb-non-branch-instrs)
                                                 ($$atom dest-bb0))
                                                ($$atom '()))))
                                       (($$atom vector-set!)
                                        ($$atom bb0)
                                        ($$atom 1)
                                        (($$atom list->queue) ($$atom l0))))
                                     (let ((b0 (($$atom bb-branch-instr)
                                                ($$atom dest-bb0))))
                                       (($$atom vector-set!)
                                        ($$atom bb0)
                                        ($$atom 2)
                                        ($$atom b0)))
                                     (($$atom remove-useless-jump0)
                                      ($$atom bb0)))
                                   ($$atom #f)))))
                         ($$atom #f))))))
         (begin
           (($$atom for-each)
            ($$atom remove-useless-jump0)
            (let ((queue0 (($$atom vector-ref) ($$atom bbs0) ($$atom 1))))
              (($$atom car) ($$atom queue0))))
           (($$atom ##unbox) ($$atom changed?0)))))))
 (define bbs-remove-common-code!
   (lambda (bbs0)
     (let ((bb-list0
            (let ((queue0 (($$atom vector-ref) ($$atom bbs0) ($$atom 1))))
              (($$atom car) ($$atom queue0)))))
       (let ((n0 (($$atom length) ($$atom bb-list0))))
         (let ((hash-table-length0
                (if (($$atom <) ($$atom n0) ($$atom 50))
                    ($$atom 43)
                    (if (($$atom <) ($$atom n0) ($$atom 500))
                        ($$atom 403)
                        ($$atom 4003)))))
           (let ((hash-table0
                  (($$atom make-vector)
                   ($$atom hash-table-length0)
                   ($$atom '()))))
             (let ((prim-table0 (($$atom ##box) ($$atom '()))))
               (let ((block-map0 (($$atom ##box) ($$atom '()))))
                 (let ((changed?0 (($$atom ##box) ($$atom #f))))
                   (letrec ((update-bb!0
                             (lambda (bb0)
                               (($$atom replace-label-references!)
                                ($$atom bb0)
                                ($$atom replacement-lbl-num0))))
                            (eqv-gvm-instr?0
                             (lambda (instr10 instr20)
                               (let ((eqv-closure-parms?0
                                      (lambda (p10 p20)
                                        (if (($$atom eqv-gvm-opnd?0)
                                             (($$atom vector-ref)
                                              ($$atom p10)
                                              ($$atom 0))
                                             (($$atom vector-ref)
                                              ($$atom p20)
                                              ($$atom 0)))
                                            (if (let ((lbl20 (($$atom closure-parms-lbl)
                                                              ($$atom p20)))
                                                      (lbl10 (($$atom closure-parms-lbl)
                                                              ($$atom p10))))
                                                  (($$atom =)
                                                   (($$atom replacement-lbl-num0)
                                                    ($$atom lbl10))
                                                   (($$atom replacement-lbl-num0)
                                                    ($$atom lbl20))))
                                                (($$atom eqv-list?0)
                                                 ($$atom eqv-gvm-opnd?0)
                                                 (($$atom vector-ref)
                                                  ($$atom p10)
                                                  ($$atom 2))
                                                 (($$atom vector-ref)
                                                  ($$atom p20)
                                                  ($$atom 2)))
                                                ($$atom #f))
                                            ($$atom #f)))))
                                 (let ((type20 (($$atom vector-ref)
                                                ($$atom instr20)
                                                ($$atom 0)))
                                       (type10 (($$atom vector-ref)
                                                ($$atom instr10)
                                                ($$atom 0))))
                                   (if (($$atom eq?)
                                        ($$atom type10)
                                        ($$atom type20))
                                       (if (let ((y0 (($$atom gvm-instr-frame)
                                                      ($$atom instr20)))
                                                 (x0 (($$atom gvm-instr-frame)
                                                      ($$atom instr10))))
                                             (($$atom =)
                                              (($$atom vector-ref)
                                               ($$atom x0)
                                               ($$atom 0))
                                              (($$atom vector-ref)
                                               ($$atom y0)
                                               ($$atom 0))))
                                           (if (let ((g940 ($$atom 'label)))
                                                 (if (($$atom number?)
                                                      ($$atom type10))
                                                     (if (($$atom number?)
                                                          ($$atom g940))
                                                         (($$atom =)
                                                          ($$atom type10)
                                                          ($$atom g940))
                                                         ($$atom #f))
                                                     (($$atom eq?)
                                                      ($$atom type10)
                                                      ($$atom g940))))
                                               (let ((ltype20 (($$atom vector-ref)
                                                               ($$atom instr20)
                                                               ($$atom 4)))
                                                     (ltype10 (($$atom vector-ref)
                                                               ($$atom instr10)
                                                               ($$atom 4))))
                                                 (if (($$atom eq?)
                                                      ($$atom ltype10)
                                                      ($$atom ltype20))
                                                     (if (let ((g950 (let ((g960 ($$atom 'simple)))
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                               (if (($$atom number?) ($$atom ltype10))
                                   (if (($$atom number?) ($$atom g960))
                                       (($$atom =)
                                        ($$atom ltype10)
                                        ($$atom g960))
                                       ($$atom #f))
                                   (($$atom eq?)
                                    ($$atom ltype10)
                                    ($$atom g960))))))
                   (if ($$atom g950)
                       ($$atom g950)
                       (let ((g970 (let ((g980 ($$atom 'return)))
                                     (if (($$atom number?) ($$atom ltype10))
                                         (if (($$atom number?) ($$atom g980))
                                             (($$atom =)
                                              ($$atom ltype10)
                                              ($$atom g980))
                                             ($$atom #f))
                                         (($$atom eq?)
                                          ($$atom ltype10)
                                          ($$atom g980))))))
                         (if ($$atom g970)
                             ($$atom g970)
                             (let ((g990 (let ((g1000 ($$atom 'task-entry)))
                                           (if (($$atom number?)
                                                ($$atom ltype10))
                                               (if (($$atom number?)
                                                    ($$atom g1000))
                                                   (($$atom =)
                                                    ($$atom ltype10)
                                                    ($$atom g1000))
                                                   ($$atom #f))
                                               (($$atom eq?)
                                                ($$atom ltype10)
                                                ($$atom g1000))))))
                               (if ($$atom g990)
                                   ($$atom g990)
                                   (let ((g1010 ($$atom 'task-return)))
                                     (if (($$atom number?) ($$atom ltype10))
                                         (if (($$atom number?) ($$atom g1010))
                                             (($$atom =)
                                              ($$atom ltype10)
                                              ($$atom g1010))
                                             ($$atom #f))
                                         (($$atom eq?)
                                          ($$atom ltype10)
                                          ($$atom g1010))))))))))
                 ($$atom #t)
                 (if (let ((g1020 ($$atom 'entry)))
                       (if (($$atom number?) ($$atom ltype10))
                           (if (($$atom number?) ($$atom g1020))
                               (($$atom =) ($$atom ltype10) ($$atom g1020))
                               ($$atom #f))
                           (($$atom eq?) ($$atom ltype10) ($$atom g1020))))
                     (if (($$atom =)
                          (($$atom vector-ref) ($$atom instr10) ($$atom 6))
                          (($$atom vector-ref) ($$atom instr20) ($$atom 6)))
                         (if (($$atom =)
                              (($$atom vector-ref) ($$atom instr10) ($$atom 5))
                              (($$atom vector-ref)
                               ($$atom instr20)
                               ($$atom 5)))
                             (if (($$atom eq?)
                                  (($$atom vector-ref)
                                   ($$atom instr10)
                                   ($$atom 7))
                                  (($$atom vector-ref)
                                   ($$atom instr20)
                                   ($$atom 7)))
                                 (($$atom eq?)
                                  (($$atom vector-ref)
                                   ($$atom instr10)
                                   ($$atom 8))
                                  (($$atom vector-ref)
                                   ($$atom instr20)
                                   ($$atom 8)))
                                 ($$atom #f))
                             ($$atom #f))
                         ($$atom #f))
                     (($$atom compiler-internal-error)
                      ($$atom "eqv-gvm-instr?, unknown label type"))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                     ($$atom #f)))
                                               (if (let ((g1030 ($$atom 'apply)))
                                                     (if (($$atom number?)
                                                          ($$atom type10))
                                                         (if (($$atom number?)
                                                              ($$atom g1030))
                                                             (($$atom =)
                                                              ($$atom type10)
                                                              ($$atom g1030))
                                                             ($$atom #f))
                                                         (($$atom eq?)
                                                          ($$atom type10)
                                                          ($$atom g1030))))
                                                   (if (($$atom eq?)
                                                        (($$atom vector-ref)
                                                         ($$atom instr10)
                                                         ($$atom 3))
                                                        (($$atom vector-ref)
                                                         ($$atom instr20)
                                                         ($$atom 3)))
                                                       (if (($$atom eqv-list?0)
                                                            ($$atom eqv-gvm-opnd?0)
                                                            (($$atom vector-ref)
                                                             ($$atom instr10)
                                                             ($$atom 4))
                                                            (($$atom vector-ref)
                                                             ($$atom instr20)
                                                             ($$atom 4)))
                                                           (($$atom eqv-gvm-opnd?0)
                                                            (($$atom vector-ref)
                                                             ($$atom instr10)
                                                             ($$atom 5))
                                                            (($$atom vector-ref)
                                                             ($$atom instr20)
                                                             ($$atom 5)))
                                                           ($$atom #f))
                                                       ($$atom #f))
                                                   (if (let ((g1040 ($$atom 'copy)))
                                                         (if (($$atom number?)
                                                              ($$atom type10))
                                                             (if (($$atom number?)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                          ($$atom g1040))
                         (($$atom =) ($$atom type10) ($$atom g1040))
                         ($$atom #f))
                     (($$atom eq?) ($$atom type10) ($$atom g1040))))
               (if (($$atom eqv-gvm-opnd?0)
                    (($$atom vector-ref) ($$atom instr10) ($$atom 3))
                    (($$atom vector-ref) ($$atom instr20) ($$atom 3)))
                   (($$atom eqv-gvm-opnd?0)
                    (($$atom vector-ref) ($$atom instr10) ($$atom 4))
                    (($$atom vector-ref) ($$atom instr20) ($$atom 4)))
                   ($$atom #f))
               (if (let ((g1050 ($$atom 'close)))
                     (if (($$atom number?) ($$atom type10))
                         (if (($$atom number?) ($$atom g1050))
                             (($$atom =) ($$atom type10) ($$atom g1050))
                             ($$atom #f))
                         (($$atom eq?) ($$atom type10) ($$atom g1050))))
                   (($$atom eqv-list?0)
                    ($$atom eqv-closure-parms?0)
                    (($$atom vector-ref) ($$atom instr10) ($$atom 3))
                    (($$atom vector-ref) ($$atom instr20) ($$atom 3)))
                   (if (let ((g1060 ($$atom 'ifjump)))
                         (if (($$atom number?) ($$atom type10))
                             (if (($$atom number?) ($$atom g1060))
                                 (($$atom =) ($$atom type10) ($$atom g1060))
                                 ($$atom #f))
                             (($$atom eq?) ($$atom type10) ($$atom g1060))))
                       (if (($$atom eq?)
                            (($$atom vector-ref) ($$atom instr10) ($$atom 3))
                            (($$atom vector-ref) ($$atom instr20) ($$atom 3)))
                           (if (($$atom eqv-list?0)
                                ($$atom eqv-gvm-opnd?0)
                                (($$atom vector-ref)
                                 ($$atom instr10)
                                 ($$atom 4))
                                (($$atom vector-ref)
                                 ($$atom instr20)
                                 ($$atom 4)))
                               (if (let ((lbl20 (($$atom ifjump-true)
                                                 ($$atom instr20)))
                                         (lbl10 (($$atom ifjump-true)
                                                 ($$atom instr10))))
                                     (($$atom =)
                                      (($$atom replacement-lbl-num0)
                                       ($$atom lbl10))
                                      (($$atom replacement-lbl-num0)
                                       ($$atom lbl20))))
                                   (if (let ((lbl20 (($$atom vector-ref)
                                                     ($$atom instr20)
                                                     ($$atom 6)))
                                             (lbl10 (($$atom vector-ref)
                                                     ($$atom instr10)
                                                     ($$atom 6))))
                                         (($$atom =)
                                          (($$atom replacement-lbl-num0)
                                           ($$atom lbl10))
                                          (($$atom replacement-lbl-num0)
                                           ($$atom lbl20))))
                                       (($$atom eq?)
                                        (($$atom vector-ref)
                                         ($$atom instr10)
                                         ($$atom 7))
                                        (($$atom vector-ref)
                                         ($$atom instr20)
                                         ($$atom 7)))
                                       ($$atom #f))
                                   ($$atom #f))
                               ($$atom #f))
                           ($$atom #f))
                       (if (let ((g1070 ($$atom 'jump)))
                             (if (($$atom number?) ($$atom type10))
                                 (if (($$atom number?) ($$atom g1070))
                                     (($$atom =)
                                      ($$atom type10)
                                      ($$atom g1070))
                                     ($$atom #f))
                                 (($$atom eq?)
                                  ($$atom type10)
                                  ($$atom g1070))))
                           (if (($$atom eqv-gvm-opnd?0)
                                (($$atom vector-ref)
                                 ($$atom instr10)
                                 ($$atom 3))
                                (($$atom vector-ref)
                                 ($$atom instr20)
                                 ($$atom 3)))
                               (if (let ((g1080 (($$atom vector-ref)
                                                 ($$atom instr10)
                                                 ($$atom 4)))
                                         (g1090 (($$atom vector-ref)
                                                 ($$atom instr20)
                                                 ($$atom 4))))
                                     (if (($$atom number?) ($$atom g1080))
                                         (if (($$atom number?) ($$atom g1090))
                                             (($$atom =)
                                              ($$atom g1080)
                                              ($$atom g1090))
                                             ($$atom #f))
                                         (($$atom eq?)
                                          ($$atom g1080)
                                          ($$atom g1090))))
                                   (($$atom eq?)
                                    (($$atom vector-ref)
                                     ($$atom instr10)
                                     ($$atom 5))
                                    (($$atom vector-ref)
                                     ($$atom instr20)
                                     ($$atom 5)))
                                   ($$atom #f))
                               ($$atom #f))
                           (($$atom compiler-internal-error)
                            ($$atom "eqv-gvm-instr?, unknown 'gvm-instr':")
                            ($$atom instr10))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                           ($$atom #f))
                                       ($$atom #f))))))
                            (eqv-gvm-opnd?0
                             (lambda (opnd10 opnd20)
                               (if ($$atom opnd10)
                                   (if ($$atom opnd20)
                                       (if (($$atom lbl?) ($$atom opnd10))
                                           (if (($$atom lbl?) ($$atom opnd20))
                                               (let ((lbl20 (($$atom lbl-num)
                                                             ($$atom opnd20)))
                                                     (lbl10 (($$atom lbl-num)
                                                             ($$atom opnd10))))
                                                 (($$atom =)
                                                  (($$atom replacement-lbl-num0)
                                                   ($$atom lbl10))
                                                  (($$atom replacement-lbl-num0)
                                                   ($$atom lbl20))))
                                               ($$atom #f))
                                           (if (($$atom clo?) ($$atom opnd10))
                                               (if (($$atom clo?)
                                                    ($$atom opnd20))
                                                   (if (($$atom =)
                                                        (($$atom clo-index)
                                                         ($$atom opnd10))
                                                        (($$atom clo-index)
                                                         ($$atom opnd20)))
                                                       (($$atom eqv-gvm-opnd?0)
                                                        (($$atom clo-base)
                                                         ($$atom opnd10))
                                                        (($$atom clo-base)
                                                         ($$atom opnd20)))
                                                       ($$atom #f))
                                                   ($$atom #f))
                                               (if (($$atom number?)
                                                    ($$atom opnd10))
                                                   (if (($$atom number?)
                                                        ($$atom opnd20))
                                                       (($$atom =)
                                                        ($$atom opnd10)
                                                        ($$atom opnd20))
                                                       ($$atom #f))
                                                   (($$atom eq?)
                                                    ($$atom opnd10)
                                                    ($$atom opnd20)))))
                                       ($$atom #f))
                                   (($$atom not) ($$atom opnd20)))))
                            (eqv-lbl-num?0
                             (lambda (lbl10 lbl20)
                               (($$atom =)
                                (($$atom replacement-lbl-num0) ($$atom lbl10))
                                (($$atom replacement-lbl-num0)
                                 ($$atom lbl20)))))
                            (eqv-list?0
                             (lambda (pred?0 l10 l20)
                               (if (($$atom pair?) ($$atom l10))
                                   (if (($$atom pair?) ($$atom l20))
                                       (if (($$atom pred?0)
                                            (($$atom car) ($$atom l10))
                                            (($$atom car) ($$atom l20)))
                                           (($$atom eqv-list?0)
                                            ($$atom pred?0)
                                            (($$atom cdr) ($$atom l10))
                                            (($$atom cdr) ($$atom l20)))
                                           ($$atom #f))
                                       ($$atom #f))
                                   (($$atom not)
                                    (($$atom pair?) ($$atom l20))))))
                            (eqv-bb?0
                             (lambda (bb10 bb20)
                               (let ((bb2-non-branch0
                                      (($$atom bb-non-branch-instrs)
                                       ($$atom bb20)))
                                     (bb1-non-branch0
                                      (($$atom bb-non-branch-instrs)
                                       ($$atom bb10))))
                                 (if (($$atom =)
                                      (($$atom length)
                                       ($$atom bb1-non-branch0))
                                      (($$atom length)
                                       ($$atom bb2-non-branch0)))
                                     (if (($$atom eqv-gvm-instr?0)
                                          (($$atom vector-ref)
                                           ($$atom bb10)
                                           ($$atom 0))
                                          (($$atom vector-ref)
                                           ($$atom bb20)
                                           ($$atom 0)))
                                         (if (($$atom eqv-gvm-instr?0)
                                              (($$atom vector-ref)
                                               ($$atom bb10)
                                               ($$atom 2))
                                              (($$atom vector-ref)
                                               ($$atom bb20)
                                               ($$atom 2)))
                                             (($$atom eqv-list?0)
                                              ($$atom eqv-gvm-instr?0)
                                              ($$atom bb1-non-branch0)
                                              ($$atom bb2-non-branch0))
                                             ($$atom #f))
                                         ($$atom #f))
                                     ($$atom #f)))))
                            (extract-common-tail0
                             (lambda (bb10 bb20 cont0)
                               (letrec ((loop0 (lambda (eqv-gvm-instr?1
                                                        cont1
                                                        l10
                                                        l20
                                                        tail0)
                                                 (if (if (($$atom pair?)
                                                          ($$atom l10))
                                                         (($$atom pair?)
                                                          ($$atom l20))
                                                         ($$atom #f))
                                                     (let ((i20 (($$atom car)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                         ($$atom l20)))
                   (i10 (($$atom car) ($$atom l10))))
               (if (($$atom eqv-gvm-instr?1) ($$atom i10) ($$atom i20))
                   (($$atom loop0)
                    ($$atom eqv-gvm-instr?1)
                    ($$atom cont1)
                    (($$atom cdr) ($$atom l10))
                    (($$atom cdr) ($$atom l20))
                    (($$atom cons) ($$atom i10) ($$atom tail0)))
                   (($$atom cont1) ($$atom l10) ($$atom l20) ($$atom tail0))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                     (($$atom cont1)
                                                      ($$atom l10)
                                                      ($$atom l20)
                                                      ($$atom tail0))))))
                                 (($$atom loop0)
                                  ($$atom eqv-gvm-instr?0)
                                  ($$atom cont0)
                                  (($$atom reverse)
                                   (($$atom bb-non-branch-instrs)
                                    ($$atom bb10)))
                                  (($$atom reverse)
                                   (($$atom bb-non-branch-instrs)
                                    ($$atom bb20)))
                                  ($$atom '())))))
                            (add-bb0 (lambda (bb0 l0)
                                       (if (($$atom pair?) ($$atom l0))
                                           (let ((bb*0 (($$atom car)
                                                        ($$atom l0))))
                                             (begin
                                               (($$atom ##set-box!)
                                                ($$atom block-map0)
                                                (($$atom cons)
                                                 (($$atom cons)
                                                  (($$atom bb-lbl-num)
                                                   ($$atom bb0))
                                                  (($$atom bb-lbl-num)
                                                   ($$atom bb*0)))
                                                 (($$atom ##unbox)
                                                  ($$atom block-map0))))
                                               (if (let ((bb2-non-branch0
                                                          (($$atom bb-non-branch-instrs)
                                                           ($$atom bb*0)))
                                                         (bb1-non-branch0
                                                          (($$atom bb-non-branch-instrs)
                                                           ($$atom bb0))))
                                                     (if (($$atom =)
                                                          (($$atom length)
                                                           ($$atom bb1-non-branch0))
                                                          (($$atom length)
                                                           ($$atom bb2-non-branch0)))
                                                         (if (($$atom eqv-gvm-instr?0)
                                                              (($$atom vector-ref)
                                                               ($$atom bb0)
                                                               ($$atom 0))
                                                              (($$atom vector-ref)
                                                               ($$atom bb*0)
                                                               ($$atom 0)))
                                                             (if (($$atom eqv-gvm-instr?0)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                          (($$atom vector-ref) ($$atom bb0) ($$atom 2))
                          (($$atom vector-ref) ($$atom bb*0) ($$atom 2)))
                         (($$atom eqv-list?0)
                          ($$atom eqv-gvm-instr?0)
                          ($$atom bb1-non-branch0)
                          ($$atom bb2-non-branch0))
                         ($$atom #f))
                     ($$atom #f))
                 ($$atom #f)))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                   (begin
                                                     (let ((bb20 (($$atom bb-lbl-num)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                          ($$atom bb*0)))
                   (bb10 (($$atom bb-lbl-num) ($$atom bb0))))
               (letrec ((loop0 (lambda (bb21 bb11 l1)
                                 (if (($$atom pair?) ($$atom l1))
                                     (let ((x0 (($$atom car) ($$atom l1))))
                                       (begin
                                         (if (($$atom =)
                                              ($$atom bb11)
                                              (($$atom cdr) ($$atom x0)))
                                             (($$atom set-cdr!)
                                              ($$atom x0)
                                              ($$atom bb21))
                                             ($$atom #f))
                                         (($$atom loop0)
                                          ($$atom bb21)
                                          ($$atom bb11)
                                          (($$atom cdr) ($$atom l1)))))
                                     ($$atom #f)))))
                 (($$atom loop0)
                  ($$atom bb20)
                  ($$atom bb10)
                  (($$atom ##unbox) ($$atom block-map0)))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                     (($$atom ##set-box!)
                                                      ($$atom changed?0)
                                                      ($$atom #t))
                                                     ($$atom l0))
                                                   (begin
                                                     (($$atom ##set-box!)
                                                      ($$atom block-map0)
                                                      (($$atom cdr)
                                                       (($$atom ##unbox)
                                                        ($$atom block-map0))))
                                                     (if (($$atom eqv-gvm-instr?0)
                                                          (($$atom vector-ref)
                                                           ($$atom bb0)
                                                           ($$atom 2))
                                                          (($$atom vector-ref)
                                                           ($$atom bb*0)
                                                           ($$atom 2)))
                                                         (let ((cont0 (lambda (bbs1
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                       changed?1
                                       add-bb1
                                       bb1
                                       l1
                                       bb*1
                                       head0
                                       head*0
                                       tail0)
                                (if (($$atom null?) ($$atom tail0))
                                    (($$atom cons)
                                     ($$atom bb*1)
                                     (($$atom add-bb1)
                                      ($$atom bb1)
                                      (($$atom cdr) ($$atom l1))))
                                    (let ((lbl0 (($$atom bbs-new-lbl!)
                                                 ($$atom bbs1))))
                                      (let ((branch0 (($$atom vector-ref)
                                                      ($$atom bb1)
                                                      ($$atom 2))))
                                        (let ((fs**0 (($$atom need-gvm-instrs)
                                                      ($$atom tail0)
                                                      ($$atom branch0))))
                                          (let ((frame0 (($$atom frame-truncate)
                                                         (let ((gvm-instr0
                                                                (if (($$atom null?)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                             ($$atom head0))
                            (($$atom vector-ref) ($$atom bb1) ($$atom 0))
                            (($$atom car) ($$atom head0)))))
                   (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 1)))
                 ($$atom fs**0))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                            (let ((bb**0 (($$atom make-bb)
                                                          (($$atom vector)
                                                           ($$atom 'label)
                                                           ($$atom frame0)
                                                           ($$atom #f)
                                                           ($$atom lbl0)
                                                           ($$atom 'simple))
                                                          ($$atom bbs1))))
                                              (begin
                                                (($$atom bb-non-branch-instrs-set!)
                                                 ($$atom bb**0)
                                                 ($$atom tail0))
                                                (($$atom vector-set!)
                                                 ($$atom bb**0)
                                                 ($$atom 2)
                                                 ($$atom branch0))
                                                (let ((l2 (($$atom reverse)
                                                           ($$atom head*0))))
                                                  (($$atom vector-set!)
                                                   ($$atom bb*1)
                                                   ($$atom 1)
                                                   (($$atom list->queue)
                                                    ($$atom l2))))
                                                (let ((b0 (let ((opnd0 (($$atom +)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                ($$atom lbl0)
                                ($$atom 20000))))
                    (($$atom vector)
                     ($$atom 'jump)
                     ($$atom frame0)
                     ($$atom #f)
                     ($$atom opnd0)
                     ($$atom #f)
                     ($$atom #f)))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                  (($$atom vector-set!)
                                                   ($$atom bb*1)
                                                   ($$atom 2)
                                                   ($$atom b0)))
                                                (let ((l2 (($$atom reverse)
                                                           ($$atom head0))))
                                                  (($$atom vector-set!)
                                                   ($$atom bb1)
                                                   ($$atom 1)
                                                   (($$atom list->queue)
                                                    ($$atom l2))))
                                                (let ((b0 (let ((opnd0 (($$atom +)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                ($$atom lbl0)
                                ($$atom 20000))))
                    (($$atom vector)
                     ($$atom 'jump)
                     ($$atom frame0)
                     ($$atom #f)
                     ($$atom opnd0)
                     ($$atom #f)
                     ($$atom #f)))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                  (($$atom vector-set!)
                                                   ($$atom bb1)
                                                   ($$atom 2)
                                                   ($$atom b0)))
                                                (($$atom ##set-box!)
                                                 ($$atom changed?1)
                                                 ($$atom #t))
                                                (($$atom cons)
                                                 ($$atom bb1)
                                                 (($$atom cons)
                                                  ($$atom bb*1)
                                                  (($$atom add-bb1)
                                                   ($$atom bb**0)
                                                   (($$atom cdr)
                                                    ($$atom l1)))))))))))))))
                   (letrec ((loop0 (lambda (bbs1
                                            changed?1
                                            eqv-gvm-instr?1
                                            add-bb1
                                            bb1
                                            l1
                                            bb*1
                                            l10
                                            l20
                                            tail0)
                                     (if (if (($$atom pair?) ($$atom l10))
                                             (($$atom pair?) ($$atom l20))
                                             ($$atom #f))
                                         (let ((i20 (($$atom car)
                                                     ($$atom l20)))
                                               (i10 (($$atom car)
                                                     ($$atom l10))))
                                           (if (($$atom eqv-gvm-instr?1)
                                                ($$atom i10)
                                                ($$atom i20))
                                               (($$atom loop0)
                                                ($$atom bbs1)
                                                ($$atom changed?1)
                                                ($$atom eqv-gvm-instr?1)
                                                ($$atom add-bb1)
                                                ($$atom bb1)
                                                ($$atom l1)
                                                ($$atom bb*1)
                                                (($$atom cdr) ($$atom l10))
                                                (($$atom cdr) ($$atom l20))
                                                (($$atom cons)
                                                 ($$atom i10)
                                                 ($$atom tail0)))
                                               (($$atom cont0)
                                                ($$atom bbs1)
                                                ($$atom changed?1)
                                                ($$atom add-bb1)
                                                ($$atom bb1)
                                                ($$atom l1)
                                                ($$atom bb*1)
                                                ($$atom l10)
                                                ($$atom l20)
                                                ($$atom tail0))))
                                         (($$atom cont0)
                                          ($$atom bbs1)
                                          ($$atom changed?1)
                                          ($$atom add-bb1)
                                          ($$atom bb1)
                                          ($$atom l1)
                                          ($$atom bb*1)
                                          ($$atom l10)
                                          ($$atom l20)
                                          ($$atom tail0))))))
                     (($$atom loop0)
                      ($$atom bbs0)
                      ($$atom changed?0)
                      ($$atom eqv-gvm-instr?0)
                      ($$atom add-bb0)
                      ($$atom bb0)
                      ($$atom l0)
                      ($$atom bb*0)
                      (($$atom reverse)
                       (($$atom bb-non-branch-instrs) ($$atom bb0)))
                      (($$atom reverse)
                       (($$atom bb-non-branch-instrs) ($$atom bb*0)))
                      ($$atom '()))))
                 (($$atom cons)
                  ($$atom bb*0)
                  (($$atom add-bb0)
                   ($$atom bb0)
                   (($$atom cdr) ($$atom l0)))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                           (($$atom list) ($$atom bb0)))))
                            (enter-bb!0
                             (lambda (bb0)
                               (let ((h0 (let ((branch0 (($$atom vector-ref)
                                                         ($$atom bb0)
                                                         ($$atom 2))))
                                           (($$atom modulo)
                                            (let ((case-temp.2610
                                                   (($$atom vector-ref)
                                                    ($$atom branch0)
                                                    ($$atom 0))))
                                              (if (let ((g1100 ($$atom 'ifjump)))
                                                    (if (($$atom number?)
                                                         ($$atom case-temp.2610))
                                                        (if (($$atom number?)
                                                             ($$atom g1100))
                                                            (($$atom =)
                                                             ($$atom case-temp.2610)
                                                             ($$atom g1100))
                                                            ($$atom #f))
                                                        (($$atom eq?)
                                                         ($$atom case-temp.2610)
                                                         ($$atom g1100))))
                                                  (($$atom +)
                                                   (($$atom +)
                                                    (($$atom hash-opnds0)
                                                     ($$atom hash-table-length0)
                                                     (($$atom vector-ref)
                                                      ($$atom branch0)
                                                      ($$atom 4)))
                                                    (($$atom *)
                                                     ($$atom 10)
                                                     (let ((prim0 (($$atom vector-ref)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                           ($$atom branch0)
                           ($$atom 3))))
               (let ((n1 (($$atom length)
                          (($$atom ##unbox) ($$atom prim-table0))))
                     (i0 (($$atom pos-in-list)
                          ($$atom prim0)
                          (($$atom ##unbox) ($$atom prim-table0)))))
                 (if ($$atom i0)
                     (($$atom -) ($$atom n1) ($$atom i0))
                     (begin
                       (($$atom ##set-box!)
                        ($$atom prim-table0)
                        (($$atom cons)
                         ($$atom prim0)
                         (($$atom ##unbox) ($$atom prim-table0))))
                       (($$atom +) ($$atom n1) ($$atom 1))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                   (($$atom *)
                                                    ($$atom 100)
                                                    (let ((x0 (($$atom vector-ref)
                                                               ($$atom branch0)
                                                               ($$atom 1))))
                                                      (($$atom vector-ref)
                                                       ($$atom x0)
                                                       ($$atom 0)))))
                                                  (if (let ((g1110 ($$atom 'jump)))
                                                        (if (($$atom number?)
                                                             ($$atom case-temp.2610))
                                                            (if (($$atom number?)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                         ($$atom g1110))
                        (($$atom =) ($$atom case-temp.2610) ($$atom g1110))
                        ($$atom #f))
                    (($$atom eq?) ($$atom case-temp.2610) ($$atom g1110))))
              (($$atom +)
               (($$atom +)
                (($$atom hash-opnds0)
                 ($$atom hash-table-length0)
                 (($$atom list)
                  (($$atom vector-ref) ($$atom branch0) ($$atom 3))))
                (($$atom *)
                 ($$atom 10)
                 (let ((g1120 (($$atom vector-ref)
                               ($$atom branch0)
                               ($$atom 4))))
                   (if ($$atom g1120) ($$atom g1120) ($$atom -1)))))
               (($$atom *)
                ($$atom 100)
                (let ((x0 (($$atom vector-ref) ($$atom branch0) ($$atom 1))))
                  (($$atom vector-ref) ($$atom x0) ($$atom 0)))))
              ($$atom 0))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                            ($$atom hash-table-length0)))))
                                 (($$atom vector-set!)
                                  ($$atom hash-table0)
                                  ($$atom h0)
                                  (($$atom add-bb0)
                                   ($$atom bb0)
                                   (($$atom vector-ref)
                                    ($$atom hash-table0)
                                    ($$atom h0)))))))
                            (fix-map!0
                             (lambda (block-map1 bb10 bb20)
                               (letrec ((loop0 (lambda (bb11 bb21 l0)
                                                 (if (($$atom pair?)
                                                      ($$atom l0))
                                                     (let ((x0 (($$atom car)
                                                                ($$atom l0))))
                                                       (begin
                                                         (if (($$atom =)
                                                              ($$atom bb11)
                                                              (($$atom cdr)
                                                               ($$atom x0)))
                                                             (($$atom set-cdr!)
                                                              ($$atom x0)
                                                              ($$atom bb21))
                                                             ($$atom #f))
                                                         (($$atom loop0)
                                                          ($$atom bb11)
                                                          ($$atom bb21)
                                                          (($$atom cdr)
                                                           ($$atom l0)))))
                                                     ($$atom #f)))))
                                 (($$atom loop0)
                                  ($$atom bb10)
                                  ($$atom bb20)
                                  (($$atom ##unbox) ($$atom block-map1))))))
                            (replacement-lbl-num0
                             (lambda (lbl0)
                               (let ((x0 (($$atom assv)
                                          ($$atom lbl0)
                                          (($$atom ##unbox)
                                           ($$atom block-map0)))))
                                 (if ($$atom x0)
                                     (($$atom cdr) ($$atom x0))
                                     ($$atom lbl0)))))
                            (hash-bb0
                             (lambda (hash-table-length1 prim-table1 bb0)
                               (let ((branch0 (($$atom vector-ref)
                                               ($$atom bb0)
                                               ($$atom 2))))
                                 (($$atom modulo)
                                  (let ((case-temp.2610
                                         (($$atom vector-ref)
                                          ($$atom branch0)
                                          ($$atom 0))))
                                    (if (let ((g1130 ($$atom 'ifjump)))
                                          (if (($$atom number?)
                                               ($$atom case-temp.2610))
                                              (if (($$atom number?)
                                                   ($$atom g1130))
                                                  (($$atom =)
                                                   ($$atom case-temp.2610)
                                                   ($$atom g1130))
                                                  ($$atom #f))
                                              (($$atom eq?)
                                               ($$atom case-temp.2610)
                                               ($$atom g1130))))
                                        (($$atom +)
                                         (($$atom +)
                                          (($$atom hash-opnds0)
                                           ($$atom hash-table-length1)
                                           (($$atom vector-ref)
                                            ($$atom branch0)
                                            ($$atom 4)))
                                          (($$atom *)
                                           ($$atom 10)
                                           (let ((prim0 (($$atom vector-ref)
                                                         ($$atom branch0)
                                                         ($$atom 3))))
                                             (let ((i0 (($$atom pos-in-list)
                                                        ($$atom prim0)
                                                        (($$atom ##unbox)
                                                         ($$atom prim-table1))))
                                                   (n1 (($$atom length)
                                                        (($$atom ##unbox)
                                                         ($$atom prim-table1)))))
                                               (if ($$atom i0)
                                                   (($$atom -)
                                                    ($$atom n1)
                                                    ($$atom i0))
                                                   (begin
                                                     (($$atom ##set-box!)
                                                      ($$atom prim-table1)
                                                      (($$atom cons)
                                                       ($$atom prim0)
                                                       (($$atom ##unbox)
                                                        ($$atom prim-table1))))
                                                     (($$atom +)
                                                      ($$atom n1)
                                                      ($$atom 1))))))))
                                         (($$atom *)
                                          ($$atom 100)
                                          (let ((x0 (($$atom gvm-instr-frame)
                                                     ($$atom branch0))))
                                            (($$atom vector-ref)
                                             ($$atom x0)
                                             ($$atom 0)))))
                                        (if (let ((g1140 ($$atom 'jump)))
                                              (if (($$atom number?)
                                                   ($$atom case-temp.2610))
                                                  (if (($$atom number?)
                                                       ($$atom g1140))
                                                      (($$atom =)
                                                       ($$atom case-temp.2610)
                                                       ($$atom g1140))
                                                      ($$atom #f))
                                                  (($$atom eq?)
                                                   ($$atom case-temp.2610)
                                                   ($$atom g1140))))
                                            (($$atom +)
                                             (($$atom +)
                                              (($$atom hash-opnds0)
                                               ($$atom hash-table-length1)
                                               (($$atom list)
                                                (($$atom vector-ref)
                                                 ($$atom branch0)
                                                 ($$atom 3))))
                                              (($$atom *)
                                               ($$atom 10)
                                               (let ((g1150 (($$atom vector-ref)
                                                             ($$atom branch0)
                                                             ($$atom 4))))
                                                 (if ($$atom g1150)
                                                     ($$atom g1150)
                                                     ($$atom -1)))))
                                             (($$atom *)
                                              ($$atom 100)
                                              (let ((x0 (($$atom gvm-instr-frame)
                                                         ($$atom branch0))))
                                                (($$atom vector-ref)
                                                 ($$atom x0)
                                                 ($$atom 0)))))
                                            ($$atom 0))))
                                  ($$atom hash-table-length1)))))
                            (hash-opnds0
                             (lambda (hash-table-length1 l0)
                               (letrec ((loop0 (lambda (hash-table-length2
                                                        l1
                                                        n1)
                                                 (if (($$atom pair?)
                                                      ($$atom l1))
                                                     (let ((n2 (let ((x0 (($$atom car)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                  ($$atom l1))))
                         (if (($$atom lbl?) ($$atom x0))
                             ($$atom n1)
                             (($$atom modulo)
                              (($$atom +)
                               (($$atom *) ($$atom n1) ($$atom 10000))
                               ($$atom x0))
                              ($$atom hash-table-length2)))))
                   (l2 (($$atom cdr) ($$atom l1))))
               (if (($$atom pair?) ($$atom l2))
                   (($$atom loop0)
                    ($$atom hash-table-length2)
                    (($$atom cdr) ($$atom l2))
                    (let ((x0 (($$atom car) ($$atom l2))))
                      (if (($$atom lbl?) ($$atom x0))
                          ($$atom n2)
                          (($$atom modulo)
                           (($$atom +)
                            (($$atom *) ($$atom n2) ($$atom 10000))
                            ($$atom x0))
                           ($$atom hash-table-length2)))))
                   ($$atom n2)))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                     ($$atom n1)))))
                                 (($$atom loop0)
                                  ($$atom hash-table-length1)
                                  ($$atom l0)
                                  ($$atom 0)))))
                            (hash-prim0
                             (lambda (prim-table1 prim0)
                               (let ((i0 (($$atom pos-in-list)
                                          ($$atom prim0)
                                          (($$atom ##unbox)
                                           ($$atom prim-table1))))
                                     (n1 (($$atom length)
                                          (($$atom ##unbox)
                                           ($$atom prim-table1)))))
                                 (if ($$atom i0)
                                     (($$atom -) ($$atom n1) ($$atom i0))
                                     (begin
                                       (($$atom ##set-box!)
                                        ($$atom prim-table1)
                                        (($$atom cons)
                                         ($$atom prim0)
                                         (($$atom ##unbox)
                                          ($$atom prim-table1))))
                                       (($$atom +)
                                        ($$atom n1)
                                        ($$atom 1))))))))
                     (begin
                       (($$atom for-each)
                        ($$atom enter-bb!0)
                        ($$atom bb-list0))
                       (let ((lbl-num0
                              (($$atom replacement-lbl-num0)
                               (($$atom vector-ref)
                                ($$atom bbs0)
                                ($$atom 2)))))
                         (($$atom vector-set!)
                          ($$atom bbs0)
                          ($$atom 2)
                          ($$atom lbl-num0)))
                       (letrec ((loop0 (lambda (bbs1
                                                hash-table-length1
                                                hash-table1
                                                update-bb!1
                                                i0
                                                result0)
                                         (if (($$atom <)
                                              ($$atom i0)
                                              ($$atom hash-table-length1))
                                             (let ((bb-kept0
                                                    (($$atom vector-ref)
                                                     ($$atom hash-table1)
                                                     ($$atom i0))))
                                               (begin
                                                 (($$atom for-each)
                                                  ($$atom update-bb!1)
                                                  ($$atom bb-kept0))
                                                 (($$atom loop0)
                                                  ($$atom bbs1)
                                                  ($$atom hash-table-length1)
                                                  ($$atom hash-table1)
                                                  ($$atom update-bb!1)
                                                  (($$atom +)
                                                   ($$atom i0)
                                                   ($$atom 1))
                                                  (($$atom ##append-two)
                                                   ($$atom bb-kept0)
                                                   ($$atom result0)))))
                                             (let ((bbq0 (($$atom list->queue)
                                                          ($$atom result0))))
                                               (($$atom vector-set!)
                                                ($$atom bbs1)
                                                ($$atom 1)
                                                ($$atom bbq0)))))))
                         (($$atom loop0)
                          ($$atom bbs0)
                          ($$atom hash-table-length0)
                          ($$atom hash-table0)
                          ($$atom update-bb!0)
                          ($$atom 0)
                          ($$atom '())))
                       (($$atom ##unbox) ($$atom changed?0)))))))))))))
 (define replace-label-references!
   (lambda (bb0 replacement-lbl-num0)
     (letrec ((update-gvm-instr0
               (lambda (instr0)
                 (let ((update-closure-parms0
                        (lambda (p0)
                          (let ((opnds0 (($$atom map)
                                         ($$atom update-gvm-opnd0)
                                         (($$atom vector-ref)
                                          ($$atom p0)
                                          ($$atom 2))))
                                (lbl0 (($$atom replacement-lbl-num0)
                                       (($$atom vector-ref)
                                        ($$atom p0)
                                        ($$atom 1))))
                                (loc0 (($$atom update-gvm-opnd0)
                                       (($$atom vector-ref)
                                        ($$atom p0)
                                        ($$atom 0)))))
                            (($$atom vector)
                             ($$atom loc0)
                             ($$atom lbl0)
                             ($$atom opnds0))))))
                   (let ((case-temp.2670
                          (($$atom vector-ref) ($$atom instr0) ($$atom 0))))
                     (if (let ((g1160 ($$atom 'apply)))
                           (if (($$atom number?) ($$atom case-temp.2670))
                               (if (($$atom number?) ($$atom g1160))
                                   (($$atom =)
                                    ($$atom case-temp.2670)
                                    ($$atom g1160))
                                   ($$atom #f))
                               (($$atom eq?)
                                ($$atom case-temp.2670)
                                ($$atom g1160))))
                         (let ((comment0
                                (($$atom vector-ref)
                                 ($$atom instr0)
                                 ($$atom 2)))
                               (frame0 (($$atom vector-ref)
                                        ($$atom instr0)
                                        ($$atom 1)))
                               (loc0 (($$atom update-gvm-opnd0)
                                      (($$atom vector-ref)
                                       ($$atom instr0)
                                       ($$atom 5))))
                               (opnds0 (($$atom map)
                                        ($$atom update-gvm-opnd0)
                                        (($$atom vector-ref)
                                         ($$atom instr0)
                                         ($$atom 4))))
                               (prim0 (($$atom vector-ref)
                                       ($$atom instr0)
                                       ($$atom 3))))
                           (($$atom vector)
                            ($$atom 'apply)
                            ($$atom frame0)
                            ($$atom comment0)
                            ($$atom prim0)
                            ($$atom opnds0)
                            ($$atom loc0)))
                         (if (let ((g1170 ($$atom 'copy)))
                               (if (($$atom number?) ($$atom case-temp.2670))
                                   (if (($$atom number?) ($$atom g1170))
                                       (($$atom =)
                                        ($$atom case-temp.2670)
                                        ($$atom g1170))
                                       ($$atom #f))
                                   (($$atom eq?)
                                    ($$atom case-temp.2670)
                                    ($$atom g1170))))
                             (let ((comment0
                                    (($$atom vector-ref)
                                     ($$atom instr0)
                                     ($$atom 2)))
                                   (frame0 (($$atom vector-ref)
                                            ($$atom instr0)
                                            ($$atom 1)))
                                   (loc0 (($$atom update-gvm-opnd0)
                                          (($$atom vector-ref)
                                           ($$atom instr0)
                                           ($$atom 4))))
                                   (opnd0 (($$atom update-gvm-opnd0)
                                           (($$atom vector-ref)
                                            ($$atom instr0)
                                            ($$atom 3)))))
                               (($$atom vector)
                                ($$atom 'copy)
                                ($$atom frame0)
                                ($$atom comment0)
                                ($$atom opnd0)
                                ($$atom loc0)))
                             (if (let ((g1180 ($$atom 'close)))
                                   (if (($$atom number?)
                                        ($$atom case-temp.2670))
                                       (if (($$atom number?) ($$atom g1180))
                                           (($$atom =)
                                            ($$atom case-temp.2670)
                                            ($$atom g1180))
                                           ($$atom #f))
                                       (($$atom eq?)
                                        ($$atom case-temp.2670)
                                        ($$atom g1180))))
                                 (let ((comment0
                                        (($$atom vector-ref)
                                         ($$atom instr0)
                                         ($$atom 2)))
                                       (frame0 (($$atom vector-ref)
                                                ($$atom instr0)
                                                ($$atom 1)))
                                       (parms0 (($$atom map)
                                                ($$atom update-closure-parms0)
                                                (($$atom vector-ref)
                                                 ($$atom instr0)
                                                 ($$atom 3)))))
                                   (($$atom vector)
                                    ($$atom 'close)
                                    ($$atom frame0)
                                    ($$atom comment0)
                                    ($$atom parms0)))
                                 (if (let ((g1190 ($$atom 'ifjump)))
                                       (if (($$atom number?)
                                            ($$atom case-temp.2670))
                                           (if (($$atom number?)
                                                ($$atom g1190))
                                               (($$atom =)
                                                ($$atom case-temp.2670)
                                                ($$atom g1190))
                                               ($$atom #f))
                                           (($$atom eq?)
                                            ($$atom case-temp.2670)
                                            ($$atom g1190))))
                                     (let ((comment0
                                            (($$atom vector-ref)
                                             ($$atom instr0)
                                             ($$atom 2)))
                                           (frame0 (($$atom vector-ref)
                                                    ($$atom instr0)
                                                    ($$atom 1)))
                                           (poll?0 (($$atom vector-ref)
                                                    ($$atom instr0)
                                                    ($$atom 7)))
                                           (false0 (($$atom replacement-lbl-num0)
                                                    (($$atom vector-ref)
                                                     ($$atom instr0)
                                                     ($$atom 6))))
                                           (true0 (($$atom replacement-lbl-num0)
                                                   (($$atom vector-ref)
                                                    ($$atom instr0)
                                                    ($$atom 5))))
                                           (opnds0 (($$atom map)
                                                    ($$atom update-gvm-opnd0)
                                                    (($$atom vector-ref)
                                                     ($$atom instr0)
                                                     ($$atom 4))))
                                           (test0 (($$atom vector-ref)
                                                   ($$atom instr0)
                                                   ($$atom 3))))
                                       (($$atom vector)
                                        ($$atom 'ifjump)
                                        ($$atom frame0)
                                        ($$atom comment0)
                                        ($$atom test0)
                                        ($$atom opnds0)
                                        ($$atom true0)
                                        ($$atom false0)
                                        ($$atom poll?0)))
                                     (if (let ((g1200 ($$atom 'jump)))
                                           (if (($$atom number?)
                                                ($$atom case-temp.2670))
                                               (if (($$atom number?)
                                                    ($$atom g1200))
                                                   (($$atom =)
                                                    ($$atom case-temp.2670)
                                                    ($$atom g1200))
                                                   ($$atom #f))
                                               (($$atom eq?)
                                                ($$atom case-temp.2670)
                                                ($$atom g1200))))
                                         (let ((comment0
                                                (($$atom gvm-instr-comment)
                                                 ($$atom instr0)))
                                               (frame0 (($$atom vector-ref)
                                                        ($$atom instr0)
                                                        ($$atom 1)))
                                               (poll?0 (($$atom vector-ref)
                                                        ($$atom instr0)
                                                        ($$atom 5)))
                                               (nb-args0
                                                (($$atom vector-ref)
                                                 ($$atom instr0)
                                                 ($$atom 4)))
                                               (opnd0 (($$atom update-gvm-opnd0)
                                                       (($$atom vector-ref)
                                                        ($$atom instr0)
                                                        ($$atom 3)))))
                                           (($$atom vector)
                                            ($$atom 'jump)
                                            ($$atom frame0)
                                            ($$atom comment0)
                                            ($$atom opnd0)
                                            ($$atom nb-args0)
                                            ($$atom poll?0)))
                                         (($$atom compiler-internal-error)
                                          ($$atom "update-gvm-instr, unknown 'instr':")
                                          ($$atom instr0)))))))))))
              (update-gvm-opnd0
               (lambda (opnd0)
                 (if ($$atom opnd0)
                     (if (($$atom lbl?) ($$atom opnd0))
                         (let ((num0 (($$atom replacement-lbl-num0)
                                      (($$atom modulo)
                                       ($$atom opnd0)
                                       ($$atom 10000)))))
                           (($$atom +) ($$atom num0) ($$atom 20000)))
                         (if (($$atom clo?) ($$atom opnd0))
                             (let ((index0 (($$atom clo-index) ($$atom opnd0)))
                                   (base0 (($$atom update-gvm-opnd0)
                                           (($$atom clo-base)
                                            ($$atom opnd0)))))
                               (($$atom +)
                                (($$atom enter-opnd)
                                 ($$atom base0)
                                 ($$atom index0))
                                ($$atom 40000)))
                             ($$atom opnd0)))
                     ($$atom opnd0)))))
       (begin
         (let ((l0 (($$atom map)
                    ($$atom update-gvm-instr0)
                    (($$atom bb-non-branch-instrs) ($$atom bb0)))))
           (($$atom vector-set!)
            ($$atom bb0)
            ($$atom 1)
            (($$atom list->queue) ($$atom l0))))
         (let ((b0 (($$atom update-gvm-instr0)
                    (($$atom vector-ref) ($$atom bb0) ($$atom 2)))))
           (($$atom vector-set!) ($$atom bb0) ($$atom 2) ($$atom b0)))))))
 (define bbs-order!
   (lambda (bbs0)
     (let ((left-to-schedule0
            (($$atom ##box)
             (let ((queue0 (($$atom vector-ref) ($$atom bbs0) ($$atom 1))))
               (($$atom car) ($$atom queue0)))))
           (new-bb-queue0 (($$atom queue-empty))))
       (letrec ((schedule-refs0
                 (lambda (bb0)
                   (($$atom for-each)
                    (lambda (x0)
                      (if (($$atom memq)
                           ($$atom x0)
                           (($$atom ##unbox) ($$atom left-to-schedule0)))
                          (($$atom schedule-around0)
                           (($$atom remove-bb!0)
                            ($$atom left-to-schedule0)
                            ($$atom x0)))
                          ($$atom #f)))
                    (($$atom vector-ref) ($$atom bb0) ($$atom 3)))))
                (schedule-forw0
                 (lambda (bb0)
                   (begin
                     (($$atom queue-put!) ($$atom new-bb-queue0) ($$atom bb0))
                     (let ((x0 (($$atom succ-bb0)
                                ($$atom bbs0)
                                ($$atom left-to-schedule0)
                                ($$atom bb0))))
                       (if ($$atom x0)
                           (begin
                             (($$atom schedule-forw0)
                              (($$atom remove-bb!0)
                               ($$atom left-to-schedule0)
                               ($$atom x0)))
                             (let ((y0 (($$atom succ-bb0)
                                        ($$atom bbs0)
                                        ($$atom left-to-schedule0)
                                        ($$atom bb0))))
                               (if ($$atom y0)
                                   (($$atom schedule-around0)
                                    (($$atom remove-bb!0)
                                     ($$atom left-to-schedule0)
                                     ($$atom y0)))
                                   ($$atom #f))))
                           ($$atom #f)))
                     (($$atom schedule-refs0) ($$atom bb0)))))
                (schedule-back0
                 (lambda (left-to-schedule1 new-bb-queue1 bb0 bb-list0)
                   (let ((x0 (($$atom prec-bb0)
                              ($$atom left-to-schedule1)
                              ($$atom bb0)))
                         (bb-list*0
                          (($$atom cons) ($$atom bb0) ($$atom bb-list0))))
                     (if ($$atom x0)
                         (let ((bb-list1
                                (($$atom schedule-back0)
                                 ($$atom left-to-schedule1)
                                 ($$atom new-bb-queue1)
                                 (($$atom remove-bb!0)
                                  ($$atom left-to-schedule1)
                                  ($$atom x0))
                                 ($$atom bb-list*0))))
                           (begin
                             (($$atom queue-put!)
                              ($$atom new-bb-queue1)
                              ($$atom x0))
                             ($$atom bb-list1)))
                         ($$atom bb-list*0)))))
                (schedule-around0
                 (lambda (bb0)
                   (let ((x0 (($$atom prec-bb0)
                              ($$atom left-to-schedule0)
                              ($$atom bb0))))
                     (if ($$atom x0)
                         (let ((bb-list0
                                (($$atom schedule-back0)
                                 ($$atom left-to-schedule0)
                                 ($$atom new-bb-queue0)
                                 (($$atom remove-bb!0)
                                  ($$atom left-to-schedule0)
                                  ($$atom x0))
                                 ($$atom '()))))
                           (begin
                             (($$atom queue-put!)
                              ($$atom new-bb-queue0)
                              ($$atom x0))
                             (($$atom schedule-forw0) ($$atom bb0))
                             (($$atom for-each)
                              ($$atom schedule-refs0)
                              ($$atom bb-list0))))
                         (($$atom schedule-from0) ($$atom bb0))))))
                (schedule-from0
                 (lambda (bb0)
                   (begin
                     (($$atom queue-put!) ($$atom new-bb-queue0) ($$atom bb0))
                     (let ((x0 (($$atom succ-bb0)
                                ($$atom bbs0)
                                ($$atom left-to-schedule0)
                                ($$atom bb0))))
                       (if ($$atom x0)
                           (begin
                             (($$atom schedule-around0)
                              (($$atom remove-bb!0)
                               ($$atom left-to-schedule0)
                               ($$atom x0)))
                             (let ((y0 (($$atom succ-bb0)
                                        ($$atom bbs0)
                                        ($$atom left-to-schedule0)
                                        ($$atom bb0))))
                               (if ($$atom y0)
                                   (($$atom schedule-around0)
                                    (($$atom remove-bb!0)
                                     ($$atom left-to-schedule0)
                                     ($$atom y0)))
                                   ($$atom #f))))
                           ($$atom #f)))
                     (($$atom schedule-refs0) ($$atom bb0)))))
                (succ-bb0
                 (lambda (bbs1 left-to-schedule1 bb0)
                   (let ((branches-to-lbl?0
                          (lambda (bb1)
                            (let ((branch0 (($$atom vector-ref)
                                            ($$atom bb1)
                                            ($$atom 2))))
                              (let ((case-temp.2780
                                     (($$atom vector-ref)
                                      ($$atom branch0)
                                      ($$atom 0))))
                                (if (let ((g1210 ($$atom 'ifjump)))
                                      (if (($$atom number?)
                                           ($$atom case-temp.2780))
                                          (if (($$atom number?) ($$atom g1210))
                                              (($$atom =)
                                               ($$atom case-temp.2780)
                                               ($$atom g1210))
                                              ($$atom #f))
                                          (($$atom eq?)
                                           ($$atom case-temp.2780)
                                           ($$atom g1210))))
                                    ($$atom #t)
                                    (if (let ((g1220 ($$atom 'jump)))
                                          (if (($$atom number?)
                                               ($$atom case-temp.2780))
                                              (if (($$atom number?)
                                                   ($$atom g1220))
                                                  (($$atom =)
                                                   ($$atom case-temp.2780)
                                                   ($$atom g1220))
                                                  ($$atom #f))
                                              (($$atom eq?)
                                               ($$atom case-temp.2780)
                                               ($$atom g1220))))
                                        (let ((x0 (($$atom jump-opnd)
                                                   ($$atom branch0))))
                                          (($$atom =)
                                           (($$atom quotient)
                                            ($$atom x0)
                                            ($$atom 10000))
                                           ($$atom 2)))
                                        (($$atom compiler-internal-error)
                                         ($$atom "bbs-order!, unknown branch type")))))))))
                     (let ((branch0 (($$atom vector-ref)
                                     ($$atom bb0)
                                     ($$atom 2))))
                       (let ((case-temp.2790
                              (($$atom vector-ref)
                               ($$atom branch0)
                               ($$atom 0))))
                         (if (let ((g1230 ($$atom 'ifjump)))
                               (if (($$atom number?) ($$atom case-temp.2790))
                                   (if (($$atom number?) ($$atom g1230))
                                       (($$atom =)
                                        ($$atom case-temp.2790)
                                        ($$atom g1230))
                                       ($$atom #f))
                                   (($$atom eq?)
                                    ($$atom case-temp.2790)
                                    ($$atom g1230))))
                             (let ((true-bb0
                                    (($$atom lbl-num->bb)
                                     (($$atom vector-ref)
                                      ($$atom branch0)
                                      ($$atom 5))
                                     ($$atom bbs1))))
                               (let ((true-bb*0
                                      (if (($$atom memq)
                                           ($$atom true-bb0)
                                           (($$atom ##unbox)
                                            ($$atom left-to-schedule1)))
                                          ($$atom true-bb0)
                                          ($$atom #f))))
                                 (let ((false-bb0
                                        (($$atom lbl-num->bb)
                                         (($$atom vector-ref)
                                          ($$atom branch0)
                                          ($$atom 6))
                                         ($$atom bbs1))))
                                   (let ((false-bb*0
                                          (if (($$atom memq)
                                               ($$atom false-bb0)
                                               (($$atom ##unbox)
                                                ($$atom left-to-schedule1)))
                                              ($$atom false-bb0)
                                              ($$atom #f))))
                                     (if (if ($$atom true-bb*0)
                                             ($$atom false-bb*0)
                                             ($$atom #f))
                                         (if (($$atom branches-to-lbl?0)
                                              ($$atom true-bb*0))
                                             ($$atom true-bb*0)
                                             (if (($$atom branches-to-lbl?0)
                                                  ($$atom false-bb*0))
                                                 ($$atom false-bb*0)
                                                 (if (($$atom <)
                                                      (($$atom bb-exit-frame-size)
                                                       ($$atom true-bb*0))
                                                      (($$atom bb-exit-frame-size)
                                                       ($$atom false-bb*0)))
                                                     ($$atom false-bb*0)
                                                     ($$atom true-bb*0))))
                                         (let ((g1240 ($$atom true-bb*0)))
                                           (if ($$atom g1240)
                                               ($$atom g1240)
                                               ($$atom false-bb*0))))))))
                             (if (let ((g1250 ($$atom 'jump)))
                                   (if (($$atom number?)
                                        ($$atom case-temp.2790))
                                       (if (($$atom number?) ($$atom g1250))
                                           (($$atom =)
                                            ($$atom case-temp.2790)
                                            ($$atom g1250))
                                           ($$atom #f))
                                       (($$atom eq?)
                                        ($$atom case-temp.2790)
                                        ($$atom g1250))))
                                 (let ((opnd0 (($$atom vector-ref)
                                               ($$atom branch0)
                                               ($$atom 3))))
                                   (if (($$atom lbl?) ($$atom opnd0))
                                       (let ((bb1 (($$atom lbl-num->bb)
                                                   (($$atom modulo)
                                                    ($$atom opnd0)
                                                    ($$atom 10000))
                                                   ($$atom bbs1))))
                                         (if (($$atom memq)
                                              ($$atom bb1)
                                              (($$atom ##unbox)
                                               ($$atom left-to-schedule1)))
                                             ($$atom bb1)
                                             ($$atom #f)))
                                       ($$atom #f)))
                                 (($$atom compiler-internal-error)
                                  ($$atom "bbs-order!, unknown branch type")))))))))
                (prec-bb0
                 (lambda (left-to-schedule1 bb0)
                   (letrec ((loop0 (lambda (left-to-schedule2
                                            l0
                                            best0
                                            best-fs0)
                                     (if (($$atom null?) ($$atom l0))
                                         ($$atom best0)
                                         (let ((x0 (($$atom car) ($$atom l0))))
                                           (let ((x-fs0 (($$atom bb-exit-frame-size)
                                                         ($$atom x0))))
                                             (if (if (($$atom memq)
                                                      ($$atom x0)
                                                      (($$atom ##unbox)
                                                       ($$atom left-to-schedule2)))
                                                     (let ((g1260 (($$atom not)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                           ($$atom best0))))
               (if ($$atom g1260)
                   ($$atom g1260)
                   (($$atom <) ($$atom x-fs0) ($$atom best-fs0))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                     ($$atom #f))
                                                 (($$atom loop0)
                                                  ($$atom left-to-schedule2)
                                                  (($$atom cdr) ($$atom l0))
                                                  ($$atom x0)
                                                  ($$atom x-fs0))
                                                 (($$atom loop0)
                                                  ($$atom left-to-schedule2)
                                                  (($$atom cdr) ($$atom l0))
                                                  ($$atom best0)
                                                  ($$atom best-fs0)))))))))
                     (($$atom loop0)
                      ($$atom left-to-schedule1)
                      (($$atom vector-ref) ($$atom bb0) ($$atom 4))
                      ($$atom #f)
                      ($$atom #f)))))
                (remove-bb!0
                 (lambda (left-to-schedule1 bb0)
                   (begin
                     (($$atom ##set-box!)
                      ($$atom left-to-schedule1)
                      (($$atom remove0)
                       ($$atom bb0)
                       (($$atom ##unbox) ($$atom left-to-schedule1))))
                     ($$atom bb0))))
                (remove0 (lambda (x0 l0)
                           (if (($$atom eq?)
                                (($$atom car) ($$atom l0))
                                ($$atom x0))
                               (($$atom cdr) ($$atom l0))
                               (($$atom cons)
                                (($$atom car) ($$atom l0))
                                (($$atom remove0)
                                 ($$atom x0)
                                 (($$atom cdr) ($$atom l0))))))))
         (begin
           (($$atom schedule-from0)
            (($$atom remove-bb!0)
             ($$atom left-to-schedule0)
             (($$atom lbl-num->bb)
              (($$atom vector-ref) ($$atom bbs0) ($$atom 2))
              ($$atom bbs0))))
           (($$atom vector-set!)
            ($$atom bbs0)
            ($$atom 1)
            ($$atom new-bb-queue0))
           (let ((bb-list0 (($$atom car) ($$atom new-bb-queue0))))
             (letrec ((loop0 (lambda (bbs1 bb-list1 l0 i0 lbl-map0)
                               (if (($$atom pair?) ($$atom l0))
                                   (let ((label-instr0
                                          (let ((bb0 (($$atom car)
                                                      ($$atom l0))))
                                            (($$atom vector-ref)
                                             ($$atom bb0)
                                             ($$atom 0)))))
                                     (let ((old-lbl-num0
                                            (($$atom vector-ref)
                                             ($$atom label-instr0)
                                             ($$atom 3))))
                                       (begin
                                         (($$atom vector-set!)
                                          ($$atom label-instr0)
                                          ($$atom 3)
                                          ($$atom i0))
                                         (($$atom loop0)
                                          ($$atom bbs1)
                                          ($$atom bb-list1)
                                          (($$atom cdr) ($$atom l0))
                                          (($$atom +) ($$atom i0) ($$atom 1))
                                          (($$atom cons)
                                           (($$atom cons)
                                            ($$atom old-lbl-num0)
                                            ($$atom i0))
                                           ($$atom lbl-map0))))))
                                   (letrec ((update-bb!0
                                             (lambda (bb0)
                                               (($$atom replace-label-references!)
                                                ($$atom bb0)
                                                ($$atom replacement-lbl-num0))))
                                            (replacement-lbl-num0
                                             (lambda (x0)
                                               (($$atom cdr)
                                                (($$atom assv)
                                                 ($$atom x0)
                                                 ($$atom lbl-map0))))))
                                     (begin
                                       (($$atom for-each)
                                        ($$atom update-bb!0)
                                        ($$atom bb-list1))
                                       (let ((cntr0 (($$atom make-counter)
                                                     (($$atom *)
                                                      (($$atom +)
                                                       ($$atom 1)
                                                       (($$atom quotient)
                                                        ((($$atom vector-ref)
                                                          ($$atom bbs1)
                                                          ($$atom 0)))
                                                        ($$atom 1000)))
                                                      ($$atom 1000))
                                                     ($$atom 9999)
                                                     ($$atom bbs-limit-err))))
                                         (($$atom vector-set!)
                                          ($$atom bbs1)
                                          ($$atom 0)
                                          ($$atom cntr0)))))))))
               (($$atom loop0)
                ($$atom bbs0)
                ($$atom bb-list0)
                ($$atom bb-list0)
                ($$atom 1)
                ($$atom '())))))))))
 (define make-code
   (lambda (bb0 gvm-instr0 sn0)
     (($$atom vector) ($$atom bb0) ($$atom gvm-instr0) ($$atom sn0))))
 (define code-bb
   (lambda (code0) (($$atom vector-ref) ($$atom code0) ($$atom 0))))
 (define code-gvm-instr
   (lambda (code0) (($$atom vector-ref) ($$atom code0) ($$atom 1))))
 (define code-slots-needed
   (lambda (code0) (($$atom vector-ref) ($$atom code0) ($$atom 2))))
 (define code-slots-needed-set!
   (lambda (code0 n0)
     (($$atom vector-set!) ($$atom code0) ($$atom 2) ($$atom n0))))
 (define bbs->code-list
   (lambda (bbs0)
     (let ((code-list0 (($$atom linearize) ($$atom bbs0))))
       (begin
         (($$atom setup-slots-needed!) ($$atom code-list0))
         ($$atom code-list0)))))
 (define linearize
   (lambda (bbs0)
     (let ((code-queue0 (($$atom queue-empty))))
       (let ((put-bb0 (lambda (bb0)
                        (let ((put-instr0
                               (lambda (gvm-instr0)
                                 (($$atom queue-put!)
                                  ($$atom code-queue0)
                                  (($$atom vector)
                                   ($$atom bb0)
                                   ($$atom gvm-instr0)
                                   ($$atom #f))))))
                          (begin
                            (($$atom put-instr0)
                             (($$atom vector-ref) ($$atom bb0) ($$atom 0)))
                            (($$atom for-each)
                             ($$atom put-instr0)
                             (($$atom bb-non-branch-instrs) ($$atom bb0)))
                            (($$atom put-instr0)
                             (($$atom vector-ref)
                              ($$atom bb0)
                              ($$atom 2))))))))
         (begin
           (($$atom for-each)
            ($$atom put-bb0)
            (let ((queue0 (($$atom vector-ref) ($$atom bbs0) ($$atom 1))))
              (($$atom car) ($$atom queue0))))
           (($$atom car) ($$atom code-queue0)))))))
 (define setup-slots-needed!
   (lambda (code-list0)
     (if (($$atom null?) ($$atom code-list0))
         ($$atom #f)
         (let ((code0 (($$atom car) ($$atom code-list0))))
           (let ((gvm-instr0 (($$atom vector-ref) ($$atom code0) ($$atom 1))))
             (let ((sn-rest0
                    (($$atom setup-slots-needed!)
                     (($$atom cdr) ($$atom code-list0)))))
               (let ((case-temp.2890
                      (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 0))))
                 (if (let ((g1270 ($$atom 'label)))
                       (if (($$atom number?) ($$atom case-temp.2890))
                           (if (($$atom number?) ($$atom g1270))
                               (($$atom =)
                                ($$atom case-temp.2890)
                                ($$atom g1270))
                               ($$atom #f))
                           (($$atom eq?)
                            ($$atom case-temp.2890)
                            ($$atom g1270))))
                     (begin
                       (if (($$atom >)
                            ($$atom sn-rest0)
                            (let ((x0 (($$atom gvm-instr-frame)
                                       ($$atom gvm-instr0))))
                              (($$atom vector-ref) ($$atom x0) ($$atom 0))))
                           (($$atom compiler-internal-error)
                            ($$atom "setup-slots-needed!, incoherent slots needed for LABEL"))
                           ($$atom #f))
                       (($$atom vector-set!)
                        ($$atom code0)
                        ($$atom 2)
                        ($$atom sn-rest0))
                       ($$atom #f))
                     (if (let ((g1280 (let ((g1290 ($$atom 'ifjump)))
                                        (if (($$atom number?)
                                             ($$atom case-temp.2890))
                                            (if (($$atom number?)
                                                 ($$atom g1290))
                                                (($$atom =)
                                                 ($$atom case-temp.2890)
                                                 ($$atom g1290))
                                                ($$atom #f))
                                            (($$atom eq?)
                                             ($$atom case-temp.2890)
                                             ($$atom g1290))))))
                           (if ($$atom g1280)
                               ($$atom g1280)
                               (let ((g1300 ($$atom 'jump)))
                                 (if (($$atom number?) ($$atom case-temp.2890))
                                     (if (($$atom number?) ($$atom g1300))
                                         (($$atom =)
                                          ($$atom case-temp.2890)
                                          ($$atom g1300))
                                         ($$atom #f))
                                     (($$atom eq?)
                                      ($$atom case-temp.2890)
                                      ($$atom g1300))))))
                         (let ((sn0 (let ((x0 (($$atom gvm-instr-frame)
                                               ($$atom gvm-instr0))))
                                      (($$atom vector-ref)
                                       ($$atom x0)
                                       ($$atom 0)))))
                           (begin
                             (($$atom vector-set!)
                              ($$atom code0)
                              ($$atom 2)
                              ($$atom sn0))
                             (($$atom need-gvm-instr)
                              ($$atom gvm-instr0)
                              ($$atom sn0))))
                         (begin
                           (($$atom vector-set!)
                            ($$atom code0)
                            ($$atom 2)
                            ($$atom sn-rest0))
                           (($$atom need-gvm-instr)
                            ($$atom gvm-instr0)
                            ($$atom sn-rest0))))))))))))
 (define need-gvm-instrs
   (lambda (non-branch0 branch0)
     (if (($$atom pair?) ($$atom non-branch0))
         (($$atom need-gvm-instr)
          (($$atom car) ($$atom non-branch0))
          (($$atom need-gvm-instrs)
           (($$atom cdr) ($$atom non-branch0))
           ($$atom branch0)))
         (($$atom need-gvm-instr)
          ($$atom branch0)
          (let ((x0 (($$atom gvm-instr-frame) ($$atom branch0))))
            (($$atom vector-ref) ($$atom x0) ($$atom 0)))))))
 (define need-gvm-instr
   (lambda (gvm-instr0 sn-rest0)
     (let ((case-temp.2940
            (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 0))))
       (if (let ((g1310 ($$atom 'label)))
             (if (($$atom number?) ($$atom case-temp.2940))
                 (if (($$atom number?) ($$atom g1310))
                     (($$atom =) ($$atom case-temp.2940) ($$atom g1310))
                     ($$atom #f))
                 (($$atom eq?) ($$atom case-temp.2940) ($$atom g1310))))
           ($$atom sn-rest0)
           (if (let ((g1320 ($$atom 'apply)))
                 (if (($$atom number?) ($$atom case-temp.2940))
                     (if (($$atom number?) ($$atom g1320))
                         (($$atom =) ($$atom case-temp.2940) ($$atom g1320))
                         ($$atom #f))
                     (($$atom eq?) ($$atom case-temp.2940) ($$atom g1320))))
               (let ((loc0 (($$atom vector-ref)
                            ($$atom gvm-instr0)
                            ($$atom 5))))
                 (let ((slots-needed0
                        (($$atom need-gvm-loc-opnd)
                         ($$atom loc0)
                         (($$atom need-gvm-loc)
                          ($$atom loc0)
                          ($$atom sn-rest0))))
                       (gvm-opnds0 (($$atom apply-opnds) ($$atom gvm-instr0))))
                   (if (($$atom null?) ($$atom gvm-opnds0))
                       ($$atom slots-needed0)
                       (($$atom need-gvm-opnd)
                        (($$atom car) ($$atom gvm-opnds0))
                        (($$atom need-gvm-opnds)
                         (($$atom cdr) ($$atom gvm-opnds0))
                         ($$atom slots-needed0))))))
               (if (let ((g1330 ($$atom 'copy)))
                     (if (($$atom number?) ($$atom case-temp.2940))
                         (if (($$atom number?) ($$atom g1330))
                             (($$atom =)
                              ($$atom case-temp.2940)
                              ($$atom g1330))
                             ($$atom #f))
                         (($$atom eq?)
                          ($$atom case-temp.2940)
                          ($$atom g1330))))
                   (let ((loc0 (($$atom vector-ref)
                                ($$atom gvm-instr0)
                                ($$atom 4))))
                     (($$atom need-gvm-opnd)
                      (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 3))
                      (($$atom need-gvm-loc-opnd)
                       ($$atom loc0)
                       (($$atom need-gvm-loc)
                        ($$atom loc0)
                        ($$atom sn-rest0)))))
                   (if (let ((g1340 ($$atom 'close)))
                         (if (($$atom number?) ($$atom case-temp.2940))
                             (if (($$atom number?) ($$atom g1340))
                                 (($$atom =)
                                  ($$atom case-temp.2940)
                                  ($$atom g1340))
                                 ($$atom #f))
                             (($$atom eq?)
                              ($$atom case-temp.2940)
                              ($$atom g1340))))
                       (let ((parms0 (($$atom vector-ref)
                                      ($$atom gvm-instr0)
                                      ($$atom 3))))
                         (letrec ((need-parms-loc0
                                   (lambda (sn-rest1 parms1 p0)
                                     (if (($$atom null?) ($$atom p0))
                                         (($$atom need-parms-opnds0)
                                          ($$atom sn-rest1)
                                          ($$atom parms1))
                                         (let ((loc0 (let ((x0 (($$atom car)
                                                                ($$atom p0))))
                                                       (($$atom vector-ref)
                                                        ($$atom x0)
                                                        ($$atom 0)))))
                                           (let ((slots-needed0
                                                  (($$atom need-gvm-loc)
                                                   ($$atom loc0)
                                                   (($$atom need-parms-loc0)
                                                    ($$atom sn-rest1)
                                                    ($$atom parms1)
                                                    (($$atom cdr)
                                                     ($$atom p0))))))
                                             (if (if ($$atom loc0)
                                                     (($$atom clo?)
                                                      ($$atom loc0))
                                                     ($$atom #f))
                                                 (($$atom need-gvm-opnd)
                                                  (($$atom clo-base)
                                                   ($$atom loc0))
                                                  ($$atom slots-needed0))
                                                 ($$atom slots-needed0)))))))
                                  (need-parms-opnds0
                                   (lambda (sn-rest1 p0)
                                     (if (($$atom null?) ($$atom p0))
                                         ($$atom sn-rest1)
                                         (let ((slots-needed0
                                                (($$atom need-parms-opnds0)
                                                 ($$atom sn-rest1)
                                                 (($$atom cdr) ($$atom p0))))
                                               (gvm-opnds0
                                                (($$atom closure-parms-opnds)
                                                 (($$atom car) ($$atom p0)))))
                                           (if (($$atom null?)
                                                ($$atom gvm-opnds0))
                                               ($$atom slots-needed0)
                                               (($$atom need-gvm-opnd)
                                                (($$atom car)
                                                 ($$atom gvm-opnds0))
                                                (($$atom need-gvm-opnds)
                                                 (($$atom cdr)
                                                  ($$atom gvm-opnds0))
                                                 ($$atom slots-needed0)))))))))
                           (($$atom need-parms-loc0)
                            ($$atom sn-rest0)
                            ($$atom parms0)
                            ($$atom parms0))))
                       (if (let ((g1350 ($$atom 'ifjump)))
                             (if (($$atom number?) ($$atom case-temp.2940))
                                 (if (($$atom number?) ($$atom g1350))
                                     (($$atom =)
                                      ($$atom case-temp.2940)
                                      ($$atom g1350))
                                     ($$atom #f))
                                 (($$atom eq?)
                                  ($$atom case-temp.2940)
                                  ($$atom g1350))))
                           (($$atom need-gvm-opnds)
                            (($$atom vector-ref)
                             ($$atom gvm-instr0)
                             ($$atom 4))
                            ($$atom sn-rest0))
                           (if (let ((g1360 ($$atom 'jump)))
                                 (if (($$atom number?) ($$atom case-temp.2940))
                                     (if (($$atom number?) ($$atom g1360))
                                         (($$atom =)
                                          ($$atom case-temp.2940)
                                          ($$atom g1360))
                                         ($$atom #f))
                                     (($$atom eq?)
                                      ($$atom case-temp.2940)
                                      ($$atom g1360))))
                               (($$atom need-gvm-opnd)
                                (($$atom vector-ref)
                                 ($$atom gvm-instr0)
                                 ($$atom 3))
                                ($$atom sn-rest0))
                               (($$atom compiler-internal-error)
                                ($$atom "need-gvm-instr, unknown 'gvm-instr':")
                                ($$atom gvm-instr0)))))))))))
 (define need-gvm-loc
   (lambda (loc0 sn-rest0)
     (if (if ($$atom loc0)
             (if (($$atom stk?) ($$atom loc0))
                 (($$atom >=)
                  (($$atom modulo) ($$atom loc0) ($$atom 10000))
                  ($$atom sn-rest0))
                 ($$atom #f))
             ($$atom #f))
         (($$atom -) (($$atom modulo) ($$atom loc0) ($$atom 10000)) ($$atom 1))
         ($$atom sn-rest0))))
 (define need-gvm-loc-opnd
   (lambda (gvm-loc0 slots-needed0)
     (if (if ($$atom gvm-loc0) (($$atom clo?) ($$atom gvm-loc0)) ($$atom #f))
         (($$atom need-gvm-opnd)
          (($$atom clo-base) ($$atom gvm-loc0))
          ($$atom slots-needed0))
         ($$atom slots-needed0))))
 (define need-gvm-opnd
   (lambda (gvm-opnd0 slots-needed0)
     (if (($$atom stk?) ($$atom gvm-opnd0))
         (($$atom max)
          (($$atom modulo) ($$atom gvm-opnd0) ($$atom 10000))
          ($$atom slots-needed0))
         (if (($$atom clo?) ($$atom gvm-opnd0))
             (($$atom need-gvm-opnd)
              (($$atom clo-base) ($$atom gvm-opnd0))
              ($$atom slots-needed0))
             ($$atom slots-needed0)))))
 (define need-gvm-opnds
   (lambda (gvm-opnds0 slots-needed0)
     (if (($$atom null?) ($$atom gvm-opnds0))
         ($$atom slots-needed0)
         (($$atom need-gvm-opnd)
          (($$atom car) ($$atom gvm-opnds0))
          (($$atom need-gvm-opnds)
           (($$atom cdr) ($$atom gvm-opnds0))
           ($$atom slots-needed0))))))
 (define write-bb
   (lambda (bb0 port0)
     (begin
       (($$atom write-gvm-instr)
        (($$atom vector-ref) ($$atom bb0) ($$atom 0))
        ($$atom port0))
       (($$atom display) ($$atom " [precedents=") ($$atom port0))
       (($$atom write)
        (($$atom map)
         ($$atom bb-lbl-num)
         (($$atom vector-ref) ($$atom bb0) ($$atom 4)))
        ($$atom port0))
       (($$atom display) ($$atom "]") ($$atom port0))
       (($$atom newline) ($$atom port0))
       (($$atom for-each)
        (lambda (x0)
          (begin
            (($$atom write-gvm-instr) ($$atom x0) ($$atom port0))
            (($$atom newline) ($$atom port0))))
        (($$atom bb-non-branch-instrs) ($$atom bb0)))
       (($$atom write-gvm-instr)
        (($$atom vector-ref) ($$atom bb0) ($$atom 2))
        ($$atom port0)))))
 (define write-bbs
   (lambda (bbs0 port0)
     (($$atom for-each)
      (lambda (bb0)
        (begin
          (if (($$atom =)
               (($$atom bb-lbl-num) ($$atom bb0))
               (($$atom vector-ref) ($$atom bbs0) ($$atom 2)))
              (begin
                (($$atom display) ($$atom "**** Entry block:") ($$atom port0))
                (($$atom newline) ($$atom port0)))
              ($$atom #f))
          (($$atom write-bb) ($$atom bb0) ($$atom port0))
          (($$atom newline) ($$atom port0))))
      (let ((queue0 (($$atom vector-ref) ($$atom bbs0) ($$atom 1))))
        (($$atom car) ($$atom queue0))))))
 (define virtual.dump
   (lambda (proc0 port0)
     (let ((proc-left0 (($$atom queue-empty)))
           (proc-seen0 (($$atom queue-empty))))
       (letrec ((scan-opnd0
                 (lambda (gvm-opnd0)
                   (if (($$atom obj?) ($$atom gvm-opnd0))
                       (let ((val0 (($$atom obj-val) ($$atom gvm-opnd0))))
                         (if (if (($$atom proc-obj?) ($$atom val0))
                                 (if (($$atom vector-ref)
                                      ($$atom val0)
                                      ($$atom 3))
                                     (($$atom not)
                                      (($$atom memq)
                                       ($$atom val0)
                                       (($$atom car) ($$atom proc-seen0))))
                                     ($$atom #f))
                                 ($$atom #f))
                             (begin
                               (($$atom queue-put!)
                                ($$atom proc-seen0)
                                ($$atom val0))
                               (($$atom queue-put!)
                                ($$atom proc-left0)
                                ($$atom val0)))
                             ($$atom #f)))
                       (if (($$atom clo?) ($$atom gvm-opnd0))
                           (($$atom scan-opnd0)
                            (($$atom clo-base) ($$atom gvm-opnd0)))
                           ($$atom #f))))))
         (begin
           (($$atom scan-opnd0) (($$atom make-obj) ($$atom proc0)))
           (letrec ((loop0 (lambda (port1 proc-left1 scan-opnd1)
                             (if (($$atom queue-empty?) ($$atom proc-left1))
                                 ($$atom #f)
                                 (begin
                                   (let ((p0 (($$atom queue-get!)
                                              ($$atom proc-left1))))
                                     (begin
                                       (if (($$atom vector-ref)
                                            ($$atom p0)
                                            ($$atom 2))
                                           (($$atom display)
                                            ($$atom "**** #[primitive ")
                                            ($$atom port1))
                                           (($$atom display)
                                            ($$atom "**** #[procedure ")
                                            ($$atom port1)))
                                       (($$atom display)
                                        (($$atom vector-ref)
                                         ($$atom p0)
                                         ($$atom 1))
                                        ($$atom port1))
                                       (($$atom display)
                                        ($$atom "] =")
                                        ($$atom port1))
                                       (($$atom newline) ($$atom port1))
                                       (letrec ((loop1 (lambda (port2
                                                                scan-opnd2
                                                                l0
                                                                prev-filename0
                                                                prev-line0)
                                                         (if (($$atom pair?)
                                                              ($$atom l0))
                                                             (let ((code0 (($$atom car)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                   ($$atom l0))))
                       (let ((instr0 (($$atom vector-ref)
                                      ($$atom code0)
                                      ($$atom 1))))
                         (let ((src0 (($$atom comment-get)
                                      (($$atom vector-ref)
                                       ($$atom instr0)
                                       ($$atom 2))
                                      ($$atom 'source))))
                           (let ((loc0 (if ($$atom src0)
                                           (($$atom vector-ref)
                                            ($$atom src0)
                                            ($$atom 1))
                                           ($$atom #f))))
                             (let ((filename0
                                    (if (if ($$atom loc0)
                                            (($$atom eq?)
                                             (($$atom vector-ref)
                                              ($$atom loc0)
                                              ($$atom 0))
                                             ($$atom 'file))
                                            ($$atom #f))
                                        (($$atom vector-ref)
                                         ($$atom loc0)
                                         ($$atom 1))
                                        ($$atom prev-filename0))))
                               (let ((line0 (if (if ($$atom loc0)
                                                    (($$atom eq?)
                                                     (($$atom vector-ref)
                                                      ($$atom loc0)
                                                      ($$atom 0))
                                                     ($$atom 'file))
                                                    ($$atom #f))
                                                (($$atom vector-ref)
                                                 ($$atom loc0)
                                                 ($$atom 3))
                                                ($$atom prev-line0))))
                                 (begin
                                   (if (let ((g1370 (($$atom not)
                                                     (($$atom string=?)
                                                      ($$atom filename0)
                                                      ($$atom prev-filename0)))))
                                         (if ($$atom g1370)
                                             ($$atom g1370)
                                             (($$atom not)
                                              (($$atom =)
                                               ($$atom line0)
                                               ($$atom prev-line0)))))
                                       (begin
                                         (($$atom display)
                                          ($$atom "#line ")
                                          ($$atom port2))
                                         (($$atom display)
                                          ($$atom line0)
                                          ($$atom port2))
                                         (if (($$atom string=?)
                                              ($$atom filename0)
                                              ($$atom prev-filename0))
                                             ($$atom #f)
                                             (begin
                                               (($$atom display)
                                                ($$atom " ")
                                                ($$atom port2))
                                               (($$atom write)
                                                ($$atom filename0)
                                                ($$atom port2))))
                                         (($$atom newline) ($$atom port2)))
                                       ($$atom #f))
                                   (let ((gvm-instr0
                                          (($$atom vector-ref)
                                           ($$atom code0)
                                           ($$atom 1))))
                                     (begin
                                       (($$atom write-gvm-instr)
                                        ($$atom gvm-instr0)
                                        ($$atom port2))
                                       (($$atom newline) ($$atom port2))
                                       (let ((case-temp.3050
                                              (($$atom vector-ref)
                                               ($$atom gvm-instr0)
                                               ($$atom 0))))
                                         (if (let ((g1380 ($$atom 'apply)))
                                               (if (($$atom number?)
                                                    ($$atom case-temp.3050))
                                                   (if (($$atom number?)
                                                        ($$atom g1380))
                                                       (($$atom =)
                                                        ($$atom case-temp.3050)
                                                        ($$atom g1380))
                                                       ($$atom #f))
                                                   (($$atom eq?)
                                                    ($$atom case-temp.3050)
                                                    ($$atom g1380))))
                                             (begin
                                               (($$atom for-each)
                                                ($$atom scan-opnd2)
                                                (($$atom vector-ref)
                                                 ($$atom gvm-instr0)
                                                 ($$atom 4)))
                                               (if (($$atom vector-ref)
                                                    ($$atom gvm-instr0)
                                                    ($$atom 5))
                                                   (($$atom scan-opnd2)
                                                    (($$atom vector-ref)
                                                     ($$atom gvm-instr0)
                                                     ($$atom 5)))
                                                   ($$atom #f)))
                                             (if (let ((g1390 ($$atom 'copy)))
                                                   (if (($$atom number?)
                                                        ($$atom case-temp.3050))
                                                       (if (($$atom number?)
                                                            ($$atom g1390))
                                                           (($$atom =)
                                                            ($$atom case-temp.3050)
                                                            ($$atom g1390))
                                                           ($$atom #f))
                                                       (($$atom eq?)
                                                        ($$atom case-temp.3050)
                                                        ($$atom g1390))))
                                                 (begin
                                                   (($$atom scan-opnd2)
                                                    (($$atom vector-ref)
                                                     ($$atom gvm-instr0)
                                                     ($$atom 3)))
                                                   (($$atom scan-opnd2)
                                                    (($$atom vector-ref)
                                                     ($$atom gvm-instr0)
                                                     ($$atom 4))))
                                                 (if (let ((g1400 ($$atom 'close)))
                                                       (if (($$atom number?)
                                                            ($$atom case-temp.3050))
                                                           (if (($$atom number?)
                                                                ($$atom g1400))
                                                               (($$atom =)
                                                                ($$atom case-temp.3050)
                                                                ($$atom g1400))
                                                               ($$atom #f))
                                                           (($$atom eq?)
                                                            ($$atom case-temp.3050)
                                                            ($$atom g1400))))
                                                     (($$atom for-each)
                                                      (lambda (parms0)
                                                        (begin
                                                          (($$atom scan-opnd2)
                                                           (($$atom vector-ref)
                                                            ($$atom parms0)
                                                            ($$atom 0)))
                                                          (($$atom for-each)
                                                           ($$atom scan-opnd2)
                                                           (($$atom vector-ref)
                                                            ($$atom parms0)
                                                            ($$atom 2)))))
                                                      (($$atom vector-ref)
                                                       ($$atom gvm-instr0)
                                                       ($$atom 3)))
                                                     (if (let ((g1410 ($$atom 'ifjump)))
                                                           (if (($$atom number?)
                                                                ($$atom case-temp.3050))
                                                               (if (($$atom number?)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                            ($$atom g1410))
                           (($$atom =) ($$atom case-temp.3050) ($$atom g1410))
                           ($$atom #f))
                       (($$atom eq?) ($$atom case-temp.3050) ($$atom g1410))))
                 (($$atom for-each)
                  ($$atom scan-opnd2)
                  (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 4)))
                 (if (let ((g1420 ($$atom 'jump)))
                       (if (($$atom number?) ($$atom case-temp.3050))
                           (if (($$atom number?) ($$atom g1420))
                               (($$atom =)
                                ($$atom case-temp.3050)
                                ($$atom g1420))
                               ($$atom #f))
                           (($$atom eq?)
                            ($$atom case-temp.3050)
                            ($$atom g1420))))
                     (($$atom scan-opnd2)
                      (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 3)))
                     ($$atom '())))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                   (($$atom loop1)
                                    ($$atom port2)
                                    ($$atom scan-opnd2)
                                    (($$atom cdr) ($$atom l0))
                                    ($$atom filename0)
                                    ($$atom line0)))))))))
                     (($$atom newline) ($$atom port2))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                         (($$atom loop1)
                                          ($$atom port1)
                                          ($$atom scan-opnd1)
                                          (($$atom bbs->code-list)
                                           (($$atom vector-ref)
                                            ($$atom p0)
                                            ($$atom 3)))
                                          ($$atom "")
                                          ($$atom 0)))))
                                   (($$atom loop0)
                                    ($$atom port1)
                                    ($$atom proc-left1)
                                    ($$atom scan-opnd1)))))))
             (($$atom loop0)
              ($$atom port0)
              ($$atom proc-left0)
              ($$atom scan-opnd0))))))))
 (define write-gvm-instr
   (lambda (gvm-instr0 port0)
     (letrec ((spaces0 (lambda (port1 n0)
                         (if (($$atom >) ($$atom n0) ($$atom 0))
                             (if (($$atom >) ($$atom n0) ($$atom 7))
                                 (begin
                                   (($$atom display)
                                    ($$atom "        ")
                                    ($$atom port1))
                                   (($$atom spaces0)
                                    ($$atom port1)
                                    (($$atom -) ($$atom n0) ($$atom 8))))
                                 (begin
                                   (($$atom display)
                                    ($$atom " ")
                                    ($$atom port1))
                                   (($$atom spaces0)
                                    ($$atom port1)
                                    (($$atom -) ($$atom n0) ($$atom 1)))))
                             ($$atom #f))))
              (write-prim-applic0
               (lambda (prim0 opnds0 port1)
                 (begin
                   (($$atom display) ($$atom "(") ($$atom port1))
                   (let ((len0 (($$atom +)
                                ($$atom 1)
                                (let ((obj0 (($$atom proc-obj-name)
                                             ($$atom prim0))))
                                  (begin
                                    (($$atom display)
                                     ($$atom obj0)
                                     ($$atom port1))
                                    ($$atom 1))))))
                     (($$atom +)
                      ($$atom len0)
                      (($$atom write-terminated-opnd-list0)
                       ($$atom opnds0)
                       ($$atom port1)))))))
              (write-param-pattern0
               (lambda (gvm-instr1 port1)
                 (let ((len0 (if (($$atom =)
                                  (($$atom vector-ref)
                                   ($$atom gvm-instr1)
                                   ($$atom 6))
                                  (($$atom vector-ref)
                                   ($$atom gvm-instr1)
                                   ($$atom 5)))
                                 ($$atom 0)
                                 (let ((len0 (let ((obj0 (($$atom label-entry-min)
                                                          ($$atom gvm-instr1))))
                                               (begin
                                                 (($$atom write)
                                                  ($$atom obj0)
                                                  ($$atom port1))
                                                 ($$atom 1)))))
                                   (begin
                                     (($$atom display)
                                      ($$atom "-")
                                      ($$atom port1))
                                     (($$atom +) ($$atom len0) ($$atom 1)))))))
                   (let ((len1 (($$atom +)
                                ($$atom len0)
                                (let ((obj0 (($$atom label-entry-nb-parms)
                                             ($$atom gvm-instr1))))
                                  (begin
                                    (($$atom write)
                                     ($$atom obj0)
                                     ($$atom port1))
                                    ($$atom 1))))))
                     (if (($$atom vector-ref) ($$atom gvm-instr1) ($$atom 7))
                         (begin
                           (($$atom display) ($$atom "+") ($$atom port1))
                           (($$atom +) ($$atom len1) ($$atom 1)))
                         ($$atom len1))))))
              (write-terminated-opnd-list0
               (lambda (l0 port1)
                 (letrec ((loop0 (lambda (port2 l1 len0)
                                   (if (($$atom pair?) ($$atom l1))
                                       (let ((opnd0 (($$atom car)
                                                     ($$atom l1))))
                                         (begin
                                           (($$atom display)
                                            ($$atom " ")
                                            ($$atom port2))
                                           (($$atom loop0)
                                            ($$atom port2)
                                            (($$atom cdr) ($$atom l1))
                                            (($$atom +)
                                             ($$atom len0)
                                             (($$atom +)
                                              ($$atom 1)
                                              (($$atom write-gvm-opnd)
                                               ($$atom opnd0)
                                               ($$atom port2)))))))
                                       (begin
                                         (($$atom display)
                                          ($$atom ")")
                                          ($$atom port2))
                                         (($$atom +)
                                          ($$atom len0)
                                          ($$atom 1)))))))
                   (($$atom loop0) ($$atom port1) ($$atom l0) ($$atom 0)))))
              (write-closure-parms0
               (lambda (port1 parms0)
                 (begin
                   (($$atom display) ($$atom " ") ($$atom port1))
                   (let ((len0 (($$atom +)
                                ($$atom 1)
                                (($$atom write-gvm-opnd)
                                 (($$atom vector-ref)
                                  ($$atom parms0)
                                  ($$atom 0))
                                 ($$atom port1)))))
                     (begin
                       (($$atom display) ($$atom " = (") ($$atom port1))
                       (let ((len1 (($$atom +)
                                    ($$atom len0)
                                    (($$atom +)
                                     ($$atom 4)
                                     (($$atom write-gvm-lbl)
                                      (($$atom vector-ref)
                                       ($$atom parms0)
                                       ($$atom 1))
                                      ($$atom port1))))))
                         (($$atom +)
                          ($$atom len1)
                          (($$atom write-terminated-opnd-list0)
                           (($$atom vector-ref) ($$atom parms0) ($$atom 2))
                           ($$atom port1))))))))))
       (begin
         (let ((len0 (let ((case-temp.3260
                            (($$atom vector-ref)
                             ($$atom gvm-instr0)
                             ($$atom 0))))
                       (if (let ((g1430 ($$atom 'label)))
                             (if (($$atom number?) ($$atom case-temp.3260))
                                 (if (($$atom number?) ($$atom g1430))
                                     (($$atom =)
                                      ($$atom case-temp.3260)
                                      ($$atom g1430))
                                     ($$atom #f))
                                 (($$atom eq?)
                                  ($$atom case-temp.3260)
                                  ($$atom g1430))))
                           (let ((len0 (($$atom write-gvm-lbl)
                                        (($$atom vector-ref)
                                         ($$atom gvm-instr0)
                                         ($$atom 3))
                                        ($$atom port0))))
                             (begin
                               (($$atom display) ($$atom " ") ($$atom port0))
                               (let ((len1 (($$atom +)
                                            ($$atom len0)
                                            (($$atom +)
                                             ($$atom 1)
                                             (let ((obj0 (let ((x0 (($$atom vector-ref)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                            ($$atom gvm-instr0)
                            ($$atom 1))))
                   (($$atom vector-ref) ($$atom x0) ($$atom 0)))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                               (begin
                                                 (($$atom write)
                                                  ($$atom obj0)
                                                  ($$atom port0))
                                                 ($$atom 1)))))))
                                 (let ((case-temp.3270
                                        (($$atom vector-ref)
                                         ($$atom gvm-instr0)
                                         ($$atom 4))))
                                   (if (let ((g1440 ($$atom 'simple)))
                                         (if (($$atom number?)
                                              ($$atom case-temp.3270))
                                             (if (($$atom number?)
                                                  ($$atom g1440))
                                                 (($$atom =)
                                                  ($$atom case-temp.3270)
                                                  ($$atom g1440))
                                                 ($$atom #f))
                                             (($$atom eq?)
                                              ($$atom case-temp.3270)
                                              ($$atom g1440))))
                                       ($$atom len1)
                                       (if (let ((g1450 ($$atom 'entry)))
                                             (if (($$atom number?)
                                                  ($$atom case-temp.3270))
                                                 (if (($$atom number?)
                                                      ($$atom g1450))
                                                     (($$atom =)
                                                      ($$atom case-temp.3270)
                                                      ($$atom g1450))
                                                     ($$atom #f))
                                                 (($$atom eq?)
                                                  ($$atom case-temp.3270)
                                                  ($$atom g1450))))
                                           (if (($$atom vector-ref)
                                                ($$atom gvm-instr0)
                                                ($$atom 8))
                                               (begin
                                                 (($$atom display)
                                                  ($$atom " closure-entry-point ")
                                                  ($$atom port0))
                                                 (($$atom +)
                                                  ($$atom len1)
                                                  (($$atom +)
                                                   ($$atom 21)
                                                   (($$atom write-param-pattern0)
                                                    ($$atom gvm-instr0)
                                                    ($$atom port0)))))
                                               (begin
                                                 (($$atom display)
                                                  ($$atom " entry-point ")
                                                  ($$atom port0))
                                                 (($$atom +)
                                                  ($$atom len1)
                                                  (($$atom +)
                                                   ($$atom 13)
                                                   (($$atom write-param-pattern0)
                                                    ($$atom gvm-instr0)
                                                    ($$atom port0))))))
                                           (if (let ((g1460 ($$atom 'return)))
                                                 (if (($$atom number?)
                                                      ($$atom case-temp.3270))
                                                     (if (($$atom number?)
                                                          ($$atom g1460))
                                                         (($$atom =)
                                                          ($$atom case-temp.3270)
                                                          ($$atom g1460))
                                                         ($$atom #f))
                                                     (($$atom eq?)
                                                      ($$atom case-temp.3270)
                                                      ($$atom g1460))))
                                               (begin
                                                 (($$atom display)
                                                  ($$atom " return-point")
                                                  ($$atom port0))
                                                 (($$atom +)
                                                  ($$atom len1)
                                                  ($$atom 13)))
                                               (if (let ((g1470 ($$atom 'task-entry)))
                                                     (if (($$atom number?)
                                                          ($$atom case-temp.3270))
                                                         (if (($$atom number?)
                                                              ($$atom g1470))
                                                             (($$atom =)
                                                              ($$atom case-temp.3270)
                                                              ($$atom g1470))
                                                             ($$atom #f))
                                                         (($$atom eq?)
                                                          ($$atom case-temp.3270)
                                                          ($$atom g1470))))
                                                   (begin
                                                     (($$atom display)
                                                      ($$atom " task-entry-point")
                                                      ($$atom port0))
                                                     (($$atom +)
                                                      ($$atom len1)
                                                      ($$atom 17)))
                                                   (if (let ((g1480 ($$atom 'task-return)))
                                                         (if (($$atom number?)
                                                              ($$atom case-temp.3270))
                                                             (if (($$atom number?)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                          ($$atom g1480))
                         (($$atom =) ($$atom case-temp.3270) ($$atom g1480))
                         ($$atom #f))
                     (($$atom eq?) ($$atom case-temp.3270) ($$atom g1480))))
               (begin
                 (($$atom display)
                  ($$atom " task-return-point")
                  ($$atom port0))
                 (($$atom +) ($$atom len1) ($$atom 18)))
               (($$atom compiler-internal-error)
                ($$atom "write-gvm-instr, unknown label type")))))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                           (if (let ((g1490 ($$atom 'apply)))
                                 (if (($$atom number?) ($$atom case-temp.3260))
                                     (if (($$atom number?) ($$atom g1490))
                                         (($$atom =)
                                          ($$atom case-temp.3260)
                                          ($$atom g1490))
                                         ($$atom #f))
                                     (($$atom eq?)
                                      ($$atom case-temp.3260)
                                      ($$atom g1490))))
                               (begin
                                 (($$atom display)
                                  ($$atom "  ")
                                  ($$atom port0))
                                 (let ((len0 (($$atom +)
                                              ($$atom 2)
                                              (if (($$atom vector-ref)
                                                   ($$atom gvm-instr0)
                                                   ($$atom 5))
                                                  (let ((len0 (($$atom write-gvm-opnd)
                                                               (($$atom vector-ref)
                                                                ($$atom gvm-instr0)
                                                                ($$atom 5))
                                                               ($$atom port0))))
                                                    (begin
                                                      (($$atom display)
                                                       ($$atom " = ")
                                                       ($$atom port0))
                                                      (($$atom +)
                                                       ($$atom len0)
                                                       ($$atom 3))))
                                                  ($$atom 0)))))
                                   (($$atom +)
                                    ($$atom len0)
                                    (($$atom write-prim-applic0)
                                     (($$atom vector-ref)
                                      ($$atom gvm-instr0)
                                      ($$atom 3))
                                     (($$atom vector-ref)
                                      ($$atom gvm-instr0)
                                      ($$atom 4))
                                     ($$atom port0)))))
                               (if (let ((g1500 ($$atom 'copy)))
                                     (if (($$atom number?)
                                          ($$atom case-temp.3260))
                                         (if (($$atom number?) ($$atom g1500))
                                             (($$atom =)
                                              ($$atom case-temp.3260)
                                              ($$atom g1500))
                                             ($$atom #f))
                                         (($$atom eq?)
                                          ($$atom case-temp.3260)
                                          ($$atom g1500))))
                                   (begin
                                     (($$atom display)
                                      ($$atom "  ")
                                      ($$atom port0))
                                     (let ((len0 (($$atom +)
                                                  ($$atom 2)
                                                  (($$atom write-gvm-opnd)
                                                   (($$atom vector-ref)
                                                    ($$atom gvm-instr0)
                                                    ($$atom 4))
                                                   ($$atom port0)))))
                                       (begin
                                         (($$atom display)
                                          ($$atom " = ")
                                          ($$atom port0))
                                         (($$atom +)
                                          ($$atom len0)
                                          (($$atom +)
                                           ($$atom 3)
                                           (($$atom write-gvm-opnd)
                                            (($$atom vector-ref)
                                             ($$atom gvm-instr0)
                                             ($$atom 3))
                                            ($$atom port0)))))))
                                   (if (let ((g1510 ($$atom 'close)))
                                         (if (($$atom number?)
                                              ($$atom case-temp.3260))
                                             (if (($$atom number?)
                                                  ($$atom g1510))
                                                 (($$atom =)
                                                  ($$atom case-temp.3260)
                                                  ($$atom g1510))
                                                 ($$atom #f))
                                             (($$atom eq?)
                                              ($$atom case-temp.3260)
                                              ($$atom g1510))))
                                       (begin
                                         (($$atom display)
                                          ($$atom "  close")
                                          ($$atom port0))
                                         (let ((len0 (($$atom +)
                                                      ($$atom 7)
                                                      (($$atom write-closure-parms0)
                                                       ($$atom port0)
                                                       (($$atom car)
                                                        (($$atom vector-ref)
                                                         ($$atom gvm-instr0)
                                                         ($$atom 3)))))))
                                           (letrec ((loop0 (lambda (port1
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                            l0
                            len1)
                     (if (($$atom pair?) ($$atom l0))
                         (let ((x0 (($$atom car) ($$atom l0))))
                           (begin
                             (($$atom display) ($$atom ",") ($$atom port1))
                             (($$atom loop0)
                              ($$atom port1)
                              (($$atom cdr) ($$atom l0))
                              (($$atom +)
                               ($$atom len1)
                               (($$atom +)
                                ($$atom 1)
                                (($$atom write-closure-parms0)
                                 ($$atom port1)
                                 ($$atom x0)))))))
                         ($$atom len1)))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                             (($$atom loop0)
                                              ($$atom port0)
                                              (($$atom cdr)
                                               (($$atom vector-ref)
                                                ($$atom gvm-instr0)
                                                ($$atom 3)))
                                              ($$atom len0)))))
                                       (if (let ((g1520 ($$atom 'ifjump)))
                                             (if (($$atom number?)
                                                  ($$atom case-temp.3260))
                                                 (if (($$atom number?)
                                                      ($$atom g1520))
                                                     (($$atom =)
                                                      ($$atom case-temp.3260)
                                                      ($$atom g1520))
                                                     ($$atom #f))
                                                 (($$atom eq?)
                                                  ($$atom case-temp.3260)
                                                  ($$atom g1520))))
                                           (begin
                                             (($$atom display)
                                              ($$atom "  if ")
                                              ($$atom port0))
                                             (let ((len0 (($$atom +)
                                                          ($$atom 5)
                                                          (($$atom write-prim-applic0)
                                                           (($$atom vector-ref)
                                                            ($$atom gvm-instr0)
                                                            ($$atom 3))
                                                           (($$atom vector-ref)
                                                            ($$atom gvm-instr0)
                                                            ($$atom 4))
                                                           ($$atom port0)))))
                                               (let ((len1 (($$atom +)
                                                            ($$atom len0)
                                                            (if (($$atom vector-ref)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                         ($$atom gvm-instr0)
                         ($$atom 7))
                        (begin
                          (($$atom display) ($$atom " jump* ") ($$atom port0))
                          ($$atom 7))
                        (begin
                          (($$atom display) ($$atom " jump ") ($$atom port0))
                          ($$atom 6))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                 (let ((len2 (($$atom +)
                                                              ($$atom len1)
                                                              (let ((obj0 (let ((x0 (($$atom vector-ref)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                             ($$atom gvm-instr0)
                                             ($$atom 1))))
                                    (($$atom vector-ref)
                                     ($$atom x0)
                                     ($$atom 0)))))
                        (begin
                          (($$atom write) ($$atom obj0) ($$atom port0))
                          ($$atom 1))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                   (begin
                                                     (($$atom display)
                                                      ($$atom " ")
                                                      ($$atom port0))
                                                     (let ((len3 (($$atom +)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                          ($$atom len2)
                          (($$atom +)
                           ($$atom 1)
                           (($$atom write-gvm-lbl)
                            (($$atom vector-ref)
                             ($$atom gvm-instr0)
                             ($$atom 5))
                            ($$atom port0))))))
               (begin
                 (($$atom display) ($$atom " else ") ($$atom port0))
                 (($$atom +)
                  ($$atom len3)
                  (($$atom +)
                   ($$atom 6)
                   (($$atom write-gvm-lbl)
                    (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 6))
                    ($$atom port0)))))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                           (if (let ((g1530 ($$atom 'jump)))
                                                 (if (($$atom number?)
                                                      ($$atom case-temp.3260))
                                                     (if (($$atom number?)
                                                          ($$atom g1530))
                                                         (($$atom =)
                                                          ($$atom case-temp.3260)
                                                          ($$atom g1530))
                                                         ($$atom #f))
                                                     (($$atom eq?)
                                                      ($$atom case-temp.3260)
                                                      ($$atom g1530))))
                                               (begin
                                                 (($$atom display)
                                                  ($$atom "  ")
                                                  ($$atom port0))
                                                 (let ((len0 (($$atom +)
                                                              ($$atom 2)
                                                              (if (($$atom vector-ref)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                           ($$atom gvm-instr0)
                           ($$atom 5))
                          (begin
                            (($$atom display) ($$atom "jump* ") ($$atom port0))
                            ($$atom 6))
                          (begin
                            (($$atom display) ($$atom "jump ") ($$atom port0))
                            ($$atom 5))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                   (let ((len1 (($$atom +)
                                                                ($$atom len0)
                                                                (let ((obj0 (let ((x0 (($$atom vector-ref)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                               ($$atom gvm-instr0)
                                               ($$atom 1))))
                                      (($$atom vector-ref)
                                       ($$atom x0)
                                       ($$atom 0)))))
                          (begin
                            (($$atom write) ($$atom obj0) ($$atom port0))
                            ($$atom 1))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                     (begin
                                                       (($$atom display)
                                                        ($$atom " ")
                                                        ($$atom port0))
                                                       (let ((len2 (($$atom +)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                            ($$atom len1)
                            (($$atom +)
                             ($$atom 1)
                             (($$atom write-gvm-opnd)
                              (($$atom vector-ref)
                               ($$atom gvm-instr0)
                               ($$atom 3))
                              ($$atom port0))))))
                 (($$atom +)
                  ($$atom len2)
                  (if (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 4))
                      (begin
                        (($$atom display) ($$atom " ") ($$atom port0))
                        (($$atom +)
                         ($$atom 1)
                         (let ((obj0 (($$atom vector-ref)
                                      ($$atom gvm-instr0)
                                      ($$atom 4))))
                           (begin
                             (($$atom write) ($$atom obj0) ($$atom port0))
                             ($$atom 1)))))
                      ($$atom 0))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                               (($$atom compiler-internal-error)
                                                ($$atom "write-gvm-instr, unknown 'gvm-instr':")
                                                ($$atom gvm-instr0)))))))))))
           (begin
             (($$atom spaces0)
              ($$atom port0)
              (($$atom -) ($$atom 40) ($$atom len0)))
             (($$atom display) ($$atom " ") ($$atom port0))
             (($$atom write-frame)
              (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 1))
              ($$atom port0))))
         (let ((x0 (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 2))))
           (if ($$atom x0)
               (let ((y0 (($$atom comment-get) ($$atom x0) ($$atom 'text))))
                 (if ($$atom y0)
                     (begin
                       (($$atom display) ($$atom " ; ") ($$atom port0))
                       (($$atom display) ($$atom y0) ($$atom port0)))
                     ($$atom #f)))
               ($$atom #f)))))))
 (define write-frame
   (lambda (frame0 port0)
     (let ((live?0 (lambda (frame1 var0)
                     (let ((live0 (($$atom vector-ref)
                                   ($$atom frame1)
                                   ($$atom 4))))
                       (let ((g1540 (($$atom memq)
                                     ($$atom var0)
                                     ($$atom live0))))
                         (if ($$atom g1540)
                             ($$atom g1540)
                             (if (($$atom eq?)
                                  ($$atom var0)
                                  ($$atom closure-env-var))
                                 (($$atom not)
                                  (let ((set0 (($$atom set-intersection)
                                               ($$atom live0)
                                               (let ((list0 (($$atom vector-ref)
                                                             ($$atom frame1)
                                                             ($$atom 3))))
                                                 ($$atom list0)))))
                                    (($$atom null?) ($$atom set0))))
                                 ($$atom #f)))))))
           (write-var0
            (lambda (frame1 port1 var0 opnd0 sep0)
              (begin
                (($$atom display) ($$atom sep0) ($$atom port1))
                (($$atom write-gvm-opnd) ($$atom opnd0) ($$atom port1))
                (if ($$atom var0)
                    (begin
                      (($$atom display) ($$atom "=") ($$atom port1))
                      (if (($$atom eq?) ($$atom var0) ($$atom closure-env-var))
                          (($$atom write)
                           (($$atom map)
                            (lambda (var1)
                              (($$atom vector-ref) ($$atom var1) ($$atom 1)))
                            (($$atom vector-ref) ($$atom frame1) ($$atom 3)))
                           ($$atom port1))
                          (if (($$atom eq?) ($$atom var0) ($$atom ret-var))
                              (($$atom display) ($$atom "#") ($$atom port1))
                              (if (($$atom temp-var?) ($$atom var0))
                                  (($$atom display)
                                   ($$atom ".")
                                   ($$atom port1))
                                  (($$atom write)
                                   (($$atom vector-ref)
                                    ($$atom var0)
                                    ($$atom 1))
                                   ($$atom port1))))))
                    ($$atom #f))))))
       (letrec ((loop10 (lambda (frame1 port1 i0 l0 sep0)
                          (if (($$atom pair?) ($$atom l0))
                              (let ((var0 (($$atom car) ($$atom l0))))
                                (begin
                                  (($$atom write-var0)
                                   ($$atom frame1)
                                   ($$atom port1)
                                   (if (($$atom live?0)
                                        ($$atom frame1)
                                        ($$atom var0))
                                       ($$atom var0)
                                       ($$atom #f))
                                   (($$atom +) ($$atom i0) ($$atom 10000))
                                   ($$atom sep0))
                                  (($$atom loop10)
                                   ($$atom frame1)
                                   ($$atom port1)
                                   (($$atom +) ($$atom i0) ($$atom 1))
                                   (($$atom cdr) ($$atom l0))
                                   ($$atom " "))))
                              (letrec ((loop20 (lambda (frame2
                                                        port2
                                                        i1
                                                        l1
                                                        sep1)
                                                 (if (($$atom pair?)
                                                      ($$atom l1))
                                                     (let ((var0 (($$atom car)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                          ($$atom l1))))
               (if (($$atom live?0) ($$atom frame2) ($$atom var0))
                   (begin
                     (($$atom write-var0)
                      ($$atom frame2)
                      ($$atom port2)
                      ($$atom var0)
                      ($$atom i1)
                      ($$atom sep1))
                     (($$atom loop20)
                      ($$atom frame2)
                      ($$atom port2)
                      (($$atom +) ($$atom i1) ($$atom 1))
                      (($$atom cdr) ($$atom l1))
                      ($$atom " ")))
                   (($$atom loop20)
                    ($$atom frame2)
                    ($$atom port2)
                    (($$atom +) ($$atom i1) ($$atom 1))
                    (($$atom cdr) ($$atom l1))
                    ($$atom sep1))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                     ($$atom #f)))))
                                (($$atom loop20)
                                 ($$atom frame1)
                                 ($$atom port1)
                                 ($$atom 0)
                                 (($$atom vector-ref)
                                  ($$atom frame1)
                                  ($$atom 2))
                                 ($$atom sep0)))))))
         (($$atom loop10)
          ($$atom frame0)
          ($$atom port0)
          ($$atom 1)
          (($$atom reverse) (($$atom vector-ref) ($$atom frame0) ($$atom 1)))
          ($$atom "; "))))))
 (define write-gvm-opnd
   (lambda (gvm-opnd0 port0)
     (if (($$atom <) ($$atom gvm-opnd0) ($$atom 10000))
         (begin
           (($$atom display) ($$atom "+") ($$atom port0))
           (($$atom +)
            ($$atom 1)
            (let ((obj0 (($$atom modulo) ($$atom gvm-opnd0) ($$atom 10000))))
              (begin
                (($$atom write) ($$atom obj0) ($$atom port0))
                ($$atom 1)))))
         (if (($$atom stk?) ($$atom gvm-opnd0))
             (begin
               (($$atom display) ($$atom "-") ($$atom port0))
               (($$atom +)
                ($$atom 1)
                (let ((obj0 (($$atom modulo)
                             ($$atom gvm-opnd0)
                             ($$atom 10000))))
                  (begin
                    (($$atom write) ($$atom obj0) ($$atom port0))
                    ($$atom 1)))))
             (if (($$atom glo?) ($$atom gvm-opnd0))
                 (let ((obj0 (($$atom glo-name) ($$atom gvm-opnd0))))
                   (begin
                     (($$atom write) ($$atom obj0) ($$atom port0))
                     ($$atom 1)))
                 (if (($$atom clo?) ($$atom gvm-opnd0))
                     (let ((len0 (($$atom write-gvm-opnd)
                                  (($$atom clo-base) ($$atom gvm-opnd0))
                                  ($$atom port0))))
                       (begin
                         (($$atom display) ($$atom "(") ($$atom port0))
                         (let ((len1 (($$atom +)
                                      ($$atom len0)
                                      (($$atom +)
                                       ($$atom 1)
                                       (let ((obj0 (($$atom clo-index)
                                                    ($$atom gvm-opnd0))))
                                         (begin
                                           (($$atom write)
                                            ($$atom obj0)
                                            ($$atom port0))
                                           ($$atom 1)))))))
                           (begin
                             (($$atom display) ($$atom ")") ($$atom port0))
                             (($$atom +) ($$atom len1) ($$atom 1))))))
                     (if (($$atom lbl?) ($$atom gvm-opnd0))
                         (($$atom write-gvm-lbl)
                          (($$atom modulo) ($$atom gvm-opnd0) ($$atom 10000))
                          ($$atom port0))
                         (if (($$atom obj?) ($$atom gvm-opnd0))
                             (begin
                               (($$atom display) ($$atom "'") ($$atom port0))
                               (($$atom +)
                                (($$atom write-gvm-obj)
                                 (($$atom obj-val) ($$atom gvm-opnd0))
                                 ($$atom port0))
                                ($$atom 1)))
                             (($$atom compiler-internal-error)
                              ($$atom "write-gvm-opnd, unknown 'gvm-opnd':")
                              ($$atom gvm-opnd0))))))))))
 (define write-gvm-lbl
   (lambda (lbl0 port0)
     (begin
       (($$atom display) ($$atom "#") ($$atom port0))
       (($$atom +)
        (($$atom write-returning-len) ($$atom lbl0) ($$atom port0))
        ($$atom 1)))))
 (define write-gvm-obj
   (lambda (val0 port0)
     (if (($$atom eq?) ($$atom val0) ($$atom #f))
         (begin (($$atom display) ($$atom "#f") ($$atom port0)) ($$atom 2))
         (if (($$atom eq?) ($$atom val0) ($$atom '|#[undefined]|))
             (begin
               (($$atom display) ($$atom "#[undefined]") ($$atom port0))
               ($$atom 12))
             (if (($$atom proc-obj?) ($$atom val0))
                 (begin
                   (if (($$atom vector-ref) ($$atom val0) ($$atom 2))
                       (($$atom display)
                        ($$atom "#[primitive ")
                        ($$atom port0))
                       (($$atom display)
                        ($$atom "#[procedure ")
                        ($$atom port0)))
                   (let ((len0 (let ((obj0 (($$atom proc-obj-name)
                                            ($$atom val0))))
                                 (begin
                                   (($$atom display)
                                    ($$atom obj0)
                                    ($$atom port0))
                                   ($$atom 1)))))
                     (begin
                       (($$atom display) ($$atom "]") ($$atom port0))
                       (($$atom +) ($$atom len0) ($$atom 13)))))
                 (($$atom write-returning-len)
                  ($$atom val0)
                  ($$atom port0)))))))
 (define virtual.begin!
   (lambda ()
     (begin
       (set! *opnd-table* (($$atom make-vector) ($$atom 10000)))
       (set! *opnd-table-alloc* ($$atom 0))
       ($$atom '()))))
 (define virtual.end!
   (lambda () (begin (set! *opnd-table* ($$atom '())) ($$atom '()))))
 (define make-target
   (lambda (version0 name0)
     (begin
       (if (($$atom =) ($$atom version0) ($$atom 4))
           ($$atom #f)
           (($$atom compiler-internal-error)
            ($$atom "make-target, version of target package is not current")
            ($$atom name0)))
       (let ((x0 (($$atom make-vector) ($$atom 11))))
         (begin
           (($$atom vector-set!) ($$atom x0) ($$atom 1) ($$atom name0))
           ($$atom x0))))))
 (define target-name
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 1))))
 (define target-begin!
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 2))))
 (define target-begin!-set!
   (lambda (x0 y0) (($$atom vector-set!) ($$atom x0) ($$atom 2) ($$atom y0))))
 (define target-end!
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 3))))
 (define target-end!-set!
   (lambda (x0 y0) (($$atom vector-set!) ($$atom x0) ($$atom 3) ($$atom y0))))
 (define target-dump
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 4))))
 (define target-dump-set!
   (lambda (x0 y0) (($$atom vector-set!) ($$atom x0) ($$atom 4) ($$atom y0))))
 (define target-nb-regs
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 5))))
 (define target-nb-regs-set!
   (lambda (x0 y0) (($$atom vector-set!) ($$atom x0) ($$atom 5) ($$atom y0))))
 (define target-prim-info
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 6))))
 (define target-prim-info-set!
   (lambda (x0 y0) (($$atom vector-set!) ($$atom x0) ($$atom 6) ($$atom y0))))
 (define target-label-info
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 7))))
 (define target-label-info-set!
   (lambda (x0 y0) (($$atom vector-set!) ($$atom x0) ($$atom 7) ($$atom y0))))
 (define target-jump-info
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 8))))
 (define target-jump-info-set!
   (lambda (x0 y0) (($$atom vector-set!) ($$atom x0) ($$atom 8) ($$atom y0))))
 (define target-proc-result
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 9))))
 (define target-proc-result-set!
   (lambda (x0 y0) (($$atom vector-set!) ($$atom x0) ($$atom 9) ($$atom y0))))
 (define target-task-return
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 10))))
 (define target-task-return-set!
   (lambda (x0 y0) (($$atom vector-set!) ($$atom x0) ($$atom 10) ($$atom y0))))
 (define targets-loaded ($$atom '()))
 (define get-target
   (lambda (name0)
     (let ((x0 (($$atom assq) ($$atom name0) ($$atom targets-loaded))))
       (if ($$atom x0)
           (($$atom cdr) ($$atom x0))
           (($$atom compiler-error)
            ($$atom "Target package is not available")
            ($$atom name0))))))
 (define put-target
   (lambda (targ0)
     (let ((name0 (($$atom vector-ref) ($$atom targ0) ($$atom 1))))
       (let ((x0 (($$atom assq) ($$atom name0) ($$atom targets-loaded))))
         (begin
           (if ($$atom x0)
               (($$atom set-cdr!) ($$atom x0) ($$atom targ0))
               (set! targets-loaded
                     (($$atom cons)
                      (($$atom cons) ($$atom name0) ($$atom targ0))
                      ($$atom targets-loaded))))
           ($$atom '()))))))
 (define default-target
   (lambda ()
     (if (($$atom null?) ($$atom targets-loaded))
         (($$atom compiler-error) ($$atom "No target package is available"))
         (($$atom car) (($$atom car) ($$atom targets-loaded))))))
 (define select-target!
   (lambda (name0 info-port0)
     (begin
       (set! target (($$atom get-target) ($$atom name0)))
       ((let ((x0 ($$atom target)))
          (($$atom vector-ref) ($$atom x0) ($$atom 2)))
        ($$atom info-port0))
       (set! target.dump
             (let ((x0 ($$atom target)))
               (($$atom vector-ref) ($$atom x0) ($$atom 4))))
       (set! target.nb-regs
             (let ((x0 ($$atom target)))
               (($$atom vector-ref) ($$atom x0) ($$atom 5))))
       (set! target.prim-info
             (let ((x0 ($$atom target)))
               (($$atom vector-ref) ($$atom x0) ($$atom 6))))
       (set! target.label-info
             (let ((x0 ($$atom target)))
               (($$atom vector-ref) ($$atom x0) ($$atom 7))))
       (set! target.jump-info
             (let ((x0 ($$atom target)))
               (($$atom vector-ref) ($$atom x0) ($$atom 8))))
       (set! target.proc-result
             (let ((x0 ($$atom target)))
               (($$atom vector-ref) ($$atom x0) ($$atom 9))))
       (set! target.task-return
             (let ((x0 ($$atom target)))
               (($$atom vector-ref) ($$atom x0) ($$atom 10))))
       (set! **not-proc-obj (($$atom target.prim-info) ($$atom **not-sym)))
       ($$atom '()))))
 (define unselect-target!
   (lambda ()
     (begin
       ((let ((x0 ($$atom target)))
          (($$atom vector-ref) ($$atom x0) ($$atom 3))))
       ($$atom '()))))
 (define target ($$atom '()))
 (define target.dump ($$atom '()))
 (define target.nb-regs ($$atom '()))
 (define target.prim-info ($$atom '()))
 (define target.label-info ($$atom '()))
 (define target.jump-info ($$atom '()))
 (define target.proc-result ($$atom '()))
 (define target.task-return ($$atom '()))
 (define **not-proc-obj ($$atom '()))
 (define target.specialized-prim-info*
   (lambda (name0 decl0)
     (let ((x0 (($$atom target.prim-info*) ($$atom name0) ($$atom decl0))))
       (if ($$atom x0)
           ((($$atom vector-ref) ($$atom x0) ($$atom 7)) ($$atom decl0))
           ($$atom #f)))))
 (define target.prim-info*
   (lambda (name0 decl0)
     (if (if (($$atom standard-procedure) ($$atom name0) ($$atom decl0))
             (($$atom standard-binding?) ($$atom name0) ($$atom decl0))
             (($$atom extended-binding?) ($$atom name0) ($$atom decl0)))
         (($$atom target.prim-info) ($$atom name0))
         ($$atom #f))))
 (define generic-sym (($$atom string->canonical-symbol) ($$atom "GENERIC")))
 (define fixnum-sym (($$atom string->canonical-symbol) ($$atom "FIXNUM")))
 (define flonum-sym (($$atom string->canonical-symbol) ($$atom "FLONUM")))
 (($$atom define-namable-decl) ($$atom generic-sym) ($$atom 'arith))
 (($$atom define-namable-decl) ($$atom fixnum-sym) ($$atom 'arith))
 (($$atom define-namable-decl) ($$atom flonum-sym) ($$atom 'arith))
 (define arith-implementation
   (lambda (name0 decls0)
     (($$atom declaration-value)
      ($$atom 'arith)
      ($$atom name0)
      ($$atom generic-sym)
      ($$atom decls0))))
 (define cf
   (lambda (source0 target-name0 . opts0)
     (let ((dest0 (($$atom file-root) ($$atom source0))))
       (let ((module-name0 (($$atom file-name) ($$atom dest0))))
         (let ((info-port0
                (if (($$atom memq) ($$atom 'verbose) ($$atom opts0))
                    (($$atom current-output-port))
                    ($$atom #f))))
           (let ((result0 (($$atom compile-program)
                           (($$atom list)
                            ($$atom **include-sym)
                            ($$atom source0))
                           (if ($$atom target-name0)
                               ($$atom target-name0)
                               (($$atom default-target)))
                           ($$atom opts0)
                           ($$atom module-name0)
                           ($$atom dest0)
                           ($$atom info-port0))))
             (begin
               (if (if ($$atom info-port0)
                       (($$atom not)
                        (($$atom eq?)
                         ($$atom info-port0)
                         (($$atom current-output-port))))
                       ($$atom #f))
                   (($$atom close-output-port) ($$atom info-port0))
                   ($$atom #f))
               ($$atom result0))))))))
 (define ce
   (lambda (source0 target-name0 . opts0)
     (let ((info-port0
            (if (($$atom memq) ($$atom 'verbose) ($$atom opts0))
                (($$atom current-output-port))
                ($$atom #f))))
       (let ((result0 (($$atom compile-program)
                       ($$atom source0)
                       (if ($$atom target-name0)
                           ($$atom target-name0)
                           (($$atom default-target)))
                       ($$atom opts0)
                       ($$atom "program")
                       ($$atom "program")
                       ($$atom info-port0))))
         (begin
           (if (if ($$atom info-port0)
                   (($$atom not)
                    (($$atom eq?)
                     ($$atom info-port0)
                     (($$atom current-output-port))))
                   ($$atom #f))
               (($$atom close-output-port) ($$atom info-port0))
               ($$atom #f))
           ($$atom result0))))))
 (define wrap-program ($$atom #f))
 (set! wrap-program (lambda (program0) ($$atom program0)))
 (define compile-program
   (lambda (program0 target-name0 opts0 module-name0 dest0 info-port0)
     (let ((compiler-body0
            (lambda ()
              (if (($$atom valid-module-name?) ($$atom module-name0))
                  (begin
                    (($$atom ptree.begin!) ($$atom info-port0))
                    (($$atom virtual.begin!))
                    (($$atom select-target!)
                     ($$atom target-name0)
                     ($$atom info-port0))
                    (($$atom parse-program)
                     (($$atom list)
                      (($$atom expression->source)
                       (($$atom wrap-program) ($$atom program0))
                       ($$atom #f)))
                     (($$atom make-global-environment))
                     ($$atom module-name0)
                     (lambda (lst0 env0 c-intf0)
                       (let ((parsed-program0
                              (($$atom map)
                               (lambda (x0)
                                 (($$atom normalize-parse-tree)
                                  (($$atom car) ($$atom x0))
                                  (($$atom cdr) ($$atom x0))))
                               ($$atom lst0))))
                         (begin
                           (if (($$atom memq)
                                ($$atom 'expansion)
                                ($$atom opts0))
                               (let ((port0 (($$atom current-output-port))))
                                 (begin
                                   (($$atom display)
                                    ($$atom "Expansion:")
                                    ($$atom port0))
                                   (($$atom newline) ($$atom port0))
                                   (letrec ((loop0 (lambda (port1 l0)
                                                     (if (($$atom pair?)
                                                          ($$atom l0))
                                                         (let ((ptree0 (($$atom car)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                ($$atom l0))))
                   (begin
                     (($$atom pp-expression)
                      (($$atom parse-tree->expression) ($$atom ptree0))
                      ($$atom port1))
                     (($$atom loop0)
                      ($$atom port1)
                      (($$atom cdr) ($$atom l0)))))
                 ($$atom #f)))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                     (($$atom loop0)
                                      ($$atom port0)
                                      ($$atom parsed-program0)))
                                   (($$atom newline) ($$atom port0))))
                               ($$atom #f))
                           (let ((module-init-proc0
                                  (($$atom compile-parsed-program)
                                   ($$atom module-name0)
                                   ($$atom parsed-program0)
                                   ($$atom env0)
                                   ($$atom c-intf0)
                                   ($$atom info-port0))))
                             (begin
                               (if (($$atom memq)
                                    ($$atom 'report)
                                    ($$atom opts0))
                                   (($$atom generate-report) ($$atom env0))
                                   ($$atom #f))
                               (if (($$atom memq) ($$atom 'gvm) ($$atom opts0))
                                   (let ((gvm-port0
                                          (($$atom open-output-file)
                                           (($$atom string-append)
                                            ($$atom dest0)
                                            ($$atom ".gvm")))))
                                     (begin
                                       (($$atom virtual.dump)
                                        ($$atom module-init-proc0)
                                        ($$atom gvm-port0))
                                       (($$atom close-output-port)
                                        ($$atom gvm-port0))))
                                   ($$atom #f))
                               (($$atom target.dump)
                                ($$atom module-init-proc0)
                                ($$atom dest0)
                                ($$atom c-intf0)
                                ($$atom opts0))
                               (($$atom dump-c-intf)
                                ($$atom module-init-proc0)
                                ($$atom dest0)
                                ($$atom c-intf0))))))))
                    (($$atom unselect-target!))
                    (($$atom virtual.end!))
                    ($$atom #t))
                  (($$atom compiler-error)
                   ($$atom "Invalid characters in file name (must be a symbol with no \"#\")"))))))
       (let ((successful0
              (($$atom with-exception-handling) ($$atom compiler-body0))))
         (begin
           (if ($$atom info-port0)
               (if ($$atom successful0)
                   (begin
                     (($$atom display)
                      ($$atom "Compilation finished.")
                      ($$atom info-port0))
                     (($$atom newline) ($$atom info-port0)))
                   (begin
                     (($$atom display)
                      ($$atom "Compilation terminated abnormally.")
                      ($$atom info-port0))
                     (($$atom newline) ($$atom info-port0))))
               ($$atom #f))
           ($$atom successful0))))))
 (define valid-module-name?
   (lambda (module-name0)
     (let ((n0 (($$atom string-length) ($$atom module-name0))))
       (if (($$atom >) ($$atom n0) ($$atom 0))
           (if (($$atom string=?) ($$atom module-name0) ($$atom "."))
               ($$atom #f)
               (if (($$atom string->number) ($$atom module-name0) ($$atom 10))
                   ($$atom #f)
                   (letrec ((loop0 (lambda (module-name1 n1 i0)
                                     (if (($$atom <) ($$atom i0) ($$atom n1))
                                         (if (let ((c0 (($$atom string-ref)
                                                        ($$atom module-name1)
                                                        ($$atom i0))))
                                               (if (($$atom memv)
                                                    ($$atom c0)
                                                    ($$atom '(#\#
                                                              #\;
                                                              #\(
                                                              #\)
                                                              #\space
                                                              #\[
                                                              #\]
                                                              #\{
                                                              #\}
                                                              #\"
                                                              #\'
                                                              #\`
                                                              #\,)))
                                                   ($$atom #f)
                                                   (($$atom not)
                                                    (($$atom char-whitespace?)
                                                     ($$atom c0)))))
                                             (($$atom loop0)
                                              ($$atom module-name1)
                                              ($$atom n1)
                                              (($$atom +)
                                               ($$atom i0)
                                               ($$atom 1)))
                                             ($$atom #f))
                                         ($$atom #t)))))
                     (($$atom loop0)
                      ($$atom module-name0)
                      ($$atom n0)
                      ($$atom 0)))))
           ($$atom #f)))))
 (define dump-c-intf
   (lambda (module-init-proc0 dest0 c-intf0)
     (let ((inits0 (($$atom vector-ref) ($$atom c-intf0) ($$atom 2)))
           (procs0 (($$atom vector-ref) ($$atom c-intf0) ($$atom 1)))
           (decls0 (($$atom vector-ref) ($$atom c-intf0) ($$atom 0))))
       (if (let ((g1550 (($$atom not) (($$atom null?) ($$atom decls0)))))
             (if ($$atom g1550)
                 ($$atom g1550)
                 (let ((g1560 (($$atom not) (($$atom null?) ($$atom procs0)))))
                   (if ($$atom g1560)
                       ($$atom g1560)
                       (($$atom not) (($$atom null?) ($$atom inits0)))))))
           (let ((module-name0
                  (($$atom vector-ref) ($$atom module-init-proc0) ($$atom 1))))
             (let ((filename0
                    (($$atom string-append) ($$atom dest0) ($$atom ".c"))))
               (let ((port0 (($$atom open-output-file) ($$atom filename0))))
                 (begin
                   (($$atom display) ($$atom "/* File: \"") ($$atom port0))
                   (($$atom display) ($$atom filename0) ($$atom port0))
                   (($$atom display)
                    ($$atom "\", C-interface file produced by Gambit ")
                    ($$atom port0))
                   (($$atom display) ($$atom "2.2.2") ($$atom port0))
                   (($$atom display) ($$atom " */") ($$atom port0))
                   (($$atom newline) ($$atom port0))
                   (($$atom display) ($$atom "#define ") ($$atom port0))
                   (($$atom display) ($$atom "___") ($$atom port0))
                   (($$atom display) ($$atom "MODULE_NAME \"") ($$atom port0))
                   (($$atom display) ($$atom module-name0) ($$atom port0))
                   (($$atom display) ($$atom "\"") ($$atom port0))
                   (($$atom newline) ($$atom port0))
                   (($$atom display) ($$atom "#define ") ($$atom port0))
                   (($$atom display) ($$atom "___") ($$atom port0))
                   (($$atom display) ($$atom "MODULE_LINKER ") ($$atom port0))
                   (($$atom display) ($$atom "___") ($$atom port0))
                   (($$atom display)
                    (($$atom scheme-id->c-id) ($$atom module-name0))
                    ($$atom port0))
                   (($$atom newline) ($$atom port0))
                   (($$atom display) ($$atom "#define ") ($$atom port0))
                   (($$atom display) ($$atom "___") ($$atom port0))
                   (($$atom display) ($$atom "VERSION \"") ($$atom port0))
                   (($$atom display) ($$atom "2.2.2") ($$atom port0))
                   (($$atom display) ($$atom "\"") ($$atom port0))
                   (($$atom newline) ($$atom port0))
                   (if (($$atom null?) ($$atom procs0))
                       ($$atom #f)
                       (begin
                         (($$atom display) ($$atom "#define ") ($$atom port0))
                         (($$atom display) ($$atom "___") ($$atom port0))
                         (($$atom display)
                          ($$atom "C_PRC_COUNT ")
                          ($$atom port0))
                         (($$atom display)
                          (($$atom length) ($$atom procs0))
                          ($$atom port0))
                         (($$atom newline) ($$atom port0))))
                   (($$atom display)
                    ($$atom "#include \"gambit.h\"")
                    ($$atom port0))
                   (($$atom newline) ($$atom port0))
                   (($$atom display) ($$atom "___") ($$atom port0))
                   (($$atom display) ($$atom "BEGIN_MODULE") ($$atom port0))
                   (($$atom newline) ($$atom port0))
                   (($$atom for-each)
                    (lambda (x0)
                      (let ((scheme-name0
                             (($$atom vector-ref) ($$atom x0) ($$atom 0))))
                        (begin
                          (($$atom display) ($$atom "___") ($$atom port0))
                          (($$atom display)
                           ($$atom "SUPPLY_PRM(")
                           ($$atom port0))
                          (($$atom display) ($$atom "___") ($$atom port0))
                          (($$atom display) ($$atom "P_") ($$atom port0))
                          (($$atom display)
                           (($$atom scheme-id->c-id) ($$atom scheme-name0))
                           ($$atom port0))
                          (($$atom display) ($$atom ")") ($$atom port0))
                          (($$atom newline) ($$atom port0)))))
                    ($$atom procs0))
                   (($$atom newline) ($$atom port0))
                   (($$atom for-each)
                    (lambda (x0)
                      (begin
                        (($$atom display) ($$atom x0) ($$atom port0))
                        (($$atom newline) ($$atom port0))))
                    ($$atom decls0))
                   (if (($$atom null?) ($$atom procs0))
                       ($$atom #f)
                       (begin
                         (($$atom for-each)
                          (lambda (x0)
                            (let ((def0 (($$atom vector-ref)
                                         ($$atom x0)
                                         ($$atom 3)))
                                  (arity0 (($$atom vector-ref)
                                           ($$atom x0)
                                           ($$atom 2)))
                                  (c-name0 (($$atom vector-ref)
                                            ($$atom x0)
                                            ($$atom 1)))
                                  (scheme-name0
                                   (($$atom vector-ref)
                                    ($$atom x0)
                                    ($$atom 0))))
                              (begin
                                (($$atom display)
                                 ($$atom "___")
                                 ($$atom port0))
                                (($$atom display)
                                 ($$atom "BEGIN_C_COD(")
                                 ($$atom port0))
                                (($$atom display)
                                 ($$atom c-name0)
                                 ($$atom port0))
                                (($$atom display) ($$atom ",") ($$atom port0))
                                (($$atom display)
                                 ($$atom "___")
                                 ($$atom port0))
                                (($$atom display) ($$atom "P_") ($$atom port0))
                                (($$atom display)
                                 (($$atom scheme-id->c-id)
                                  ($$atom scheme-name0))
                                 ($$atom port0))
                                (($$atom display) ($$atom ",") ($$atom port0))
                                (($$atom display)
                                 ($$atom arity0)
                                 ($$atom port0))
                                (($$atom display) ($$atom ")") ($$atom port0))
                                (($$atom newline) ($$atom port0))
                                (($$atom display)
                                 ($$atom "#undef ___ARG1")
                                 ($$atom port0))
                                (($$atom newline) ($$atom port0))
                                (($$atom display)
                                 ($$atom "#define ___ARG1 ___R1")
                                 ($$atom port0))
                                (($$atom newline) ($$atom port0))
                                (($$atom display)
                                 ($$atom "#undef ___ARG2")
                                 ($$atom port0))
                                (($$atom newline) ($$atom port0))
                                (($$atom display)
                                 ($$atom "#define ___ARG2 ___R2")
                                 ($$atom port0))
                                (($$atom newline) ($$atom port0))
                                (($$atom display)
                                 ($$atom "#undef ___ARG3")
                                 ($$atom port0))
                                (($$atom newline) ($$atom port0))
                                (($$atom display)
                                 ($$atom "#define ___ARG3 ___R3")
                                 ($$atom port0))
                                (($$atom newline) ($$atom port0))
                                (($$atom display)
                                 ($$atom "#undef ___RESULT")
                                 ($$atom port0))
                                (($$atom newline) ($$atom port0))
                                (($$atom display)
                                 ($$atom "#define ___RESULT ___R1")
                                 ($$atom port0))
                                (($$atom newline) ($$atom port0))
                                (($$atom display) ($$atom def0) ($$atom port0))
                                (($$atom display)
                                 ($$atom "___")
                                 ($$atom port0))
                                (($$atom display)
                                 ($$atom "END_C_COD")
                                 ($$atom port0))
                                (($$atom newline) ($$atom port0)))))
                          ($$atom procs0))
                         (($$atom newline) ($$atom port0))
                         (($$atom display) ($$atom "___") ($$atom port0))
                         (($$atom display)
                          ($$atom "BEGIN_C_PRC")
                          ($$atom port0))
                         (($$atom newline) ($$atom port0))
                         (letrec ((loop0 (lambda (port1 i0 lst0)
                                           (if (($$atom null?) ($$atom lst0))
                                               ($$atom #f)
                                               (let ((x0 (($$atom car)
                                                          ($$atom lst0))))
                                                 (let ((scheme-name0
                                                        (($$atom vector-ref)
                                                         ($$atom x0)
                                                         ($$atom 0))))
                                                   (let ((c-name0 (($$atom vector-ref)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                           ($$atom x0)
                           ($$atom 1))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                     (let ((arity0 (($$atom vector-ref)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                            ($$atom x0)
                            ($$atom 2))))
               (begin
                 (if (($$atom =) ($$atom i0) ($$atom 0))
                     (($$atom display) ($$atom " ") ($$atom port1))
                     (($$atom display) ($$atom ",") ($$atom port1)))
                 (($$atom display) ($$atom "___") ($$atom port1))
                 (($$atom display) ($$atom "DEF_C_PRC(") ($$atom port1))
                 (($$atom display) ($$atom c-name0) ($$atom port1))
                 (($$atom display) ($$atom ",") ($$atom port1))
                 (($$atom display) ($$atom "___") ($$atom port1))
                 (($$atom display) ($$atom "P_") ($$atom port1))
                 (($$atom display)
                  (($$atom scheme-id->c-id) ($$atom scheme-name0))
                  ($$atom port1))
                 (($$atom display) ($$atom ",") ($$atom port1))
                 (($$atom display) ($$atom arity0) ($$atom port1))
                 (($$atom display) ($$atom ")") ($$atom port1))
                 (($$atom newline) ($$atom port1))
                 (($$atom loop0)
                  ($$atom port1)
                  (($$atom +) ($$atom i0) ($$atom 1))
                  (($$atom cdr) ($$atom lst0))))))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                           (($$atom loop0)
                            ($$atom port0)
                            ($$atom 0)
                            ($$atom procs0)))
                         (($$atom display) ($$atom "___") ($$atom port0))
                         (($$atom display) ($$atom "END_C_PRC") ($$atom port0))
                         (($$atom newline) ($$atom port0))))
                   (($$atom newline) ($$atom port0))
                   (($$atom display) ($$atom "___") ($$atom port0))
                   (($$atom display) ($$atom "BEGIN_PRM") ($$atom port0))
                   (($$atom newline) ($$atom port0))
                   (($$atom for-each)
                    (lambda (x0)
                      (begin
                        (($$atom display) ($$atom x0) ($$atom port0))
                        (($$atom newline) ($$atom port0))))
                    ($$atom inits0))
                   (($$atom display) ($$atom "___") ($$atom port0))
                   (($$atom display) ($$atom "END_PRM") ($$atom port0))
                   (($$atom newline) ($$atom port0))
                   (($$atom close-output-port) ($$atom port0))))))
           ($$atom #f)))))
 (define generate-report
   (lambda (env0)
     (let ((vars0 (($$atom sort-variables)
                   (($$atom env-global-variables) ($$atom env0)))))
       (letrec ((report0 (lambda (title0 pred?0 vars1 wrote-something?0)
                           (if (($$atom pair?) ($$atom vars1))
                               (let ((var0 (($$atom car) ($$atom vars1))))
                                 (if (($$atom pred?0) ($$atom var0))
                                     (begin
                                       (if ($$atom wrote-something?0)
                                           ($$atom #f)
                                           (begin
                                             (($$atom display) ($$atom " "))
                                             (($$atom display) ($$atom title0))
                                             (($$atom newline))))
                                       (letrec ((loop10 (lambda (var1
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                         l0
                         r?0
                         c?0)
                  (if (($$atom pair?) ($$atom l0))
                      (let ((x0 (($$atom car) ($$atom l0))))
                        (let ((y0 (($$atom vector-ref)
                                   ($$atom x0)
                                   ($$atom 1))))
                          (if (if ($$atom y0)
                                  (if (($$atom app?) ($$atom y0))
                                      (($$atom eq?)
                                       ($$atom x0)
                                       (($$atom app-oper) ($$atom y0)))
                                      ($$atom #f))
                                  ($$atom #f))
                              (($$atom loop10)
                               ($$atom var1)
                               (($$atom cdr) ($$atom l0))
                               ($$atom r?0)
                               ($$atom #t))
                              (($$atom loop10)
                               ($$atom var1)
                               (($$atom cdr) ($$atom l0))
                               ($$atom #t)
                               ($$atom c?0)))))
                      (letrec ((loop20 (lambda (var2 r?1 c?1 l1 d?0 a?0)
                                         (if (($$atom pair?) ($$atom l1))
                                             (if (($$atom set?)
                                                  (($$atom car) ($$atom l1)))
                                                 (($$atom loop20)
                                                  ($$atom var2)
                                                  ($$atom r?1)
                                                  ($$atom c?1)
                                                  (($$atom cdr) ($$atom l1))
                                                  ($$atom d?0)
                                                  ($$atom #t))
                                                 (($$atom loop20)
                                                  ($$atom var2)
                                                  ($$atom r?1)
                                                  ($$atom c?1)
                                                  (($$atom cdr) ($$atom l1))
                                                  ($$atom #t)
                                                  ($$atom a?0)))
                                             (begin
                                               (($$atom display)
                                                ($$atom "  ["))
                                               (if ($$atom d?0)
                                                   (($$atom display)
                                                    ($$atom "D"))
                                                   (($$atom display)
                                                    ($$atom " ")))
                                               (if ($$atom a?0)
                                                   (($$atom display)
                                                    ($$atom "A"))
                                                   (($$atom display)
                                                    ($$atom " ")))
                                               (if ($$atom r?1)
                                                   (($$atom display)
                                                    ($$atom "R"))
                                                   (($$atom display)
                                                    ($$atom " ")))
                                               (if ($$atom c?1)
                                                   (($$atom display)
                                                    ($$atom "C"))
                                                   (($$atom display)
                                                    ($$atom " ")))
                                               (($$atom display) ($$atom "] "))
                                               (($$atom display)
                                                (($$atom vector-ref)
                                                 ($$atom var2)
                                                 ($$atom 1)))
                                               (($$atom newline)))))))
                        (($$atom loop20)
                         ($$atom var1)
                         ($$atom r?0)
                         ($$atom c?0)
                         (($$atom vector-ref) ($$atom var1) ($$atom 4))
                         ($$atom #f)
                         ($$atom #f)))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                         (($$atom loop10)
                                          ($$atom var0)
                                          (($$atom vector-ref)
                                           ($$atom var0)
                                           ($$atom 3))
                                          ($$atom #f)
                                          ($$atom #f)))
                                       (($$atom report0)
                                        ($$atom title0)
                                        ($$atom pred?0)
                                        (($$atom cdr) ($$atom vars1))
                                        ($$atom #t)))
                                     (($$atom cons)
                                      (($$atom car) ($$atom vars1))
                                      (($$atom report0)
                                       ($$atom title0)
                                       ($$atom pred?0)
                                       (($$atom cdr) ($$atom vars1))
                                       ($$atom wrote-something?0)))))
                               (begin
                                 (if ($$atom wrote-something?0)
                                     (($$atom newline))
                                     ($$atom #f))
                                 ($$atom '()))))))
         (begin
           (($$atom display) ($$atom "Global variable usage:"))
           (($$atom newline))
           (($$atom newline))
           (($$atom report0)
            ($$atom "OTHERS")
            (lambda (x0) ($$atom #t))
            (($$atom report0)
             ($$atom "EXTENDED")
             (lambda (x0)
               (($$atom target.prim-info)
                (($$atom vector-ref) ($$atom x0) ($$atom 1))))
             (($$atom report0)
              ($$atom "STANDARD")
              (lambda (x0)
                (($$atom standard-procedure)
                 (($$atom vector-ref) ($$atom x0) ($$atom 1))
                 ($$atom env0)))
              ($$atom vars0)
              ($$atom #f))
             ($$atom #f))
            ($$atom #f)))))))
 (define compile-parsed-program
   (lambda (module-name0 program0 env0 c-intf0 info-port0)
     (begin
       (if ($$atom info-port0)
           (($$atom display) ($$atom "Compiling:") ($$atom info-port0))
           ($$atom #f))
       (set! trace-indentation ($$atom 0))
       (set! *bbs* (($$atom make-bbs)))
       (set! *global-env* ($$atom env0))
       (set! proc-queue ($$atom '()))
       (set! constant-vars ($$atom '()))
       (set! known-procs ($$atom '()))
       (($$atom restore-context)
        (let ((poll0 (($$atom entry-poll)))
              (regs0 (($$atom list) ($$atom ret-var))))
          (($$atom vector)
           ($$atom 0)
           ($$atom '())
           ($$atom regs0)
           ($$atom '())
           ($$atom poll0)
           ($$atom #f))))
       (let ((entry-lbl0 (($$atom bbs-new-lbl!) ($$atom *bbs*))))
         (let ((body-lbl0 (($$atom bbs-new-lbl!) ($$atom *bbs*))))
           (let ((frame0 (($$atom current-frame) ($$atom ret-var-set))))
             (let ((comment0
                    (if (($$atom null?) ($$atom program0))
                        ($$atom #f)
                        (($$atom source-comment)
                         (($$atom car) ($$atom program0))))))
               (begin
                 (let ((bbs0 ($$atom *bbs*)))
                   (($$atom vector-set!)
                    ($$atom bbs0)
                    ($$atom 2)
                    ($$atom entry-lbl0)))
                 (set! entry-bb
                       (($$atom make-bb)
                        (($$atom vector)
                         ($$atom 'label)
                         ($$atom frame0)
                         ($$atom comment0)
                         ($$atom entry-lbl0)
                         ($$atom 'entry)
                         ($$atom 0)
                         ($$atom 0)
                         ($$atom #f)
                         ($$atom #f))
                        ($$atom *bbs*)))
                 (let ((gvm-instr0
                        (let ((opnd0 (($$atom +)
                                      ($$atom body-lbl0)
                                      ($$atom 20000))))
                          (($$atom vector)
                           ($$atom 'jump)
                           ($$atom frame0)
                           ($$atom #f)
                           ($$atom opnd0)
                           ($$atom #f)
                           ($$atom #f))))
                       (bb0 ($$atom entry-bb)))
                   (($$atom vector-set!)
                    ($$atom bb0)
                    ($$atom 2)
                    ($$atom gvm-instr0)))
                 (set! *bb*
                       (($$atom make-bb)
                        (($$atom vector)
                         ($$atom 'label)
                         ($$atom frame0)
                         ($$atom comment0)
                         ($$atom body-lbl0)
                         ($$atom 'simple))
                        ($$atom *bbs*)))
                 (letrec ((loop10 (lambda (l0)
                                    (if (($$atom null?) ($$atom l0))
                                        ($$atom #f)
                                        (let ((x0 (($$atom car) ($$atom l0))))
                                          (let ((name0 (($$atom vector-ref)
                                                        ($$atom x0)
                                                        ($$atom 0))))
                                            (let ((sym0 (($$atom string->canonical-symbol)
                                                         ($$atom name0))))
                                              (let ((var0 (($$atom env-lookup-global-var)
                                                           ($$atom *global-env*)
                                                           ($$atom sym0))))
                                                (begin
                                                  (let ((opnd0 (let ((val0 (($$atom make-proc-obj)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                    ($$atom name0)
                                    ($$atom #t)
                                    ($$atom #f)
                                    ($$atom 0)
                                    ($$atom #t)
                                    ($$atom '())
                                    ($$atom '(#f)))))
                         (($$atom +)
                          (($$atom enter-opnd) ($$atom val0) ($$atom #f))
                          ($$atom 50000)))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                    (set! constant-vars
                                                          (($$atom cons)
                                                           (($$atom cons)
                                                            ($$atom var0)
                                                            ($$atom opnd0))
                                                           ($$atom constant-vars))))
                                                  (($$atom loop10)
                                                   (($$atom cdr)
                                                    ($$atom l0))))))))))))
                   (($$atom loop10)
                    (($$atom vector-ref) ($$atom c-intf0) ($$atom 1))))
                 (letrec ((loop20 (lambda (l0)
                                    (if (($$atom null?) ($$atom l0))
                                        ($$atom #f)
                                        (let ((node0 (($$atom car)
                                                      ($$atom l0))))
                                          (begin
                                            (if (($$atom def?) ($$atom node0))
                                                (let ((var0 (($$atom vector-ref)
                                                             ($$atom node0)
                                                             ($$atom 6))))
                                                  (let ((val0 (($$atom global-val)
                                                               ($$atom var0))))
                                                    (if (if ($$atom val0)
                                                            (($$atom prc?)
                                                             ($$atom val0))
                                                            ($$atom #f))
                                                        (let ((opnd0 (let ((val1 (($$atom make-proc-obj)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                          (($$atom symbol->string)
                                           (($$atom vector-ref)
                                            ($$atom var0)
                                            ($$atom 1)))
                                          ($$atom #t)
                                          ($$atom #f)
                                          (($$atom call-pattern) ($$atom val0))
                                          ($$atom #t)
                                          ($$atom '())
                                          ($$atom '(#f)))))
                               (($$atom +)
                                (($$atom enter-opnd) ($$atom val1) ($$atom #f))
                                ($$atom 50000)))))
                  (set! constant-vars
                        (($$atom cons)
                         (($$atom cons) ($$atom var0) ($$atom opnd0))
                         ($$atom constant-vars))))
                ($$atom #f))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                ($$atom #f))
                                            (($$atom loop20)
                                             (($$atom cdr) ($$atom l0)))))))))
                   (($$atom loop20) ($$atom program0)))
                 (letrec ((loop30 (lambda (info-port1 l0)
                                    (if (($$atom null?) ($$atom l0))
                                        (let ((ret-opnd0
                                               (($$atom var->opnd)
                                                ($$atom ret-var))))
                                          (begin
                                            (($$atom seal-bb)
                                             ($$atom #t)
                                             ($$atom 'return))
                                            (($$atom dealloc-slots)
                                             ($$atom nb-slots))
                                            (let ((gvm-instr0
                                                   (let ((frame1 (($$atom current-frame)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                          ($$atom '()))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                     (($$atom vector)
                                                      ($$atom 'jump)
                                                      ($$atom frame1)
                                                      ($$atom #f)
                                                      ($$atom ret-opnd0)
                                                      ($$atom #f)
                                                      ($$atom #f))))
                                                  (bb0 ($$atom *bb*)))
                                              (($$atom vector-set!)
                                               ($$atom bb0)
                                               ($$atom 2)
                                               ($$atom gvm-instr0)))))
                                        (let ((node0 (($$atom car)
                                                      ($$atom l0))))
                                          (if (($$atom def?) ($$atom node0))
                                              (begin
                                                (($$atom gen-define)
                                                 (($$atom vector-ref)
                                                  ($$atom node0)
                                                  ($$atom 6))
                                                 (($$atom def-val)
                                                  ($$atom node0))
                                                 ($$atom info-port1))
                                                (($$atom loop30)
                                                 ($$atom info-port1)
                                                 (($$atom cdr) ($$atom l0))))
                                              (if (($$atom null?)
                                                   (($$atom cdr) ($$atom l0)))
                                                  (($$atom gen-node)
                                                   ($$atom node0)
                                                   ($$atom ret-var-set)
                                                   ($$atom 'tail))
                                                  (begin
                                                    (($$atom gen-node)
                                                     ($$atom node0)
                                                     ($$atom ret-var-set)
                                                     ($$atom 'need))
                                                    (($$atom loop30)
                                                     ($$atom info-port1)
                                                     (($$atom cdr)
                                                      ($$atom l0)))))))))))
                   (($$atom loop30) ($$atom info-port0) ($$atom program0)))
                 (letrec ((loop40 (lambda (info-port1)
                                    (if (($$atom pair?) ($$atom proc-queue))
                                        (let ((x0 (($$atom car)
                                                   ($$atom proc-queue))))
                                          (begin
                                            (set! proc-queue
                                                  (($$atom cdr)
                                                   ($$atom proc-queue)))
                                            (($$atom gen-proc)
                                             (($$atom car) ($$atom x0))
                                             (($$atom car)
                                              (($$atom cdr) ($$atom x0)))
                                             (($$atom car)
                                              (($$atom cdr)
                                               (($$atom cdr) ($$atom x0))))
                                             ($$atom info-port1))
                                            (($$atom trace-unindent)
                                             ($$atom info-port1))
                                            (($$atom loop40)
                                             ($$atom info-port1))))
                                        ($$atom #f)))))
                   (($$atom loop40) ($$atom info-port0)))
                 (if ($$atom info-port0)
                     (begin
                       (($$atom newline) ($$atom info-port0))
                       (($$atom newline) ($$atom info-port0)))
                     ($$atom #f))
                 (($$atom bbs-purify!) ($$atom *bbs*))
                 (let ((proc0 (($$atom make-proc-obj)
                               (($$atom string-append)
                                ($$atom "#!")
                                ($$atom module-name0))
                               ($$atom #t)
                               ($$atom *bbs*)
                               ($$atom '(0))
                               ($$atom #t)
                               ($$atom '())
                               ($$atom '(#f)))))
                   (begin
                     (set! *bb* ($$atom '()))
                     (set! *bbs* ($$atom '()))
                     (set! *global-env* ($$atom '()))
                     (set! proc-queue ($$atom '()))
                     (set! constant-vars ($$atom '()))
                     (set! known-procs ($$atom '()))
                     (($$atom clear-context))
                     ($$atom proc0)))))))))))
 (define *bb* ($$atom '()))
 (define *bbs* ($$atom '()))
 (define *global-env* ($$atom '()))
 (define proc-queue ($$atom '()))
 (define constant-vars ($$atom '()))
 (define known-procs ($$atom '()))
 (define trace-indentation ($$atom '()))
 (define trace-indent
   (lambda (info-port0)
     (begin
       (set! trace-indentation
             (($$atom +) ($$atom trace-indentation) ($$atom 1)))
       (if ($$atom info-port0)
           (begin
             (($$atom newline) ($$atom info-port0))
             (letrec ((loop0 (lambda (info-port1 i0)
                               (if (($$atom >) ($$atom i0) ($$atom 0))
                                   (begin
                                     (($$atom display)
                                      ($$atom "  ")
                                      ($$atom info-port1))
                                     (($$atom loop0)
                                      ($$atom info-port1)
                                      (($$atom -) ($$atom i0) ($$atom 1))))
                                   ($$atom #f)))))
               (($$atom loop0)
                ($$atom info-port0)
                ($$atom trace-indentation))))
           ($$atom #f)))))
 (define trace-unindent
   (lambda (info-port0)
     (set! trace-indentation
           (($$atom -) ($$atom trace-indentation) ($$atom 1)))))
 (define gen-define
   (lambda (var0 node0 info-port0)
     (if (($$atom prc?) ($$atom node0))
         (let ((p-bbs0 ($$atom *bbs*)))
           (let ((p-bb0 ($$atom *bb*)))
             (let ((p-proc-queue0 ($$atom proc-queue)))
               (let ((p-known-procs0 ($$atom known-procs)))
                 (let ((p-context0 (($$atom current-context))))
                   (let ((bbs0 (($$atom make-bbs))))
                     (let ((lbl10 (($$atom bbs-new-lbl!) ($$atom bbs0))))
                       (let ((lbl20 (($$atom bbs-new-lbl!) ($$atom bbs0))))
                         (let ((context0
                                (($$atom entry-context)
                                 ($$atom node0)
                                 ($$atom '()))))
                           (let ((frame0 (($$atom context->frame)
                                          ($$atom context0)
                                          (($$atom set-union)
                                           (($$atom free-variables)
                                            (($$atom prc-body) ($$atom node0)))
                                           ($$atom ret-var-set)))))
                             (let ((bb10 (let ((label-instr0
                                                (($$atom make-label-entry)
                                                 ($$atom lbl10)
                                                 (($$atom length)
                                                  (($$atom vector-ref)
                                                   ($$atom node0)
                                                   ($$atom 9)))
                                                 (($$atom prc-min)
                                                  ($$atom node0))
                                                 (($$atom prc-rest)
                                                  ($$atom node0))
                                                 ($$atom #f)
                                                 ($$atom frame0)
                                                 (($$atom source-comment)
                                                  ($$atom node0)))))
                                           (let ((bb0 (($$atom vector)
                                                       ($$atom label-instr0)
                                                       (($$atom cons)
                                                        ($$atom '())
                                                        ($$atom '()))
                                                       ($$atom '())
                                                       ($$atom '())
                                                       ($$atom '()))))
                                             (begin
                                               (($$atom queue-put!)
                                                (($$atom vector-ref)
                                                 ($$atom bbs0)
                                                 ($$atom 1))
                                                ($$atom bb0))
                                               ($$atom bb0))))))
                               (let ((bb20 (($$atom make-bb)
                                            (let ((comment0
                                                   (($$atom source-comment)
                                                    ($$atom node0))))
                                              (($$atom vector)
                                               ($$atom 'label)
                                               ($$atom frame0)
                                               ($$atom comment0)
                                               ($$atom lbl20)
                                               ($$atom 'simple)))
                                            ($$atom bbs0))))
                                 (let ((do-body0
                                        (lambda (node1
                                                 info-port1
                                                 context1
                                                 bb21)
                                          (begin
                                            (($$atom gen-proc)
                                             ($$atom node1)
                                             ($$atom bb21)
                                             ($$atom context1)
                                             ($$atom info-port1))
                                            (letrec ((loop0 (lambda (info-port2)
                                                              (if (($$atom pair?)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                           ($$atom proc-queue))
                          (let ((x0 (($$atom car) ($$atom proc-queue))))
                            (begin
                              (set! proc-queue
                                    (($$atom cdr) ($$atom proc-queue)))
                              (($$atom gen-proc)
                               (($$atom car) ($$atom x0))
                               (($$atom car) (($$atom cdr) ($$atom x0)))
                               (($$atom car)
                                (($$atom cdr) (($$atom cdr) ($$atom x0))))
                               ($$atom info-port2))
                              (($$atom trace-unindent) ($$atom info-port2))
                              (($$atom loop0) ($$atom info-port2))))
                          ($$atom #f)))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                              (($$atom loop0)
                                               ($$atom info-port1)))
                                            (($$atom trace-unindent)
                                             ($$atom info-port1))
                                            (($$atom bbs-purify!)
                                             ($$atom *bbs*))))))
                                   (begin
                                     (($$atom vector-set!)
                                      ($$atom context0)
                                      ($$atom 5)
                                      ($$atom bb10))
                                     (($$atom vector-set!)
                                      ($$atom bbs0)
                                      ($$atom 2)
                                      ($$atom lbl10))
                                     (let ((gvm-instr0
                                            (let ((opnd0 (($$atom +)
                                                          ($$atom lbl20)
                                                          ($$atom 20000))))
                                              (($$atom vector)
                                               ($$atom 'jump)
                                               ($$atom frame0)
                                               ($$atom #f)
                                               ($$atom opnd0)
                                               ($$atom #f)
                                               ($$atom #f)))))
                                       (($$atom vector-set!)
                                        ($$atom bb10)
                                        ($$atom 2)
                                        ($$atom gvm-instr0)))
                                     (set! *bbs* ($$atom bbs0))
                                     (set! proc-queue ($$atom '()))
                                     (set! known-procs ($$atom '()))
                                     (if (($$atom assq)
                                          ($$atom var0)
                                          ($$atom constant-vars))
                                         (($$atom let-constant-var)
                                          ($$atom var0)
                                          (($$atom +)
                                           ($$atom lbl10)
                                           ($$atom 20000))
                                          (lambda ()
                                            (begin
                                              (($$atom add-known-proc)
                                               ($$atom lbl10)
                                               ($$atom node0))
                                              (($$atom do-body0)
                                               ($$atom node0)
                                               ($$atom info-port0)
                                               ($$atom context0)
                                               ($$atom bb20)))))
                                         (($$atom do-body0)
                                          ($$atom node0)
                                          ($$atom info-port0)
                                          ($$atom context0)
                                          ($$atom bb20)))
                                     (set! *bbs* ($$atom p-bbs0))
                                     (set! *bb* ($$atom p-bb0))
                                     (set! proc-queue ($$atom p-proc-queue0))
                                     (set! known-procs ($$atom p-known-procs0))
                                     (($$atom restore-context)
                                      ($$atom p-context0))
                                     (let ((x0 (($$atom assq)
                                                ($$atom var0)
                                                ($$atom constant-vars))))
                                       (let ((proc0 (if ($$atom x0)
                                                        (let ((p0 (($$atom cdr)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                           ($$atom x0))))
                  (begin
                    (let ((obj0 (($$atom obj-val) ($$atom p0))))
                      (($$atom vector-set!)
                       ($$atom obj0)
                       ($$atom 3)
                       ($$atom bbs0)))
                    ($$atom p0)))
                (let ((val0 (($$atom make-proc-obj)
                             (($$atom symbol->string)
                              (($$atom vector-ref) ($$atom var0) ($$atom 1)))
                             ($$atom #f)
                             ($$atom bbs0)
                             (($$atom call-pattern) ($$atom node0))
                             ($$atom #t)
                             ($$atom '())
                             ($$atom '(#f)))))
                  (($$atom +)
                   (($$atom enter-opnd) ($$atom val0) ($$atom #f))
                   ($$atom 50000))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                         (($$atom put-copy)
                                          ($$atom proc0)
                                          (let ((name0 (($$atom var-name)
                                                        ($$atom var0))))
                                            (($$atom +)
                                             (($$atom enter-opnd)
                                              ($$atom name0)
                                              ($$atom #t))
                                             ($$atom 30000)))
                                          ($$atom #f)
                                          ($$atom ret-var-set)
                                          (($$atom source-comment)
                                           ($$atom node0)))))))))))))))))))
         (($$atom put-copy)
          (($$atom gen-node)
           ($$atom node0)
           ($$atom ret-var-set)
           ($$atom 'need))
          (let ((name0 (($$atom var-name) ($$atom var0))))
            (($$atom +)
             (($$atom enter-opnd) ($$atom name0) ($$atom #t))
             ($$atom 30000)))
          ($$atom #f)
          ($$atom ret-var-set)
          (($$atom source-comment) ($$atom node0))))))
 (define call-pattern
   (lambda (node0)
     (($$atom make-pattern)
      (($$atom vector-ref) ($$atom node0) ($$atom 7))
      (($$atom length) (($$atom vector-ref) ($$atom node0) ($$atom 9)))
      (($$atom vector-ref) ($$atom node0) ($$atom 8)))))
 (define make-context
   (lambda (nb-slots0 slots0 regs0 closed0 poll0 entry-bb0)
     (($$atom vector)
      ($$atom nb-slots0)
      ($$atom slots0)
      ($$atom regs0)
      ($$atom closed0)
      ($$atom poll0)
      ($$atom entry-bb0))))
 (define context-nb-slots
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 0))))
 (define context-slots
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 1))))
 (define context-regs
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 2))))
 (define context-closed
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 3))))
 (define context-poll
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 4))))
 (define context-entry-bb
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 5))))
 (define context-entry-bb-set!
   (lambda (x0 y0) (($$atom vector-set!) ($$atom x0) ($$atom 5) ($$atom y0))))
 (define nb-slots ($$atom '()))
 (define slots ($$atom '()))
 (define regs ($$atom '()))
 (define closed ($$atom '()))
 (define poll ($$atom '()))
 (define entry-bb ($$atom '()))
 (define restore-context
   (lambda (context0)
     (begin
       (set! nb-slots (($$atom vector-ref) ($$atom context0) ($$atom 0)))
       (set! slots (($$atom vector-ref) ($$atom context0) ($$atom 1)))
       (set! regs (($$atom vector-ref) ($$atom context0) ($$atom 2)))
       (set! closed (($$atom vector-ref) ($$atom context0) ($$atom 3)))
       (set! poll (($$atom vector-ref) ($$atom context0) ($$atom 4)))
       (set! entry-bb (($$atom vector-ref) ($$atom context0) ($$atom 5))))))
 (define clear-context
   (lambda ()
     (($$atom restore-context)
      (($$atom vector)
       ($$atom '())
       ($$atom '())
       ($$atom '())
       ($$atom '())
       ($$atom '())
       ($$atom '())))))
 (define current-context
   (lambda ()
     (let ((entry-bb0 ($$atom entry-bb))
           (poll0 ($$atom poll))
           (closed0 ($$atom closed))
           (regs0 ($$atom regs))
           (slots0 ($$atom slots))
           (nb-slots0 ($$atom nb-slots)))
       (($$atom vector)
        ($$atom nb-slots0)
        ($$atom slots0)
        ($$atom regs0)
        ($$atom closed0)
        ($$atom poll0)
        ($$atom entry-bb0)))))
 (define current-frame
   (lambda (live0)
     (let ((closed0 ($$atom closed))
           (regs0 ($$atom regs))
           (slots0 ($$atom slots))
           (size0 ($$atom nb-slots)))
       (($$atom vector)
        ($$atom size0)
        ($$atom slots0)
        ($$atom regs0)
        ($$atom closed0)
        ($$atom live0)))))
 (define context->frame
   (lambda (context0 live0)
     (let ((closed0 (($$atom context-closed) ($$atom context0)))
           (regs0 (($$atom vector-ref) ($$atom context0) ($$atom 2)))
           (slots0 (($$atom vector-ref) ($$atom context0) ($$atom 1)))
           (size0 (($$atom vector-ref) ($$atom context0) ($$atom 0))))
       (($$atom vector)
        ($$atom size0)
        ($$atom slots0)
        ($$atom regs0)
        ($$atom closed0)
        ($$atom live0)))))
 (define make-poll
   (lambda (since-entry?0 delta0)
     (($$atom cons) ($$atom since-entry?0) ($$atom delta0))))
 (define poll-since-entry? (lambda (x0) (($$atom car) ($$atom x0))))
 (define poll-delta (lambda (x0) (($$atom cdr) ($$atom x0))))
 (define entry-poll
   (lambda ()
     (let ((delta0 (($$atom -) ($$atom poll-period) ($$atom poll-head))))
       (($$atom cons) ($$atom #f) ($$atom delta0)))))
 (define return-poll
   (lambda (poll0)
     (let ((delta0 (($$atom cdr) ($$atom poll0))))
       (let ((delta1 (($$atom +)
                      ($$atom poll-head)
                      (($$atom max) ($$atom delta0) ($$atom poll-tail))))
             (since-entry?0 (($$atom car) ($$atom poll0))))
         (($$atom cons) ($$atom since-entry?0) ($$atom delta1))))))
 (define poll-merge
   (lambda (poll0 other-poll0)
     (let ((delta0 (($$atom max)
                    (($$atom cdr) ($$atom poll0))
                    (($$atom cdr) ($$atom other-poll0))))
           (since-entry?0
            (let ((g1570 (($$atom car) ($$atom poll0))))
              (if ($$atom g1570)
                  ($$atom g1570)
                  (($$atom car) ($$atom other-poll0))))))
       (($$atom cons) ($$atom since-entry?0) ($$atom delta0)))))
 (define poll-period ($$atom #f))
 (set! poll-period ($$atom 90))
 (define poll-head ($$atom #f))
 (set! poll-head ($$atom 15))
 (define poll-tail ($$atom #f))
 (set! poll-tail ($$atom 15))
 (define entry-context
   (lambda (proc0 closed0)
     (letrec ((empty-vars-list0
               (lambda (n0)
                 (if (($$atom >) ($$atom n0) ($$atom 0))
                     (($$atom cons)
                      ($$atom empty-var)
                      (($$atom empty-vars-list0)
                       (($$atom -) ($$atom n0) ($$atom 1))))
                     ($$atom '())))))
       (let ((parms0 (($$atom vector-ref) ($$atom proc0) ($$atom 9))))
         (let ((pc0 (($$atom target.label-info)
                     (($$atom vector-ref) ($$atom proc0) ($$atom 7))
                     (($$atom length) ($$atom parms0))
                     (($$atom vector-ref) ($$atom proc0) ($$atom 8))
                     (($$atom not) (($$atom null?) ($$atom closed0))))))
           (let ((fs0 (($$atom vector-ref) ($$atom pc0) ($$atom 0))))
             (let ((slots-list0 (($$atom empty-vars-list0) ($$atom fs0))))
               (let ((regs-list0
                      (($$atom empty-vars-list0) ($$atom target.nb-regs))))
                 (let ((assign-var-to-loc0
                        (lambda (fs1 slots-list1 regs-list1 var0 loc0)
                          (let ((x0 (if (($$atom <)
                                         ($$atom loc0)
                                         ($$atom 10000))
                                        (let ((i0 (($$atom modulo)
                                                   ($$atom loc0)
                                                   ($$atom 10000))))
                                          (if (($$atom <=)
                                               ($$atom i0)
                                               ($$atom target.nb-regs))
                                              (($$atom nth-after)
                                               ($$atom regs-list1)
                                               ($$atom i0))
                                              (($$atom compiler-internal-error)
                                               ($$atom "entry-context, reg out of bound in back-end's pcontext"))))
                                        (if (($$atom stk?) ($$atom loc0))
                                            (let ((i0 (($$atom modulo)
                                                       ($$atom loc0)
                                                       ($$atom 10000))))
                                              (if (($$atom <=)
                                                   ($$atom i0)
                                                   ($$atom fs1))
                                                  (($$atom nth-after)
                                                   ($$atom slots-list1)
                                                   (($$atom -)
                                                    ($$atom fs1)
                                                    ($$atom i0)))
                                                  (($$atom compiler-internal-error)
                                                   ($$atom "entry-context, stk out of bound in back-end's pcontext"))))
                                            (($$atom compiler-internal-error)
                                             ($$atom "entry-context, loc other than reg or stk in back-end's pcontext"))))))
                            (if (($$atom eq?)
                                 (($$atom car) ($$atom x0))
                                 ($$atom empty-var))
                                (($$atom set-car!) ($$atom x0) ($$atom var0))
                                (($$atom compiler-internal-error)
                                 ($$atom "entry-context, duplicate location in back-end's pcontext")))))))
                   (begin
                     (letrec ((loop0 (lambda (parms1
                                              fs1
                                              slots-list1
                                              regs-list1
                                              l0)
                                       (if (($$atom null?) ($$atom l0))
                                           ($$atom #f)
                                           (let ((couple0 (($$atom car)
                                                           ($$atom l0))))
                                             (let ((name0 (($$atom car)
                                                           ($$atom couple0))))
                                               (let ((loc0 (($$atom cdr)
                                                            ($$atom couple0))))
                                                 (begin
                                                   (if (($$atom eq?)
                                                        ($$atom name0)
                                                        ($$atom 'return))
                                                       (($$atom assign-var-to-loc0)
                                                        ($$atom fs1)
                                                        ($$atom slots-list1)
                                                        ($$atom regs-list1)
                                                        ($$atom ret-var)
                                                        ($$atom loc0))
                                                       (if (($$atom eq?)
                                                            ($$atom name0)
                                                            ($$atom 'closure-env))
                                                           (($$atom assign-var-to-loc0)
                                                            ($$atom fs1)
                                                            ($$atom slots-list1)
                                                            ($$atom regs-list1)
                                                            ($$atom closure-env-var)
                                                            ($$atom loc0))
                                                           (($$atom assign-var-to-loc0)
                                                            ($$atom fs1)
                                                            ($$atom slots-list1)
                                                            ($$atom regs-list1)
                                                            (($$atom list-ref)
                                                             ($$atom parms1)
                                                             (($$atom -)
                                                              ($$atom name0)
                                                              ($$atom 1)))
                                                            ($$atom loc0))))
                                                   (($$atom loop0)
                                                    ($$atom parms1)
                                                    ($$atom fs1)
                                                    ($$atom slots-list1)
                                                    ($$atom regs-list1)
                                                    (($$atom cdr)
                                                     ($$atom l0)))))))))))
                       (($$atom loop0)
                        ($$atom parms0)
                        ($$atom fs0)
                        ($$atom slots-list0)
                        ($$atom regs-list0)
                        (($$atom vector-ref) ($$atom pc0) ($$atom 1))))
                     (let ((poll0 (($$atom entry-poll))))
                       (($$atom vector)
                        ($$atom fs0)
                        ($$atom slots-list0)
                        ($$atom regs-list0)
                        ($$atom closed0)
                        ($$atom poll0)
                        ($$atom #f)))))))))))))
 (define get-var
   (lambda (opnd0)
     (if (($$atom glo?) ($$atom opnd0))
         (($$atom env-lookup-global-var)
          ($$atom *global-env*)
          (($$atom glo-name) ($$atom opnd0)))
         (if (($$atom <) ($$atom opnd0) ($$atom 10000))
             (($$atom list-ref)
              ($$atom regs)
              (($$atom modulo) ($$atom opnd0) ($$atom 10000)))
             (if (($$atom stk?) ($$atom opnd0))
                 (($$atom list-ref)
                  ($$atom slots)
                  (($$atom -)
                   ($$atom nb-slots)
                   (($$atom modulo) ($$atom opnd0) ($$atom 10000))))
                 (($$atom compiler-internal-error)
                  ($$atom "get-var, location must be global, register or stack slot")))))))
 (define put-var
   (lambda (opnd0 new0)
     (let ((put-v0 (lambda (opnd1 new1)
                     (if (($$atom <) ($$atom opnd1) ($$atom 10000))
                         (set! regs
                               (($$atom replace-nth)
                                ($$atom regs)
                                (($$atom modulo) ($$atom opnd1) ($$atom 10000))
                                ($$atom new1)))
                         (if (($$atom stk?) ($$atom opnd1))
                             (set! slots
                                   (($$atom replace-nth)
                                    ($$atom slots)
                                    (($$atom -)
                                     ($$atom nb-slots)
                                     (($$atom modulo)
                                      ($$atom opnd1)
                                      ($$atom 10000)))
                                    ($$atom new1)))
                             (($$atom compiler-internal-error)
                              ($$atom "put-var, location must be register or stack slot, for var:")
                              (($$atom vector-ref)
                               ($$atom new1)
                               ($$atom 1))))))))
       (begin
         (if (($$atom eq?) ($$atom new0) ($$atom ret-var))
             (let ((x0 (($$atom var->opnd) ($$atom ret-var))))
               (if ($$atom x0)
                   (($$atom put-v0) ($$atom x0) ($$atom empty-var))
                   ($$atom #f)))
             ($$atom #f))
         (($$atom put-v0) ($$atom opnd0) ($$atom new0))))))
 (define flush-regs (lambda () (set! regs ($$atom '()))))
 (define push-slot
   (lambda ()
     (begin
       (set! nb-slots (($$atom +) ($$atom nb-slots) ($$atom 1)))
       (set! slots (($$atom cons) ($$atom empty-var) ($$atom slots))))))
 (define dealloc-slots
   (lambda (n0)
     (begin
       (set! nb-slots (($$atom -) ($$atom nb-slots) ($$atom n0)))
       (set! slots (($$atom nth-after) ($$atom slots) ($$atom n0))))))
 (define pop-slot (lambda () (($$atom dealloc-slots) ($$atom 1))))
 (define replace-nth
   (lambda (l0 i0 v0)
     (if (($$atom null?) ($$atom l0))
         (if (($$atom =) ($$atom i0) ($$atom 0))
             (($$atom list) ($$atom v0))
             (($$atom cons)
              ($$atom empty-var)
              (($$atom replace-nth)
               ($$atom l0)
               (($$atom -) ($$atom i0) ($$atom 1))
               ($$atom v0))))
         (if (($$atom =) ($$atom i0) ($$atom 0))
             (($$atom cons) ($$atom v0) (($$atom cdr) ($$atom l0)))
             (($$atom cons)
              (($$atom car) ($$atom l0))
              (($$atom replace-nth)
               (($$atom cdr) ($$atom l0))
               (($$atom -) ($$atom i0) ($$atom 1))
               ($$atom v0)))))))
 (define live-vars
   (lambda (live0)
     (if (let ((set0 (($$atom set-intersection)
                      ($$atom live0)
                      (let ((list0 ($$atom closed))) ($$atom list0)))))
           (($$atom null?) ($$atom set0)))
         ($$atom live0)
         (($$atom set-adjoin) ($$atom live0) ($$atom closure-env-var)))))
 (define dead-slots
   (lambda (live0)
     (let ((live-v0 (($$atom live-vars) ($$atom live0))))
       (letrec ((loop0 (lambda (live-v1 s0 l0 i0)
                         (if (($$atom null?) ($$atom l0))
                             (let ((list0 (($$atom reverse) ($$atom s0))))
                               ($$atom list0))
                             (if (let ((x0 (($$atom car) ($$atom l0))))
                                   (($$atom memq)
                                    ($$atom x0)
                                    ($$atom live-v1)))
                                 (($$atom loop0)
                                  ($$atom live-v1)
                                  ($$atom s0)
                                  (($$atom cdr) ($$atom l0))
                                  (($$atom -) ($$atom i0) ($$atom 1)))
                                 (($$atom loop0)
                                  ($$atom live-v1)
                                  (($$atom cons) ($$atom i0) ($$atom s0))
                                  (($$atom cdr) ($$atom l0))
                                  (($$atom -) ($$atom i0) ($$atom 1))))))))
         (($$atom loop0)
          ($$atom live-v0)
          ($$atom '())
          ($$atom slots)
          ($$atom nb-slots))))))
 (define live-slots
   (lambda (live0)
     (let ((live-v0 (($$atom live-vars) ($$atom live0))))
       (letrec ((loop0 (lambda (live-v1 s0 l0 i0)
                         (if (($$atom null?) ($$atom l0))
                             (let ((list0 (($$atom reverse) ($$atom s0))))
                               ($$atom list0))
                             (if (let ((x0 (($$atom car) ($$atom l0))))
                                   (($$atom memq)
                                    ($$atom x0)
                                    ($$atom live-v1)))
                                 (($$atom loop0)
                                  ($$atom live-v1)
                                  (($$atom cons) ($$atom i0) ($$atom s0))
                                  (($$atom cdr) ($$atom l0))
                                  (($$atom -) ($$atom i0) ($$atom 1)))
                                 (($$atom loop0)
                                  ($$atom live-v1)
                                  ($$atom s0)
                                  (($$atom cdr) ($$atom l0))
                                  (($$atom -) ($$atom i0) ($$atom 1))))))))
         (($$atom loop0)
          ($$atom live-v0)
          ($$atom '())
          ($$atom slots)
          ($$atom nb-slots))))))
 (define dead-regs
   (lambda (live0)
     (let ((live-v0 (($$atom live-vars) ($$atom live0))))
       (letrec ((loop0 (lambda (live-v1 s0 l0 i0)
                         (if (($$atom >=) ($$atom i0) ($$atom target.nb-regs))
                             (let ((list0 (($$atom reverse) ($$atom s0))))
                               ($$atom list0))
                             (if (($$atom null?) ($$atom l0))
                                 (($$atom loop0)
                                  ($$atom live-v1)
                                  (($$atom cons) ($$atom i0) ($$atom s0))
                                  ($$atom l0)
                                  (($$atom +) ($$atom i0) ($$atom 1)))
                                 (if (if (let ((x0 (($$atom car) ($$atom l0))))
                                           (($$atom memq)
                                            ($$atom x0)
                                            ($$atom live-v1)))
                                         (($$atom not)
                                          (($$atom memq)
                                           (($$atom car) ($$atom l0))
                                           ($$atom slots)))
                                         ($$atom #f))
                                     (($$atom loop0)
                                      ($$atom live-v1)
                                      ($$atom s0)
                                      (($$atom cdr) ($$atom l0))
                                      (($$atom +) ($$atom i0) ($$atom 1)))
                                     (($$atom loop0)
                                      ($$atom live-v1)
                                      (($$atom cons) ($$atom i0) ($$atom s0))
                                      (($$atom cdr) ($$atom l0))
                                      (($$atom +)
                                       ($$atom i0)
                                       ($$atom 1)))))))))
         (($$atom loop0)
          ($$atom live-v0)
          ($$atom '())
          ($$atom regs)
          ($$atom 0))))))
 (define live-regs
   (lambda (live0)
     (let ((live-v0 (($$atom live-vars) ($$atom live0))))
       (letrec ((loop0 (lambda (live-v1 s0 l0 i0)
                         (if (($$atom null?) ($$atom l0))
                             (let ((list0 (($$atom reverse) ($$atom s0))))
                               ($$atom list0))
                             (if (if (let ((x0 (($$atom car) ($$atom l0))))
                                       (($$atom memq)
                                        ($$atom x0)
                                        ($$atom live-v1)))
                                     (($$atom not)
                                      (($$atom memq)
                                       (($$atom car) ($$atom l0))
                                       ($$atom slots)))
                                     ($$atom #f))
                                 (($$atom loop0)
                                  ($$atom live-v1)
                                  (($$atom cons) ($$atom i0) ($$atom s0))
                                  (($$atom cdr) ($$atom l0))
                                  (($$atom +) ($$atom i0) ($$atom 1)))
                                 (($$atom loop0)
                                  ($$atom live-v1)
                                  ($$atom s0)
                                  (($$atom cdr) ($$atom l0))
                                  (($$atom +) ($$atom i0) ($$atom 1))))))))
         (($$atom loop0)
          ($$atom live-v0)
          ($$atom '())
          ($$atom regs)
          ($$atom 0))))))
 (define lowest-dead-slot
   (lambda (live0)
     (let ((num0 (let ((g1580 (let ((set0 (($$atom dead-slots)
                                           ($$atom live0))))
                                (if (($$atom null?) ($$atom set0))
                                    ($$atom #f)
                                    (($$atom apply)
                                     ($$atom min)
                                     ($$atom set0))))))
                   (if ($$atom g1580)
                       ($$atom g1580)
                       (($$atom +) ($$atom nb-slots) ($$atom 1))))))
       (($$atom +) ($$atom num0) ($$atom 10000)))))
 (define highest-live-slot
   (lambda (live0)
     (let ((num0 (let ((g1590 (($$atom highest)
                               (($$atom live-slots) ($$atom live0)))))
                   (if ($$atom g1590) ($$atom g1590) ($$atom 0)))))
       (($$atom +) ($$atom num0) ($$atom 10000)))))
 (define lowest-dead-reg
   (lambda (live0)
     (let ((x0 (let ((set0 (($$atom set-remove)
                            (($$atom dead-regs) ($$atom live0))
                            ($$atom 0))))
                 (if (($$atom null?) ($$atom set0))
                     ($$atom #f)
                     (($$atom apply) ($$atom min) ($$atom set0))))))
       (if ($$atom x0) ($$atom x0) ($$atom #f)))))
 (define highest-dead-reg
   (lambda (live0)
     (let ((x0 (($$atom highest) (($$atom dead-regs) ($$atom live0)))))
       (if ($$atom x0) ($$atom x0) ($$atom #f)))))
 (define highest
   (lambda (set0)
     (if (($$atom null?) ($$atom set0))
         ($$atom #f)
         (($$atom apply) ($$atom max) ($$atom set0)))))
 (define lowest
   (lambda (set0)
     (if (($$atom null?) ($$atom set0))
         ($$atom #f)
         (($$atom apply) ($$atom min) ($$atom set0)))))
 (define above
   (lambda (set0 n0)
     (($$atom set-keep)
      (lambda (x0) (($$atom >) ($$atom x0) ($$atom n0)))
      ($$atom set0))))
 (define below
   (lambda (set0 n0)
     (($$atom set-keep)
      (lambda (x0) (($$atom <) ($$atom x0) ($$atom n0)))
      ($$atom set0))))
 (define var->opnd
   (lambda (var0)
     (let ((x0 (($$atom assq) ($$atom var0) ($$atom constant-vars))))
       (if ($$atom x0)
           (($$atom cdr) ($$atom x0))
           (if (($$atom global?) ($$atom var0))
               (let ((name0 (($$atom var-name) ($$atom var0))))
                 (($$atom +)
                  (($$atom enter-opnd) ($$atom name0) ($$atom #t))
                  ($$atom 30000)))
               (let ((n0 (($$atom pos-in-list) ($$atom var0) ($$atom regs))))
                 (if ($$atom n0)
                     ($$atom n0)
                     (let ((n1 (($$atom pos-in-list)
                                ($$atom var0)
                                ($$atom slots))))
                       (if ($$atom n1)
                           (let ((num0 (($$atom -)
                                        ($$atom nb-slots)
                                        ($$atom n1))))
                             (($$atom +) ($$atom num0) ($$atom 10000)))
                           (let ((n2 (($$atom pos-in-list)
                                      ($$atom var0)
                                      ($$atom closed))))
                             (if ($$atom n2)
                                 (let ((index0 (($$atom +)
                                                ($$atom n2)
                                                ($$atom 1)))
                                       (base0 (($$atom var->opnd)
                                               ($$atom closure-env-var))))
                                   (($$atom +)
                                    (($$atom enter-opnd)
                                     ($$atom base0)
                                     ($$atom index0))
                                    ($$atom 40000)))
                                 (($$atom compiler-internal-error)
                                  ($$atom "var->opnd, variable is not accessible:")
                                  (($$atom vector-ref)
                                   ($$atom var0)
                                   ($$atom 1))))))))))))))
 (define source-comment
   (lambda (node0)
     (let ((x0 (($$atom make-comment))))
       (begin
         (($$atom comment-put!)
          ($$atom x0)
          ($$atom 'source)
          (($$atom vector-ref) ($$atom node0) ($$atom 5)))
         ($$atom x0)))))
 (define sort-variables
   (lambda (lst0)
     (($$atom sort-list)
      ($$atom lst0)
      (lambda (x0 y0)
        (($$atom string<?)
         (($$atom symbol->string) (($$atom vector-ref) ($$atom x0) ($$atom 1)))
         (($$atom symbol->string)
          (($$atom vector-ref) ($$atom y0) ($$atom 1))))))))
 (define add-constant-var
   (lambda (var0 opnd0)
     (set! constant-vars
           (($$atom cons)
            (($$atom cons) ($$atom var0) ($$atom opnd0))
            ($$atom constant-vars)))))
 (define let-constant-var
   (lambda (var0 opnd0 thunk0)
     (let ((x0 (($$atom assq) ($$atom var0) ($$atom constant-vars))))
       (let ((temp0 (($$atom cdr) ($$atom x0))))
         (begin
           (($$atom set-cdr!) ($$atom x0) ($$atom opnd0))
           (($$atom thunk0))
           (($$atom set-cdr!) ($$atom x0) ($$atom temp0)))))))
 (define constant-var?
   (lambda (var0) (($$atom assq) ($$atom var0) ($$atom constant-vars))))
 (define not-constant-var?
   (lambda (var0)
     (($$atom not) (($$atom assq) ($$atom var0) ($$atom constant-vars)))))
 (define add-known-proc
   (lambda (label0 proc0)
     (set! known-procs
           (($$atom cons)
            (($$atom cons) ($$atom label0) ($$atom proc0))
            ($$atom known-procs)))))
 (define gen-proc
   (lambda (proc0 bb0 context0 info-port0)
     (begin
       (($$atom trace-indent) ($$atom info-port0))
       (if ($$atom info-port0)
           (if (($$atom vector-ref) ($$atom proc0) ($$atom 6))
               (($$atom display)
                (($$atom vector-ref) ($$atom proc0) ($$atom 6))
                ($$atom info-port0))
               (($$atom display) ($$atom "\"unknown\"") ($$atom info-port0)))
           ($$atom #f))
       (let ((live0 (($$atom set-union)
                     (($$atom free-variables)
                      (($$atom prc-body) ($$atom proc0)))
                     ($$atom ret-var-set)))
             (lbl0 (($$atom bb-lbl-num) ($$atom bb0))))
         (begin
           (set! *bb* ($$atom bb0))
           (($$atom restore-context) ($$atom context0))
           (($$atom gen-node)
            (($$atom prc-body) ($$atom proc0))
            ($$atom ret-var-set)
            ($$atom 'tail)))))))
 (define schedule-gen-proc
   (lambda (proc0 closed-list0)
     (let ((lbl10 (($$atom bbs-new-lbl!) ($$atom *bbs*))))
       (let ((lbl20 (($$atom bbs-new-lbl!) ($$atom *bbs*))))
         (let ((context0
                (($$atom entry-context) ($$atom proc0) ($$atom closed-list0))))
           (let ((frame0 (($$atom context->frame)
                          ($$atom context0)
                          (($$atom set-union)
                           (($$atom free-variables)
                            (($$atom prc-body) ($$atom proc0)))
                           ($$atom ret-var-set)))))
             (let ((bb10 (let ((bbs0 ($$atom *bbs*))
                               (label-instr0
                                (let ((nb-parms0
                                       (($$atom length)
                                        (($$atom prc-parms) ($$atom proc0))))
                                      (min0 (($$atom prc-min) ($$atom proc0)))
                                      (rest?0 (($$atom prc-rest)
                                               ($$atom proc0)))
                                      (closed?0
                                       (($$atom not)
                                        (($$atom null?)
                                         ($$atom closed-list0))))
                                      (comment0
                                       (($$atom source-comment)
                                        ($$atom proc0))))
                                  (($$atom vector)
                                   ($$atom 'label)
                                   ($$atom frame0)
                                   ($$atom comment0)
                                   ($$atom lbl10)
                                   ($$atom 'entry)
                                   ($$atom nb-parms0)
                                   ($$atom min0)
                                   ($$atom rest?0)
                                   ($$atom closed?0)))))
                           (let ((bb0 (($$atom vector)
                                       ($$atom label-instr0)
                                       (($$atom cons)
                                        ($$atom '())
                                        ($$atom '()))
                                       ($$atom '())
                                       ($$atom '())
                                       ($$atom '()))))
                             (begin
                               (($$atom queue-put!)
                                (($$atom vector-ref) ($$atom bbs0) ($$atom 1))
                                ($$atom bb0))
                               ($$atom bb0))))))
               (let ((bb20 (($$atom make-bb)
                            (let ((comment0
                                   (($$atom source-comment) ($$atom proc0))))
                              (($$atom vector)
                               ($$atom 'label)
                               ($$atom frame0)
                               ($$atom comment0)
                               ($$atom lbl20)
                               ($$atom 'simple)))
                            ($$atom *bbs*))))
                 (begin
                   (($$atom vector-set!)
                    ($$atom context0)
                    ($$atom 5)
                    ($$atom bb10))
                   (let ((gvm-instr0
                          (let ((opnd0 (($$atom +)
                                        ($$atom lbl20)
                                        ($$atom 20000))))
                            (($$atom vector)
                             ($$atom 'jump)
                             ($$atom frame0)
                             ($$atom #f)
                             ($$atom opnd0)
                             ($$atom #f)
                             ($$atom #f)))))
                     (($$atom vector-set!)
                      ($$atom bb10)
                      ($$atom 2)
                      ($$atom gvm-instr0)))
                   (set! proc-queue
                         (($$atom cons)
                          (($$atom list)
                           ($$atom proc0)
                           ($$atom bb20)
                           ($$atom context0))
                          ($$atom proc-queue)))
                   (($$atom +) ($$atom lbl10) ($$atom 20000)))))))))))
 (define gen-node
   (lambda (node0 live0 why0)
     (if (($$atom cst?) ($$atom node0))
         (($$atom gen-return)
          (let ((val0 (($$atom cst-val) ($$atom node0))))
            (($$atom +)
             (($$atom enter-opnd) ($$atom val0) ($$atom #f))
             ($$atom 50000)))
          ($$atom why0)
          ($$atom node0))
         (if (($$atom ref?) ($$atom node0))
             (let ((var0 (($$atom vector-ref) ($$atom node0) ($$atom 6))))
               (let ((name0 (($$atom vector-ref) ($$atom var0) ($$atom 1))))
                 (($$atom gen-return)
                  (if (($$atom eq?) ($$atom why0) ($$atom 'side))
                      (($$atom make-obj) ($$atom '|#[undefined]|))
                      (if (($$atom global?) ($$atom var0))
                          (let ((prim0 (($$atom target.prim-info*)
                                        ($$atom name0)
                                        (($$atom vector-ref)
                                         ($$atom node0)
                                         ($$atom 4)))))
                            (if ($$atom prim0)
                                (($$atom make-obj) ($$atom prim0))
                                (($$atom var->opnd) ($$atom var0))))
                          (($$atom var->opnd) ($$atom var0))))
                  ($$atom why0)
                  ($$atom node0))))
             (if (($$atom set?) ($$atom node0))
                 (let ((src0 (($$atom gen-node)
                              (($$atom set-val) ($$atom node0))
                              (($$atom set-adjoin)
                               ($$atom live0)
                               (($$atom vector-ref) ($$atom node0) ($$atom 6)))
                              ($$atom 'keep))))
                   (let ((dst0 (($$atom var->opnd)
                                (($$atom vector-ref)
                                 ($$atom node0)
                                 ($$atom 6)))))
                     (begin
                       (($$atom put-copy)
                        ($$atom src0)
                        ($$atom dst0)
                        ($$atom #f)
                        ($$atom live0)
                        (($$atom source-comment) ($$atom node0)))
                       (($$atom gen-return)
                        (($$atom make-obj) ($$atom '|#[undefined]|))
                        ($$atom why0)
                        ($$atom node0)))))
                 (if (($$atom def?) ($$atom node0))
                     (($$atom compiler-internal-error)
                      ($$atom "gen-node, 'def' node not at root of parse tree"))
                     (if (($$atom tst?) ($$atom node0))
                         (($$atom gen-tst)
                          ($$atom node0)
                          ($$atom live0)
                          ($$atom why0))
                         (if (($$atom conj?) ($$atom node0))
                             (($$atom gen-conj/disj)
                              ($$atom node0)
                              ($$atom live0)
                              ($$atom why0))
                             (if (($$atom disj?) ($$atom node0))
                                 (($$atom gen-conj/disj)
                                  ($$atom node0)
                                  ($$atom live0)
                                  ($$atom why0))
                                 (if (($$atom prc?) ($$atom node0))
                                     (let ((closed#10
                                            (($$atom not-constant-closed-vars)
                                             ($$atom node0))))
                                       (let ((closed-list0
                                              (($$atom sort-variables)
                                               ($$atom closed#10))))
                                         (let ((proc-lbl0
                                                (($$atom schedule-gen-proc)
                                                 ($$atom node0)
                                                 ($$atom closed-list0))))
                                           (let ((opnd0 (if (($$atom null?)
                                                             ($$atom closed-list0))
                                                            (begin
                                                              (let ((label0 (($$atom lbl-num)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                     ($$atom proc-lbl0))))
                        (set! known-procs
                              (($$atom cons)
                               (($$atom cons) ($$atom label0) ($$atom node0))
                               ($$atom known-procs))))
                      ($$atom proc-lbl0))
                    (begin
                      (let ((n0 (($$atom -)
                                 ($$atom nb-slots)
                                 (let ((x0 (($$atom highest-live-slot)
                                            (($$atom set-union)
                                             ($$atom closed#10)
                                             ($$atom live0)))))
                                   (($$atom modulo)
                                    ($$atom x0)
                                    ($$atom 10000))))))
                        (begin
                          (set! nb-slots
                                (($$atom -) ($$atom nb-slots) ($$atom n0)))
                          (set! slots
                                (($$atom nth-after)
                                 ($$atom slots)
                                 ($$atom n0)))))
                      (($$atom push-slot))
                      (let ((var0 (($$atom make-temp-var) ($$atom 'closure)))
                            (slot0 (let ((num0 ($$atom nb-slots)))
                                     (($$atom +)
                                      ($$atom num0)
                                      ($$atom 10000)))))
                        (begin
                          (($$atom put-var) ($$atom slot0) ($$atom var0))
                          (let ((gvm-instr0
                                 (let ((parms0 (($$atom list)
                                                (let ((opnds0 (($$atom map)
                                                               ($$atom var->opnd)
                                                               ($$atom closed-list0)))
                                                      (lbl0 (($$atom modulo)
                                                             ($$atom proc-lbl0)
                                                             ($$atom 10000))))
                                                  (($$atom vector)
                                                   ($$atom slot0)
                                                   ($$atom lbl0)
                                                   ($$atom opnds0)))))
                                       (frame0 (let ((live1 (($$atom set-adjoin)
                                                             ($$atom live0)
                                                             ($$atom var0))))
                                                 (let ((size0 ($$atom nb-slots))
                                                       (slots0 ($$atom slots))
                                                       (regs0 ($$atom regs))
                                                       (closed0 ($$atom closed)))
                                                   (($$atom vector)
                                                    ($$atom size0)
                                                    ($$atom slots0)
                                                    ($$atom regs0)
                                                    ($$atom closed0)
                                                    ($$atom live1)))))
                                       (comment0
                                        (($$atom source-comment)
                                         ($$atom node0))))
                                   (($$atom vector)
                                    ($$atom 'close)
                                    ($$atom frame0)
                                    ($$atom comment0)
                                    ($$atom parms0))))
                                (bb0 ($$atom *bb*)))
                            (($$atom queue-put!)
                             (($$atom vector-ref) ($$atom bb0) ($$atom 1))
                             ($$atom gvm-instr0)))
                          ($$atom slot0)))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                             (($$atom gen-return)
                                              ($$atom opnd0)
                                              ($$atom why0)
                                              ($$atom node0))))))
                                     (if (($$atom app?) ($$atom node0))
                                         (($$atom gen-call)
                                          ($$atom node0)
                                          ($$atom live0)
                                          ($$atom why0))
                                         (if (($$atom fut?) ($$atom node0))
                                             (($$atom gen-fut)
                                              ($$atom node0)
                                              ($$atom live0)
                                              ($$atom why0))
                                             (($$atom compiler-internal-error)
                                              ($$atom "gen-node, unknown parse tree node type:")
                                              ($$atom node0))))))))))))))
 (define gen-return
   (lambda (opnd0 why0 node0)
     (if (($$atom eq?) ($$atom why0) ($$atom 'tail))
         (let ((var0 (($$atom make-temp-var) ($$atom 'result))))
           (begin
             (($$atom put-copy)
              ($$atom opnd0)
              ($$atom target.proc-result)
              ($$atom var0)
              ($$atom ret-var-set)
              (($$atom source-comment) ($$atom node0)))
             (let ((ret-opnd0 (($$atom var->opnd) ($$atom ret-var))))
               (begin
                 (($$atom seal-bb)
                  (let ((decl0 (($$atom node-decl) ($$atom node0))))
                    (($$atom declaration-value)
                     ($$atom interrupts-enabled-sym)
                     ($$atom #f)
                     ($$atom #t)
                     ($$atom decl0)))
                  ($$atom 'return))
                 (($$atom dealloc-slots) ($$atom nb-slots))
                 (let ((gvm-instr0
                        (let ((frame0 (($$atom current-frame)
                                       (($$atom list) ($$atom var0)))))
                          (($$atom vector)
                           ($$atom 'jump)
                           ($$atom frame0)
                           ($$atom #f)
                           ($$atom ret-opnd0)
                           ($$atom #f)
                           ($$atom #f))))
                       (bb0 ($$atom *bb*)))
                   (($$atom vector-set!)
                    ($$atom bb0)
                    ($$atom 2)
                    ($$atom gvm-instr0)))))))
         ($$atom opnd0))))
 (define not-constant-closed-vars
   (lambda (val0)
     (($$atom set-keep)
      ($$atom not-constant-var?)
      (($$atom free-variables) ($$atom val0)))))
 (define predicate
   (lambda (node0 live0 cont0)
     (letrec ((generic-true-test0
               (lambda ()
                 (($$atom predicate-test)
                  ($$atom node0)
                  ($$atom live0)
                  ($$atom **not-proc-obj)
                  ($$atom 0)
                  (($$atom list) ($$atom node0))
                  ($$atom cont*0))))
              (cont*0 (lambda (true-lbl0 false-lbl0)
                        (($$atom cont0)
                         ($$atom false-lbl0)
                         ($$atom true-lbl0)))))
       (if (let ((g1600 (($$atom conj?) ($$atom node0))))
             (if ($$atom g1600)
                 ($$atom g1600)
                 (($$atom disj?) ($$atom node0))))
           (($$atom predicate-conj/disj)
            ($$atom node0)
            ($$atom live0)
            ($$atom cont0))
           (if (($$atom app?) ($$atom node0))
               (let ((proc0 (($$atom node->proc)
                             (($$atom app-oper) ($$atom node0)))))
                 (if ($$atom proc0)
                     (let ((spec0 (let ((decl0 (($$atom node-decl)
                                                ($$atom node0))))
                                    ((($$atom vector-ref)
                                      ($$atom proc0)
                                      ($$atom 7))
                                     ($$atom decl0)))))
                       (if (if (($$atom vector-ref) ($$atom spec0) ($$atom 5))
                               (let ((call-pat0
                                      (($$atom vector-ref)
                                       ($$atom spec0)
                                       ($$atom 4)))
                                     (n0 (($$atom length)
                                          (($$atom app-args) ($$atom node0)))))
                                 (($$atom pattern-member?)
                                  ($$atom n0)
                                  ($$atom call-pat0)))
                               ($$atom #f))
                           (if (($$atom eq?)
                                ($$atom spec0)
                                ($$atom **not-proc-obj))
                               (($$atom predicate)
                                (($$atom car)
                                 (($$atom app-args) ($$atom node0)))
                                ($$atom live0)
                                ($$atom cont*0))
                               (($$atom predicate-test)
                                ($$atom node0)
                                ($$atom live0)
                                ($$atom spec0)
                                (($$atom vector-ref) ($$atom proc0) ($$atom 9))
                                (($$atom app-args) ($$atom node0))
                                ($$atom cont0)))
                           (($$atom generic-true-test0))))
                     (($$atom generic-true-test0))))
               (($$atom generic-true-test0)))))))
 (define predicate-conj/disj
   (lambda (node0 live0 cont0)
     (let ((pre0 (if (($$atom conj?) ($$atom node0))
                     (($$atom conj-pre) ($$atom node0))
                     (($$atom disj-pre) ($$atom node0)))))
       (let ((alt0 (if (($$atom conj?) ($$atom node0))
                       (($$atom conj-alt) ($$atom node0))
                       (($$atom disj-alt) ($$atom node0)))))
         (let ((alt-live0
                (($$atom set-union)
                 ($$atom live0)
                 (($$atom free-variables) ($$atom alt0)))))
           (let ((cont1 (lambda (true-lbl0 false-lbl0)
                          (let ((pre-context0 (($$atom current-context))))
                            (begin
                              (set! *bb*
                                    (($$atom make-bb)
                                     (($$atom make-label-simple)
                                      (if (($$atom conj?) ($$atom node0))
                                          ($$atom true-lbl0)
                                          ($$atom false-lbl0))
                                      (($$atom current-frame)
                                       ($$atom alt-live0))
                                      (($$atom source-comment) ($$atom alt0)))
                                     ($$atom *bbs*)))
                              (($$atom predicate)
                               ($$atom alt0)
                               ($$atom live0)
                               (lambda (true-lbl20 false-lbl20)
                                 (let ((alt-context0
                                        (($$atom current-context))))
                                   (begin
                                     (($$atom restore-context)
                                      ($$atom pre-context0))
                                     (set! *bb*
                                           (($$atom make-bb)
                                            (($$atom make-label-simple)
                                             (if (($$atom conj?)
                                                  ($$atom node0))
                                                 ($$atom false-lbl0)
                                                 ($$atom true-lbl0))
                                             (($$atom current-frame)
                                              ($$atom live0))
                                             (($$atom source-comment)
                                              ($$atom alt0)))
                                            ($$atom *bbs*)))
                                     (($$atom merge-contexts-and-seal-bb)
                                      ($$atom alt-context0)
                                      ($$atom live0)
                                      (($$atom intrs-enabled?)
                                       (($$atom node-decl) ($$atom node0)))
                                      ($$atom 'internal)
                                      (($$atom source-comment) ($$atom node0)))
                                     (($$atom bb-put-branch!)
                                      ($$atom *bb*)
                                      (($$atom make-jump)
                                       (($$atom make-lbl)
                                        (if (($$atom conj?) ($$atom node0))
                                            ($$atom false-lbl20)
                                            ($$atom true-lbl20)))
                                       ($$atom #f)
                                       ($$atom #f)
                                       (($$atom current-frame) ($$atom live0))
                                       ($$atom #f)))
                                     (($$atom cont0)
                                      ($$atom true-lbl20)
                                      ($$atom false-lbl20)))))))))))
             (letrec ((cont*0 (lambda (true-lbl0 false-lbl0)
                                (($$atom cont1)
                                 ($$atom false-lbl0)
                                 ($$atom true-lbl0))))
                      (generic-true-test0
                       (lambda ()
                         (($$atom predicate-test)
                          ($$atom pre0)
                          ($$atom alt-live0)
                          ($$atom **not-proc-obj)
                          ($$atom 0)
                          (($$atom list) ($$atom pre0))
                          ($$atom cont*0)))))
               (if (let ((g1610 (if (($$atom vector?) ($$atom pre0))
                                    (if (($$atom >)
                                         (($$atom vector-length) ($$atom pre0))
                                         ($$atom 0))
                                        (($$atom eq?)
                                         (($$atom vector-ref)
                                          ($$atom pre0)
                                          ($$atom 0))
                                         ($$atom conj-tag))
                                        ($$atom #f))
                                    ($$atom #f))))
                     (if ($$atom g1610)
                         ($$atom g1610)
                         (if (($$atom vector?) ($$atom pre0))
                             (if (($$atom >)
                                  (($$atom vector-length) ($$atom pre0))
                                  ($$atom 0))
                                 (($$atom eq?)
                                  (($$atom vector-ref)
                                   ($$atom pre0)
                                   ($$atom 0))
                                  ($$atom disj-tag))
                                 ($$atom #f))
                             ($$atom #f))))
                   (($$atom predicate-conj/disj)
                    ($$atom pre0)
                    ($$atom alt-live0)
                    ($$atom cont1))
                   (if (($$atom app?) ($$atom pre0))
                       (let ((proc0 (($$atom node->proc)
                                     (($$atom app-oper) ($$atom pre0)))))
                         (if ($$atom proc0)
                             (let ((spec0 (let ((decl0 (($$atom node-decl)
                                                        ($$atom pre0))))
                                            ((($$atom vector-ref)
                                              ($$atom proc0)
                                              ($$atom 7))
                                             ($$atom decl0)))))
                               (if (if (($$atom vector-ref)
                                        ($$atom spec0)
                                        ($$atom 5))
                                       (let ((n0 (($$atom length)
                                                  (($$atom app-args)
                                                   ($$atom pre0))))
                                             (call-pat0
                                              (($$atom vector-ref)
                                               ($$atom spec0)
                                               ($$atom 4))))
                                         (($$atom pattern-member?)
                                          ($$atom n0)
                                          ($$atom call-pat0)))
                                       ($$atom #f))
                                   (if (($$atom eq?)
                                        ($$atom spec0)
                                        ($$atom **not-proc-obj))
                                       (($$atom predicate)
                                        (($$atom car)
                                         (($$atom app-args) ($$atom pre0)))
                                        ($$atom alt-live0)
                                        ($$atom cont*0))
                                       (($$atom predicate-test)
                                        ($$atom pre0)
                                        ($$atom alt-live0)
                                        ($$atom spec0)
                                        (($$atom vector-ref)
                                         ($$atom proc0)
                                         ($$atom 9))
                                        (($$atom app-args) ($$atom pre0))
                                        ($$atom cont1)))
                                   (($$atom generic-true-test0))))
                             (($$atom generic-true-test0))))
                       (($$atom generic-true-test0)))))))))))
 (define predicate-test
   (lambda (node0 live0 test0 strict-pat0 args0 cont0)
     (letrec ((loop0 (lambda (node1 live1 test1 cont1 args*0 liv0 vars*0)
                       (if (($$atom null?) ($$atom args*0))
                           (let ((true-lbl0
                                  (($$atom bbs-new-lbl!) ($$atom *bbs*))))
                             (let ((false-lbl0
                                    (($$atom bbs-new-lbl!) ($$atom *bbs*))))
                               (begin
                                 (($$atom seal-bb)
                                  (let ((decl0 (($$atom node-decl)
                                                ($$atom node1))))
                                    (($$atom declaration-value)
                                     ($$atom interrupts-enabled-sym)
                                     ($$atom #f)
                                     ($$atom #t)
                                     ($$atom decl0)))
                                  ($$atom 'internal))
                                 (let ((gvm-instr0
                                        (let ((opnds0 (($$atom map)
                                                       ($$atom var->opnd)
                                                       (($$atom reverse)
                                                        ($$atom vars*0))))
                                              (frame0 (let ((size0 ($$atom nb-slots))
                                                            (slots0 ($$atom slots))
                                                            (regs0 ($$atom regs))
                                                            (closed0 ($$atom closed)))
                                                        (($$atom vector)
                                                         ($$atom size0)
                                                         ($$atom slots0)
                                                         ($$atom regs0)
                                                         ($$atom closed0)
                                                         ($$atom live1))))
                                              (comment0
                                               (($$atom source-comment)
                                                ($$atom node1))))
                                          (($$atom vector)
                                           ($$atom 'ifjump)
                                           ($$atom frame0)
                                           ($$atom comment0)
                                           ($$atom test1)
                                           ($$atom opnds0)
                                           ($$atom true-lbl0)
                                           ($$atom false-lbl0)
                                           ($$atom #f))))
                                       (bb0 ($$atom *bb*)))
                                   (($$atom vector-set!)
                                    ($$atom bb0)
                                    ($$atom 2)
                                    ($$atom gvm-instr0)))
                                 (($$atom cont1)
                                  ($$atom true-lbl0)
                                  ($$atom false-lbl0)))))
                           (let ((needed0 (($$atom vals-live-vars)
                                           ($$atom liv0)
                                           (($$atom cdr) ($$atom args*0)))))
                             (let ((var0 (($$atom save-var)
                                          (($$atom gen-node)
                                           (($$atom car) ($$atom args*0))
                                           ($$atom needed0)
                                           ($$atom 'need))
                                          (($$atom make-temp-var)
                                           ($$atom 'predicate))
                                          ($$atom needed0)
                                          (($$atom source-comment)
                                           (($$atom car) ($$atom args*0))))))
                               (($$atom loop0)
                                ($$atom node1)
                                ($$atom live1)
                                ($$atom test1)
                                ($$atom cont1)
                                (($$atom cdr) ($$atom args*0))
                                (($$atom set-adjoin)
                                 ($$atom liv0)
                                 ($$atom var0))
                                (($$atom cons)
                                 ($$atom var0)
                                 ($$atom vars*0)))))))))
       (($$atom loop0)
        ($$atom node0)
        ($$atom live0)
        ($$atom test0)
        ($$atom cont0)
        ($$atom args0)
        ($$atom live0)
        ($$atom '())))))
 (define gen-tst
   (lambda (node0 live0 why0)
     (let ((alt0 (($$atom tst-alt) ($$atom node0)))
           (con0 (($$atom tst-con) ($$atom node0)))
           (pre0 (($$atom tst-pre) ($$atom node0))))
       (let ((cont0 (lambda (true-lbl0 false-lbl0)
                      (let ((pre-context0 (($$atom current-context)))
                            (true-bb0
                             (($$atom make-bb)
                              (($$atom make-label-simple)
                               ($$atom true-lbl0)
                               (($$atom current-frame)
                                (($$atom set-union)
                                 ($$atom live0)
                                 (($$atom free-variables) ($$atom con0))))
                               (($$atom source-comment) ($$atom con0)))
                              ($$atom *bbs*)))
                            (false-bb0
                             (($$atom make-bb)
                              (($$atom make-label-simple)
                               ($$atom false-lbl0)
                               (($$atom current-frame)
                                (($$atom set-union)
                                 ($$atom live0)
                                 (($$atom free-variables) ($$atom alt0))))
                               (($$atom source-comment) ($$atom alt0)))
                              ($$atom *bbs*))))
                        (begin
                          (set! *bb* ($$atom true-bb0))
                          (let ((con-opnd0
                                 (($$atom gen-node)
                                  ($$atom con0)
                                  ($$atom live0)
                                  ($$atom why0))))
                            (if (($$atom eq?) ($$atom why0) ($$atom 'tail))
                                (begin
                                  (($$atom restore-context)
                                   ($$atom pre-context0))
                                  (set! *bb* ($$atom false-bb0))
                                  (($$atom gen-node)
                                   ($$atom alt0)
                                   ($$atom live0)
                                   ($$atom why0)))
                                (let ((result-var0
                                       (($$atom make-temp-var)
                                        ($$atom 'result))))
                                  (let ((live-after0
                                         (($$atom set-adjoin)
                                          ($$atom live0)
                                          ($$atom result-var0))))
                                    (begin
                                      (($$atom save-opnd-to-reg)
                                       ($$atom con-opnd0)
                                       ($$atom target.proc-result)
                                       ($$atom result-var0)
                                       ($$atom live0)
                                       (($$atom source-comment) ($$atom con0)))
                                      (let ((con-context0
                                             (($$atom current-context)))
                                            (con-bb0 ($$atom *bb*)))
                                        (begin
                                          (($$atom restore-context)
                                           ($$atom pre-context0))
                                          (set! *bb* ($$atom false-bb0))
                                          (($$atom save-opnd-to-reg)
                                           (($$atom gen-node)
                                            ($$atom alt0)
                                            ($$atom live0)
                                            ($$atom why0))
                                           ($$atom target.proc-result)
                                           ($$atom result-var0)
                                           ($$atom live0)
                                           (($$atom source-comment)
                                            ($$atom alt0)))
                                          (let ((next-lbl0
                                                 (($$atom bbs-new-lbl!)
                                                  ($$atom *bbs*)))
                                                (alt-bb0 ($$atom *bb*)))
                                            (begin
                                              (if (($$atom >)
                                                   (($$atom context-nb-slots)
                                                    ($$atom con-context0))
                                                   ($$atom nb-slots))
                                                  (begin
                                                    (($$atom seal-bb)
                                                     (($$atom intrs-enabled?)
                                                      (($$atom node-decl)
                                                       ($$atom node0)))
                                                     ($$atom 'internal))
                                                    (let ((alt-context0
                                                           (($$atom current-context))))
                                                      (begin
                                                        (($$atom restore-context)
                                                         ($$atom con-context0))
                                                        (set! *bb*
                                                              ($$atom con-bb0))
                                                        (($$atom merge-contexts-and-seal-bb)
                                                         ($$atom alt-context0)
                                                         ($$atom live-after0)
                                                         (($$atom intrs-enabled?)
                                                          (($$atom node-decl)
                                                           ($$atom node0)))
                                                         ($$atom 'internal)
                                                         (($$atom source-comment)
                                                          ($$atom node0))))))
                                                  (let ((alt-context0
                                                         (($$atom current-context))))
                                                    (begin
                                                      (($$atom restore-context)
                                                       ($$atom con-context0))
                                                      (set! *bb*
                                                            ($$atom con-bb0))
                                                      (($$atom seal-bb)
                                                       (($$atom intrs-enabled?)
                                                        (($$atom node-decl)
                                                         ($$atom node0)))
                                                       ($$atom 'internal))
                                                      (let ((con-context*0
                                                             (($$atom current-context))))
                                                        (begin
                                                          (($$atom restore-context)
                                                           ($$atom alt-context0))
                                                          (set! *bb*
                                                                ($$atom alt-bb0))
                                                          (($$atom merge-contexts-and-seal-bb)
                                                           ($$atom con-context*0)
                                                           ($$atom live-after0)
                                                           (($$atom intrs-enabled?)
                                                            (($$atom node-decl)
                                                             ($$atom node0)))
                                                           ($$atom 'internal)
                                                           (($$atom source-comment)
                                                            ($$atom node0))))))))
                                              (let ((frame0 (($$atom current-frame)
                                                             ($$atom live-after0))))
                                                (begin
                                                  (($$atom bb-put-branch!)
                                                   ($$atom con-bb0)
                                                   (($$atom make-jump)
                                                    (($$atom make-lbl)
                                                     ($$atom next-lbl0))
                                                    ($$atom #f)
                                                    ($$atom #f)
                                                    ($$atom frame0)
                                                    ($$atom #f)))
                                                  (($$atom bb-put-branch!)
                                                   ($$atom alt-bb0)
                                                   (($$atom make-jump)
                                                    (($$atom make-lbl)
                                                     ($$atom next-lbl0))
                                                    ($$atom #f)
                                                    ($$atom #f)
                                                    ($$atom frame0)
                                                    ($$atom #f)))
                                                  (set! *bb*
                                                        (($$atom make-bb)
                                                         (($$atom make-label-simple)
                                                          ($$atom next-lbl0)
                                                          ($$atom frame0)
                                                          (($$atom source-comment)
                                                           ($$atom node0)))
                                                         ($$atom *bbs*)))
                                                  ($$atom target.proc-result))))))))))))))))
             (live1 (($$atom set-union)
                     ($$atom live0)
                     (($$atom free-variables) ($$atom con0))
                     (($$atom free-variables) ($$atom alt0)))))
         (letrec ((generic-true-test0
                   (lambda ()
                     (let ((test0 ($$atom **not-proc-obj))
                           (args0 (($$atom list) ($$atom pre0))))
                       (letrec ((loop0 (lambda (pre1
                                                live2
                                                cont*1
                                                test1
                                                args*0
                                                liv0
                                                vars*0)
                                         (if (($$atom null?) ($$atom args*0))
                                             (let ((true-lbl0
                                                    (($$atom bbs-new-lbl!)
                                                     ($$atom *bbs*))))
                                               (let ((false-lbl0
                                                      (($$atom bbs-new-lbl!)
                                                       ($$atom *bbs*))))
                                                 (begin
                                                   (($$atom seal-bb)
                                                    (($$atom intrs-enabled?)
                                                     (($$atom node-decl)
                                                      ($$atom pre1)))
                                                    ($$atom 'internal))
                                                   (($$atom bb-put-branch!)
                                                    ($$atom *bb*)
                                                    (($$atom make-ifjump)
                                                     ($$atom test1)
                                                     (($$atom map)
                                                      ($$atom var->opnd)
                                                      (($$atom reverse)
                                                       ($$atom vars*0)))
                                                     ($$atom true-lbl0)
                                                     ($$atom false-lbl0)
                                                     ($$atom #f)
                                                     (($$atom current-frame)
                                                      ($$atom live2))
                                                     (($$atom source-comment)
                                                      ($$atom pre1))))
                                                   (($$atom cont*1)
                                                    ($$atom true-lbl0)
                                                    ($$atom false-lbl0)))))
                                             (let ((needed0 (let ((vals0 (($$atom cdr)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                  ($$atom args*0))))
                      (if (($$atom null?) ($$atom vals0))
                          ($$atom liv0)
                          (let ((live3 ((lambda sets0
                                          (letrec ((union0 (lambda (s10 s20)
                                                             (if (($$atom null?)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                          ($$atom s10))
                         ($$atom s20)
                         (if (($$atom memq)
                              (($$atom car) ($$atom s10))
                              ($$atom s20))
                             (($$atom union0)
                              (($$atom cdr) ($$atom s10))
                              ($$atom s20))
                             (($$atom cons)
                              (($$atom car) ($$atom s10))
                              (($$atom union0)
                               (($$atom cdr) ($$atom s10))
                               ($$atom s20))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                            (if (($$atom null?) ($$atom sets0))
                                                ($$atom '())
                                                (let ((rest0 (($$atom cdr)
                                                              ($$atom sets0)))
                                                      (first0 (($$atom union0)
                                                               ($$atom '())
                                                               (($$atom car)
                                                                ($$atom sets0)))))
                                                  (if (($$atom null?)
                                                       ($$atom rest0))
                                                      ($$atom first0)
                                                      (let ((rest1 (($$atom cdr)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                            ($$atom rest0)))
                    (first1 (($$atom union0)
                             ($$atom first0)
                             (($$atom car) ($$atom rest0)))))
                (if (($$atom null?) ($$atom rest1))
                    ($$atom first1)
                    (let ((first2 (($$atom union0)
                                   ($$atom first1)
                                   (($$atom car) ($$atom rest1))))
                          (rest2 (($$atom cdr) ($$atom rest1))))
                      (if (($$atom null?) ($$atom rest2))
                          ($$atom first2)
                          (let ((first3 (($$atom union0)
                                         ($$atom first2)
                                         (($$atom car) ($$atom rest2))))
                                (rest3 (($$atom cdr) ($$atom rest2))))
                            (if (($$atom null?) ($$atom rest3))
                                ($$atom first3)
                                (let ((rest4 (($$atom cdr) ($$atom rest3)))
                                      (first4 (($$atom union0)
                                               ($$atom first3)
                                               (($$atom car) ($$atom rest3)))))
                                  (if (($$atom null?) ($$atom rest4))
                                      ($$atom first4)
                                      (($$atom n-ary)
                                       ($$atom union0)
                                       (($$atom union0)
                                        ($$atom first4)
                                        (($$atom car) ($$atom rest4)))
                                       (($$atom cdr)
                                        ($$atom rest4))))))))))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                        ($$atom liv0)
                                        (($$atom free-variables)
                                         (($$atom car) ($$atom vals0)))))
                                (vals1 (($$atom cdr) ($$atom vals0))))
                            (if (($$atom null?) ($$atom vals1))
                                ($$atom live3)
                                (($$atom vals-live-vars)
                                 (($$atom set-union)
                                  ($$atom live3)
                                  (($$atom free-variables)
                                   (($$atom car) ($$atom vals1))))
                                 (($$atom cdr) ($$atom vals1)))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                               (let ((var0 (($$atom save-var)
                                                            (($$atom gen-node)
                                                             (($$atom car)
                                                              ($$atom args*0))
                                                             ($$atom needed0)
                                                             ($$atom 'need))
                                                            (($$atom vector)
                                                             ($$atom var-tag)
                                                             ($$atom 'predicate)
                                                             ($$atom #t)
                                                             ($$atom '())
                                                             ($$atom '())
                                                             ($$atom #f)
                                                             ($$atom #f))
                                                            ($$atom needed0)
                                                            (let ((node1 (($$atom car)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                  ($$atom args*0))))
                      (let ((x0 (($$atom make-comment))))
                        (begin
                          (($$atom comment-put!)
                           ($$atom x0)
                           ($$atom 'source)
                           (($$atom vector-ref) ($$atom node1) ($$atom 5)))
                          ($$atom x0)))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                 (($$atom loop0)
                                                  ($$atom pre1)
                                                  ($$atom live2)
                                                  ($$atom cont*1)
                                                  ($$atom test1)
                                                  (($$atom cdr)
                                                   ($$atom args*0))
                                                  (($$atom set-adjoin)
                                                   ($$atom liv0)
                                                   ($$atom var0))
                                                  (($$atom cons)
                                                   ($$atom var0)
                                                   ($$atom vars*0)))))))))
                         (($$atom loop0)
                          ($$atom pre0)
                          ($$atom live1)
                          ($$atom cont*0)
                          ($$atom test0)
                          ($$atom args0)
                          ($$atom live1)
                          ($$atom '()))))))
                  (cont*0 (lambda (true-lbl0 false-lbl0)
                            (($$atom cont0)
                             ($$atom false-lbl0)
                             ($$atom true-lbl0)))))
           (if (let ((g1620 (($$atom conj?) ($$atom pre0))))
                 (if ($$atom g1620)
                     ($$atom g1620)
                     (($$atom disj?) ($$atom pre0))))
               (($$atom predicate-conj/disj)
                ($$atom pre0)
                ($$atom live1)
                ($$atom cont0))
               (if (($$atom app?) ($$atom pre0))
                   (let ((proc0 (($$atom node->proc)
                                 (($$atom app-oper) ($$atom pre0)))))
                     (if ($$atom proc0)
                         (let ((spec0 (($$atom specialize-for-call)
                                       ($$atom proc0)
                                       (($$atom node-decl) ($$atom pre0)))))
                           (if (if (($$atom proc-obj-test) ($$atom spec0))
                                   (($$atom nb-args-conforms?)
                                    (($$atom length)
                                     (($$atom app-args) ($$atom pre0)))
                                    (($$atom proc-obj-call-pat)
                                     ($$atom spec0)))
                                   ($$atom #f))
                               (if (($$atom eq?)
                                    ($$atom spec0)
                                    ($$atom **not-proc-obj))
                                   (($$atom predicate)
                                    (($$atom car)
                                     (($$atom app-args) ($$atom pre0)))
                                    ($$atom live1)
                                    ($$atom cont*0))
                                   (($$atom predicate-test)
                                    ($$atom pre0)
                                    ($$atom live1)
                                    ($$atom spec0)
                                    (($$atom proc-obj-strict-pat)
                                     ($$atom proc0))
                                    (($$atom app-args) ($$atom pre0))
                                    ($$atom cont0)))
                               (($$atom generic-true-test0))))
                         (($$atom generic-true-test0))))
                   (($$atom generic-true-test0)))))))))
 (define nb-args-conforms?
   (lambda (n0 call-pat0)
     (($$atom pattern-member?) ($$atom n0) ($$atom call-pat0))))
 (define merge-contexts-and-seal-bb
   (lambda (other-context0 live0 poll?0 where0 comment0)
     (let ((other-entry-bb0
            (($$atom vector-ref) ($$atom other-context0) ($$atom 5)))
           (other-poll0
            (($$atom vector-ref) ($$atom other-context0) ($$atom 4)))
           (other-slots0
            (($$atom vector-ref) ($$atom other-context0) ($$atom 1)))
           (other-regs0
            (($$atom vector-ref) ($$atom other-context0) ($$atom 2)))
           (other-nb-slots0
            (($$atom vector-ref) ($$atom other-context0) ($$atom 0)))
           (live-v0 (($$atom live-vars) ($$atom live0))))
       (begin
         (letrec ((loop10 (lambda (comment1 other-regs1 live-v1 i0)
                            (if (($$atom >=) ($$atom i0) ($$atom 0))
                                (let ((var0 (($$atom reg->var)
                                             ($$atom regs)
                                             ($$atom i0)))
                                      (other-var0
                                       (($$atom reg->var)
                                        ($$atom other-regs1)
                                        ($$atom i0))))
                                  (begin
                                    (if (if (($$atom eq?)
                                             ($$atom var0)
                                             ($$atom other-var0))
                                            ($$atom #f)
                                            (($$atom memq)
                                             ($$atom other-var0)
                                             ($$atom live-v1)))
                                        (begin
                                          (($$atom put-var)
                                           ($$atom i0)
                                           ($$atom empty-var))
                                          (if (let ((g1630 (($$atom not)
                                                            (($$atom memq)
                                                             ($$atom var0)
                                                             ($$atom live-v1)))))
                                                (if ($$atom g1630)
                                                    ($$atom g1630)
                                                    (let ((g1640 (($$atom memq)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                          ($$atom var0)
                          ($$atom regs))))
              (if ($$atom g1640)
                  ($$atom g1640)
                  (($$atom memq) ($$atom var0) ($$atom slots))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                              ($$atom #f)
                                              (let ((top0 (let ((num0 (($$atom +)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                               ($$atom nb-slots)
                               ($$atom 1))))
                    (($$atom +) ($$atom num0) ($$atom 10000)))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                (($$atom put-copy)
                                                 ($$atom i0)
                                                 ($$atom top0)
                                                 ($$atom var0)
                                                 ($$atom live-v1)
                                                 ($$atom comment1))))
                                          (($$atom put-copy)
                                           (($$atom var->opnd)
                                            ($$atom other-var0))
                                           ($$atom i0)
                                           ($$atom other-var0)
                                           ($$atom live-v1)
                                           ($$atom comment1)))
                                        ($$atom #f))
                                    (($$atom loop10)
                                     ($$atom comment1)
                                     ($$atom other-regs1)
                                     ($$atom live-v1)
                                     (($$atom -) ($$atom i0) ($$atom 1)))))
                                ($$atom #f)))))
           (($$atom loop10)
            ($$atom comment0)
            ($$atom other-regs0)
            ($$atom live-v0)
            (($$atom -) ($$atom target.nb-regs) ($$atom 1))))
         (letrec ((loop20 (lambda (comment1
                                   other-slots1
                                   other-nb-slots1
                                   live-v1
                                   i0)
                            (if (($$atom <=)
                                 ($$atom i0)
                                 ($$atom other-nb-slots1))
                                (let ((var0 (($$atom stk->var)
                                             ($$atom slots)
                                             ($$atom i0)))
                                      (other-var0
                                       (($$atom stk->var)
                                        ($$atom other-slots1)
                                        ($$atom i0))))
                                  (begin
                                    (if (if (($$atom eq?)
                                             ($$atom var0)
                                             ($$atom other-var0))
                                            ($$atom #f)
                                            (($$atom memq)
                                             ($$atom other-var0)
                                             ($$atom live-v1)))
                                        (let ((s0 (($$atom +)
                                                   ($$atom i0)
                                                   ($$atom 10000))))
                                          (begin
                                            (if (($$atom <=)
                                                 ($$atom i0)
                                                 ($$atom nb-slots))
                                                (($$atom put-var)
                                                 ($$atom s0)
                                                 ($$atom empty-var))
                                                ($$atom #f))
                                            (if (let ((g1650 (($$atom not)
                                                              (($$atom memq)
                                                               ($$atom var0)
                                                               ($$atom live-v1)))))
                                                  (if ($$atom g1650)
                                                      ($$atom g1650)
                                                      (let ((g1660 (($$atom memq)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                            ($$atom var0)
                            ($$atom regs))))
                (if ($$atom g1660)
                    ($$atom g1660)
                    (($$atom memq) ($$atom var0) ($$atom slots))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                ($$atom #f)
                                                (let ((top0 (let ((num0 (($$atom +)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                 ($$atom nb-slots)
                                 ($$atom 1))))
                      (($$atom +) ($$atom num0) ($$atom 10000)))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                  (($$atom put-copy)
                                                   ($$atom s0)
                                                   ($$atom top0)
                                                   ($$atom var0)
                                                   ($$atom live-v1)
                                                   ($$atom comment1))))
                                            (($$atom put-copy)
                                             (($$atom var->opnd)
                                              ($$atom other-var0))
                                             ($$atom s0)
                                             ($$atom other-var0)
                                             ($$atom live-v1)
                                             ($$atom comment1))))
                                        (if (($$atom >)
                                             ($$atom i0)
                                             ($$atom nb-slots))
                                            (let ((top0 (let ((num0 (($$atom +)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                             ($$atom nb-slots)
                             ($$atom 1))))
                  (($$atom +) ($$atom num0) ($$atom 10000)))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                              (($$atom put-copy)
                                               (($$atom make-obj)
                                                ($$atom '|#[undefined]|))
                                               ($$atom top0)
                                               ($$atom empty-var)
                                               ($$atom live-v1)
                                               ($$atom comment1)))
                                            ($$atom #f)))
                                    (($$atom loop20)
                                     ($$atom comment1)
                                     ($$atom other-slots1)
                                     ($$atom other-nb-slots1)
                                     ($$atom live-v1)
                                     (($$atom +) ($$atom i0) ($$atom 1)))))
                                ($$atom #f)))))
           (($$atom loop20)
            ($$atom comment0)
            ($$atom other-slots0)
            ($$atom other-nb-slots0)
            ($$atom live-v0)
            ($$atom 1)))
         (($$atom dealloc-slots)
          (($$atom -) ($$atom nb-slots) ($$atom other-nb-slots0)))
         (letrec ((loop30 (lambda (other-regs1 i0)
                            (if (($$atom >=) ($$atom i0) ($$atom 0))
                                (let ((var0 (($$atom reg->var)
                                             ($$atom regs)
                                             ($$atom i0)))
                                      (other-var0
                                       (($$atom reg->var)
                                        ($$atom other-regs1)
                                        ($$atom i0))))
                                  (begin
                                    (if (($$atom eq?)
                                         ($$atom var0)
                                         ($$atom other-var0))
                                        ($$atom #f)
                                        (($$atom put-var)
                                         ($$atom i0)
                                         ($$atom empty-var)))
                                    (($$atom loop30)
                                     ($$atom other-regs1)
                                     (($$atom -) ($$atom i0) ($$atom 1)))))
                                ($$atom #f)))))
           (($$atom loop30)
            ($$atom other-regs0)
            (($$atom -) ($$atom target.nb-regs) ($$atom 1))))
         (letrec ((loop40 (lambda (other-slots1 other-nb-slots1 i0)
                            (if (($$atom <=)
                                 ($$atom i0)
                                 ($$atom other-nb-slots1))
                                (let ((var0 (($$atom stk->var)
                                             ($$atom slots)
                                             ($$atom i0)))
                                      (other-var0
                                       (($$atom stk->var)
                                        ($$atom other-slots1)
                                        ($$atom i0))))
                                  (begin
                                    (if (($$atom eq?)
                                         ($$atom var0)
                                         ($$atom other-var0))
                                        ($$atom #f)
                                        (($$atom put-var)
                                         (($$atom +)
                                          ($$atom i0)
                                          ($$atom 10000))
                                         ($$atom empty-var)))
                                    (($$atom loop40)
                                     ($$atom other-slots1)
                                     ($$atom other-nb-slots1)
                                     (($$atom +) ($$atom i0) ($$atom 1)))))
                                ($$atom #f)))))
           (($$atom loop40)
            ($$atom other-slots0)
            ($$atom other-nb-slots0)
            ($$atom 1)))
         (($$atom seal-bb) ($$atom poll?0) ($$atom where0))
         (set! poll (($$atom poll-merge) ($$atom poll) ($$atom other-poll0)))
         (if (($$atom eq?) ($$atom entry-bb) ($$atom other-entry-bb0))
             ($$atom #f)
             (($$atom compiler-internal-error)
              ($$atom "merge-contexts-and-seal-bb, entry-bb's do not agree")))))))
 (define seal-bb
   (lambda (poll?0 where0)
     (letrec ((impose-polling-constraints0
               (lambda ()
                 (let ((delta0 (let ((x0 ($$atom poll)))
                                 (($$atom cdr) ($$atom x0))))
                       (n0 (($$atom +)
                            (($$atom length)
                             (($$atom bb-non-branch-instrs) ($$atom *bb*)))
                            ($$atom 1))))
                   (if (($$atom >)
                        (($$atom +) ($$atom delta0) ($$atom n0))
                        ($$atom poll-period))
                       (begin
                         (($$atom poll-at0)
                          (($$atom max)
                           (($$atom -) ($$atom poll-period) ($$atom delta0))
                           ($$atom 0)))
                         (($$atom impose-polling-constraints0)))
                       ($$atom #f)))))
              (poll-at0
               (lambda (split-point0)
                 (letrec ((loop0 (lambda (split-point1 i0 l10 l20)
                                   (if (($$atom <)
                                        ($$atom i0)
                                        ($$atom split-point1))
                                       (($$atom loop0)
                                        ($$atom split-point1)
                                        (($$atom +) ($$atom i0) ($$atom 1))
                                        (($$atom cdr) ($$atom l10))
                                        (($$atom cons)
                                         (($$atom car) ($$atom l10))
                                         ($$atom l20)))
                                       (let ((label-instr0
                                              (let ((bb0 ($$atom *bb*)))
                                                (($$atom vector-ref)
                                                 ($$atom bb0)
                                                 ($$atom 0)))))
                                         (let ((non-branch-instrs10
                                                (($$atom reverse)
                                                 ($$atom l20))))
                                           (let ((frame0 (let ((gvm-instr0
                                                                (($$atom car)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                         (($$atom my-last-pair0)
                          (($$atom cons)
                           ($$atom label-instr0)
                           ($$atom non-branch-instrs10))))))
                   (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 1)))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                             (let ((prec-bb0
                                                    (($$atom make-bb)
                                                     ($$atom label-instr0)
                                                     ($$atom *bbs*))))
                                               (let ((new-lbl0
                                                      (($$atom bbs-new-lbl!)
                                                       ($$atom *bbs*))))
                                                 (begin
                                                   (($$atom bb-non-branch-instrs-set!)
                                                    ($$atom prec-bb0)
                                                    ($$atom non-branch-instrs10))
                                                   (let ((gvm-instr0
                                                          (let ((opnd0 (($$atom +)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                ($$atom new-lbl0)
                                ($$atom 20000))))
                    (($$atom vector)
                     ($$atom 'jump)
                     ($$atom frame0)
                     ($$atom #f)
                     ($$atom opnd0)
                     ($$atom #f)
                     ($$atom #t)))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                     (($$atom vector-set!)
                                                      ($$atom prec-bb0)
                                                      ($$atom 2)
                                                      ($$atom gvm-instr0)))
                                                   (let ((l0 (($$atom make-label-simple)
                                                              ($$atom new-lbl0)
                                                              ($$atom frame0)
                                                              ($$atom #f)))
                                                         (bb0 ($$atom *bb*)))
                                                     (($$atom vector-set!)
                                                      ($$atom bb0)
                                                      ($$atom 0)
                                                      ($$atom l0)))
                                                   (($$atom bb-non-branch-instrs-set!)
                                                    ($$atom *bb*)
                                                    ($$atom l10))
                                                   (set! poll
                                                         (($$atom cons)
                                                          ($$atom #t)
                                                          ($$atom 0)))))))))))))
                   (($$atom loop0)
                    ($$atom split-point0)
                    ($$atom 0)
                    (($$atom bb-non-branch-instrs) ($$atom *bb*))
                    ($$atom '())))))
              (my-last-pair0
               (lambda (l0)
                 (if (($$atom pair?) (($$atom cdr) ($$atom l0)))
                     (($$atom my-last-pair0) (($$atom cdr) ($$atom l0)))
                     ($$atom l0)))))
       (begin
         (if ($$atom poll?0)
             (($$atom impose-polling-constraints0))
             ($$atom #f))
         (let ((n0 (($$atom +)
                    (($$atom length)
                     (($$atom bb-non-branch-instrs) ($$atom *bb*)))
                    ($$atom 1))))
           (let ((delta0 (($$atom +)
                          (let ((x0 ($$atom poll))) (($$atom cdr) ($$atom x0)))
                          ($$atom n0))))
             (let ((since-entry?0
                    (let ((x0 ($$atom poll))) (($$atom car) ($$atom x0)))))
               (if (if ($$atom poll?0)
                       (if (let ((g1670 ($$atom 'call)))
                             (if (($$atom number?) ($$atom where0))
                                 (if (($$atom number?) ($$atom g1670))
                                     (($$atom =)
                                      ($$atom where0)
                                      ($$atom g1670))
                                     ($$atom #f))
                                 (($$atom eq?)
                                  ($$atom where0)
                                  ($$atom g1670))))
                           (($$atom >)
                            ($$atom delta0)
                            (($$atom -)
                             ($$atom poll-period)
                             ($$atom poll-head)))
                           (if (let ((g1680 ($$atom 'tail-call)))
                                 (if (($$atom number?) ($$atom where0))
                                     (if (($$atom number?) ($$atom g1680))
                                         (($$atom =)
                                          ($$atom where0)
                                          ($$atom g1680))
                                         ($$atom #f))
                                     (($$atom eq?)
                                      ($$atom where0)
                                      ($$atom g1680))))
                               (($$atom >) ($$atom delta0) ($$atom poll-tail))
                               (if (let ((g1690 ($$atom 'return)))
                                     (if (($$atom number?) ($$atom where0))
                                         (if (($$atom number?) ($$atom g1690))
                                             (($$atom =)
                                              ($$atom where0)
                                              ($$atom g1690))
                                             ($$atom #f))
                                         (($$atom eq?)
                                          ($$atom where0)
                                          ($$atom g1690))))
                                   (if ($$atom since-entry?0)
                                       (($$atom >)
                                        ($$atom delta0)
                                        (($$atom +)
                                         ($$atom poll-head)
                                         ($$atom poll-tail)))
                                       ($$atom #f))
                                   (if (let ((g1700 ($$atom 'internal)))
                                         (if (($$atom number?) ($$atom where0))
                                             (if (($$atom number?)
                                                  ($$atom g1700))
                                                 (($$atom =)
                                                  ($$atom where0)
                                                  ($$atom g1700))
                                                 ($$atom #f))
                                             (($$atom eq?)
                                              ($$atom where0)
                                              ($$atom g1700))))
                                       ($$atom #f)
                                       (($$atom compiler-internal-error)
                                        ($$atom "seal-bb, unknown 'where':")
                                        ($$atom where0))))))
                       ($$atom #f))
                   (($$atom poll-at0)
                    (($$atom length)
                     (($$atom bb-non-branch-instrs) ($$atom *bb*))))
                   (set! poll
                         (($$atom cons)
                          ($$atom since-entry?0)
                          ($$atom delta0)))))))))))
 (define reg->var
   (lambda (regs0 i0)
     (if (($$atom null?) ($$atom regs0))
         ($$atom '())
         (if (($$atom >) ($$atom i0) ($$atom 0))
             (($$atom reg->var)
              (($$atom cdr) ($$atom regs0))
              (($$atom -) ($$atom i0) ($$atom 1)))
             (($$atom car) ($$atom regs0))))))
 (define stk->var
   (lambda (slots0 i0)
     (let ((j0 (($$atom -) (($$atom length) ($$atom slots0)) ($$atom i0))))
       (if (($$atom <) ($$atom j0) ($$atom 0))
           ($$atom '())
           (($$atom list-ref) ($$atom slots0) ($$atom j0))))))
 (define gen-conj/disj
   (lambda (node0 live0 why0)
     (let ((alt0 (if (($$atom conj?) ($$atom node0))
                     (($$atom conj-alt) ($$atom node0))
                     (($$atom disj-alt) ($$atom node0))))
           (pre0 (if (($$atom conj?) ($$atom node0))
                     (($$atom conj-pre) ($$atom node0))
                     (($$atom disj-pre) ($$atom node0)))))
       (let ((predicate-var0 (($$atom make-temp-var) ($$atom 'predicate)))
             (bool?0 (($$atom boolean-value?) ($$atom pre0)))
             (needed0 (($$atom set-union)
                       ($$atom live0)
                       (($$atom free-variables) ($$atom alt0)))))
         (let ((alternative0
                (lambda (node1
                         live1
                         why1
                         alt1
                         predicate-var1
                         bool?1
                         con-lbl0
                         alt-lbl0)
                  (let ((pre-context0 (($$atom current-context))))
                    (let ((result-var0
                           (($$atom make-temp-var) ($$atom 'result))))
                      (let ((con-live0
                             (if ($$atom bool?1)
                                 ($$atom live1)
                                 (($$atom set-adjoin)
                                  ($$atom live1)
                                  ($$atom predicate-var1)))))
                        (let ((alt-live0
                               (($$atom set-union)
                                ($$atom live1)
                                (($$atom free-variables) ($$atom alt1)))))
                          (let ((con-bb0 (($$atom make-bb)
                                          (let ((comment0
                                                 (($$atom source-comment)
                                                  ($$atom alt1)))
                                                (frame0 (($$atom current-frame)
                                                         ($$atom con-live0))))
                                            (($$atom vector)
                                             ($$atom 'label)
                                             ($$atom frame0)
                                             ($$atom comment0)
                                             ($$atom con-lbl0)
                                             ($$atom 'simple)))
                                          ($$atom *bbs*))))
                            (let ((alt-bb0 (($$atom make-bb)
                                            (let ((comment0
                                                   (($$atom source-comment)
                                                    ($$atom alt1)))
                                                  (frame0 (($$atom current-frame)
                                                           ($$atom alt-live0))))
                                              (($$atom vector)
                                               ($$atom 'label)
                                               ($$atom frame0)
                                               ($$atom comment0)
                                               ($$atom alt-lbl0)
                                               ($$atom 'simple)))
                                            ($$atom *bbs*))))
                              (begin
                                (if ($$atom bool?1)
                                    (begin
                                      (set! *bb* ($$atom con-bb0))
                                      (($$atom save-opnd-to-reg)
                                       (let ((val0 (if (($$atom conj?)
                                                        ($$atom node1))
                                                       ($$atom #f)
                                                       ($$atom #t))))
                                         (($$atom +)
                                          (($$atom enter-opnd)
                                           ($$atom val0)
                                           ($$atom #f))
                                          ($$atom 50000)))
                                       ($$atom target.proc-result)
                                       ($$atom result-var0)
                                       ($$atom live1)
                                       (($$atom source-comment)
                                        ($$atom node1))))
                                    (($$atom put-var)
                                     (($$atom var->opnd)
                                      ($$atom predicate-var1))
                                     ($$atom result-var0)))
                                (let ((con-context0
                                       (($$atom current-context))))
                                  (begin
                                    (set! *bb* ($$atom alt-bb0))
                                    (($$atom restore-context)
                                     ($$atom pre-context0))
                                    (let ((alt-opnd0
                                           (($$atom gen-node)
                                            ($$atom alt1)
                                            ($$atom live1)
                                            ($$atom why1))))
                                      (if (($$atom eq?)
                                           ($$atom why1)
                                           ($$atom 'tail))
                                          (begin
                                            (($$atom restore-context)
                                             ($$atom con-context0))
                                            (set! *bb* ($$atom con-bb0))
                                            (let ((result-set0
                                                   (($$atom list)
                                                    ($$atom result-var0)))
                                                  (ret-opnd0
                                                   (($$atom var->opnd)
                                                    ($$atom ret-var))))
                                              (begin
                                                (($$atom seal-bb)
                                                 (let ((decl0 (($$atom node-decl)
                                                               ($$atom node1))))
                                                   (($$atom declaration-value)
                                                    ($$atom interrupts-enabled-sym)
                                                    ($$atom #f)
                                                    ($$atom #t)
                                                    ($$atom decl0)))
                                                 ($$atom 'return))
                                                (($$atom dealloc-slots)
                                                 ($$atom nb-slots))
                                                (let ((gvm-instr0
                                                       (let ((frame0 (($$atom current-frame)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                              ($$atom result-set0))))
                 (($$atom vector)
                  ($$atom 'jump)
                  ($$atom frame0)
                  ($$atom #f)
                  ($$atom ret-opnd0)
                  ($$atom #f)
                  ($$atom #f))))
              (bb0 ($$atom *bb*)))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                  (($$atom vector-set!)
                                                   ($$atom bb0)
                                                   ($$atom 2)
                                                   ($$atom gvm-instr0))))))
                                          (let ((alt-bb*0 ($$atom *bb*))
                                                (alt-context*0
                                                 (($$atom current-context))))
                                            (begin
                                              (($$atom restore-context)
                                               ($$atom con-context0))
                                              (set! *bb* ($$atom con-bb0))
                                              (($$atom seal-bb)
                                               (let ((decl0 (($$atom node-decl)
                                                             ($$atom node1))))
                                                 (($$atom declaration-value)
                                                  ($$atom interrupts-enabled-sym)
                                                  ($$atom #f)
                                                  ($$atom #t)
                                                  ($$atom decl0)))
                                               ($$atom 'internal))
                                              (let ((next-lbl0
                                                     (($$atom bbs-new-lbl!)
                                                      ($$atom *bbs*)))
                                                    (con-context*0
                                                     (($$atom current-context))))
                                                (begin
                                                  (($$atom restore-context)
                                                   ($$atom alt-context*0))
                                                  (set! *bb* ($$atom alt-bb*0))
                                                  (($$atom save-opnd-to-reg)
                                                   ($$atom alt-opnd0)
                                                   ($$atom target.proc-result)
                                                   ($$atom result-var0)
                                                   ($$atom live1)
                                                   (($$atom source-comment)
                                                    ($$atom alt1)))
                                                  (($$atom merge-contexts-and-seal-bb)
                                                   ($$atom con-context*0)
                                                   (($$atom set-adjoin)
                                                    ($$atom live1)
                                                    ($$atom result-var0))
                                                   (let ((decl0 (($$atom node-decl)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                         ($$atom node1))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                     (($$atom declaration-value)
                                                      ($$atom interrupts-enabled-sym)
                                                      ($$atom #f)
                                                      ($$atom #t)
                                                      ($$atom decl0)))
                                                   ($$atom 'internal)
                                                   (($$atom source-comment)
                                                    ($$atom node1)))
                                                  (let ((frame0 (($$atom current-frame)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                         (($$atom set-adjoin)
                          ($$atom live1)
                          ($$atom result-var0)))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                    (begin
                                                      (let ((gvm-instr0
                                                             (let ((opnd0 (($$atom +)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                   ($$atom next-lbl0)
                                   ($$atom 20000))))
                       (($$atom vector)
                        ($$atom 'jump)
                        ($$atom frame0)
                        ($$atom #f)
                        ($$atom opnd0)
                        ($$atom #f)
                        ($$atom #f))))
                    (bb0 ($$atom *bb*)))
                (($$atom vector-set!)
                 ($$atom bb0)
                 ($$atom 2)
                 ($$atom gvm-instr0)))
              (let ((gvm-instr0
                     (let ((opnd0 (($$atom +)
                                   ($$atom next-lbl0)
                                   ($$atom 20000))))
                       (($$atom vector)
                        ($$atom 'jump)
                        ($$atom frame0)
                        ($$atom #f)
                        ($$atom opnd0)
                        ($$atom #f)
                        ($$atom #f)))))
                (($$atom vector-set!)
                 ($$atom con-bb0)
                 ($$atom 2)
                 ($$atom gvm-instr0)))
              (set! *bb*
                    (($$atom make-bb)
                     (let ((comment0 (($$atom source-comment) ($$atom node1))))
                       (($$atom vector)
                        ($$atom 'label)
                        ($$atom frame0)
                        ($$atom comment0)
                        ($$atom next-lbl0)
                        ($$atom 'simple)))
                     ($$atom *bbs*)))
              ($$atom target.proc-result))))))))))))))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
               (general-predicate0
                (lambda (node1 live1 cont0)
                  (let ((con-lbl0 (($$atom bbs-new-lbl!) ($$atom *bbs*))))
                    (let ((alt-lbl0 (($$atom bbs-new-lbl!) ($$atom *bbs*))))
                      (begin
                        (($$atom save-opnd-to-reg)
                         (($$atom gen-node)
                          ($$atom pre0)
                          ($$atom live1)
                          ($$atom 'need))
                         ($$atom target.proc-result)
                         ($$atom predicate-var0)
                         ($$atom live1)
                         (($$atom source-comment) ($$atom pre0)))
                        (($$atom seal-bb)
                         (let ((decl0 (($$atom node-decl) ($$atom node1))))
                           (($$atom declaration-value)
                            ($$atom interrupts-enabled-sym)
                            ($$atom #f)
                            ($$atom #t)
                            ($$atom decl0)))
                         ($$atom 'internal))
                        (let ((gvm-instr0
                               (let ((test0 ($$atom **not-proc-obj))
                                     (opnds0 (($$atom list)
                                              ($$atom target.proc-result)))
                                     (frame0 (let ((live2 (($$atom set-adjoin)
                                                           ($$atom live1)
                                                           ($$atom predicate-var0))))
                                               (let ((size0 ($$atom nb-slots))
                                                     (slots0 ($$atom slots))
                                                     (regs0 ($$atom regs))
                                                     (closed0 ($$atom closed)))
                                                 (($$atom vector)
                                                  ($$atom size0)
                                                  ($$atom slots0)
                                                  ($$atom regs0)
                                                  ($$atom closed0)
                                                  ($$atom live2)))))
                                     (comment0
                                      (($$atom source-comment)
                                       ($$atom node1))))
                                 (($$atom vector)
                                  ($$atom 'ifjump)
                                  ($$atom frame0)
                                  ($$atom comment0)
                                  ($$atom test0)
                                  ($$atom opnds0)
                                  ($$atom alt-lbl0)
                                  ($$atom con-lbl0)
                                  ($$atom #f))))
                              (bb0 ($$atom *bb*)))
                          (($$atom vector-set!)
                           ($$atom bb0)
                           ($$atom 2)
                           ($$atom gvm-instr0)))
                        (($$atom cont0)
                         ($$atom con-lbl0)
                         ($$atom alt-lbl0))))))))
           ((if ($$atom bool?0) ($$atom predicate) ($$atom general-predicate0))
            ($$atom pre0)
            ($$atom needed0)
            (lambda (true-lbl0 false-lbl0)
              (if (($$atom conj?) ($$atom node0))
                  (($$atom alternative0)
                   ($$atom node0)
                   ($$atom live0)
                   ($$atom why0)
                   ($$atom alt0)
                   ($$atom predicate-var0)
                   ($$atom bool?0)
                   ($$atom false-lbl0)
                   ($$atom true-lbl0))
                  (($$atom alternative0)
                   ($$atom node0)
                   ($$atom live0)
                   ($$atom why0)
                   ($$atom alt0)
                   ($$atom predicate-var0)
                   ($$atom bool?0)
                   ($$atom true-lbl0)
                   ($$atom false-lbl0))))))))))
 (define gen-call
   (lambda (node0 live0 why0)
     (let ((oper0 (($$atom app-oper) ($$atom node0))))
       (let ((args0 (($$atom app-args) ($$atom node0))))
         (let ((nb-args0 (($$atom length) ($$atom args0))))
           (if (if (($$atom prc?) ($$atom oper0))
                   (if (($$atom vector-ref) ($$atom oper0) ($$atom 8))
                       ($$atom #f)
                       (($$atom =)
                        (($$atom length)
                         (($$atom vector-ref) ($$atom oper0) ($$atom 9)))
                        ($$atom nb-args0)))
                   ($$atom #f))
               (($$atom gen-let)
                (($$atom vector-ref) ($$atom oper0) ($$atom 9))
                ($$atom args0)
                (($$atom prc-body) ($$atom oper0))
                ($$atom live0)
                ($$atom why0))
               (if (($$atom inlinable-app?) ($$atom node0))
                   (let ((vars0 (($$atom map)
                                 (lambda (x0)
                                   (($$atom cons) ($$atom x0) ($$atom #f)))
                                 ($$atom args0)))
                         (eval-order0
                          (($$atom arg-eval-order)
                           ($$atom #f)
                           ($$atom args0))))
                     (letrec ((loop0 (lambda (node1
                                              live1
                                              why1
                                              oper1
                                              vars1
                                              l0
                                              liv0)
                                       (if (($$atom null?) ($$atom l0))
                                           (let ((loc0 (if (($$atom eq?)
                                                            ($$atom why1)
                                                            ($$atom 'side))
                                                           ($$atom 0)
                                                           (let ((g1710 (($$atom lowest-dead-reg)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                 ($$atom live1))))
                     (if ($$atom g1710)
                         ($$atom g1710)
                         (($$atom lowest-dead-slot) ($$atom live1)))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                             (begin
                                               (if (if (($$atom stk?)
                                                        ($$atom loc0))
                                                       (($$atom >)
                                                        (($$atom modulo)
                                                         ($$atom loc0)
                                                         ($$atom 10000))
                                                        ($$atom nb-slots))
                                                       ($$atom #f))
                                                   (($$atom push-slot))
                                                   ($$atom #f))
                                               (let ((args1 (($$atom map)
                                                             ($$atom var->opnd)
                                                             (($$atom map)
                                                              ($$atom cdr)
                                                              ($$atom vars1)))))
                                                 (let ((var0 (($$atom make-temp-var)
                                                              ($$atom 'result))))
                                                   (let ((proc0 (($$atom node->proc)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                         ($$atom oper1))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                     (begin
                                                       (($$atom vector-ref)
                                                        ($$atom proc0)
                                                        ($$atom 9))
                                                       (if (($$atom eq?)
                                                            ($$atom why1)
                                                            ($$atom 'side))
                                                           ($$atom #f)
                                                           (($$atom put-var)
                                                            ($$atom loc0)
                                                            ($$atom var0)))
                                                       (let ((gvm-instr0
                                                              (let ((prim0 (($$atom specialize-for-call)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                    ($$atom proc0)
                                    (($$atom node-decl) ($$atom node1))))
                            (loc1 (if (($$atom eq?)
                                       ($$atom why1)
                                       ($$atom 'side))
                                      ($$atom #f)
                                      ($$atom loc0)))
                            (frame0 (($$atom current-frame)
                                     (if (($$atom eq?)
                                          ($$atom why1)
                                          ($$atom 'side))
                                         ($$atom live1)
                                         (($$atom set-adjoin)
                                          ($$atom live1)
                                          ($$atom var0)))))
                            (comment0
                             (($$atom source-comment) ($$atom node1))))
                        (($$atom vector)
                         ($$atom 'apply)
                         ($$atom frame0)
                         ($$atom comment0)
                         ($$atom prim0)
                         ($$atom args1)
                         ($$atom loc1))))
                     (bb0 ($$atom *bb*)))
                 (let ((queue0 (($$atom vector-ref) ($$atom bb0) ($$atom 1))))
                   (let ((entry0 (($$atom cons)
                                  ($$atom gvm-instr0)
                                  ($$atom '()))))
                     (begin
                       (if (($$atom null?) (($$atom car) ($$atom queue0)))
                           (($$atom set-car!) ($$atom queue0) ($$atom entry0))
                           (($$atom set-cdr!)
                            (($$atom cdr) ($$atom queue0))
                            ($$atom entry0)))
                       (($$atom set-cdr!) ($$atom queue0) ($$atom entry0))
                       ($$atom gvm-instr0)))))
               (($$atom gen-return)
                ($$atom loc0)
                ($$atom why1)
                ($$atom node1))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                           (let ((needed0 (($$atom vals-live-vars)
                                                           ($$atom liv0)
                                                           (($$atom map)
                                                            ($$atom car)
                                                            (($$atom cdr)
                                                             ($$atom l0))))))
                                             (let ((arg0 (($$atom car)
                                                          (($$atom car)
                                                           ($$atom l0)))))
                                               (let ((pos0 (($$atom cdr)
                                                            (($$atom car)
                                                             ($$atom l0)))))
                                                 (let ((var0 (($$atom save-var)
                                                              (($$atom gen-node)
                                                               ($$atom arg0)
                                                               ($$atom needed0)
                                                               ($$atom 'need))
                                                              (($$atom make-temp-var)
                                                               ($$atom pos0))
                                                              ($$atom needed0)
                                                              (($$atom source-comment)
                                                               ($$atom arg0)))))
                                                   (begin
                                                     (($$atom set-cdr!)
                                                      (($$atom assq)
                                                       ($$atom arg0)
                                                       ($$atom vars1))
                                                      ($$atom var0))
                                                     (($$atom loop0)
                                                      ($$atom node1)
                                                      ($$atom live1)
                                                      ($$atom why1)
                                                      ($$atom oper1)
                                                      ($$atom vars1)
                                                      (($$atom cdr)
                                                       ($$atom l0))
                                                      (($$atom set-adjoin)
                                                       ($$atom liv0)
                                                       ($$atom var0))))))))))))
                       (($$atom loop0)
                        ($$atom node0)
                        ($$atom live0)
                        ($$atom why0)
                        ($$atom oper0)
                        ($$atom vars0)
                        ($$atom eval-order0)
                        ($$atom live0))))
                   (let ((calling-local-proc?0
                          (if (($$atom ref?) ($$atom oper0))
                              (let ((opnd0 (($$atom var->opnd)
                                            (($$atom vector-ref)
                                             ($$atom oper0)
                                             ($$atom 6)))))
                                (if (($$atom lbl?) ($$atom opnd0))
                                    (let ((x0 (($$atom assq)
                                               (($$atom modulo)
                                                ($$atom opnd0)
                                                ($$atom 10000))
                                               ($$atom known-procs))))
                                      (if ($$atom x0)
                                          (let ((proc0 (($$atom cdr)
                                                        ($$atom x0))))
                                            (if (($$atom vector-ref)
                                                 ($$atom proc0)
                                                 ($$atom 8))
                                                ($$atom #f)
                                                (if (($$atom =)
                                                     (($$atom vector-ref)
                                                      ($$atom proc0)
                                                      ($$atom 7))
                                                     ($$atom nb-args0))
                                                    (if (($$atom =)
                                                         (($$atom length)
                                                          (($$atom vector-ref)
                                                           ($$atom proc0)
                                                           ($$atom 9)))
                                                         ($$atom nb-args0))
                                                        (($$atom modulo)
                                                         ($$atom opnd0)
                                                         ($$atom 10000))
                                                        ($$atom #f))
                                                    ($$atom #f))))
                                          ($$atom #f)))
                                    ($$atom #f)))
                              ($$atom #f))))
                     (let ((jstate0 (($$atom get-jump-state)
                                     ($$atom args0)
                                     (if ($$atom calling-local-proc?0)
                                         (($$atom target.label-info)
                                          ($$atom nb-args0)
                                          ($$atom nb-args0)
                                          ($$atom #f)
                                          ($$atom #f))
                                         (($$atom target.jump-info)
                                          ($$atom nb-args0))))))
                       (let ((in-stk0 (($$atom vector-ref)
                                       ($$atom jstate0)
                                       ($$atom 0))))
                         (let ((in-reg0 (($$atom vector-ref)
                                         ($$atom jstate0)
                                         ($$atom 1))))
                           (let ((eval-order0
                                  (($$atom arg-eval-order)
                                   (if ($$atom calling-local-proc?0)
                                       ($$atom #f)
                                       ($$atom oper0))
                                   ($$atom in-reg0))))
                             (let ((live-after0
                                    (if (($$atom eq?)
                                         ($$atom why0)
                                         ($$atom 'tail))
                                        (($$atom set-remove)
                                         ($$atom live0)
                                         ($$atom ret-var))
                                        ($$atom live0))))
                               (let ((live-for-regs0
                                      (($$atom args-live-vars)
                                       ($$atom live0)
                                       ($$atom eval-order0))))
                                 (let ((return-lbl0
                                        (if (($$atom eq?)
                                             ($$atom why0)
                                             ($$atom 'tail))
                                            ($$atom #f)
                                            (($$atom bbs-new-lbl!)
                                             ($$atom *bbs*)))))
                                   (begin
                                     (let ((comment0
                                            (($$atom source-comment)
                                             ($$atom node0)))
                                           (live1 (($$atom stk-live-vars)
                                                   ($$atom live-for-regs0)
                                                   ($$atom in-stk0)
                                                   ($$atom why0)))
                                           (regs0 (($$atom live-regs)
                                                   ($$atom live-after0))))
                                       (($$atom for-each)
                                        (lambda (i0)
                                          (($$atom save-opnd)
                                           ($$atom i0)
                                           ($$atom live1)
                                           ($$atom comment0)))
                                        ($$atom regs0)))
                                     (let ((frame-start0
                                            (let ((x0 (($$atom highest-live-slot)
                                                       ($$atom live-after0))))
                                              (($$atom modulo)
                                               ($$atom x0)
                                               ($$atom 10000)))))
                                       (letrec ((loop10 (lambda (node1
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                         live1
                         why1
                         nb-args1
                         calling-local-proc?1
                         in-stk1
                         eval-order1
                         live-for-regs1
                         return-lbl1
                         frame-start1
                         l0
                         liv0
                         i0)
                  (if (($$atom null?) ($$atom l0))
                      (letrec ((loop20 (lambda (node2
                                                live2
                                                why2
                                                nb-args2
                                                calling-local-proc?2
                                                in-stk2
                                                return-lbl2
                                                frame-start2
                                                l1
                                                liv1
                                                reg-map0
                                                oper-var0)
                                         (if (($$atom null?) ($$atom l1))
                                             (letrec ((loop30 (lambda (node3
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                               live3
                               nb-args3
                               calling-local-proc?3
                               in-stk3
                               return-lbl3
                               frame-start3
                               liv2
                               reg-map1
                               oper-var1
                               i1)
                        (if (($$atom >=) ($$atom i1) ($$atom 0))
                            (let ((couple0 (($$atom assq)
                                            ($$atom i1)
                                            ($$atom reg-map1))))
                              (begin
                                (if ($$atom couple0)
                                    (let ((var0 (($$atom cdr)
                                                 ($$atom couple0))))
                                      (if (($$atom eq?)
                                           (($$atom reg->var)
                                            ($$atom regs)
                                            ($$atom i1))
                                           ($$atom var0))
                                          ($$atom #f)
                                          (($$atom save-opnd-to-reg)
                                           (($$atom var->opnd) ($$atom var0))
                                           ($$atom i1)
                                           ($$atom var0)
                                           ($$atom liv2)
                                           (($$atom source-comment)
                                            ($$atom node3)))))
                                    ($$atom #f))
                                (($$atom loop30)
                                 ($$atom node3)
                                 ($$atom live3)
                                 ($$atom nb-args3)
                                 ($$atom calling-local-proc?3)
                                 ($$atom in-stk3)
                                 ($$atom return-lbl3)
                                 ($$atom frame-start3)
                                 ($$atom liv2)
                                 ($$atom reg-map1)
                                 ($$atom oper-var1)
                                 (($$atom -) ($$atom i1) ($$atom 1)))))
                            (let ((opnd0 (if ($$atom calling-local-proc?3)
                                             (let ((num0 (($$atom +)
                                                          ($$atom calling-local-proc?3)
                                                          ($$atom 1))))
                                               (($$atom +)
                                                ($$atom num0)
                                                ($$atom 20000)))
                                             (($$atom var->opnd)
                                              ($$atom oper-var1)))))
                              (begin
                                (($$atom seal-bb)
                                 (let ((decl0 (($$atom node-decl)
                                               ($$atom node3))))
                                   (($$atom declaration-value)
                                    ($$atom interrupts-enabled-sym)
                                    ($$atom #f)
                                    ($$atom #t)
                                    ($$atom decl0)))
                                 (if ($$atom return-lbl3)
                                     ($$atom 'call)
                                     ($$atom 'tail-call)))
                                (let ((n0 (($$atom -)
                                           ($$atom nb-slots)
                                           (($$atom +)
                                            ($$atom frame-start3)
                                            (($$atom length)
                                             ($$atom in-stk3))))))
                                  (begin
                                    (set! nb-slots
                                          (($$atom -)
                                           ($$atom nb-slots)
                                           ($$atom n0)))
                                    (set! slots
                                          (($$atom nth-after)
                                           ($$atom slots)
                                           ($$atom n0)))))
                                (let ((gvm-instr0
                                       (let ((nb-args4
                                              (if ($$atom calling-local-proc?3)
                                                  ($$atom #f)
                                                  ($$atom nb-args3)))
                                             (frame0 (($$atom current-frame)
                                                      ($$atom liv2)))
                                             (comment0
                                              (($$atom source-comment)
                                               ($$atom node3))))
                                         (($$atom vector)
                                          ($$atom 'jump)
                                          ($$atom frame0)
                                          ($$atom comment0)
                                          ($$atom opnd0)
                                          ($$atom nb-args4)
                                          ($$atom #f))))
                                      (bb0 ($$atom *bb*)))
                                  (($$atom vector-set!)
                                   ($$atom bb0)
                                   ($$atom 2)
                                   ($$atom gvm-instr0)))
                                (let ((result-var0
                                       (($$atom make-temp-var)
                                        ($$atom 'result))))
                                  (begin
                                    (($$atom dealloc-slots)
                                     (($$atom -)
                                      ($$atom nb-slots)
                                      ($$atom frame-start3)))
                                    (set! regs ($$atom '()))
                                    (($$atom put-var)
                                     ($$atom target.proc-result)
                                     ($$atom result-var0))
                                    (if ($$atom return-lbl3)
                                        (begin
                                          (set! poll
                                                (($$atom return-poll)
                                                 ($$atom poll)))
                                          (set! *bb*
                                                (let ((bbs0 ($$atom *bbs*))
                                                      (label-instr0
                                                       (($$atom make-label-return)
                                                        ($$atom return-lbl3)
                                                        (($$atom current-frame)
                                                         (($$atom set-adjoin)
                                                          ($$atom live3)
                                                          ($$atom result-var0)))
                                                        (($$atom source-comment)
                                                         ($$atom node3)))))
                                                  (let ((bb0 (($$atom vector)
                                                              ($$atom label-instr0)
                                                              (($$atom queue-empty))
                                                              ($$atom '())
                                                              ($$atom '())
                                                              ($$atom '()))))
                                                    (begin
                                                      (($$atom queue-put!)
                                                       (($$atom vector-ref)
                                                        ($$atom bbs0)
                                                        ($$atom 1))
                                                       ($$atom bb0))
                                                      ($$atom bb0))))))
                                        ($$atom #f))
                                    ($$atom target.proc-result)))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                               (($$atom loop30)
                                                ($$atom node2)
                                                ($$atom live2)
                                                ($$atom nb-args2)
                                                ($$atom calling-local-proc?2)
                                                ($$atom in-stk2)
                                                ($$atom return-lbl2)
                                                ($$atom frame-start2)
                                                ($$atom liv1)
                                                ($$atom reg-map0)
                                                ($$atom oper-var0)
                                                (($$atom -)
                                                 ($$atom target.nb-regs)
                                                 ($$atom 1))))
                                             (let ((arg0 (($$atom car)
                                                          (($$atom car)
                                                           ($$atom l1)))))
                                               (let ((pos0 (($$atom cdr)
                                                            (($$atom car)
                                                             ($$atom l1)))))
                                                 (let ((needed0 (($$atom args-live-vars)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                         ($$atom liv1)
                         (($$atom cdr) ($$atom l1)))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                   (let ((var0 (if (if (($$atom eq?)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                ($$atom arg0)
                                ($$atom 'return))
                               (($$atom eq?) ($$atom why2) ($$atom 'tail))
                               ($$atom #f))
                           ($$atom ret-var)
                           (($$atom make-temp-var) ($$atom pos0)))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                     (let ((opnd0 (if (($$atom eq?)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                               ($$atom arg0)
                               ($$atom 'return))
                              (if (($$atom eq?) ($$atom why2) ($$atom 'tail))
                                  (($$atom var->opnd) ($$atom ret-var))
                                  (($$atom +)
                                   ($$atom return-lbl2)
                                   ($$atom 20000)))
                              (($$atom gen-node)
                               ($$atom arg0)
                               ($$atom needed0)
                               ($$atom 'need)))))
               (if (($$atom eq?) ($$atom pos0) ($$atom 'operator))
                   (if (if (($$atom ref?) ($$atom arg0))
                           (($$atom not)
                            (let ((g1720 (($$atom obj?) ($$atom opnd0))))
                              (if ($$atom g1720)
                                  ($$atom g1720)
                                  (($$atom lbl?) ($$atom opnd0)))))
                           ($$atom #f))
                       (($$atom loop20)
                        ($$atom node2)
                        ($$atom live2)
                        ($$atom why2)
                        ($$atom nb-args2)
                        ($$atom calling-local-proc?2)
                        ($$atom in-stk2)
                        ($$atom return-lbl2)
                        ($$atom frame-start2)
                        (($$atom cdr) ($$atom l1))
                        (($$atom set-adjoin)
                         ($$atom liv1)
                         (($$atom vector-ref) ($$atom arg0) ($$atom 6)))
                        ($$atom reg-map0)
                        (($$atom vector-ref) ($$atom arg0) ($$atom 6)))
                       (begin
                         (let ((comment0
                                (($$atom source-comment)
                                 (if (($$atom eq?)
                                      ($$atom arg0)
                                      ($$atom 'return))
                                     ($$atom node2)
                                     ($$atom arg0)))))
                           (if (($$atom glo?) ($$atom opnd0))
                               (($$atom add-constant-var)
                                ($$atom var0)
                                ($$atom opnd0))
                               (($$atom save-val)
                                ($$atom opnd0)
                                ($$atom var0)
                                ($$atom needed0)
                                ($$atom comment0))))
                         (($$atom loop20)
                          ($$atom node2)
                          ($$atom live2)
                          ($$atom why2)
                          ($$atom nb-args2)
                          ($$atom calling-local-proc?2)
                          ($$atom in-stk2)
                          ($$atom return-lbl2)
                          ($$atom frame-start2)
                          (($$atom cdr) ($$atom l1))
                          (($$atom set-adjoin) ($$atom liv1) ($$atom var0))
                          ($$atom reg-map0)
                          ($$atom var0))))
                   (begin
                     (if (($$atom all-args-trivial?)
                          (($$atom cdr) ($$atom l1)))
                         (($$atom save-opnd-to-reg)
                          ($$atom opnd0)
                          ($$atom pos0)
                          ($$atom var0)
                          ($$atom needed0)
                          (($$atom source-comment)
                           (if (($$atom eq?) ($$atom arg0) ($$atom 'return))
                               ($$atom node2)
                               ($$atom arg0))))
                         (let ((comment0
                                (($$atom source-comment)
                                 (if (($$atom eq?)
                                      ($$atom arg0)
                                      ($$atom 'return))
                                     ($$atom node2)
                                     ($$atom arg0)))))
                           (let ((slot0 (($$atom lowest-dead-slot)
                                         ($$atom needed0))))
                             (($$atom put-copy)
                              ($$atom opnd0)
                              ($$atom slot0)
                              ($$atom var0)
                              ($$atom needed0)
                              ($$atom comment0)))))
                     (($$atom loop20)
                      ($$atom node2)
                      ($$atom live2)
                      ($$atom why2)
                      ($$atom nb-args2)
                      ($$atom calling-local-proc?2)
                      ($$atom in-stk2)
                      ($$atom return-lbl2)
                      ($$atom frame-start2)
                      (($$atom cdr) ($$atom l1))
                      (($$atom set-adjoin) ($$atom liv1) ($$atom var0))
                      (($$atom cons)
                       (($$atom cons) ($$atom pos0) ($$atom var0))
                       ($$atom reg-map0))
                      ($$atom oper-var0)))))))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                        (($$atom loop20)
                         ($$atom node1)
                         ($$atom live1)
                         ($$atom why1)
                         ($$atom nb-args1)
                         ($$atom calling-local-proc?1)
                         ($$atom in-stk1)
                         ($$atom return-lbl1)
                         ($$atom frame-start1)
                         ($$atom eval-order1)
                         ($$atom liv0)
                         ($$atom '())
                         ($$atom '())))
                      (let ((needed0 (($$atom set-union)
                                      (($$atom stk-live-vars)
                                       ($$atom liv0)
                                       (($$atom cdr) ($$atom l0))
                                       ($$atom why1))
                                      ($$atom live-for-regs1)))
                            (slot0 (($$atom +) ($$atom i0) ($$atom 10000)))
                            (arg0 (($$atom car) ($$atom l0))))
                        (if ($$atom arg0)
                            (let ((var0 (if (if (($$atom eq?)
                                                 ($$atom arg0)
                                                 ($$atom 'return))
                                                (($$atom eq?)
                                                 ($$atom why1)
                                                 ($$atom 'tail))
                                                ($$atom #f))
                                            ($$atom ret-var)
                                            (($$atom make-temp-var)
                                             (($$atom -)
                                              ($$atom frame-start1)
                                              ($$atom i0))))))
                              (begin
                                (let ((comment0
                                       (($$atom source-comment)
                                        (if (($$atom eq?)
                                             ($$atom arg0)
                                             ($$atom 'return))
                                            ($$atom node1)
                                            ($$atom arg0))))
                                      (opnd0 (if (($$atom eq?)
                                                  ($$atom arg0)
                                                  ($$atom 'return))
                                                 (if (($$atom eq?)
                                                      ($$atom why1)
                                                      ($$atom 'tail))
                                                     (($$atom var->opnd)
                                                      ($$atom ret-var))
                                                     (($$atom +)
                                                      ($$atom return-lbl1)
                                                      ($$atom 20000)))
                                                 (($$atom gen-node)
                                                  ($$atom arg0)
                                                  ($$atom needed0)
                                                  ($$atom 'need)))))
                                  (begin
                                    (if (let ((x0 (($$atom modulo)
                                                   ($$atom slot0)
                                                   ($$atom 10000)))
                                              (set0 (($$atom live-slots)
                                                     ($$atom needed0))))
                                          (($$atom memq)
                                           ($$atom x0)
                                           ($$atom set0)))
                                        (let ((live2 (($$atom opnd-needed)
                                                      ($$atom opnd0)
                                                      ($$atom needed0))))
                                          (let ((slot#10 (($$atom lowest-dead-slot)
                                                          ($$atom live2))))
                                            (($$atom put-copy)
                                             ($$atom slot0)
                                             ($$atom slot#10)
                                             (($$atom get-var) ($$atom slot0))
                                             ($$atom live2)
                                             ($$atom comment0))))
                                        ($$atom #f))
                                    (($$atom put-copy)
                                     ($$atom opnd0)
                                     ($$atom slot0)
                                     ($$atom var0)
                                     ($$atom needed0)
                                     ($$atom comment0))))
                                (($$atom loop10)
                                 ($$atom node1)
                                 ($$atom live1)
                                 ($$atom why1)
                                 ($$atom nb-args1)
                                 ($$atom calling-local-proc?1)
                                 ($$atom in-stk1)
                                 ($$atom eval-order1)
                                 ($$atom live-for-regs1)
                                 ($$atom return-lbl1)
                                 ($$atom frame-start1)
                                 (($$atom cdr) ($$atom l0))
                                 (($$atom set-adjoin)
                                  ($$atom liv0)
                                  ($$atom var0))
                                 (($$atom +) ($$atom i0) ($$atom 1)))))
                            (begin
                              (if (($$atom >) ($$atom i0) ($$atom nb-slots))
                                  (($$atom put-copy)
                                   (($$atom make-obj) ($$atom '|#[undefined]|))
                                   ($$atom slot0)
                                   ($$atom empty-var)
                                   ($$atom liv0)
                                   (($$atom source-comment) ($$atom node1)))
                                  ($$atom #f))
                              (($$atom loop10)
                               ($$atom node1)
                               ($$atom live1)
                               ($$atom why1)
                               ($$atom nb-args1)
                               ($$atom calling-local-proc?1)
                               ($$atom in-stk1)
                               ($$atom eval-order1)
                               ($$atom live-for-regs1)
                               ($$atom return-lbl1)
                               ($$atom frame-start1)
                               (($$atom cdr) ($$atom l0))
                               ($$atom liv0)
                               (($$atom +) ($$atom i0) ($$atom 1))))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                         (($$atom loop10)
                                          ($$atom node0)
                                          ($$atom live0)
                                          ($$atom why0)
                                          ($$atom nb-args0)
                                          ($$atom calling-local-proc?0)
                                          ($$atom in-stk0)
                                          ($$atom eval-order0)
                                          ($$atom live-for-regs0)
                                          ($$atom return-lbl0)
                                          ($$atom frame-start0)
                                          ($$atom in-stk0)
                                          ($$atom live-after0)
                                          (($$atom +)
                                           ($$atom frame-start0)
                                           ($$atom 1)))))))))))))))))))))
 (define contained-reg/slot
   (lambda (opnd0)
     (if (($$atom <) ($$atom opnd0) ($$atom 10000))
         ($$atom opnd0)
         (if (($$atom stk?) ($$atom opnd0))
             ($$atom opnd0)
             (if (($$atom clo?) ($$atom opnd0))
                 (($$atom contained-reg/slot)
                  (($$atom clo-base) ($$atom opnd0)))
                 ($$atom #f))))))
 (define opnd-needed
   (lambda (opnd0 needed0)
     (let ((x0 (($$atom contained-reg/slot) ($$atom opnd0))))
       (if ($$atom x0)
           (($$atom set-adjoin)
            ($$atom needed0)
            (($$atom get-var) ($$atom x0)))
           ($$atom needed0)))))
 (define save-opnd
   (lambda (opnd0 live0 comment0)
     (let ((slot0 (($$atom lowest-dead-slot) ($$atom live0))))
       (($$atom put-copy)
        ($$atom opnd0)
        ($$atom slot0)
        (($$atom get-var) ($$atom opnd0))
        ($$atom live0)
        ($$atom comment0)))))
 (define save-regs
   (lambda (regs0 live0 comment0)
     (($$atom for-each)
      (lambda (i0)
        (($$atom save-opnd) ($$atom i0) ($$atom live0) ($$atom comment0)))
      ($$atom regs0))))
 (define save-opnd-to-reg
   (lambda (opnd0 reg0 var0 live0 comment0)
     (begin
       (if (let ((set0 (($$atom live-regs) ($$atom live0)))
                 (x0 (($$atom modulo) ($$atom reg0) ($$atom 10000))))
             (($$atom memq) ($$atom x0) ($$atom set0)))
           (($$atom save-opnd)
            ($$atom reg0)
            (($$atom opnd-needed) ($$atom opnd0) ($$atom live0))
            ($$atom comment0))
           ($$atom #f))
       (($$atom put-copy)
        ($$atom opnd0)
        ($$atom reg0)
        ($$atom var0)
        ($$atom live0)
        ($$atom comment0)))))
 (define save-opnd-to-stk
   (lambda (opnd0 stk0 var0 live0 comment0)
     (begin
       (if (let ((set0 (($$atom live-slots) ($$atom live0)))
                 (x0 (($$atom modulo) ($$atom stk0) ($$atom 10000))))
             (($$atom memq) ($$atom x0) ($$atom set0)))
           (($$atom save-opnd)
            ($$atom stk0)
            (($$atom opnd-needed) ($$atom opnd0) ($$atom live0))
            ($$atom comment0))
           ($$atom #f))
       (($$atom put-copy)
        ($$atom opnd0)
        ($$atom stk0)
        ($$atom var0)
        ($$atom live0)
        ($$atom comment0)))))
 (define all-args-trivial?
   (lambda (l0)
     (if (($$atom null?) ($$atom l0))
         ($$atom #t)
         (let ((arg0 (($$atom car) (($$atom car) ($$atom l0)))))
           (let ((g1730 (($$atom eq?) ($$atom arg0) ($$atom 'return))))
             (if ($$atom g1730)
                 ($$atom g1730)
                 (if (($$atom trivial?) ($$atom arg0))
                     (($$atom all-args-trivial?) (($$atom cdr) ($$atom l0)))
                     ($$atom #f))))))))
 (define every-trivial?
   (lambda (l0)
     (let ((g1740 (($$atom null?) ($$atom l0))))
       (if ($$atom g1740)
           ($$atom g1740)
           (if (($$atom trivial?) (($$atom car) ($$atom l0)))
               (($$atom every-trivial?) (($$atom cdr) ($$atom l0)))
               ($$atom #f))))))
 (define trivial?
   (lambda (node0)
     (let ((g1750 (($$atom cst?) ($$atom node0))))
       (if ($$atom g1750)
           ($$atom g1750)
           (let ((g1760 (($$atom ref?) ($$atom node0))))
             (if ($$atom g1760)
                 ($$atom g1760)
                 (let ((g1770 (if (($$atom set?) ($$atom node0))
                                  (($$atom trivial?)
                                   (($$atom set-val) ($$atom node0)))
                                  ($$atom #f))))
                   (if ($$atom g1770)
                       ($$atom g1770)
                       (if (($$atom inlinable-app?) ($$atom node0))
                           (($$atom every-trivial?)
                            (($$atom app-args) ($$atom node0)))
                           ($$atom #f))))))))))
 (define inlinable-app?
   (lambda (node0)
     (if (($$atom app?) ($$atom node0))
         (let ((proc0 (($$atom node->proc)
                       (($$atom app-oper) ($$atom node0)))))
           (if ($$atom proc0)
               (let ((spec0 (let ((decl0 (($$atom node-decl) ($$atom node0))))
                              ((($$atom vector-ref) ($$atom proc0) ($$atom 7))
                               ($$atom decl0)))))
                 (if (($$atom vector-ref) ($$atom spec0) ($$atom 6))
                     (let ((call-pat0
                            (($$atom vector-ref) ($$atom spec0) ($$atom 4)))
                           (n0 (($$atom length)
                                (($$atom app-args) ($$atom node0)))))
                       (($$atom pattern-member?)
                        ($$atom n0)
                        ($$atom call-pat0)))
                     ($$atom #f)))
               ($$atom #f)))
         ($$atom #f))))
 (define boolean-value?
   (lambda (node0)
     (let ((g1780 (if (($$atom conj?) ($$atom node0))
                      (if (($$atom boolean-value?)
                           (($$atom conj-pre) ($$atom node0)))
                          (($$atom boolean-value?)
                           (($$atom conj-alt) ($$atom node0)))
                          ($$atom #f))
                      ($$atom #f))))
       (if ($$atom g1780)
           ($$atom g1780)
           (let ((g1790 (if (($$atom disj?) ($$atom node0))
                            (if (($$atom boolean-value?)
                                 (($$atom disj-pre) ($$atom node0)))
                                (($$atom boolean-value?)
                                 (($$atom disj-alt) ($$atom node0)))
                                ($$atom #f))
                            ($$atom #f))))
             (if ($$atom g1790)
                 ($$atom g1790)
                 (($$atom boolean-app?) ($$atom node0))))))))
 (define boolean-app?
   (lambda (node0)
     (if (($$atom app?) ($$atom node0))
         (let ((proc0 (($$atom node->proc)
                       (($$atom app-oper) ($$atom node0)))))
           (if ($$atom proc0)
               (($$atom eq?)
                (($$atom type-name)
                 (($$atom vector-ref) ($$atom proc0) ($$atom 10)))
                ($$atom 'boolean))
               ($$atom #f)))
         ($$atom #f))))
 (define node->proc
   (lambda (node0)
     (if (($$atom cst?) ($$atom node0))
         (if (($$atom proc-obj?)
              (($$atom vector-ref) ($$atom node0) ($$atom 6)))
             (($$atom vector-ref) ($$atom node0) ($$atom 6))
             ($$atom #f))
         (if (($$atom ref?) ($$atom node0))
             (if (let ((var0 (($$atom ref-var) ($$atom node0))))
                   (($$atom not)
                    (($$atom vector-ref) ($$atom var0) ($$atom 2))))
                 (($$atom target.prim-info*)
                  (let ((x0 (($$atom ref-var) ($$atom node0))))
                    (($$atom vector-ref) ($$atom x0) ($$atom 1)))
                  (($$atom vector-ref) ($$atom node0) ($$atom 4)))
                 ($$atom #f))
             ($$atom #f)))))
 (define specialize-for-call
   (lambda (proc0 decl0)
     ((($$atom vector-ref) ($$atom proc0) ($$atom 7)) ($$atom decl0))))
 (define get-jump-state
   (lambda (args0 pc0)
     (letrec ((empty-node-list0
               (lambda (n0)
                 (if (($$atom >) ($$atom n0) ($$atom 0))
                     (($$atom cons)
                      ($$atom #f)
                      (($$atom empty-node-list0)
                       (($$atom -) ($$atom n0) ($$atom 1))))
                     ($$atom '())))))
       (let ((fs0 (($$atom vector-ref) ($$atom pc0) ($$atom 0))))
         (let ((slots-list0 (($$atom empty-node-list0) ($$atom fs0))))
           (let ((regs-list0
                  (($$atom empty-node-list0) ($$atom target.nb-regs))))
             (let ((assign-node-to-loc0
                    (lambda (fs1 slots-list1 regs-list1 var0 loc0)
                      (let ((x0 (if (($$atom <) ($$atom loc0) ($$atom 10000))
                                    (let ((i0 (($$atom modulo)
                                               ($$atom loc0)
                                               ($$atom 10000))))
                                      (if (($$atom <=)
                                           ($$atom i0)
                                           ($$atom target.nb-regs))
                                          (($$atom nth-after)
                                           ($$atom regs-list1)
                                           ($$atom i0))
                                          (($$atom compiler-internal-error)
                                           ($$atom "jump-state, reg out of bound in back-end's pcontext"))))
                                    (if (($$atom stk?) ($$atom loc0))
                                        (let ((i0 (($$atom modulo)
                                                   ($$atom loc0)
                                                   ($$atom 10000))))
                                          (if (($$atom <=)
                                               ($$atom i0)
                                               ($$atom fs1))
                                              (($$atom nth-after)
                                               ($$atom slots-list1)
                                               (($$atom -)
                                                ($$atom i0)
                                                ($$atom 1)))
                                              (($$atom compiler-internal-error)
                                               ($$atom "jump-state, stk out of bound in back-end's pcontext"))))
                                        (($$atom compiler-internal-error)
                                         ($$atom "jump-state, loc other than reg or stk in back-end's pcontext"))))))
                        (if (($$atom car) ($$atom x0))
                            (($$atom compiler-internal-error)
                             ($$atom "jump-state, duplicate location in back-end's pcontext"))
                            (($$atom set-car!) ($$atom x0) ($$atom var0)))))))
               (begin
                 (letrec ((loop0 (lambda (args1 fs1 slots-list1 regs-list1 l0)
                                   (if (($$atom null?) ($$atom l0))
                                       ($$atom #f)
                                       (let ((couple0 (($$atom car)
                                                       ($$atom l0))))
                                         (let ((name0 (($$atom car)
                                                       ($$atom couple0))))
                                           (let ((loc0 (($$atom cdr)
                                                        ($$atom couple0))))
                                             (begin
                                               (if (($$atom eq?)
                                                    ($$atom name0)
                                                    ($$atom 'return))
                                                   (($$atom assign-node-to-loc0)
                                                    ($$atom fs1)
                                                    ($$atom slots-list1)
                                                    ($$atom regs-list1)
                                                    ($$atom 'return)
                                                    ($$atom loc0))
                                                   (($$atom assign-node-to-loc0)
                                                    ($$atom fs1)
                                                    ($$atom slots-list1)
                                                    ($$atom regs-list1)
                                                    (($$atom list-ref)
                                                     ($$atom args1)
                                                     (($$atom -)
                                                      ($$atom name0)
                                                      ($$atom 1)))
                                                    ($$atom loc0)))
                                               (($$atom loop0)
                                                ($$atom args1)
                                                ($$atom fs1)
                                                ($$atom slots-list1)
                                                ($$atom regs-list1)
                                                (($$atom cdr)
                                                 ($$atom l0)))))))))))
                   (($$atom loop0)
                    ($$atom args0)
                    ($$atom fs0)
                    ($$atom slots-list0)
                    ($$atom regs-list0)
                    (($$atom vector-ref) ($$atom pc0) ($$atom 1))))
                 (($$atom vector)
                  ($$atom slots-list0)
                  ($$atom regs-list0))))))))))
 (define jump-state-in-stk
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 0))))
 (define jump-state-in-reg
   (lambda (x0) (($$atom vector-ref) ($$atom x0) ($$atom 1))))
 (define arg-eval-order
   (lambda (oper0 nodes0)
     (letrec ((loop0 (lambda (oper1 nodes1 pos0 part10 part20)
                       (if (($$atom null?) ($$atom nodes1))
                           (let ((p20 (($$atom free-vars-order)
                                       ($$atom part20)))
                                 (p10 (($$atom reverse) ($$atom part10))))
                             (if ($$atom oper1)
                                 (if (($$atom trivial?) ($$atom oper1))
                                     (($$atom append)
                                      ($$atom p10)
                                      ($$atom p20)
                                      (($$atom list)
                                       (($$atom cons)
                                        ($$atom oper1)
                                        ($$atom 'operator))))
                                     (($$atom ##append-two)
                                      (($$atom cons)
                                       (($$atom cons)
                                        ($$atom oper1)
                                        ($$atom 'operator))
                                       ($$atom p10))
                                      ($$atom p20)))
                                 (($$atom ##append-two)
                                  ($$atom p10)
                                  ($$atom p20))))
                           (if (($$atom car) ($$atom nodes1))
                               (if (let ((g1800 (($$atom eq?)
                                                 (($$atom car) ($$atom nodes1))
                                                 ($$atom 'return))))
                                     (if ($$atom g1800)
                                         ($$atom g1800)
                                         (($$atom trivial?)
                                          (($$atom car) ($$atom nodes1)))))
                                   (($$atom loop0)
                                    ($$atom oper1)
                                    (($$atom cdr) ($$atom nodes1))
                                    (($$atom +) ($$atom pos0) ($$atom 1))
                                    ($$atom part10)
                                    (($$atom cons)
                                     (($$atom cons)
                                      (($$atom car) ($$atom nodes1))
                                      ($$atom pos0))
                                     ($$atom part20)))
                                   (($$atom loop0)
                                    ($$atom oper1)
                                    (($$atom cdr) ($$atom nodes1))
                                    (($$atom +) ($$atom pos0) ($$atom 1))
                                    (($$atom cons)
                                     (($$atom cons)
                                      (($$atom car) ($$atom nodes1))
                                      ($$atom pos0))
                                     ($$atom part10))
                                    ($$atom part20)))
                               (($$atom loop0)
                                ($$atom oper1)
                                (($$atom cdr) ($$atom nodes1))
                                (($$atom +) ($$atom pos0) ($$atom 1))
                                ($$atom part10)
                                ($$atom part20)))))))
       (($$atom loop0)
        ($$atom oper0)
        ($$atom nodes0)
        ($$atom 0)
        ($$atom '())
        ($$atom '())))))
 (define free-vars-order
   (lambda (l0)
     (let ((bins0 (($$atom ##box) ($$atom '()))))
       (letrec ((remove0 (lambda (x0 l1)
                           (if (($$atom null?) ($$atom l1))
                               ($$atom '())
                               (if (($$atom eq?)
                                    ($$atom x0)
                                    (($$atom car) ($$atom l1)))
                                   (($$atom cdr) ($$atom l1))
                                   (($$atom cons)
                                    (($$atom car) ($$atom l1))
                                    (($$atom remove0)
                                     ($$atom x0)
                                     (($$atom cdr) ($$atom l1))))))))
                (find-max-payoff0
                 (lambda (bins1 l1 thunk0)
                   (if (($$atom null?) ($$atom l1))
                       (($$atom thunk0) ($$atom '()) ($$atom -1))
                       (let ((thunk#10
                              (lambda (bins2 l2 thunk1 best-arg0 best-payoff0)
                                (let ((payoff0 (($$atom payoff-if-removed0)
                                                ($$atom bins2)
                                                (($$atom car)
                                                 (($$atom car) ($$atom l2))))))
                                  (if (($$atom >=)
                                       ($$atom payoff0)
                                       ($$atom best-payoff0))
                                      (($$atom thunk1)
                                       (($$atom car) ($$atom l2))
                                       ($$atom payoff0))
                                      (($$atom thunk1)
                                       ($$atom best-arg0)
                                       ($$atom best-payoff0))))))
                             (l#20 (($$atom cdr) ($$atom l1))))
                         (if (($$atom null?) ($$atom l#20))
                             (($$atom thunk#10)
                              ($$atom bins1)
                              ($$atom l1)
                              ($$atom thunk0)
                              ($$atom '())
                              ($$atom -1))
                             (($$atom find-max-payoff0)
                              ($$atom bins1)
                              (($$atom cdr) ($$atom l#20))
                              (lambda (best-arg0 best-payoff0)
                                (let ((payoff0 (($$atom payoff-if-removed0)
                                                ($$atom bins1)
                                                (($$atom car)
                                                 (($$atom car)
                                                  ($$atom l#20))))))
                                  (if (($$atom >=)
                                       ($$atom payoff0)
                                       ($$atom best-payoff0))
                                      (($$atom thunk#10)
                                       ($$atom bins1)
                                       ($$atom l1)
                                       ($$atom thunk0)
                                       (($$atom car) ($$atom l#20))
                                       ($$atom payoff0))
                                      (($$atom thunk#10)
                                       ($$atom bins1)
                                       ($$atom l1)
                                       ($$atom thunk0)
                                       ($$atom best-arg0)
                                       ($$atom best-payoff0)))))))))))
                (payoff-if-removed0
                 (lambda (bins1 node0)
                   (let ((x0 (($$atom free-v0) ($$atom node0))))
                     (letrec ((loop0 (lambda (bins2 l1 r0)
                                       (if (($$atom null?) ($$atom l1))
                                           ($$atom r0)
                                           (let ((y0 (($$atom cdr)
                                                      (($$atom assq)
                                                       (($$atom car)
                                                        ($$atom l1))
                                                       (($$atom ##unbox)
                                                        ($$atom bins2))))))
                                             (($$atom loop0)
                                              ($$atom bins2)
                                              (($$atom cdr) ($$atom l1))
                                              (($$atom +)
                                               ($$atom r0)
                                               (($$atom quotient)
                                                ($$atom 1000)
                                                (($$atom *)
                                                 ($$atom y0)
                                                 ($$atom y0))))))))))
                       (($$atom loop0)
                        ($$atom bins1)
                        ($$atom x0)
                        ($$atom 0))))))
                (add-to-bin!0
                 (lambda (x0)
                   (let ((y0 (($$atom assq)
                              ($$atom x0)
                              (($$atom ##unbox) ($$atom bins0)))))
                     (if ($$atom y0)
                         (($$atom set-cdr!)
                          ($$atom y0)
                          (($$atom +) (($$atom cdr) ($$atom y0)) ($$atom 1)))
                         (($$atom ##set-box!)
                          ($$atom bins0)
                          (($$atom cons)
                           (($$atom cons) ($$atom x0) ($$atom 1))
                           (($$atom ##unbox) ($$atom bins0))))))))
                (free-v0 (lambda (x0)
                           (if (($$atom eq?) ($$atom x0) ($$atom 'return))
                               ($$atom '())
                               (($$atom free-variables) ($$atom x0))))))
         (begin
           (($$atom for-each)
            (lambda (x0)
              (($$atom for-each)
               ($$atom add-to-bin!0)
               (let ((set0 (let ((x1 (($$atom car) ($$atom x0))))
                             (if (($$atom eq?) ($$atom x1) ($$atom 'return))
                                 ($$atom '())
                                 (($$atom free-variables) ($$atom x1))))))
                 ($$atom set0))))
            ($$atom l0))
           (letrec ((loop0 (lambda (bins1 args0 ordered-args0)
                             (if (($$atom null?) ($$atom args0))
                                 (($$atom reverse) ($$atom ordered-args0))
                                 (($$atom find-max-payoff0)
                                  ($$atom bins1)
                                  ($$atom args0)
                                  (lambda (best-arg0 best-payoff0)
                                    (begin
                                      (let ((x0 (($$atom free-v0)
                                                 (($$atom car)
                                                  ($$atom best-arg0)))))
                                        (letrec ((loop1 (lambda (bins2 l1)
                                                          (if (($$atom null?)
                                                               ($$atom l1))
                                                              ($$atom #f)
                                                              (let ((y0 (($$atom assq)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                 (($$atom car) ($$atom l1))
                                 (($$atom ##unbox) ($$atom bins2)))))
                        (begin
                          (($$atom set-cdr!)
                           ($$atom y0)
                           (($$atom -) (($$atom cdr) ($$atom y0)) ($$atom 1)))
                          (($$atom loop1)
                           ($$atom bins2)
                           (($$atom cdr) ($$atom l1)))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                          (($$atom loop1)
                                           ($$atom bins1)
                                           ($$atom x0))))
                                      (($$atom loop0)
                                       ($$atom bins1)
                                       (($$atom remove0)
                                        ($$atom best-arg0)
                                        ($$atom args0))
                                       (($$atom cons)
                                        ($$atom best-arg0)
                                        ($$atom ordered-args0))))))))))
             (($$atom loop0) ($$atom bins0) ($$atom l0) ($$atom '()))))))))
 (define args-live-vars
   (lambda (live0 order0)
     (if (($$atom null?) ($$atom order0))
         ($$atom live0)
         (if (($$atom eq?)
              (($$atom car) (($$atom car) ($$atom order0)))
              ($$atom 'return))
             (($$atom args-live-vars)
              (($$atom set-adjoin) ($$atom live0) ($$atom ret-var))
              (($$atom cdr) ($$atom order0)))
             (($$atom args-live-vars)
              (($$atom set-union)
               ($$atom live0)
               (($$atom free-variables)
                (($$atom car) (($$atom car) ($$atom order0)))))
              (($$atom cdr) ($$atom order0)))))))
 (define stk-live-vars
   (lambda (live0 slots0 why0)
     (if (($$atom null?) ($$atom slots0))
         ($$atom live0)
         (if (($$atom car) ($$atom slots0))
             (if (($$atom eq?) (($$atom car) ($$atom slots0)) ($$atom 'return))
                 (($$atom stk-live-vars)
                  (if (($$atom eq?) ($$atom why0) ($$atom 'tail))
                      (($$atom set-adjoin) ($$atom live0) ($$atom ret-var))
                      ($$atom live0))
                  (($$atom cdr) ($$atom slots0))
                  ($$atom why0))
                 (($$atom stk-live-vars)
                  (($$atom set-union)
                   ($$atom live0)
                   (($$atom free-variables) (($$atom car) ($$atom slots0))))
                  (($$atom cdr) ($$atom slots0))
                  ($$atom why0)))
             (($$atom stk-live-vars)
              ($$atom live0)
              (($$atom cdr) ($$atom slots0))
              ($$atom why0))))))
 (define gen-let
   (lambda (vars0 vals0 node0 live0 why0)
     (let ((all-live0
            (($$atom set-union)
             ($$atom live0)
             (($$atom free-variables) ($$atom node0))
             (($$atom apply)
              ($$atom set-union)
              (($$atom map) ($$atom free-variables) ($$atom vals0)))))
           (var-val-map0 (($$atom pair-up) ($$atom vars0) ($$atom vals0))))
       (letrec ((no-closed-vars?0
                 (lambda (var0 const-proc-vars0)
                   (let ((set0 (($$atom closed-vars0)
                                ($$atom var0)
                                ($$atom const-proc-vars0))))
                     (($$atom null?) ($$atom set0)))))
                (closed-vars0
                 (lambda (var0 const-proc-vars0)
                   (($$atom set-difference)
                    (let ((val0 (($$atom var->val0) ($$atom var0))))
                      (($$atom set-keep)
                       ($$atom not-constant-var?)
                       (($$atom free-variables) ($$atom val0))))
                    ($$atom const-proc-vars0))))
                (proc-var?0
                 (lambda (var0)
                   (($$atom prc?) (($$atom var->val0) ($$atom var0)))))
                (var->val0
                 (lambda (var0)
                   (($$atom cdr)
                    (($$atom assq) ($$atom var0) ($$atom var-val-map0))))))
         (let ((proc-vars0
                (($$atom set-keep) ($$atom proc-var?0) ($$atom vars0))))
           (let ((const-proc-vars0
                  (letrec ((loop10 (lambda (no-closed-vars?1 const-proc-vars0)
                                     (let ((new-const-proc-vars0
                                            (($$atom set-keep)
                                             (lambda (x0)
                                               (($$atom no-closed-vars?1)
                                                ($$atom x0)
                                                ($$atom const-proc-vars0)))
                                             ($$atom const-proc-vars0))))
                                       (if (($$atom set-equal?)
                                            ($$atom new-const-proc-vars0)
                                            ($$atom const-proc-vars0))
                                           ($$atom const-proc-vars0)
                                           (($$atom loop10)
                                            ($$atom no-closed-vars?1)
                                            ($$atom new-const-proc-vars0)))))))
                    (($$atom loop10)
                     ($$atom no-closed-vars?0)
                     ($$atom proc-vars0)))))
             (let ((clo-vars0
                    (($$atom set-keep)
                     (lambda (x0)
                       (($$atom not)
                        (($$atom no-closed-vars?0)
                         ($$atom x0)
                         ($$atom const-proc-vars0))))
                     ($$atom proc-vars0))))
               (begin
                 (($$atom for-each)
                  (lambda (proc-var0)
                    (let ((label0 (($$atom schedule-gen-proc)
                                   (($$atom var->val0) ($$atom proc-var0))
                                   ($$atom '()))))
                      (begin
                        (let ((proc0 (($$atom var->val0) ($$atom proc-var0)))
                              (label1 (($$atom lbl-num) ($$atom label0))))
                          (set! known-procs
                                (($$atom cons)
                                 (($$atom cons) ($$atom label1) ($$atom proc0))
                                 ($$atom known-procs))))
                        (($$atom add-constant-var)
                         ($$atom proc-var0)
                         ($$atom label0)))))
                  ($$atom const-proc-vars0))
                 (let ((liv0 (($$atom set-union)
                              ($$atom live0)
                              (($$atom apply)
                               ($$atom set-union)
                               (($$atom map)
                                (lambda (x0)
                                  (($$atom closed-vars0)
                                   ($$atom x0)
                                   ($$atom const-proc-vars0)))
                                ($$atom clo-vars0)))
                              (($$atom free-variables) ($$atom node0))))
                       (non-clo-vars-list0
                        (let ((set0 (($$atom set-keep)
                                     (lambda (var0)
                                       (if (($$atom memq)
                                            ($$atom var0)
                                            ($$atom const-proc-vars0))
                                           ($$atom #f)
                                           (($$atom not)
                                            (($$atom memq)
                                             ($$atom var0)
                                             ($$atom clo-vars0)))))
                                     ($$atom vars0))))
                          ($$atom set0))))
                   (begin
                     (letrec ((loop20 (lambda (var->val1 liv1 vars*0)
                                        (if (($$atom null?) ($$atom vars*0))
                                            ($$atom #f)
                                            (let ((var0 (($$atom car)
                                                         ($$atom vars*0))))
                                              (let ((val0 (($$atom var->val1)
                                                           ($$atom var0))))
                                                (let ((needed0 (($$atom vals-live-vars)
                                                                ($$atom liv1)
                                                                (($$atom map)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                         ($$atom var->val1)
                         (($$atom cdr) ($$atom vars*0))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                  (begin
                                                    (if (($$atom var-useless?)
                                                         ($$atom var0))
                                                        (($$atom gen-node)
                                                         ($$atom val0)
                                                         ($$atom needed0)
                                                         ($$atom 'side))
                                                        (($$atom save-val)
                                                         (($$atom gen-node)
                                                          ($$atom val0)
                                                          ($$atom needed0)
                                                          ($$atom 'need))
                                                         ($$atom var0)
                                                         ($$atom needed0)
                                                         (($$atom source-comment)
                                                          ($$atom val0))))
                                                    (($$atom loop20)
                                                     ($$atom var->val1)
                                                     ($$atom liv1)
                                                     (($$atom cdr)
                                                      ($$atom vars*0)))))))))))
                       (($$atom loop20)
                        ($$atom var->val0)
                        ($$atom liv0)
                        ($$atom non-clo-vars-list0)))
                     (if (($$atom pair?) ($$atom clo-vars0))
                         (begin
                           (let ((n0 (($$atom -)
                                      ($$atom nb-slots)
                                      (($$atom stk-num)
                                       (($$atom highest-live-slot)
                                        ($$atom liv0))))))
                             (begin
                               (set! nb-slots
                                     (($$atom -)
                                      ($$atom nb-slots)
                                      ($$atom n0)))
                               (set! slots
                                     (($$atom nth-after)
                                      ($$atom slots)
                                      ($$atom n0)))))
                           (letrec ((loop30 (lambda (l0)
                                              (if (($$atom null?) ($$atom l0))
                                                  ($$atom #f)
                                                  (begin
                                                    (($$atom push-slot))
                                                    (let ((slot0 (let ((num0 ($$atom nb-slots)))
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                           (($$atom +) ($$atom num0) ($$atom 10000))))
                  (var0 (($$atom car) ($$atom l0))))
              (begin
                (($$atom put-var) ($$atom slot0) ($$atom var0))
                (($$atom loop30) (($$atom cdr) ($$atom l0))))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                             (($$atom loop30) ($$atom clo-vars0)))
                           (let ((gvm-instr0
                                  (let ((parms0 (($$atom map)
                                                 (lambda (var0)
                                                   (let ((closed-list0
                                                          (let ((lst0 (let ((set0 (($$atom closed-vars0)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                           ($$atom var0)
                                           ($$atom const-proc-vars0))))
                                ($$atom set0))))
                    (($$atom sort-list)
                     ($$atom lst0)
                     (lambda (x0 y0)
                       (($$atom string<?)
                        (($$atom symbol->string)
                         (($$atom vector-ref) ($$atom x0) ($$atom 1)))
                        (($$atom symbol->string)
                         (($$atom vector-ref) ($$atom y0) ($$atom 1)))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                     (if (($$atom null?)
                                                          ($$atom closed-list0))
                                                         (($$atom compiler-internal-error)
                                                          ($$atom "gen-let, no closed variables:")
                                                          (($$atom vector-ref)
                                                           ($$atom var0)
                                                           ($$atom 1)))
                                                         (let ((opnds0 (($$atom map)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                ($$atom var->opnd)
                                ($$atom closed-list0)))
                       (lbl0 (($$atom lbl-num)
                              (($$atom schedule-gen-proc)
                               (($$atom var->val0) ($$atom var0))
                               ($$atom closed-list0))))
                       (loc0 (($$atom var->opnd) ($$atom var0))))
                   (($$atom vector)
                    ($$atom loc0)
                    ($$atom lbl0)
                    ($$atom opnds0))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                 ($$atom clo-vars0)))
                                        (frame0 (($$atom current-frame)
                                                 ($$atom liv0)))
                                        (comment0
                                         (($$atom source-comment)
                                          ($$atom node0))))
                                    (($$atom vector)
                                     ($$atom 'close)
                                     ($$atom frame0)
                                     ($$atom comment0)
                                     ($$atom parms0))))
                                 (bb0 ($$atom *bb*)))
                             (let ((queue0 (($$atom vector-ref)
                                            ($$atom bb0)
                                            ($$atom 1))))
                               (let ((entry0 (($$atom cons)
                                              ($$atom gvm-instr0)
                                              ($$atom '()))))
                                 (begin
                                   (if (($$atom null?)
                                        (($$atom car) ($$atom queue0)))
                                       (($$atom set-car!)
                                        ($$atom queue0)
                                        ($$atom entry0))
                                       (($$atom set-cdr!)
                                        (($$atom cdr) ($$atom queue0))
                                        ($$atom entry0)))
                                   (($$atom set-cdr!)
                                    ($$atom queue0)
                                    ($$atom entry0))
                                   ($$atom gvm-instr0))))))
                         ($$atom #f))
                     (($$atom gen-node)
                      ($$atom node0)
                      ($$atom live0)
                      ($$atom why0))))))))))))
 (define save-arg
   (lambda (opnd0 var0 live0 comment0)
     (if (($$atom glo?) ($$atom opnd0))
         (($$atom add-constant-var) ($$atom var0) ($$atom opnd0))
         (($$atom save-val)
          ($$atom opnd0)
          ($$atom var0)
          ($$atom live0)
          ($$atom comment0)))))
 (define save-val
   (lambda (opnd0 var0 live0 comment0)
     (if (let ((g1810 (($$atom obj?) ($$atom opnd0))))
           (if ($$atom g1810) ($$atom g1810) (($$atom lbl?) ($$atom opnd0))))
         (($$atom add-constant-var) ($$atom var0) ($$atom opnd0))
         (if (if (($$atom <) ($$atom opnd0) ($$atom 10000))
                 (($$atom not)
                  (let ((set0 (($$atom live-regs) ($$atom live0)))
                        (x0 (($$atom modulo) ($$atom opnd0) ($$atom 10000))))
                    (($$atom memq) ($$atom x0) ($$atom set0))))
                 ($$atom #f))
             (($$atom put-var) ($$atom opnd0) ($$atom var0))
             (if (if (($$atom stk?) ($$atom opnd0))
                     (($$atom not)
                      (let ((set0 (($$atom live-slots) ($$atom live0)))
                            (x0 (($$atom modulo)
                                 ($$atom opnd0)
                                 ($$atom 10000))))
                        (($$atom memq) ($$atom x0) ($$atom set0))))
                     ($$atom #f))
                 (($$atom put-var) ($$atom opnd0) ($$atom var0))
                 (($$atom save-in-slot)
                  ($$atom opnd0)
                  ($$atom var0)
                  ($$atom live0)
                  ($$atom comment0)))))))
 (define save-in-slot
   (lambda (opnd0 var0 live0 comment0)
     (let ((slot0 (($$atom lowest-dead-slot) ($$atom live0))))
       (($$atom put-copy)
        ($$atom opnd0)
        ($$atom slot0)
        ($$atom var0)
        ($$atom live0)
        ($$atom comment0)))))
 (define save-var
   (lambda (opnd0 var0 live0 comment0)
     (if (let ((g1820 (($$atom obj?) ($$atom opnd0))))
           (if ($$atom g1820) ($$atom g1820) (($$atom lbl?) ($$atom opnd0))))
         (begin
           (($$atom add-constant-var) ($$atom var0) ($$atom opnd0))
           ($$atom var0))
         (if (let ((g1830 (($$atom glo?) ($$atom opnd0))))
               (if ($$atom g1830)
                   ($$atom g1830)
                   (let ((g1840 (($$atom <) ($$atom opnd0) ($$atom 10000))))
                     (if ($$atom g1840)
                         ($$atom g1840)
                         (($$atom stk?) ($$atom opnd0))))))
             (($$atom get-var) ($$atom opnd0))
             (let ((dest0 (let ((g1850 (($$atom highest-dead-reg)
                                        ($$atom live0))))
                            (if ($$atom g1850)
                                ($$atom g1850)
                                (($$atom lowest-dead-slot) ($$atom live0))))))
               (begin
                 (($$atom put-copy)
                  ($$atom opnd0)
                  ($$atom dest0)
                  ($$atom var0)
                  ($$atom live0)
                  ($$atom comment0))
                 ($$atom var0)))))))
 (define put-copy
   (lambda (opnd0 loc0 var0 live0 comment0)
     (begin
       (if (if (($$atom stk?) ($$atom loc0))
               (($$atom >)
                (($$atom modulo) ($$atom loc0) ($$atom 10000))
                ($$atom nb-slots))
               ($$atom #f))
           (($$atom push-slot))
           ($$atom #f))
       (if ($$atom var0)
           (($$atom put-var) ($$atom loc0) ($$atom var0))
           ($$atom #f))
       (if (($$atom eq?) ($$atom opnd0) ($$atom loc0))
           ($$atom #f)
           (let ((gvm-instr0
                  (let ((frame0 (($$atom current-frame)
                                 (if ($$atom var0)
                                     (if (($$atom memq)
                                          ($$atom var0)
                                          ($$atom live0))
                                         ($$atom live0)
                                         (($$atom cons)
                                          ($$atom var0)
                                          ($$atom live0)))
                                     ($$atom live0)))))
                    (($$atom vector)
                     ($$atom 'copy)
                     ($$atom frame0)
                     ($$atom comment0)
                     ($$atom opnd0)
                     ($$atom loc0))))
                 (bb0 ($$atom *bb*)))
             (($$atom queue-put!)
              (($$atom vector-ref) ($$atom bb0) ($$atom 1))
              ($$atom gvm-instr0)))))))
 (define var-useless?
   (lambda (var0)
     (if (let ((set0 (($$atom vector-ref) ($$atom var0) ($$atom 3))))
           (($$atom null?) ($$atom set0)))
         (let ((set0 (($$atom vector-ref) ($$atom var0) ($$atom 4))))
           (($$atom null?) ($$atom set0)))
         ($$atom #f))))
 (define vals-live-vars
   (lambda (live0 vals0)
     (if (($$atom null?) ($$atom vals0))
         ($$atom live0)
         (let ((vals1 (($$atom cdr) ($$atom vals0)))
               (live1 (($$atom set-union)
                       ($$atom live0)
                       (($$atom free-variables)
                        (($$atom car) ($$atom vals0))))))
           (if (($$atom null?) ($$atom vals1))
               ($$atom live1)
               (($$atom vals-live-vars)
                (($$atom set-union)
                 ($$atom live1)
                 (($$atom free-variables) (($$atom car) ($$atom vals1))))
                (($$atom cdr) ($$atom vals1))))))))
 (define gen-fut
   (lambda (node0 live0 why0)
     (let ((val0 (($$atom fut-val) ($$atom node0))))
       (let ((clo-vars0 (($$atom not-constant-closed-vars) ($$atom val0))))
         (let ((ret-var*0 (($$atom make-temp-var) ($$atom 0))))
           (let ((live-starting-task0
                  (let ((set0 (($$atom set-union)
                               ($$atom live0)
                               ($$atom clo-vars0))))
                    (if (($$atom memq) ($$atom ret-var*0) ($$atom set0))
                        ($$atom set0)
                        (($$atom cons) ($$atom ret-var*0) ($$atom set0))))))
             (let ((task-lbl0 (($$atom bbs-new-lbl!) ($$atom *bbs*))))
               (let ((return-lbl0 (($$atom bbs-new-lbl!) ($$atom *bbs*))))
                 (begin
                   (let ((comment0 (($$atom source-comment) ($$atom node0)))
                         (regs0 (($$atom live-regs) ($$atom live0))))
                     (($$atom for-each)
                      (lambda (i0)
                        (($$atom save-opnd)
                         ($$atom i0)
                         ($$atom live-starting-task0)
                         ($$atom comment0)))
                      ($$atom regs0)))
                   (let ((frame-start0
                          (let ((x0 (($$atom highest-live-slot)
                                     ($$atom live0))))
                            (($$atom modulo) ($$atom x0) ($$atom 10000)))))
                     (begin
                       (($$atom save-opnd-to-reg)
                        (($$atom +) ($$atom return-lbl0) ($$atom 20000))
                        ($$atom target.task-return)
                        ($$atom ret-var*0)
                        (($$atom set-remove)
                         ($$atom live-starting-task0)
                         ($$atom ret-var*0))
                        (($$atom source-comment) ($$atom node0)))
                       (letrec ((loop10 (lambda (node1
                                                 live-starting-task1
                                                 frame-start1
                                                 l0
                                                 i0)
                                          (if (($$atom null?) ($$atom l0))
                                              (let ((n0 (($$atom -)
                                                         ($$atom nb-slots)
                                                         (($$atom +)
                                                          ($$atom frame-start1)
                                                          ($$atom i0)))))
                                                (begin
                                                  (set! nb-slots
                                                        (($$atom -)
                                                         ($$atom nb-slots)
                                                         ($$atom n0)))
                                                  (set! slots
                                                        (($$atom nth-after)
                                                         ($$atom slots)
                                                         ($$atom n0)))))
                                              (let ((rest0 (($$atom cdr)
                                                            ($$atom l0)))
                                                    (var0 (($$atom car)
                                                           ($$atom l0))))
                                                (if (($$atom memq)
                                                     ($$atom var0)
                                                     ($$atom regs))
                                                    (($$atom loop10)
                                                     ($$atom node1)
                                                     ($$atom live-starting-task1)
                                                     ($$atom frame-start1)
                                                     ($$atom rest0)
                                                     ($$atom i0))
                                                    (letrec ((loop20 (lambda (node2
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                      live-starting-task2
                                      frame-start2
                                      i1
                                      rest1
                                      var1
                                      j0)
                               (if (($$atom >=) ($$atom j0) ($$atom 0))
                                   (if (let ((g1860 (($$atom >=)
                                                     ($$atom j0)
                                                     (($$atom length)
                                                      ($$atom regs)))))
                                         (if ($$atom g1860)
                                             ($$atom g1860)
                                             (($$atom not)
                                              (let ((x0 (($$atom list-ref)
                                                         ($$atom regs)
                                                         ($$atom j0))))
                                                (($$atom memq)
                                                 ($$atom x0)
                                                 ($$atom live-starting-task2))))))
                                       (begin
                                         (($$atom put-copy)
                                          (($$atom var->opnd) ($$atom var1))
                                          ($$atom j0)
                                          ($$atom var1)
                                          ($$atom live-starting-task2)
                                          (($$atom source-comment)
                                           ($$atom node2)))
                                         (($$atom loop10)
                                          ($$atom node2)
                                          ($$atom live-starting-task2)
                                          ($$atom frame-start2)
                                          ($$atom rest1)
                                          ($$atom i1)))
                                       (($$atom loop20)
                                        ($$atom node2)
                                        ($$atom live-starting-task2)
                                        ($$atom frame-start2)
                                        ($$atom i1)
                                        ($$atom rest1)
                                        ($$atom var1)
                                        (($$atom -) ($$atom j0) ($$atom 1))))
                                   (let ((slot0 (let ((num0 (($$atom +)
                                                             ($$atom frame-start2)
                                                             (($$atom +)
                                                              ($$atom i1)
                                                              ($$atom 1)))))
                                                  (($$atom +)
                                                   ($$atom num0)
                                                   ($$atom 10000)))))
                                     (begin
                                       (if (if (let ((g1870 (($$atom >)
                                                             (($$atom modulo)
                                                              ($$atom slot0)
                                                              ($$atom 10000))
                                                             ($$atom nb-slots))))
                                                 (if ($$atom g1870)
                                                     ($$atom g1870)
                                                     (($$atom not)
                                                      (($$atom memq)
                                                       (($$atom list-ref)
                                                        ($$atom slots)
                                                        (($$atom -)
                                                         ($$atom nb-slots)
                                                         (($$atom modulo)
                                                          ($$atom slot0)
                                                          ($$atom 10000))))
                                                       ($$atom regs)))))
                                               (let ((set0 (($$atom live-slots)
                                                            ($$atom rest1)))
                                                     (x0 (($$atom modulo)
                                                          ($$atom slot0)
                                                          ($$atom 10000))))
                                                 (($$atom memq)
                                                  ($$atom x0)
                                                  ($$atom set0)))
                                               ($$atom #f))
                                           (($$atom save-opnd)
                                            ($$atom slot0)
                                            ($$atom live-starting-task2)
                                            (($$atom source-comment)
                                             ($$atom node2)))
                                           ($$atom #f))
                                       (($$atom put-copy)
                                        (($$atom var->opnd) ($$atom var1))
                                        ($$atom slot0)
                                        ($$atom var1)
                                        ($$atom live-starting-task2)
                                        (($$atom source-comment)
                                         ($$atom node2)))
                                       (($$atom loop10)
                                        ($$atom node2)
                                        ($$atom live-starting-task2)
                                        ($$atom frame-start2)
                                        ($$atom rest1)
                                        (($$atom +)
                                         ($$atom i1)
                                         ($$atom 1)))))))))
              (($$atom loop20)
               ($$atom node1)
               ($$atom live-starting-task1)
               ($$atom frame-start1)
               ($$atom i0)
               ($$atom rest0)
               ($$atom var0)
               (($$atom -) ($$atom target.nb-regs) ($$atom 1))))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                         (($$atom loop10)
                          ($$atom node0)
                          ($$atom live-starting-task0)
                          ($$atom frame-start0)
                          ($$atom clo-vars0)
                          ($$atom 0)))
                       (($$atom seal-bb)
                        (let ((decl0 (($$atom node-decl) ($$atom node0))))
                          (($$atom declaration-value)
                           ($$atom interrupts-enabled-sym)
                           ($$atom #f)
                           ($$atom #t)
                           ($$atom decl0)))
                        ($$atom 'call))
                       (let ((gvm-instr0
                              (let ((opnd0 (($$atom +)
                                            ($$atom task-lbl0)
                                            ($$atom 20000)))
                                    (frame0 (($$atom current-frame)
                                             ($$atom live-starting-task0))))
                                (($$atom vector)
                                 ($$atom 'jump)
                                 ($$atom frame0)
                                 ($$atom #f)
                                 ($$atom opnd0)
                                 ($$atom #f)
                                 ($$atom #f))))
                             (bb0 ($$atom *bb*)))
                         (($$atom vector-set!)
                          ($$atom bb0)
                          ($$atom 2)
                          ($$atom gvm-instr0)))
                       (let ((return-context0
                              (let ((entry-bb0 ($$atom entry-bb))
                                    (poll0 (($$atom return-poll)
                                            ($$atom poll)))
                                    (closed0 ($$atom closed))
                                    (slots0 (($$atom nth-after)
                                             ($$atom slots)
                                             (($$atom -)
                                              ($$atom nb-slots)
                                              ($$atom frame-start0)))))
                                (($$atom vector)
                                 ($$atom frame-start0)
                                 ($$atom slots0)
                                 ($$atom '())
                                 ($$atom closed0)
                                 ($$atom poll0)
                                 ($$atom entry-bb0))))
                             (task-context0
                              (let ((entry-bb0 ($$atom entry-bb))
                                    (poll0 ($$atom poll))
                                    (regs0 (($$atom cons)
                                            ($$atom ret-var)
                                            (($$atom cdr) ($$atom regs))))
                                    (slots0 (($$atom reverse)
                                             (let ((l0 (($$atom reverse)
                                                        ($$atom slots))))
                                               (letrec ((loop0 (lambda (l1 n0)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                         (if (($$atom >) ($$atom n0) ($$atom 0))
                             (($$atom loop0)
                              (($$atom cdr) ($$atom l1))
                              (($$atom -) ($$atom n0) ($$atom 1)))
                             ($$atom l1)))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                 (($$atom loop0)
                                                  ($$atom l0)
                                                  ($$atom frame-start0))))))
                                    (nb-slots0
                                     (($$atom -)
                                      ($$atom nb-slots)
                                      ($$atom frame-start0))))
                                (($$atom vector)
                                 ($$atom nb-slots0)
                                 ($$atom slots0)
                                 ($$atom regs0)
                                 ($$atom '())
                                 ($$atom poll0)
                                 ($$atom entry-bb0)))))
                         (begin
                           (($$atom restore-context) ($$atom task-context0))
                           (set! *bb*
                                 (($$atom make-bb)
                                  (let ((comment0
                                         (($$atom source-comment)
                                          ($$atom node0)))
                                        (frame0 (($$atom current-frame)
                                                 ($$atom live-starting-task0))))
                                    (($$atom vector)
                                     ($$atom 'label)
                                     ($$atom frame0)
                                     ($$atom comment0)
                                     ($$atom task-lbl0)
                                     ($$atom 'task-entry)))
                                  ($$atom *bbs*)))
                           (($$atom gen-node)
                            ($$atom val0)
                            ($$atom ret-var-set)
                            ($$atom 'tail))
                           (let ((result-var0
                                  (($$atom make-temp-var) ($$atom 'future))))
                             (begin
                               (($$atom restore-context)
                                ($$atom return-context0))
                               (($$atom put-var)
                                ($$atom target.proc-result)
                                ($$atom result-var0))
                               (set! *bb*
                                     (let ((bbs0 ($$atom *bbs*))
                                           (label-instr0
                                            (($$atom make-label-task-return)
                                             ($$atom return-lbl0)
                                             (($$atom current-frame)
                                              (($$atom set-adjoin)
                                               ($$atom live0)
                                               ($$atom result-var0)))
                                             (($$atom source-comment)
                                              ($$atom node0)))))
                                       (let ((bb0 (($$atom vector)
                                                   ($$atom label-instr0)
                                                   (($$atom queue-empty))
                                                   ($$atom '())
                                                   ($$atom '())
                                                   ($$atom '()))))
                                         (begin
                                           (($$atom queue-put!)
                                            (($$atom vector-ref)
                                             ($$atom bbs0)
                                             ($$atom 1))
                                            ($$atom bb0))
                                           ($$atom bb0)))))
                               (($$atom gen-return)
                                ($$atom target.proc-result)
                                ($$atom why0)
                                ($$atom node0)))))))))))))))))
 (define prim-procs
   ($$atom '(("not" (1) #f 0 boolean)
             ("boolean?" (1) #f 0 boolean)
             ("eqv?" (2) #f 0 boolean)
             ("eq?" (2) #f 0 boolean)
             ("equal?" (2) #f 0 boolean)
             ("pair?" (1) #f 0 boolean)
             ("cons" (2) #f () pair)
             ("car" (1) #f 0 (#f))
             ("cdr" (1) #f 0 (#f))
             ("set-car!" (2) #t (1) pair)
             ("set-cdr!" (2) #t (1) pair)
             ("caar" (1) #f 0 (#f))
             ("cadr" (1) #f 0 (#f))
             ("cdar" (1) #f 0 (#f))
             ("cddr" (1) #f 0 (#f))
             ("caaar" (1) #f 0 (#f))
             ("caadr" (1) #f 0 (#f))
             ("cadar" (1) #f 0 (#f))
             ("caddr" (1) #f 0 (#f))
             ("cdaar" (1) #f 0 (#f))
             ("cdadr" (1) #f 0 (#f))
             ("cddar" (1) #f 0 (#f))
             ("cdddr" (1) #f 0 (#f))
             ("caaaar" (1) #f 0 (#f))
             ("caaadr" (1) #f 0 (#f))
             ("caadar" (1) #f 0 (#f))
             ("caaddr" (1) #f 0 (#f))
             ("cadaar" (1) #f 0 (#f))
             ("cadadr" (1) #f 0 (#f))
             ("caddar" (1) #f 0 (#f))
             ("cadddr" (1) #f 0 (#f))
             ("cdaaar" (1) #f 0 (#f))
             ("cdaadr" (1) #f 0 (#f))
             ("cdadar" (1) #f 0 (#f))
             ("cdaddr" (1) #f 0 (#f))
             ("cddaar" (1) #f 0 (#f))
             ("cddadr" (1) #f 0 (#f))
             ("cdddar" (1) #f 0 (#f))
             ("cddddr" (1) #f 0 (#f))
             ("null?" (1) #f 0 boolean)
             ("list?" (1) #f 0 boolean)
             ("list" 0 #f () list)
             ("length" (1) #f 0 integer)
             ("append" 0 #f 0 list)
             ("reverse" (1) #f 0 list)
             ("list-ref" (2) #f 0 (#f))
             ("memq" (2) #f 0 list)
             ("memv" (2) #f 0 list)
             ("member" (2) #f 0 list)
             ("assq" (2) #f 0 #f)
             ("assv" (2) #f 0 #f)
             ("assoc" (2) #f 0 #f)
             ("symbol?" (1) #f 0 boolean)
             ("symbol->string" (1) #f 0 string)
             ("string->symbol" (1) #f 0 symbol)
             ("number?" (1) #f 0 boolean)
             ("complex?" (1) #f 0 boolean)
             ("real?" (1) #f 0 boolean)
             ("rational?" (1) #f 0 boolean)
             ("integer?" (1) #f 0 boolean)
             ("exact?" (1) #f 0 boolean)
             ("inexact?" (1) #f 0 boolean)
             ("=" 0 #f 0 boolean)
             ("<" 0 #f 0 boolean)
             (">" 0 #f 0 boolean)
             ("<=" 0 #f 0 boolean)
             (">=" 0 #f 0 boolean)
             ("zero?" (1) #f 0 boolean)
             ("positive?" (1) #f 0 boolean)
             ("negative?" (1) #f 0 boolean)
             ("odd?" (1) #f 0 boolean)
             ("even?" (1) #f 0 boolean)
             ("max" 1 #f 0 number)
             ("min" 1 #f 0 number)
             ("+" 0 #f 0 number)
             ("*" 0 #f 0 number)
             ("-" 1 #f 0 number)
             ("/" 1 #f 0 number)
             ("abs" (1) #f 0 number)
             ("quotient" 1 #f 0 integer)
             ("remainder" (2) #f 0 integer)
             ("modulo" (2) #f 0 integer)
             ("gcd" 1 #f 0 integer)
             ("lcm" 1 #f 0 integer)
             ("numerator" (1) #f 0 integer)
             ("denominator" (1) #f 0 integer)
             ("floor" (1) #f 0 integer)
             ("ceiling" (1) #f 0 integer)
             ("truncate" (1) #f 0 integer)
             ("round" (1) #f 0 integer)
             ("rationalize" (2) #f 0 number)
             ("exp" (1) #f 0 number)
             ("log" (1) #f 0 number)
             ("sin" (1) #f 0 number)
             ("cos" (1) #f 0 number)
             ("tan" (1) #f 0 number)
             ("asin" (1) #f 0 number)
             ("acos" (1) #f 0 number)
             ("atan" (1 2) #f 0 number)
             ("sqrt" (1) #f 0 number)
             ("expt" (2) #f 0 number)
             ("make-rectangular" (2) #f 0 number)
             ("make-polar" (2) #f 0 number)
             ("real-part" (1) #f 0 real)
             ("imag-part" (1) #f 0 real)
             ("magnitude" (1) #f 0 real)
             ("angle" (1) #f 0 real)
             ("exact->inexact" (1) #f 0 number)
             ("inexact->exact" (1) #f 0 number)
             ("number->string" (1 2) #f 0 string)
             ("string->number" (1 2) #f 0 number)
             ("char?" (1) #f 0 boolean)
             ("char=?" 0 #f 0 boolean)
             ("char<?" 0 #f 0 boolean)
             ("char>?" 0 #f 0 boolean)
             ("char<=?" 0 #f 0 boolean)
             ("char>=?" 0 #f 0 boolean)
             ("char-ci=?" 0 #f 0 boolean)
             ("char-ci<?" 0 #f 0 boolean)
             ("char-ci>?" 0 #f 0 boolean)
             ("char-ci<=?" 0 #f 0 boolean)
             ("char-ci>=?" 0 #f 0 boolean)
             ("char-alphabetic?" (1) #f 0 boolean)
             ("char-numeric?" (1) #f 0 boolean)
             ("char-whitespace?" (1) #f 0 boolean)
             ("char-upper-case?" (1) #f 0 boolean)
             ("char-lower-case?" (1) #f 0 boolean)
             ("char->integer" (1) #f 0 integer)
             ("integer->char" (1) #f 0 char)
             ("char-upcase" (1) #f 0 char)
             ("char-downcase" (1) #f 0 char)
             ("string?" (1) #f 0 boolean)
             ("make-string" (1 2) #f 0 string)
             ("string" 0 #f 0 string)
             ("string-length" (1) #f 0 integer)
             ("string-ref" (2) #f 0 char)
             ("string-set!" (3) #t 0 string)
             ("string=?" 0 #f 0 boolean)
             ("string<?" 0 #f 0 boolean)
             ("string>?" 0 #f 0 boolean)
             ("string<=?" 0 #f 0 boolean)
             ("string>=?" 0 #f 0 boolean)
             ("string-ci=?" 0 #f 0 boolean)
             ("string-ci<?" 0 #f 0 boolean)
             ("string-ci>?" 0 #f 0 boolean)
             ("string-ci<=?" 0 #f 0 boolean)
             ("string-ci>=?" 0 #f 0 boolean)
             ("substring" (3) #f 0 string)
             ("string-append" 0 #f 0 string)
             ("vector?" (1) #f 0 boolean)
             ("make-vector" (1 2) #f (1) vector)
             ("vector" 0 #f () vector)
             ("vector-length" (1) #f 0 integer)
             ("vector-ref" (2) #f 0 (#f))
             ("vector-set!" (3) #t (1 2) vector)
             ("procedure?" (1) #f 0 boolean)
             ("apply" 2 #t 0 (#f))
             ("map" 2 #t 0 list)
             ("for-each" 2 #t 0 #f)
             ("call-with-current-continuation" (1) #t 0 (#f))
             ("call-with-input-file" (2) #t 0 (#f))
             ("call-with-output-file" (2) #t 0 (#f))
             ("input-port?" (1) #f 0 boolean)
             ("output-port?" (1) #f 0 boolean)
             ("current-input-port" (0) #f 0 port)
             ("current-output-port" (0) #f 0 port)
             ("open-input-file" (1) #t 0 port)
             ("open-output-file" (1) #t 0 port)
             ("close-input-port" (1) #t 0 #f)
             ("close-output-port" (1) #t 0 #f)
             ("eof-object?" (1) #f 0 boolean)
             ("read" (0 1) #t 0 #f)
             ("read-char" (0 1) #t 0 #f)
             ("peek-char" (0 1) #t 0 #f)
             ("write" (0 1) #t 0 #f)
             ("display" (0 1) #t 0 #f)
             ("newline" (0 1) #t 0 #f)
             ("write-char" (1 2) #t 0 #f)
             ("list-tail" (2) #f 0 (#f))
             ("string->list" (1) #f 0 list)
             ("list->string" (1) #f 0 string)
             ("string-copy" (1) #f 0 string)
             ("string-fill!" (2) #t 0 string)
             ("vector->list" (1) #f 0 list)
             ("list->vector" (1) #f 0 vector)
             ("vector-fill!" (2) #t 0 vector)
             ("force" (1) #t 0 #f)
             ("with-input-from-file" (2) #t 0 (#f))
             ("with-output-to-file" (2) #t 0 (#f))
             ("char-ready?" (0 1) #f 0 boolean)
             ("load" (1) #t 0 (#f))
             ("transcript-on" (1) #t 0 #f)
             ("transcript-off" (0) #t 0 #f)
             ("touch" (1) #t 0 #f)
             ("##type" (1) #f () integer)
             ("##type-cast" (2) #f () (#f))
             ("##subtype" (1) #f () integer)
             ("##subtype-set!" (2) #t () #f)
             ("##not" (1) #f () boolean)
             ("##null?" (1) #f () boolean)
             ("##unassigned?" (1) #f () boolean)
             ("##unbound?" (1) #f () boolean)
             ("##eq?" (2) #f () boolean)
             ("##fixnum?" (1) #f () boolean)
             ("##flonum?" (1) #f () boolean)
             ("##special?" (1) #f () boolean)
             ("##pair?" (1) #f () boolean)
             ("##subtyped?" (1) #f () boolean)
             ("##procedure?" (1) #f () boolean)
             ("##placeholder?" (1) #f () boolean)
             ("##vector?" (1) #f () boolean)
             ("##symbol?" (1) #f () boolean)
             ("##ratnum?" (1) #f () boolean)
             ("##cpxnum?" (1) #f () boolean)
             ("##string?" (1) #f () boolean)
             ("##bignum?" (1) #f () boolean)
             ("##char?" (1) #f () boolean)
             ("##closure?" (1) #f () boolean)
             ("##subprocedure?" (1) #f () boolean)
             ("##return-dynamic-env-bind?" (1) #f () boolean)
             ("##fixnum.+" 0 #f () integer)
             ("##fixnum.*" 0 #f () integer)
             ("##fixnum.-" 1 #f () integer)
             ("##fixnum.quotient" (2) #f () integer)
             ("##fixnum.remainder" (2) #f () integer)
             ("##fixnum.modulo" (2) #f () integer)
             ("##fixnum.logior" 0 #f () integer)
             ("##fixnum.logxor" 0 #f () integer)
             ("##fixnum.logand" 0 #f () integer)
             ("##fixnum.lognot" (1) #f () integer)
             ("##fixnum.ash" (2) #f () integer)
             ("##fixnum.lsh" (2) #f () integer)
             ("##fixnum.zero?" (1) #f () boolean)
             ("##fixnum.positive?" (1) #f () boolean)
             ("##fixnum.negative?" (1) #f () boolean)
             ("##fixnum.odd?" (1) #f () boolean)
             ("##fixnum.even?" (1) #f () boolean)
             ("##fixnum.=" 0 #f () boolean)
             ("##fixnum.<" 0 #f () boolean)
             ("##fixnum.>" 0 #f () boolean)
             ("##fixnum.<=" 0 #f () boolean)
             ("##fixnum.>=" 0 #f () boolean)
             ("##flonum.->fixnum" (1) #f () integer)
             ("##flonum.<-fixnum" (1) #f () real)
             ("##flonum.+" 0 #f () real)
             ("##flonum.*" 0 #f () real)
             ("##flonum.-" 1 #f () real)
             ("##flonum./" 1 #f () real)
             ("##flonum.abs" (1) #f () real)
             ("##flonum.truncate" (1) #f () real)
             ("##flonum.round" (1) #f () real)
             ("##flonum.exp" (1) #f () real)
             ("##flonum.log" (1) #f () real)
             ("##flonum.sin" (1) #f () real)
             ("##flonum.cos" (1) #f () real)
             ("##flonum.tan" (1) #f () real)
             ("##flonum.asin" (1) #f () real)
             ("##flonum.acos" (1) #f () real)
             ("##flonum.atan" (1) #f () real)
             ("##flonum.sqrt" (1) #f () real)
             ("##flonum.zero?" (1) #f () boolean)
             ("##flonum.positive?" (1) #f () boolean)
             ("##flonum.negative?" (1) #f () boolean)
             ("##flonum.=" 0 #f () boolean)
             ("##flonum.<" 0 #f () boolean)
             ("##flonum.>" 0 #f () boolean)
             ("##flonum.<=" 0 #f () boolean)
             ("##flonum.>=" 0 #f () boolean)
             ("##char=?" 0 #f () boolean)
             ("##char<?" 0 #f () boolean)
             ("##char>?" 0 #f () boolean)
             ("##char<=?" 0 #f () boolean)
             ("##char>=?" 0 #f () boolean)
             ("##cons" (2) #f () pair)
             ("##set-car!" (2) #t () pair)
             ("##set-cdr!" (2) #t () pair)
             ("##car" (1) #f () (#f))
             ("##cdr" (1) #f () (#f))
             ("##caar" (1) #f () (#f))
             ("##cadr" (1) #f () (#f))
             ("##cdar" (1) #f () (#f))
             ("##cddr" (1) #f () (#f))
             ("##caaar" (1) #f () (#f))
             ("##caadr" (1) #f () (#f))
             ("##cadar" (1) #f () (#f))
             ("##caddr" (1) #f () (#f))
             ("##cdaar" (1) #f () (#f))
             ("##cdadr" (1) #f () (#f))
             ("##cddar" (1) #f () (#f))
             ("##cdddr" (1) #f () (#f))
             ("##caaaar" (1) #f () (#f))
             ("##caaadr" (1) #f () (#f))
             ("##caadar" (1) #f () (#f))
             ("##caaddr" (1) #f () (#f))
             ("##cadaar" (1) #f () (#f))
             ("##cadadr" (1) #f () (#f))
             ("##caddar" (1) #f () (#f))
             ("##cadddr" (1) #f () (#f))
             ("##cdaaar" (1) #f () (#f))
             ("##cdaadr" (1) #f () (#f))
             ("##cdadar" (1) #f () (#f))
             ("##cdaddr" (1) #f () (#f))
             ("##cddaar" (1) #f () (#f))
             ("##cddadr" (1) #f () (#f))
             ("##cdddar" (1) #f () (#f))
             ("##cddddr" (1) #f () (#f))
             ("##make-cell" (1) #f () pair)
             ("##cell-ref" (1) #f () (#f))
             ("##cell-set!" (2) #t () pair)
             ("##vector" 0 #f () vector)
             ("##make-vector" (2) #f () vector)
             ("##vector-length" (1) #f () integer)
             ("##vector-ref" (2) #f () (#f))
             ("##vector-set!" (3) #t () vector)
             ("##vector-shrink!" (2) #t () vector)
             ("##string" 0 #f () string)
             ("##make-string" (2) #f () string)
             ("##string-length" (1) #f () integer)
             ("##string-ref" (2) #f () char)
             ("##string-set!" (3) #t () string)
             ("##string-shrink!" (2) #t () string)
             ("##vector8" 0 #f () string)
             ("##make-vector8" (2) #f () string)
             ("##vector8-length" (1) #f () integer)
             ("##vector8-ref" (2) #f () integer)
             ("##vector8-set!" (3) #t () string)
             ("##vector8-shrink!" (2) #t () string)
             ("##vector16" 0 #f () string)
             ("##make-vector16" (2) #f () string)
             ("##vector16-length" (1) #f () integer)
             ("##vector16-ref" (2) #f () integer)
             ("##vector16-set!" (3) #t () string)
             ("##vector16-shrink!" (2) #t () string)
             ("##closure-code" (1) #f () #f)
             ("##closure-ref" (2) #f () (#f))
             ("##closure-set!" (3) #t () #f)
             ("##subprocedure-id" (1) #f () #f)
             ("##subprocedure-parent" (1) #f () #f)
             ("##return-fs" (1) #f () #f)
             ("##return-link" (1) #f () #f)
             ("##procedure-info" (1) #f () #f)
             ("##pstate" (0) #f () #f)
             ("##make-placeholder" (1) #f 0 (#f))
             ("##touch" (1) #t 0 #f)
             ("##apply" (2) #t () (#f))
             ("##call-with-current-continuation" (1) #t () (#f))
             ("##global-var" (1) #t () #f)
             ("##global-var-ref" (1) #f () (#f))
             ("##global-var-set!" (2) #t () #f)
             ("##atomic-car" (1) #f () (#f))
             ("##atomic-cdr" (1) #f () (#f))
             ("##atomic-set-car!" (2) #t () pair)
             ("##atomic-set-cdr!" (2) #t () pair)
             ("##atomic-set-car-if-eq?!" (3) #t () boolean)
             ("##atomic-set-cdr-if-eq?!" (3) #t () boolean)
             ("##quasi-append" 0 #f 0 list)
             ("##quasi-list" 0 #f () list)
             ("##quasi-cons" (2) #f () pair)
             ("##quasi-list->vector" (1) #f 0 vector)
             ("##case-memv" (2) #f 0 list))))
 (define ofile-version-major ($$atom 5))
 (define ofile-version-minor ($$atom 0))
 (define prim-proc-prefix ($$atom 1))
 (define user-proc-prefix ($$atom 2))
 (define pair-prefix ($$atom 3))
 (define flonum-prefix ($$atom 4))
 (define local-object-bits ($$atom -524281))
 (define symbol-object-bits ($$atom -393209))
 (define prim-proc-object-bits ($$atom -262137))
 (define padding-tag ($$atom 0))
 (define end-of-code-tag ($$atom 32768))
 (define m68020-proc-code-tag ($$atom 32769))
 (define m68881-proc-code-tag ($$atom 32770))
 (define stat-tag ($$atom 32771))
 (define global-var-ref-tag ($$atom 34816))
 (define global-var-set-tag ($$atom 36864))
 (define global-var-ref-jump-tag ($$atom 38912))
 (define prim-proc-ref-tag ($$atom 40960))
 (define local-proc-ref-tag ($$atom 49152))
 (define long-index-mask ($$atom 16383))
 (define word-index-mask ($$atom 2047))
 (define ofile.begin!
   (lambda (filename0 add-obj0)
     (begin
       (set! ofile-add-obj ($$atom add-obj0))
       (set! ofile-syms (($$atom queue-empty)))
       (if ($$atom ofile-asm?)
           (begin
             (set! *ofile-port2*
                   (begin
                     (($$atom string-append)
                      ($$atom filename0)
                      ($$atom ".asm"))
                     (set! asm-output ($$atom '()))
                     (set! asm-line ($$atom '()))))
             (set! *ofile-pos* ($$atom 0)))
           ($$atom #f))
       (($$atom ofile-word) ($$atom 5))
       (($$atom ofile-word) ($$atom 0))
       ($$atom '()))))
 (define ofile.end!
   (lambda ()
     (begin
       (($$atom ofile-line) ($$atom ""))
       (if ($$atom ofile-asm?) ($$atom #f) ($$atom #f))
       ($$atom '()))))
 (define asm-output ($$atom '()))
 (define asm-line ($$atom '()))
 (define asm-open-output-file
   (lambda (filename0)
     (begin (set! asm-output ($$atom '())) (set! asm-line ($$atom '())))))
 (define asm-close-output-port (lambda (asm-port0) ($$atom #f)))
 (define asm-newline
   (lambda (asm-port0)
     (($$atom asm-display) ($$atom char-newline) ($$atom asm-port0))))
 (define asm-display
   (lambda (obj0 asm-port0)
     (if (if (($$atom number?) ($$atom obj0))
             (if (($$atom number?) ($$atom char-newline))
                 (($$atom =) ($$atom obj0) ($$atom char-newline))
                 ($$atom #f))
             (($$atom eq?) ($$atom obj0) ($$atom char-newline)))
         (begin
           (set! asm-output
                 (($$atom cons)
                  (($$atom apply)
                   ($$atom string-append)
                   (($$atom reverse) ($$atom asm-line)))
                  ($$atom asm-output)))
           (set! asm-line ($$atom '())))
         (set! asm-line
               (($$atom cons)
                (if (($$atom string?) ($$atom obj0))
                    ($$atom obj0)
                    (if (($$atom char?) ($$atom obj0))
                        (if (if (($$atom number?) ($$atom obj0))
                                (if (($$atom number?) ($$atom char-tab))
                                    (($$atom =)
                                     ($$atom obj0)
                                     ($$atom char-tab))
                                    ($$atom #f))
                                (($$atom eq?) ($$atom obj0) ($$atom char-tab)))
                            ($$atom " ")
                            (($$atom string) ($$atom obj0)))
                        (if (($$atom number?) ($$atom obj0))
                            (($$atom number->string) ($$atom obj0))
                            (($$atom compiler-internal-error)
                             ($$atom "asm-display")
                             ($$atom obj0)))))
                ($$atom asm-line))))))
 (define asm-output-get (lambda () (($$atom reverse) ($$atom asm-output))))
 (define *ofile-port1* ($$atom '()))
 (define *ofile-port2* ($$atom '()))
 (define *ofile-pos* ($$atom '()))
 (define ofile-nl ($$atom char-newline))
 (define ofile-tab ($$atom char-tab))
 (define ofile-asm? ($$atom '()))
 (set! ofile-asm? ($$atom '()))
 (define ofile-asm-bits? ($$atom '()))
 (set! ofile-asm-bits? ($$atom #f))
 (define ofile-asm-gvm? ($$atom '()))
 (set! ofile-asm-gvm? ($$atom #f))
 (define ofile-stats? ($$atom '()))
 (set! ofile-stats? ($$atom '()))
 (define ofile-add-obj ($$atom '()))
 (set! ofile-add-obj ($$atom '()))
 (define ofile-syms ($$atom '()))
 (set! ofile-syms ($$atom '()))
 (define ofile-word
   (lambda (n0)
     (let ((n1 (($$atom modulo) ($$atom n0) ($$atom 65536))))
       (begin
         (if (if ($$atom ofile-asm?) ($$atom ofile-asm-bits?) ($$atom #f))
             (let ((ofile-display0
                    (lambda (x0)
                      (begin
                        (($$atom asm-display)
                         ($$atom x0)
                         ($$atom *ofile-port2*))
                        (if (($$atom eq?) ($$atom x0) ($$atom char-newline))
                            (set! *ofile-pos* ($$atom 0))
                            (if (($$atom eq?) ($$atom x0) ($$atom char-tab))
                                (set! *ofile-pos*
                                      (($$atom *)
                                       (($$atom quotient)
                                        (($$atom +)
                                         ($$atom *ofile-pos*)
                                         ($$atom 8))
                                        ($$atom 8))
                                       ($$atom 8)))
                                (set! *ofile-pos*
                                      (($$atom +)
                                       ($$atom *ofile-pos*)
                                       (($$atom string-length)
                                        ($$atom x0))))))))))
               (begin
                 (if (($$atom >) ($$atom *ofile-pos*) ($$atom 64))
                     (($$atom ofile-display0) ($$atom char-newline))
                     ($$atom #f))
                 (if (($$atom =) ($$atom *ofile-pos*) ($$atom 0))
                     (($$atom ofile-display0) ($$atom " .word"))
                     (($$atom ofile-display0) ($$atom ",")))
                 (($$atom ofile-display0) ($$atom char-tab))
                 (let ((s0 (($$atom make-string) ($$atom 6) ($$atom #\0))))
                   (begin
                     (($$atom string-set!) ($$atom s0) ($$atom 1) ($$atom #\x))
                     (letrec ((loop0 (lambda (s1 i0 n2)
                                       (if (($$atom >) ($$atom n2) ($$atom 0))
                                           (begin
                                             (($$atom string-set!)
                                              ($$atom s1)
                                              ($$atom i0)
                                              (($$atom string-ref)
                                               ($$atom "0123456789ABCDEF")
                                               (($$atom remainder)
                                                ($$atom n2)
                                                ($$atom 16))))
                                             (($$atom loop0)
                                              ($$atom s1)
                                              (($$atom -)
                                               ($$atom i0)
                                               ($$atom 1))
                                              (($$atom quotient)
                                               ($$atom n2)
                                               ($$atom 16))))
                                           ($$atom #f)))))
                       (($$atom loop0) ($$atom s0) ($$atom 5) ($$atom n1)))
                     (($$atom ofile-display0) ($$atom s0))))))
             ($$atom #f))
         ($$atom '(write-word n *ofile-port1*))))))
 (define ofile-long
   (lambda (x0)
     (begin
       (($$atom ofile-word) (($$atom upper-16bits) ($$atom x0)))
       (($$atom ofile-word) ($$atom x0)))))
 (define ofile-string
   (lambda (s0)
     (let ((len0 (($$atom string-length) ($$atom s0))))
       (let ((ref0 (lambda (s1 len1 i0)
                     (if (($$atom >=) ($$atom i0) ($$atom len1))
                         ($$atom 0)
                         (($$atom char->integer)
                          (($$atom string-ref) ($$atom s1) ($$atom i0)))))))
         (begin
           (letrec ((loop0 (lambda (s1 len1 i0)
                             (if (($$atom <) ($$atom i0) ($$atom len1))
                                 (begin
                                   (($$atom ofile-word)
                                    (($$atom +)
                                     (($$atom *)
                                      (($$atom ref0)
                                       ($$atom s1)
                                       ($$atom len1)
                                       ($$atom i0))
                                      ($$atom 256))
                                     (($$atom ref0)
                                      ($$atom s1)
                                      ($$atom len1)
                                      (($$atom +) ($$atom i0) ($$atom 1)))))
                                   (($$atom loop0)
                                    ($$atom s1)
                                    ($$atom len1)
                                    (($$atom +) ($$atom i0) ($$atom 2))))
                                 ($$atom #f)))))
             (($$atom loop0) ($$atom s0) ($$atom len0) ($$atom 0)))
           (if (($$atom =)
                (($$atom remainder) ($$atom len0) ($$atom 2))
                ($$atom 0))
               (($$atom ofile-word) ($$atom 0))
               ($$atom #f)))))))
 (define ofile-wsym
   (lambda (tag0 name0)
     (let ((n0 (($$atom string-pos-in-list)
                ($$atom name0)
                (let ((queue0 ($$atom ofile-syms)))
                  (($$atom car) ($$atom queue0))))))
       (if ($$atom n0)
           (($$atom ofile-word) (($$atom +) ($$atom tag0) ($$atom n0)))
           (begin
             (($$atom length)
              (let ((queue0 ($$atom ofile-syms)))
                (($$atom car) ($$atom queue0))))
             (($$atom queue-put!) ($$atom ofile-syms) ($$atom name0))
             (($$atom ofile-word) (($$atom +) ($$atom tag0) ($$atom 2047)))
             (($$atom ofile-string) ($$atom name0)))))))
 (define ofile-lsym
   (lambda (tag0 name0)
     (let ((n0 (($$atom string-pos-in-list)
                ($$atom name0)
                (let ((queue0 ($$atom ofile-syms)))
                  (($$atom car) ($$atom queue0))))))
       (if ($$atom n0)
           (let ((x0 (($$atom +)
                      ($$atom tag0)
                      (($$atom *) ($$atom n0) ($$atom 8)))))
             (begin
               (($$atom ofile-word) (($$atom upper-16bits) ($$atom x0)))
               (($$atom ofile-word) ($$atom x0))))
           (begin
             (($$atom length)
              (let ((queue0 ($$atom ofile-syms)))
                (($$atom car) ($$atom queue0))))
             (($$atom queue-put!) ($$atom ofile-syms) ($$atom name0))
             (let ((x0 (($$atom +) ($$atom tag0) ($$atom 131064))))
               (begin
                 (($$atom ofile-word) (($$atom upper-16bits) ($$atom x0)))
                 (($$atom ofile-word) ($$atom x0))))
             (($$atom ofile-string) ($$atom name0)))))))
 (define ofile-ref
   (lambda (obj0)
     (let ((n0 (($$atom obj-encoding) ($$atom obj0))))
       (if ($$atom n0)
           (($$atom ofile-long) ($$atom n0))
           (if (($$atom symbol-object?) ($$atom obj0))
               (($$atom ofile-lsym)
                ($$atom -393209)
                (($$atom symbol->string) ($$atom obj0)))
               (let ((m0 (($$atom ofile-add-obj) ($$atom obj0))))
                 (if ($$atom m0)
                     (let ((x0 (($$atom +)
                                ($$atom -524281)
                                (($$atom *) ($$atom m0) ($$atom 8)))))
                       (begin
                         (($$atom ofile-word)
                          (($$atom upper-16bits) ($$atom x0)))
                         (($$atom ofile-word) ($$atom x0))))
                     (($$atom ofile-lsym)
                      ($$atom -262137)
                      (($$atom vector-ref) ($$atom obj0) ($$atom 1))))))))))
 (define ofile-prim-proc
   (lambda (s0)
     (begin
       (($$atom ofile-long) ($$atom 1))
       (($$atom ofile-wsym) ($$atom 0) ($$atom s0))
       (($$atom ofile-comment)
        (($$atom list)
         ($$atom "| #[primitive ")
         ($$atom s0)
         ($$atom "] ="))))))
 (define ofile-user-proc (lambda () (($$atom ofile-long) ($$atom 2))))
 (define ofile-line
   (lambda (s0)
     (if ($$atom ofile-asm?)
         (begin
           (if (($$atom >) ($$atom *ofile-pos*) ($$atom 0))
               (let ((asm-port0 ($$atom *ofile-port2*)))
                 (($$atom asm-display)
                  ($$atom char-newline)
                  ($$atom asm-port0)))
               ($$atom #f))
           (($$atom asm-display) ($$atom s0) ($$atom *ofile-port2*))
           (let ((asm-port0 ($$atom *ofile-port2*)))
             (($$atom asm-display) ($$atom char-newline) ($$atom asm-port0)))
           (set! *ofile-pos* ($$atom 0)))
         ($$atom #f))))
 (define ofile-tabs-to
   (lambda (n0)
     (letrec ((loop0 (lambda (n1)
                       (if (($$atom <) ($$atom *ofile-pos*) ($$atom n1))
                           (begin
                             (($$atom asm-display)
                              ($$atom char-tab)
                              ($$atom *ofile-port2*))
                             (set! *ofile-pos*
                                   (($$atom *)
                                    (($$atom quotient)
                                     (($$atom +)
                                      ($$atom *ofile-pos*)
                                      ($$atom 8))
                                     ($$atom 8))
                                    ($$atom 8)))
                             (($$atom loop0) ($$atom n1)))
                           ($$atom #f)))))
       (($$atom loop0) ($$atom n0)))))
 (define ofile-comment
   (lambda (l0)
     (if ($$atom ofile-asm?)
         (begin
           (if ($$atom ofile-asm-bits?)
               (begin
                 (($$atom ofile-tabs-to) ($$atom 32))
                 (($$atom asm-display) ($$atom "|") ($$atom *ofile-port2*)))
               ($$atom #f))
           (($$atom for-each)
            (lambda (x0)
              (($$atom asm-display) ($$atom x0) ($$atom *ofile-port2*)))
            ($$atom l0))
           (let ((asm-port0 ($$atom *ofile-port2*)))
             (($$atom asm-display) ($$atom char-newline) ($$atom asm-port0)))
           (set! *ofile-pos* ($$atom 0)))
         ($$atom #f))))
 (define ofile-gvm-instr
   (lambda (code0)
     (if (if ($$atom ofile-asm?) ($$atom ofile-asm-gvm?) ($$atom #f))
         (let ((sn0 (($$atom vector-ref) ($$atom code0) ($$atom 2)))
               (gvm-instr0 (($$atom vector-ref) ($$atom code0) ($$atom 1))))
           (begin
             (if (($$atom >) ($$atom *ofile-pos*) ($$atom 0))
                 (begin
                   (let ((asm-port0 ($$atom *ofile-port2*)))
                     (($$atom asm-display)
                      ($$atom char-newline)
                      ($$atom asm-port0)))
                   (set! *ofile-pos* ($$atom 0)))
                 ($$atom #f))
             (if ($$atom ofile-asm-bits?)
                 (($$atom ofile-tabs-to) ($$atom 32))
                 ($$atom #f))
             (($$atom asm-display) ($$atom "| GVM: [") ($$atom *ofile-port2*))
             (($$atom asm-display) ($$atom sn0) ($$atom *ofile-port2*))
             (($$atom asm-display) ($$atom "] ") ($$atom *ofile-port2*))
             (let ((asm-port0 ($$atom *ofile-port2*)))
               (($$atom asm-display) ($$atom char-newline) ($$atom asm-port0)))
             (set! *ofile-pos* ($$atom 0))))
         ($$atom #f))))
 (define ofile-stat
   (lambda (stat0)
     (letrec ((obj->string0
               (lambda (x0)
                 (if (($$atom string?) ($$atom x0))
                     ($$atom x0)
                     (if (($$atom symbol-object?) ($$atom x0))
                         (($$atom symbol->string) ($$atom x0))
                         (if (($$atom number?) ($$atom x0))
                             (($$atom number->string) ($$atom x0))
                             (if (($$atom eq?) ($$atom x0) ($$atom #f))
                                 ($$atom "#f")
                                 (if (($$atom eq?) ($$atom x0) ($$atom #t))
                                     ($$atom "#t")
                                     (if (($$atom null?) ($$atom x0))
                                         ($$atom "()")
                                         (if (($$atom pair?) ($$atom x0))
                                             (letrec ((loop0 (lambda (l10 l20)
                                                               (if (($$atom pair?)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                            ($$atom l10))
                           (($$atom loop0)
                            (($$atom cdr) ($$atom l10))
                            (($$atom cons)
                             (($$atom obj->string0)
                              (($$atom car) ($$atom l10)))
                             (($$atom cons) ($$atom " ") ($$atom l20))))
                           (if (($$atom null?) ($$atom l10))
                               (($$atom apply)
                                ($$atom string-append)
                                (($$atom reverse)
                                 (($$atom cons) ($$atom ")") ($$atom l20))))
                               (($$atom apply)
                                ($$atom string-append)
                                (($$atom reverse)
                                 (($$atom cons)
                                  ($$atom ")")
                                  (($$atom cons)
                                   (($$atom obj->string0) ($$atom l10))
                                   (($$atom cons)
                                    ($$atom " . ")
                                    ($$atom l20)))))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                               (($$atom loop0)
                                                (($$atom cdr) ($$atom x0))
                                                (($$atom list)
                                                 (($$atom obj->string0)
                                                  (($$atom car) ($$atom x0)))
                                                 ($$atom "("))))
                                             (($$atom compiler-internal-error)
                                              ($$atom "ofile-stat, can't convert to string 'x'")
                                              ($$atom x0))))))))))))
       (($$atom ofile-string) (($$atom obj->string0) ($$atom stat0))))))
 (define upper-16bits
   (lambda (x0)
     (if (($$atom >=) ($$atom x0) ($$atom 0))
         (($$atom quotient) ($$atom x0) ($$atom 65536))
         (if (($$atom >=) ($$atom x0) ($$atom -65536))
             ($$atom -1)
             (($$atom -)
              (($$atom quotient)
               (($$atom +) ($$atom x0) ($$atom 65537))
               ($$atom 65536))
              ($$atom 2))))))
 (define type-fixnum ($$atom 0))
 (define type-flonum ($$atom 1))
 (define type-special ($$atom 7))
 (define type-pair ($$atom 4))
 (define type-placeholder ($$atom 5))
 (define type-subtyped ($$atom 3))
 (define type-procedure ($$atom 2))
 (define subtype-vector ($$atom 0))
 (define subtype-symbol ($$atom 1))
 (define subtype-port ($$atom 2))
 (define subtype-ratnum ($$atom 3))
 (define subtype-cpxnum ($$atom 4))
 (define subtype-string ($$atom 16))
 (define subtype-bignum ($$atom 17))
 (define data-false ($$atom -33686019))
 (define data-null ($$atom -67372037))
 (define data-true ($$atom -2))
 (define data-undef ($$atom -3))
 (define data-unass ($$atom -4))
 (define data-unbound ($$atom -5))
 (define data-eof ($$atom -6))
 (define data-max-fixnum ($$atom 268435455))
 (define data-min-fixnum ($$atom -268435456))
 (define make-encoding
   (lambda (data0 type0)
     (($$atom +) (($$atom *) ($$atom data0) ($$atom 8)) ($$atom type0))))
 (define obj-type
   (lambda (obj0)
     (if (($$atom eq?) ($$atom obj0) ($$atom #f))
         ($$atom 'special)
         (if (($$atom eq?) ($$atom obj0) ($$atom '|#[undefined]|))
             ($$atom 'special)
             (if (($$atom symbol-object?) ($$atom obj0))
                 ($$atom 'subtyped)
                 (if (($$atom proc-obj?) ($$atom obj0))
                     ($$atom 'procedure)
                     (if (($$atom eq?) ($$atom obj0) ($$atom #t))
                         ($$atom 'special)
                         (if (($$atom null?) ($$atom obj0))
                             ($$atom 'special)
                             (if (($$atom pair?) ($$atom obj0))
                                 ($$atom 'pair)
                                 (if (($$atom number?) ($$atom obj0))
                                     (if (if (($$atom integer?) ($$atom obj0))
                                             (if (($$atom exact?)
                                                  ($$atom obj0))
                                                 (if (($$atom >=)
                                                      ($$atom obj0)
                                                      ($$atom -268435456))
                                                     (($$atom <=)
                                                      ($$atom obj0)
                                                      ($$atom 268435455))
                                                     ($$atom #f))
                                                 ($$atom #f))
                                             ($$atom #f))
                                         ($$atom 'fixnum)
                                         ($$atom 'flonum))
                                     (if (($$atom char?) ($$atom obj0))
                                         ($$atom 'special)
                                         ($$atom 'subtyped))))))))))))
 (define obj-subtype
   (lambda (obj0)
     (if (($$atom symbol-object?) ($$atom obj0))
         ($$atom 'symbol)
         (if (($$atom number?) ($$atom obj0))
             (if (if (($$atom integer?) ($$atom obj0))
                     (($$atom exact?) ($$atom obj0))
                     ($$atom #f))
                 ($$atom 'bignum)
                 (if (if (($$atom NYIrational?) ($$atom obj0))
                         (($$atom exact?) ($$atom obj0))
                         ($$atom #f))
                     ($$atom 'ratnum)
                     ($$atom 'cpxnum)))
             (if (($$atom vector?) ($$atom obj0))
                 ($$atom 'vector)
                 (if (($$atom string?) ($$atom obj0))
                     ($$atom 'string)
                     (($$atom compiler-internal-error)
                      ($$atom "obj-subtype, unknown object 'obj'")
                      ($$atom obj0))))))))
 (define obj-type-tag
   (lambda (obj0)
     (let ((case-temp.7840 (($$atom obj-type) ($$atom obj0))))
       (if (let ((g1880 ($$atom 'fixnum)))
             (if (($$atom number?) ($$atom case-temp.7840))
                 (if (($$atom number?) ($$atom g1880))
                     (($$atom =) ($$atom case-temp.7840) ($$atom g1880))
                     ($$atom #f))
                 (($$atom eq?) ($$atom case-temp.7840) ($$atom g1880))))
           ($$atom 0)
           (if (let ((g1890 ($$atom 'flonum)))
                 (if (($$atom number?) ($$atom case-temp.7840))
                     (if (($$atom number?) ($$atom g1890))
                         (($$atom =) ($$atom case-temp.7840) ($$atom g1890))
                         ($$atom #f))
                     (($$atom eq?) ($$atom case-temp.7840) ($$atom g1890))))
               ($$atom 1)
               (if (let ((g1900 ($$atom 'special)))
                     (if (($$atom number?) ($$atom case-temp.7840))
                         (if (($$atom number?) ($$atom g1900))
                             (($$atom =)
                              ($$atom case-temp.7840)
                              ($$atom g1900))
                             ($$atom #f))
                         (($$atom eq?)
                          ($$atom case-temp.7840)
                          ($$atom g1900))))
                   ($$atom 7)
                   (if (let ((g1910 ($$atom 'pair)))
                         (if (($$atom number?) ($$atom case-temp.7840))
                             (if (($$atom number?) ($$atom g1910))
                                 (($$atom =)
                                  ($$atom case-temp.7840)
                                  ($$atom g1910))
                                 ($$atom #f))
                             (($$atom eq?)
                              ($$atom case-temp.7840)
                              ($$atom g1910))))
                       ($$atom 4)
                       (if (let ((g1920 ($$atom 'subtyped)))
                             (if (($$atom number?) ($$atom case-temp.7840))
                                 (if (($$atom number?) ($$atom g1920))
                                     (($$atom =)
                                      ($$atom case-temp.7840)
                                      ($$atom g1920))
                                     ($$atom #f))
                                 (($$atom eq?)
                                  ($$atom case-temp.7840)
                                  ($$atom g1920))))
                           ($$atom 3)
                           (if (let ((g1930 ($$atom 'procedure)))
                                 (if (($$atom number?) ($$atom case-temp.7840))
                                     (if (($$atom number?) ($$atom g1930))
                                         (($$atom =)
                                          ($$atom case-temp.7840)
                                          ($$atom g1930))
                                         ($$atom #f))
                                     (($$atom eq?)
                                      ($$atom case-temp.7840)
                                      ($$atom g1930))))
                               ($$atom 2)
                               (($$atom compiler-internal-error)
                                ($$atom "obj-type-tag, unknown object 'obj'")
                                ($$atom obj0)))))))))))
 (define obj-encoding
   (lambda (obj0)
     (let ((case-temp.7850 (($$atom obj-type) ($$atom obj0))))
       (if (let ((g1940 ($$atom 'fixnum)))
             (if (($$atom number?) ($$atom case-temp.7850))
                 (if (($$atom number?) ($$atom g1940))
                     (($$atom =) ($$atom case-temp.7850) ($$atom g1940))
                     ($$atom #f))
                 (($$atom eq?) ($$atom case-temp.7850) ($$atom g1940))))
           (($$atom make-encoding) ($$atom obj0) ($$atom 0))
           (if (let ((g1950 ($$atom 'special)))
                 (if (($$atom number?) ($$atom case-temp.7850))
                     (if (($$atom number?) ($$atom g1950))
                         (($$atom =) ($$atom case-temp.7850) ($$atom g1950))
                         ($$atom #f))
                     (($$atom eq?) ($$atom case-temp.7850) ($$atom g1950))))
               (let ((data0 (if (($$atom eq?) ($$atom obj0) ($$atom #f))
                                ($$atom -33686019)
                                (if (($$atom eq?)
                                     ($$atom obj0)
                                     ($$atom '|#[undefined]|))
                                    ($$atom -3)
                                    (if (($$atom eq?)
                                         ($$atom obj0)
                                         ($$atom #t))
                                        ($$atom -2)
                                        (if (($$atom null?) ($$atom obj0))
                                            ($$atom -67372037)
                                            (if (($$atom char?) ($$atom obj0))
                                                (($$atom char->integer)
                                                 ($$atom obj0))
                                                (($$atom compiler-internal-error)
                                                 ($$atom "obj-encoding, unknown SPECIAL object 'obj'")
                                                 ($$atom obj0)))))))))
                 (($$atom +)
                  (($$atom *) ($$atom data0) ($$atom 8))
                  ($$atom 7)))
               ($$atom #f))))))
 (define bits-false (($$atom make-encoding) ($$atom -33686019) ($$atom 7)))
 (define bits-null (($$atom make-encoding) ($$atom -67372037) ($$atom 7)))
 (define bits-true (($$atom make-encoding) ($$atom -2) ($$atom 7)))
 (define bits-unass (($$atom make-encoding) ($$atom -4) ($$atom 7)))
 (define bits-unbound (($$atom make-encoding) ($$atom -5) ($$atom 7)))
 (define asm.begin!
   (lambda ()
     (begin
       (set! asm-code-queue (($$atom queue-empty)))
       (set! asm-const-queue (($$atom queue-empty)))
       ($$atom '()))))
 (define asm.end!
   (lambda (debug-info0)
     (begin
       (($$atom asm-assemble!) ($$atom debug-info0))
       (set! asm-code-queue ($$atom '()))
       (set! asm-const-queue ($$atom '()))
       ($$atom '()))))
 (define asm-code-queue ($$atom '()))
 (define asm-const-queue ($$atom '()))
 (define asm-word
   (lambda (x0)
     (($$atom queue-put!)
      ($$atom asm-code-queue)
      (($$atom modulo) ($$atom x0) ($$atom 65536)))))
 (define asm-long
   (lambda (x0)
     (begin
       (let ((x1 (($$atom upper-16bits) ($$atom x0))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x1) ($$atom 65536))))
       (($$atom asm-word) ($$atom x0)))))
 (define asm-label
   (lambda (lbl0 label-descr0)
     (($$atom queue-put!)
      ($$atom asm-code-queue)
      (($$atom cons)
       ($$atom 'label)
       (($$atom cons) ($$atom lbl0) ($$atom label-descr0))))))
 (define asm-comment
   (lambda (x0)
     (($$atom queue-put!)
      ($$atom asm-code-queue)
      (($$atom cons) ($$atom 'comment) ($$atom x0)))))
 (define asm-align
   (lambda (n0 offset0)
     (($$atom queue-put!)
      ($$atom asm-code-queue)
      (($$atom cons)
       ($$atom 'align)
       (($$atom cons) ($$atom n0) ($$atom offset0))))))
 (define asm-ref-glob
   (lambda (glob0)
     (($$atom queue-put!)
      ($$atom asm-code-queue)
      (($$atom cons)
       ($$atom 'ref-glob)
       (($$atom symbol->string) ($$atom glob0))))))
 (define asm-set-glob
   (lambda (glob0)
     (($$atom queue-put!)
      ($$atom asm-code-queue)
      (($$atom cons)
       ($$atom 'set-glob)
       (($$atom symbol->string) ($$atom glob0))))))
 (define asm-ref-glob-jump
   (lambda (glob0)
     (($$atom queue-put!)
      ($$atom asm-code-queue)
      (($$atom cons)
       ($$atom 'ref-glob-jump)
       (($$atom symbol->string) ($$atom glob0))))))
 (define asm-proc-ref
   (lambda (num0 offset0)
     (($$atom queue-put!)
      ($$atom asm-code-queue)
      (($$atom cons)
       ($$atom 'proc-ref)
       (($$atom cons) ($$atom num0) ($$atom offset0))))))
 (define asm-prim-ref
   (lambda (proc0 offset0)
     (($$atom queue-put!)
      ($$atom asm-code-queue)
      (($$atom cons)
       ($$atom 'prim-ref)
       (($$atom cons)
        (($$atom vector-ref) ($$atom proc0) ($$atom 1))
        ($$atom offset0))))))
 (define asm-m68020-proc
   (lambda ()
     (($$atom queue-put!) ($$atom asm-code-queue) ($$atom '(m68020-proc)))))
 (define asm-m68881-proc
   (lambda ()
     (($$atom queue-put!) ($$atom asm-code-queue) ($$atom '(m68881-proc)))))
 (define asm-stat
   (lambda (x0)
     (($$atom queue-put!)
      ($$atom asm-code-queue)
      (($$atom cons) ($$atom 'stat) ($$atom x0)))))
 (define asm-brel
   (lambda (type0 lbl0)
     (($$atom queue-put!)
      ($$atom asm-code-queue)
      (($$atom cons)
       ($$atom 'brab)
       (($$atom cons) ($$atom type0) ($$atom lbl0))))))
 (define asm-wrel
   (lambda (lbl0 offs0)
     (($$atom queue-put!)
      ($$atom asm-code-queue)
      (($$atom cons)
       ($$atom 'wrel)
       (($$atom cons) ($$atom lbl0) ($$atom offs0))))))
 (define asm-lrel
   (lambda (lbl0 offs0 n0)
     (($$atom queue-put!)
      ($$atom asm-code-queue)
      (($$atom cons)
       ($$atom 'lrel)
       (($$atom cons)
        ($$atom lbl0)
        (($$atom cons) ($$atom offs0) ($$atom n0)))))))
 (define asm-assemble!
   (lambda (debug-info0)
     (begin
       (($$atom queue-put!) ($$atom asm-const-queue) ($$atom debug-info0))
       (($$atom asm-align) ($$atom 4) ($$atom 0))
       (($$atom emit-label) ($$atom 0))
       (let ((const-list0
              (let ((queue0 ($$atom asm-const-queue)))
                (($$atom car) ($$atom queue0))))
             (code-list0
              (let ((queue0 ($$atom asm-code-queue)))
                (($$atom car) ($$atom queue0)))))
         (let ((fix-list0
                (letrec ((loop0 (lambda (l0 len0 x0)
                                  (if (($$atom null?) ($$atom l0))
                                      (($$atom reverse) ($$atom x0))
                                      (let ((rest0 (($$atom cdr) ($$atom l0)))
                                            (part0 (($$atom car) ($$atom l0))))
                                        (if (($$atom pair?) ($$atom part0))
                                            (let ((case-temp.7920
                                                   (($$atom car)
                                                    ($$atom part0))))
                                              (if (let ((g1960 (let ((g1970 ($$atom 'label)))
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                         (if (($$atom number?) ($$atom case-temp.7920))
                             (if (($$atom number?) ($$atom g1970))
                                 (($$atom =)
                                  ($$atom case-temp.7920)
                                  ($$atom g1970))
                                 ($$atom #f))
                             (($$atom eq?)
                              ($$atom case-temp.7920)
                              ($$atom g1970))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                    (if ($$atom g1960)
                                                        ($$atom g1960)
                                                        (let ((g1980 (let ((g1990 ($$atom 'align)))
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                               (if (($$atom number?) ($$atom case-temp.7920))
                                   (if (($$atom number?) ($$atom g1990))
                                       (($$atom =)
                                        ($$atom case-temp.7920)
                                        ($$atom g1990))
                                       ($$atom #f))
                                   (($$atom eq?)
                                    ($$atom case-temp.7920)
                                    ($$atom g1990))))))
                  (if ($$atom g1980)
                      ($$atom g1980)
                      (let ((g2000 ($$atom 'brab)))
                        (if (($$atom number?) ($$atom case-temp.7920))
                            (if (($$atom number?) ($$atom g2000))
                                (($$atom =)
                                 ($$atom case-temp.7920)
                                 ($$atom g2000))
                                ($$atom #f))
                            (($$atom eq?)
                             ($$atom case-temp.7920)
                             ($$atom g2000))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                  (($$atom loop0)
                                                   ($$atom rest0)
                                                   ($$atom 0)
                                                   (($$atom cons)
                                                    (($$atom cons)
                                                     ($$atom len0)
                                                     ($$atom part0))
                                                    ($$atom x0)))
                                                  (if (let ((g2010 ($$atom 'wrel)))
                                                        (if (($$atom number?)
                                                             ($$atom case-temp.7920))
                                                            (if (($$atom number?)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                         ($$atom g2010))
                        (($$atom =) ($$atom case-temp.7920) ($$atom g2010))
                        ($$atom #f))
                    (($$atom eq?) ($$atom case-temp.7920) ($$atom g2010))))
              (($$atom loop0)
               ($$atom rest0)
               (($$atom +) ($$atom len0) ($$atom 2))
               ($$atom x0))
              (if (let ((g2020 ($$atom 'lrel)))
                    (if (($$atom number?) ($$atom case-temp.7920))
                        (if (($$atom number?) ($$atom g2020))
                            (($$atom =) ($$atom case-temp.7920) ($$atom g2020))
                            ($$atom #f))
                        (($$atom eq?) ($$atom case-temp.7920) ($$atom g2020))))
                  (($$atom loop0)
                   ($$atom rest0)
                   (($$atom +) ($$atom len0) ($$atom 4))
                   ($$atom x0))
                  (if (let ((g2030 ($$atom 'ref-glob)))
                        (if (($$atom number?) ($$atom case-temp.7920))
                            (if (($$atom number?) ($$atom g2030))
                                (($$atom =)
                                 ($$atom case-temp.7920)
                                 ($$atom g2030))
                                ($$atom #f))
                            (($$atom eq?)
                             ($$atom case-temp.7920)
                             ($$atom g2030))))
                      (($$atom loop0)
                       ($$atom rest0)
                       (($$atom +) ($$atom len0) ($$atom 2))
                       ($$atom x0))
                      (if (let ((g2040 ($$atom 'set-glob)))
                            (if (($$atom number?) ($$atom case-temp.7920))
                                (if (($$atom number?) ($$atom g2040))
                                    (($$atom =)
                                     ($$atom case-temp.7920)
                                     ($$atom g2040))
                                    ($$atom #f))
                                (($$atom eq?)
                                 ($$atom case-temp.7920)
                                 ($$atom g2040))))
                          (($$atom loop0)
                           ($$atom rest0)
                           (($$atom +) ($$atom len0) ($$atom 10))
                           ($$atom x0))
                          (if (let ((g2050 ($$atom 'ref-glob-jump)))
                                (if (($$atom number?) ($$atom case-temp.7920))
                                    (if (($$atom number?) ($$atom g2050))
                                        (($$atom =)
                                         ($$atom case-temp.7920)
                                         ($$atom g2050))
                                        ($$atom #f))
                                    (($$atom eq?)
                                     ($$atom case-temp.7920)
                                     ($$atom g2050))))
                              (($$atom loop0)
                               ($$atom rest0)
                               (($$atom +) ($$atom len0) ($$atom 2))
                               ($$atom x0))
                              (if (let ((g2060 ($$atom 'proc-ref)))
                                    (if (($$atom number?)
                                         ($$atom case-temp.7920))
                                        (if (($$atom number?) ($$atom g2060))
                                            (($$atom =)
                                             ($$atom case-temp.7920)
                                             ($$atom g2060))
                                            ($$atom #f))
                                        (($$atom eq?)
                                         ($$atom case-temp.7920)
                                         ($$atom g2060))))
                                  (($$atom loop0)
                                   ($$atom rest0)
                                   (($$atom +) ($$atom len0) ($$atom 4))
                                   ($$atom x0))
                                  (if (let ((g2070 ($$atom 'prim-ref)))
                                        (if (($$atom number?)
                                             ($$atom case-temp.7920))
                                            (if (($$atom number?)
                                                 ($$atom g2070))
                                                (($$atom =)
                                                 ($$atom case-temp.7920)
                                                 ($$atom g2070))
                                                ($$atom #f))
                                            (($$atom eq?)
                                             ($$atom case-temp.7920)
                                             ($$atom g2070))))
                                      (($$atom loop0)
                                       ($$atom rest0)
                                       (($$atom +) ($$atom len0) ($$atom 4))
                                       ($$atom x0))
                                      (if (let ((g2080 ($$atom 'stat)))
                                            (if (($$atom number?)
                                                 ($$atom case-temp.7920))
                                                (if (($$atom number?)
                                                     ($$atom g2080))
                                                    (($$atom =)
                                                     ($$atom case-temp.7920)
                                                     ($$atom g2080))
                                                    ($$atom #f))
                                                (($$atom eq?)
                                                 ($$atom case-temp.7920)
                                                 ($$atom g2080))))
                                          (($$atom loop0)
                                           ($$atom rest0)
                                           (($$atom +)
                                            ($$atom len0)
                                            ($$atom 4))
                                           ($$atom x0))
                                          (if (let ((g2090 (let ((g2100 ($$atom 'comment)))
                                                             (if (($$atom number?)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                          ($$atom case-temp.7920))
                         (if (($$atom number?) ($$atom g2100))
                             (($$atom =)
                              ($$atom case-temp.7920)
                              ($$atom g2100))
                             ($$atom #f))
                         (($$atom eq?)
                          ($$atom case-temp.7920)
                          ($$atom g2100))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                (if ($$atom g2090)
                                                    ($$atom g2090)
                                                    (let ((g2110 (let ((g2120 ($$atom 'm68020-proc)))
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                           (if (($$atom number?) ($$atom case-temp.7920))
                               (if (($$atom number?) ($$atom g2120))
                                   (($$atom =)
                                    ($$atom case-temp.7920)
                                    ($$atom g2120))
                                   ($$atom #f))
                               (($$atom eq?)
                                ($$atom case-temp.7920)
                                ($$atom g2120))))))
              (if ($$atom g2110)
                  ($$atom g2110)
                  (let ((g2130 ($$atom 'm68881-proc)))
                    (if (($$atom number?) ($$atom case-temp.7920))
                        (if (($$atom number?) ($$atom g2130))
                            (($$atom =) ($$atom case-temp.7920) ($$atom g2130))
                            ($$atom #f))
                        (($$atom eq?)
                         ($$atom case-temp.7920)
                         ($$atom g2130))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                              (($$atom loop0)
                                               ($$atom rest0)
                                               ($$atom len0)
                                               ($$atom x0))
                                              (($$atom compiler-internal-error)
                                               ($$atom "asm-assemble!, unknown code list element")
                                               ($$atom part0)))))))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                            (($$atom loop0)
                                             ($$atom rest0)
                                             (($$atom +)
                                              ($$atom len0)
                                              ($$atom 2))
                                             ($$atom x0))))))))
                  (($$atom loop0)
                   ($$atom code-list0)
                   ($$atom 2)
                   ($$atom '())))))
           (let ((lbl-list0
                  (letrec ((loop0 (lambda (l0 x0)
                                    (if (($$atom null?) ($$atom l0))
                                        ($$atom x0)
                                        (let ((rest0 (($$atom cdr)
                                                      ($$atom l0)))
                                              (part0 (($$atom cdr)
                                                      (($$atom car)
                                                       ($$atom l0)))))
                                          (if (($$atom eq?)
                                               (($$atom car) ($$atom part0))
                                               ($$atom 'label))
                                              (($$atom loop0)
                                               ($$atom rest0)
                                               (($$atom cons)
                                                (($$atom cons)
                                                 (($$atom car)
                                                  (($$atom cdr)
                                                   ($$atom part0)))
                                                 ($$atom part0))
                                                ($$atom x0)))
                                              (($$atom loop0)
                                               ($$atom rest0)
                                               ($$atom x0))))))))
                    (($$atom loop0) ($$atom fix-list0) ($$atom '())))))
             (letrec ((write-block0
                       (lambda (start-loc0 end-loc0 start0 end0)
                         (begin
                           (if (($$atom >)
                                ($$atom end-loc0)
                                ($$atom start-loc0))
                               (($$atom ofile-word)
                                (($$atom quotient)
                                 (($$atom -)
                                  ($$atom end-loc0)
                                  ($$atom start-loc0))
                                 ($$atom 2)))
                               ($$atom #f))
                           (letrec ((loop0 (lambda (end1 loc0 l0)
                                             (if (($$atom eq?)
                                                  ($$atom l0)
                                                  ($$atom end1))
                                                 ($$atom #f)
                                                 (let ((rest0 (($$atom cdr)
                                                               ($$atom l0)))
                                                       (part0 (($$atom car)
                                                               ($$atom l0))))
                                                   (if (($$atom pair?)
                                                        ($$atom part0))
                                                       (let ((case-temp.8120
                                                              (($$atom car)
                                                               ($$atom part0))))
                                                         (if (let ((g2140 ($$atom 'label)))
                                                               (if (($$atom number?)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                            ($$atom case-temp.8120))
                           (if (($$atom number?) ($$atom g2140))
                               (($$atom =)
                                ($$atom case-temp.8120)
                                ($$atom g2140))
                               ($$atom #f))
                           (($$atom eq?)
                            ($$atom case-temp.8120)
                            ($$atom g2140))))
                     (($$atom loop0)
                      ($$atom end1)
                      ($$atom loc0)
                      ($$atom rest0))
                     (if (let ((g2150 ($$atom 'align)))
                           (if (($$atom number?) ($$atom case-temp.8120))
                               (if (($$atom number?) ($$atom g2150))
                                   (($$atom =)
                                    ($$atom case-temp.8120)
                                    ($$atom g2150))
                                   ($$atom #f))
                               (($$atom eq?)
                                ($$atom case-temp.8120)
                                ($$atom g2150))))
                         (let ((n0 (let ((offset0 (($$atom cdr)
                                                   (($$atom cdr)
                                                    ($$atom part0))))
                                         (n0 (($$atom car)
                                              (($$atom cdr) ($$atom part0)))))
                                     (($$atom modulo)
                                      (($$atom -)
                                       ($$atom offset0)
                                       ($$atom loc0))
                                      ($$atom n0)))))
                           (letrec ((pad0 (lambda (end2 loc1 rest1 n1 i0)
                                            (if (($$atom <)
                                                 ($$atom i0)
                                                 ($$atom n1))
                                                (begin
                                                  (($$atom ofile-word)
                                                   ($$atom 0))
                                                  (($$atom pad0)
                                                   ($$atom end2)
                                                   ($$atom loc1)
                                                   ($$atom rest1)
                                                   ($$atom n1)
                                                   (($$atom +)
                                                    ($$atom i0)
                                                    ($$atom 2))))
                                                (($$atom loop0)
                                                 ($$atom end2)
                                                 (($$atom +)
                                                  ($$atom loc1)
                                                  ($$atom n1))
                                                 ($$atom rest1))))))
                             (($$atom pad0)
                              ($$atom end1)
                              ($$atom loc0)
                              ($$atom rest0)
                              ($$atom n0)
                              ($$atom 0))))
                         (if (let ((g2160 ($$atom 'brab)))
                               (if (($$atom number?) ($$atom case-temp.8120))
                                   (if (($$atom number?) ($$atom g2160))
                                       (($$atom =)
                                        ($$atom case-temp.8120)
                                        ($$atom g2160))
                                       ($$atom #f))
                                   (($$atom eq?)
                                    ($$atom case-temp.8120)
                                    ($$atom g2160))))
                             (let ((dist0 (($$atom -)
                                           (($$atom car)
                                            (($$atom cdr)
                                             (($$atom cdr)
                                              (($$atom cdr) ($$atom part0)))))
                                           (($$atom +)
                                            ($$atom loc0)
                                            ($$atom 2)))))
                               (begin
                                 (($$atom ofile-word)
                                  (($$atom +)
                                   (($$atom car) (($$atom cdr) ($$atom part0)))
                                   (($$atom modulo)
                                    ($$atom dist0)
                                    ($$atom 256))))
                                 (($$atom loop0)
                                  ($$atom end1)
                                  (($$atom +) ($$atom loc0) ($$atom 2))
                                  ($$atom rest0))))
                             (if (let ((g2170 ($$atom 'braw)))
                                   (if (($$atom number?)
                                        ($$atom case-temp.8120))
                                       (if (($$atom number?) ($$atom g2170))
                                           (($$atom =)
                                            ($$atom case-temp.8120)
                                            ($$atom g2170))
                                           ($$atom #f))
                                       (($$atom eq?)
                                        ($$atom case-temp.8120)
                                        ($$atom g2170))))
                                 (let ((dist0 (($$atom -)
                                               (($$atom car)
                                                (($$atom cdr)
                                                 (($$atom cdr)
                                                  (($$atom cdr)
                                                   ($$atom part0)))))
                                               (($$atom +)
                                                ($$atom loc0)
                                                ($$atom 2)))))
                                   (begin
                                     (($$atom ofile-word)
                                      (($$atom car)
                                       (($$atom cdr) ($$atom part0))))
                                     (($$atom ofile-word)
                                      (($$atom modulo)
                                       ($$atom dist0)
                                       ($$atom 65536)))
                                     (($$atom loop0)
                                      ($$atom end1)
                                      (($$atom +) ($$atom loc0) ($$atom 4))
                                      ($$atom rest0))))
                                 (if (let ((g2180 ($$atom 'wrel)))
                                       (if (($$atom number?)
                                            ($$atom case-temp.8120))
                                           (if (($$atom number?)
                                                ($$atom g2180))
                                               (($$atom =)
                                                ($$atom case-temp.8120)
                                                ($$atom g2180))
                                               ($$atom #f))
                                           (($$atom eq?)
                                            ($$atom case-temp.8120)
                                            ($$atom g2180))))
                                     (let ((dist0 (($$atom +)
                                                   (($$atom -)
                                                    (($$atom car)
                                                     (($$atom cdr)
                                                      (($$atom car)
                                                       (($$atom cdr)
                                                        ($$atom part0)))))
                                                    ($$atom loc0))
                                                   (($$atom cdr)
                                                    (($$atom cdr)
                                                     ($$atom part0))))))
                                       (begin
                                         (($$atom ofile-word)
                                          (($$atom modulo)
                                           ($$atom dist0)
                                           ($$atom 65536)))
                                         (($$atom loop0)
                                          ($$atom end1)
                                          (($$atom +) ($$atom loc0) ($$atom 2))
                                          ($$atom rest0))))
                                     (if (let ((g2190 ($$atom 'lrel)))
                                           (if (($$atom number?)
                                                ($$atom case-temp.8120))
                                               (if (($$atom number?)
                                                    ($$atom g2190))
                                                   (($$atom =)
                                                    ($$atom case-temp.8120)
                                                    ($$atom g2190))
                                                   ($$atom #f))
                                               (($$atom eq?)
                                                ($$atom case-temp.8120)
                                                ($$atom g2190))))
                                         (let ((dist0 (($$atom +)
                                                       (($$atom -)
                                                        (($$atom car)
                                                         (($$atom cdr)
                                                          (($$atom car)
                                                           (($$atom cdr)
                                                            ($$atom part0)))))
                                                        ($$atom loc0))
                                                       (($$atom car)
                                                        (($$atom cdr)
                                                         (($$atom cdr)
                                                          ($$atom part0)))))))
                                           (begin
                                             (let ((x0 (($$atom +)
                                                        (($$atom *)
                                                         ($$atom dist0)
                                                         ($$atom 65536))
                                                        (($$atom cdr)
                                                         (($$atom cdr)
                                                          (($$atom cdr)
                                                           ($$atom part0)))))))
                                               (begin
                                                 (($$atom ofile-word)
                                                  (($$atom upper-16bits)
                                                   ($$atom x0)))
                                                 (($$atom ofile-word)
                                                  ($$atom x0))))
                                             (($$atom loop0)
                                              ($$atom end1)
                                              (($$atom +)
                                               ($$atom loc0)
                                               ($$atom 4))
                                              ($$atom rest0))))
                                         (if (let ((g2200 ($$atom 'comment)))
                                               (if (($$atom number?)
                                                    ($$atom case-temp.8120))
                                                   (if (($$atom number?)
                                                        ($$atom g2200))
                                                       (($$atom =)
                                                        ($$atom case-temp.8120)
                                                        ($$atom g2200))
                                                       ($$atom #f))
                                                   (($$atom eq?)
                                                    ($$atom case-temp.8120)
                                                    ($$atom g2200))))
                                             (let ((x0 (($$atom cdr)
                                                        ($$atom part0))))
                                               (begin
                                                 (if (($$atom pair?)
                                                      ($$atom x0))
                                                     (($$atom ofile-comment)
                                                      ($$atom x0))
                                                     (($$atom ofile-gvm-instr)
                                                      ($$atom x0)))
                                                 (($$atom loop0)
                                                  ($$atom end1)
                                                  ($$atom loc0)
                                                  ($$atom rest0))))
                                             ($$atom #f)))))))))
               (begin
                 (($$atom ofile-word) ($$atom part0))
                 (($$atom loop0)
                  ($$atom end1)
                  (($$atom +) ($$atom loc0) ($$atom 2))
                  ($$atom rest0)))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                             (($$atom loop0)
                              ($$atom end0)
                              ($$atom start-loc0)
                              ($$atom start0))))))
                      (branch-tensioning-pass0
                       (lambda (fix-list1)
                         (begin
                           (letrec ((loop0 (lambda (l0 loc0)
                                             (if (($$atom null?) ($$atom l0))
                                                 ($$atom #f)
                                                 (let ((first0 (($$atom car)
                                                                ($$atom l0))))
                                                   (let ((rest0 (($$atom cdr)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                         ($$atom l0))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                     (let ((len0 (($$atom car)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                          ($$atom first0))))
               (let ((cur-loc0 (($$atom +) ($$atom loc0) ($$atom len0))))
                 (let ((part0 (($$atom cdr) ($$atom first0))))
                   (let ((case-temp.8250 (($$atom car) ($$atom part0))))
                     (if (let ((g2210 ($$atom 'label)))
                           (if (($$atom number?) ($$atom case-temp.8250))
                               (if (($$atom number?) ($$atom g2210))
                                   (($$atom =)
                                    ($$atom case-temp.8250)
                                    ($$atom g2210))
                                   ($$atom #f))
                               (($$atom eq?)
                                ($$atom case-temp.8250)
                                ($$atom g2210))))
                         (begin
                           (if (($$atom cdr) (($$atom cdr) ($$atom part0)))
                               (($$atom vector-set!)
                                (($$atom cdr) (($$atom cdr) ($$atom part0)))
                                ($$atom 0)
                                (($$atom quotient)
                                 (($$atom -) ($$atom cur-loc0) ($$atom 2))
                                 ($$atom 8)))
                               ($$atom #f))
                           (($$atom set-car!)
                            (($$atom cdr) ($$atom part0))
                            ($$atom cur-loc0))
                           (($$atom loop0) ($$atom rest0) ($$atom cur-loc0)))
                         (if (let ((g2220 ($$atom 'align)))
                               (if (($$atom number?) ($$atom case-temp.8250))
                                   (if (($$atom number?) ($$atom g2220))
                                       (($$atom =)
                                        ($$atom case-temp.8250)
                                        ($$atom g2220))
                                       ($$atom #f))
                                   (($$atom eq?)
                                    ($$atom case-temp.8250)
                                    ($$atom g2220))))
                             (($$atom loop0)
                              ($$atom rest0)
                              (($$atom +)
                               ($$atom cur-loc0)
                               (let ((n0 (($$atom car)
                                          (($$atom cdr) ($$atom part0))))
                                     (offset0 (($$atom cdr)
                                               (($$atom cdr) ($$atom part0)))))
                                 (($$atom modulo)
                                  (($$atom -)
                                   ($$atom offset0)
                                   ($$atom cur-loc0))
                                  ($$atom n0)))))
                             (if (let ((g2230 ($$atom 'brab)))
                                   (if (($$atom number?)
                                        ($$atom case-temp.8250))
                                       (if (($$atom number?) ($$atom g2230))
                                           (($$atom =)
                                            ($$atom case-temp.8250)
                                            ($$atom g2230))
                                           ($$atom #f))
                                       (($$atom eq?)
                                        ($$atom case-temp.8250)
                                        ($$atom g2230))))
                                 (($$atom loop0)
                                  ($$atom rest0)
                                  (($$atom +) ($$atom cur-loc0) ($$atom 2)))
                                 (if (let ((g2240 ($$atom 'braw)))
                                       (if (($$atom number?)
                                            ($$atom case-temp.8250))
                                           (if (($$atom number?)
                                                ($$atom g2240))
                                               (($$atom =)
                                                ($$atom case-temp.8250)
                                                ($$atom g2240))
                                               ($$atom #f))
                                           (($$atom eq?)
                                            ($$atom case-temp.8250)
                                            ($$atom g2240))))
                                     (($$atom loop0)
                                      ($$atom rest0)
                                      (($$atom +)
                                       ($$atom cur-loc0)
                                       ($$atom 4)))
                                     (($$atom compiler-internal-error)
                                      ($$atom "assign-loc-to-labels, unknown code list element")
                                      ($$atom part0))))))))))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                             (($$atom loop0) ($$atom fix-list1) ($$atom 0)))
                           (letrec ((loop0 (lambda (fix-list2
                                                    changed?0
                                                    l0
                                                    loc0)
                                             (if (($$atom null?) ($$atom l0))
                                                 (if ($$atom changed?0)
                                                     (($$atom branch-tensioning-pass0)
                                                      ($$atom fix-list2))
                                                     ($$atom #f))
                                                 (let ((first0 (($$atom car)
                                                                ($$atom l0))))
                                                   (let ((rest0 (($$atom cdr)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                         ($$atom l0))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                     (let ((len0 (($$atom car)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                          ($$atom first0))))
               (let ((cur-loc0 (($$atom +) ($$atom loc0) ($$atom len0))))
                 (let ((part0 (($$atom cdr) ($$atom first0))))
                   (let ((case-temp.8220 (($$atom car) ($$atom part0))))
                     (if (let ((g2250 ($$atom 'label)))
                           (if (($$atom number?) ($$atom case-temp.8220))
                               (if (($$atom number?) ($$atom g2250))
                                   (($$atom =)
                                    ($$atom case-temp.8220)
                                    ($$atom g2250))
                                   ($$atom #f))
                               (($$atom eq?)
                                ($$atom case-temp.8220)
                                ($$atom g2250))))
                         (($$atom loop0)
                          ($$atom fix-list2)
                          ($$atom changed?0)
                          ($$atom rest0)
                          ($$atom cur-loc0))
                         (if (let ((g2260 ($$atom 'align)))
                               (if (($$atom number?) ($$atom case-temp.8220))
                                   (if (($$atom number?) ($$atom g2260))
                                       (($$atom =)
                                        ($$atom case-temp.8220)
                                        ($$atom g2260))
                                       ($$atom #f))
                                   (($$atom eq?)
                                    ($$atom case-temp.8220)
                                    ($$atom g2260))))
                             (($$atom loop0)
                              ($$atom fix-list2)
                              ($$atom changed?0)
                              ($$atom rest0)
                              (($$atom +)
                               ($$atom cur-loc0)
                               (let ((offset0 (($$atom cdr)
                                               (($$atom cdr) ($$atom part0))))
                                     (n0 (($$atom car)
                                          (($$atom cdr) ($$atom part0)))))
                                 (($$atom modulo)
                                  (($$atom -)
                                   ($$atom offset0)
                                   ($$atom cur-loc0))
                                  ($$atom n0)))))
                             (if (let ((g2270 ($$atom 'brab)))
                                   (if (($$atom number?)
                                        ($$atom case-temp.8220))
                                       (if (($$atom number?) ($$atom g2270))
                                           (($$atom =)
                                            ($$atom case-temp.8220)
                                            ($$atom g2270))
                                           ($$atom #f))
                                       (($$atom eq?)
                                        ($$atom case-temp.8220)
                                        ($$atom g2270))))
                                 (let ((dist0 (($$atom -)
                                               (($$atom car)
                                                (($$atom cdr)
                                                 (($$atom cdr)
                                                  (($$atom cdr)
                                                   ($$atom part0)))))
                                               (($$atom +)
                                                ($$atom cur-loc0)
                                                ($$atom 2)))))
                                   (if (let ((g2280 (($$atom <)
                                                     ($$atom dist0)
                                                     ($$atom -128))))
                                         (if ($$atom g2280)
                                             ($$atom g2280)
                                             (let ((g2290 (($$atom >)
                                                           ($$atom dist0)
                                                           ($$atom 127))))
                                               (if ($$atom g2290)
                                                   ($$atom g2290)
                                                   (($$atom =)
                                                    ($$atom dist0)
                                                    ($$atom 0))))))
                                       (begin
                                         (($$atom set-car!)
                                          ($$atom part0)
                                          ($$atom 'braw))
                                         (($$atom loop0)
                                          ($$atom fix-list2)
                                          ($$atom #t)
                                          ($$atom rest0)
                                          (($$atom +)
                                           ($$atom cur-loc0)
                                           ($$atom 2))))
                                       (($$atom loop0)
                                        ($$atom fix-list2)
                                        ($$atom changed?0)
                                        ($$atom rest0)
                                        (($$atom +)
                                         ($$atom cur-loc0)
                                         ($$atom 2)))))
                                 (if (let ((g2300 ($$atom 'braw)))
                                       (if (($$atom number?)
                                            ($$atom case-temp.8220))
                                           (if (($$atom number?)
                                                ($$atom g2300))
                                               (($$atom =)
                                                ($$atom case-temp.8220)
                                                ($$atom g2300))
                                               ($$atom #f))
                                           (($$atom eq?)
                                            ($$atom case-temp.8220)
                                            ($$atom g2300))))
                                     (($$atom loop0)
                                      ($$atom fix-list2)
                                      ($$atom changed?0)
                                      ($$atom rest0)
                                      (($$atom +)
                                       ($$atom cur-loc0)
                                       ($$atom 4)))
                                     (($$atom compiler-internal-error)
                                      ($$atom "branch-tensioning-pass, unknown code list element")
                                      ($$atom part0))))))))))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                             (($$atom loop0)
                              ($$atom fix-list1)
                              ($$atom #f)
                              ($$atom fix-list1)
                              ($$atom 0))))))
                      (assign-loc-to-labels0
                       (lambda (fix-list1)
                         (letrec ((loop0 (lambda (l0 loc0)
                                           (if (($$atom null?) ($$atom l0))
                                               ($$atom #f)
                                               (let ((first0 (($$atom car)
                                                              ($$atom l0))))
                                                 (let ((rest0 (($$atom cdr)
                                                               ($$atom l0))))
                                                   (let ((len0 (($$atom car)
                                                                ($$atom first0))))
                                                     (let ((cur-loc0
                                                            (($$atom +)
                                                             ($$atom loc0)
                                                             ($$atom len0))))
                                                       (let ((part0 (($$atom cdr)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                             ($$atom first0))))
                 (let ((case-temp.8250 (($$atom car) ($$atom part0))))
                   (if (let ((g2310 ($$atom 'label)))
                         (if (($$atom number?) ($$atom case-temp.8250))
                             (if (($$atom number?) ($$atom g2310))
                                 (($$atom =)
                                  ($$atom case-temp.8250)
                                  ($$atom g2310))
                                 ($$atom #f))
                             (($$atom eq?)
                              ($$atom case-temp.8250)
                              ($$atom g2310))))
                       (begin
                         (if (($$atom cdr) (($$atom cdr) ($$atom part0)))
                             (($$atom vector-set!)
                              (($$atom cdr) (($$atom cdr) ($$atom part0)))
                              ($$atom 0)
                              (($$atom quotient)
                               (($$atom -) ($$atom cur-loc0) ($$atom 2))
                               ($$atom 8)))
                             ($$atom #f))
                         (($$atom set-car!)
                          (($$atom cdr) ($$atom part0))
                          ($$atom cur-loc0))
                         (($$atom loop0) ($$atom rest0) ($$atom cur-loc0)))
                       (if (let ((g2320 ($$atom 'align)))
                             (if (($$atom number?) ($$atom case-temp.8250))
                                 (if (($$atom number?) ($$atom g2320))
                                     (($$atom =)
                                      ($$atom case-temp.8250)
                                      ($$atom g2320))
                                     ($$atom #f))
                                 (($$atom eq?)
                                  ($$atom case-temp.8250)
                                  ($$atom g2320))))
                           (($$atom loop0)
                            ($$atom rest0)
                            (($$atom +)
                             ($$atom cur-loc0)
                             (let ((offset0 (($$atom cdr)
                                             (($$atom cdr) ($$atom part0))))
                                   (n0 (($$atom car)
                                        (($$atom cdr) ($$atom part0)))))
                               (($$atom modulo)
                                (($$atom -) ($$atom offset0) ($$atom cur-loc0))
                                ($$atom n0)))))
                           (if (let ((g2330 ($$atom 'brab)))
                                 (if (($$atom number?) ($$atom case-temp.8250))
                                     (if (($$atom number?) ($$atom g2330))
                                         (($$atom =)
                                          ($$atom case-temp.8250)
                                          ($$atom g2330))
                                         ($$atom #f))
                                     (($$atom eq?)
                                      ($$atom case-temp.8250)
                                      ($$atom g2330))))
                               (($$atom loop0)
                                ($$atom rest0)
                                (($$atom +) ($$atom cur-loc0) ($$atom 2)))
                               (if (let ((g2340 ($$atom 'braw)))
                                     (if (($$atom number?)
                                          ($$atom case-temp.8250))
                                         (if (($$atom number?) ($$atom g2340))
                                             (($$atom =)
                                              ($$atom case-temp.8250)
                                              ($$atom g2340))
                                             ($$atom #f))
                                         (($$atom eq?)
                                          ($$atom case-temp.8250)
                                          ($$atom g2340))))
                                   (($$atom loop0)
                                    ($$atom rest0)
                                    (($$atom +) ($$atom cur-loc0) ($$atom 4)))
                                   (($$atom compiler-internal-error)
                                    ($$atom "assign-loc-to-labels, unknown code list element")
                                    ($$atom part0))))))))))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                           (($$atom loop0) ($$atom fix-list1) ($$atom 0))))))
               (begin
                 (letrec ((loop0 (lambda (lbl-list1 l0)
                                   (if (($$atom null?) ($$atom l0))
                                       ($$atom #f)
                                       (let ((part0 (($$atom car) ($$atom l0)))
                                             (rest0 (($$atom cdr)
                                                     ($$atom l0))))
                                         (begin
                                           (if (($$atom pair?) ($$atom part0))
                                               (let ((case-temp.8280
                                                      (($$atom car)
                                                       ($$atom part0))))
                                                 (if (let ((g2350 ($$atom 'brab)))
                                                       (if (($$atom number?)
                                                            ($$atom case-temp.8280))
                                                           (if (($$atom number?)
                                                                ($$atom g2350))
                                                               (($$atom =)
                                                                ($$atom case-temp.8280)
                                                                ($$atom g2350))
                                                               ($$atom #f))
                                                           (($$atom eq?)
                                                            ($$atom case-temp.8280)
                                                            ($$atom g2350))))
                                                     (($$atom set-cdr!)
                                                      (($$atom cdr)
                                                       ($$atom part0))
                                                      (($$atom cdr)
                                                       (($$atom assq)
                                                        (($$atom cdr)
                                                         (($$atom cdr)
                                                          ($$atom part0)))
                                                        ($$atom lbl-list1))))
                                                     (if (let ((g2360 ($$atom 'wrel)))
                                                           (if (($$atom number?)
                                                                ($$atom case-temp.8280))
                                                               (if (($$atom number?)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                            ($$atom g2360))
                           (($$atom =) ($$atom case-temp.8280) ($$atom g2360))
                           ($$atom #f))
                       (($$atom eq?) ($$atom case-temp.8280) ($$atom g2360))))
                 (($$atom set-car!)
                  (($$atom cdr) ($$atom part0))
                  (($$atom cdr)
                   (($$atom assq)
                    (($$atom car) (($$atom cdr) ($$atom part0)))
                    ($$atom lbl-list1))))
                 (if (let ((g2370 ($$atom 'lrel)))
                       (if (($$atom number?) ($$atom case-temp.8280))
                           (if (($$atom number?) ($$atom g2370))
                               (($$atom =)
                                ($$atom case-temp.8280)
                                ($$atom g2370))
                               ($$atom #f))
                           (($$atom eq?)
                            ($$atom case-temp.8280)
                            ($$atom g2370))))
                     (($$atom set-car!)
                      (($$atom cdr) ($$atom part0))
                      (($$atom cdr)
                       (($$atom assq)
                        (($$atom car) (($$atom cdr) ($$atom part0)))
                        ($$atom lbl-list1))))
                     ($$atom #f)))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                               ($$atom #f))
                                           (($$atom loop0)
                                            ($$atom lbl-list1)
                                            ($$atom rest0))))))))
                   (($$atom loop0) ($$atom lbl-list0) ($$atom code-list0)))
                 (($$atom branch-tensioning-pass0) ($$atom fix-list0))
                 (let ((proc-len0
                        (($$atom +)
                         (($$atom car)
                          (($$atom cdr)
                           (($$atom cdr)
                            (($$atom assq) ($$atom 0) ($$atom lbl-list0)))))
                         (($$atom *)
                          (($$atom length) ($$atom const-list0))
                          ($$atom 4)))))
                   (begin
                     (if (($$atom >=) ($$atom proc-len0) ($$atom 32768))
                         (($$atom compiler-limitation-error)
                          ($$atom "procedure is too big (32K bytes limit per procedure)"))
                         ($$atom #f))
                     (($$atom ofile-word)
                      (($$atom +) ($$atom 32768) ($$atom proc-len0)))))
                 (letrec ((loop10 (lambda (start0 start-loc0)
                                    (letrec ((loop20 (lambda (start1
                                                              start-loc1
                                                              end0
                                                              loc0)
                                                       (if (($$atom null?)
                                                            ($$atom end0))
                                                           (($$atom write-block0)
                                                            ($$atom start-loc1)
                                                            ($$atom loc0)
                                                            ($$atom start1)
                                                            ($$atom end0))
                                                           (let ((part0 (($$atom car)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                 ($$atom end0)))
                         (rest0 (($$atom cdr) ($$atom end0))))
                     (if (($$atom pair?) ($$atom part0))
                         (let ((case-temp.7940 (($$atom car) ($$atom part0))))
                           (if (let ((g2380 (let ((g2390 ($$atom 'label)))
                                              (if (($$atom number?)
                                                   ($$atom case-temp.7940))
                                                  (if (($$atom number?)
                                                       ($$atom g2390))
                                                      (($$atom =)
                                                       ($$atom case-temp.7940)
                                                       ($$atom g2390))
                                                      ($$atom #f))
                                                  (($$atom eq?)
                                                   ($$atom case-temp.7940)
                                                   ($$atom g2390))))))
                                 (if ($$atom g2380)
                                     ($$atom g2380)
                                     (let ((g2400 ($$atom 'comment)))
                                       (if (($$atom number?)
                                            ($$atom case-temp.7940))
                                           (if (($$atom number?)
                                                ($$atom g2400))
                                               (($$atom =)
                                                ($$atom case-temp.7940)
                                                ($$atom g2400))
                                               ($$atom #f))
                                           (($$atom eq?)
                                            ($$atom case-temp.7940)
                                            ($$atom g2400))))))
                               (($$atom loop20)
                                ($$atom start1)
                                ($$atom start-loc1)
                                ($$atom rest0)
                                ($$atom loc0))
                               (if (let ((g2410 ($$atom 'align)))
                                     (if (($$atom number?)
                                          ($$atom case-temp.7940))
                                         (if (($$atom number?) ($$atom g2410))
                                             (($$atom =)
                                              ($$atom case-temp.7940)
                                              ($$atom g2410))
                                             ($$atom #f))
                                         (($$atom eq?)
                                          ($$atom case-temp.7940)
                                          ($$atom g2410))))
                                   (($$atom loop20)
                                    ($$atom start1)
                                    ($$atom start-loc1)
                                    ($$atom rest0)
                                    (($$atom +)
                                     ($$atom loc0)
                                     (let ((n0 (($$atom car)
                                                (($$atom cdr) ($$atom part0))))
                                           (offset0 (($$atom cdr)
                                                     (($$atom cdr)
                                                      ($$atom part0)))))
                                       (($$atom modulo)
                                        (($$atom -)
                                         ($$atom offset0)
                                         ($$atom loc0))
                                        ($$atom n0)))))
                                   (if (let ((g2420 (let ((g2430 ($$atom 'brab)))
                                                      (if (($$atom number?)
                                                           ($$atom case-temp.7940))
                                                          (if (($$atom number?)
                                                               ($$atom g2430))
                                                              (($$atom =)
                                                               ($$atom case-temp.7940)
                                                               ($$atom g2430))
                                                              ($$atom #f))
                                                          (($$atom eq?)
                                                           ($$atom case-temp.7940)
                                                           ($$atom g2430))))))
                                         (if ($$atom g2420)
                                             ($$atom g2420)
                                             (let ((g2440 ($$atom 'wrel)))
                                               (if (($$atom number?)
                                                    ($$atom case-temp.7940))
                                                   (if (($$atom number?)
                                                        ($$atom g2440))
                                                       (($$atom =)
                                                        ($$atom case-temp.7940)
                                                        ($$atom g2440))
                                                       ($$atom #f))
                                                   (($$atom eq?)
                                                    ($$atom case-temp.7940)
                                                    ($$atom g2440))))))
                                       (($$atom loop20)
                                        ($$atom start1)
                                        ($$atom start-loc1)
                                        ($$atom rest0)
                                        (($$atom +) ($$atom loc0) ($$atom 2)))
                                       (if (let ((g2450 ($$atom 'braw)))
                                             (if (($$atom number?)
                                                  ($$atom case-temp.7940))
                                                 (if (($$atom number?)
                                                      ($$atom g2450))
                                                     (($$atom =)
                                                      ($$atom case-temp.7940)
                                                      ($$atom g2450))
                                                     ($$atom #f))
                                                 (($$atom eq?)
                                                  ($$atom case-temp.7940)
                                                  ($$atom g2450))))
                                           (($$atom loop20)
                                            ($$atom start1)
                                            ($$atom start-loc1)
                                            ($$atom rest0)
                                            (($$atom +)
                                             ($$atom loc0)
                                             ($$atom 4)))
                                           (if (let ((g2460 ($$atom 'lrel)))
                                                 (if (($$atom number?)
                                                      ($$atom case-temp.7940))
                                                     (if (($$atom number?)
                                                          ($$atom g2460))
                                                         (($$atom =)
                                                          ($$atom case-temp.7940)
                                                          ($$atom g2460))
                                                         ($$atom #f))
                                                     (($$atom eq?)
                                                      ($$atom case-temp.7940)
                                                      ($$atom g2460))))
                                               (($$atom loop20)
                                                ($$atom start1)
                                                ($$atom start-loc1)
                                                ($$atom rest0)
                                                (($$atom +)
                                                 ($$atom loc0)
                                                 ($$atom 4)))
                                               (begin
                                                 (($$atom write-block0)
                                                  ($$atom start-loc1)
                                                  ($$atom loc0)
                                                  ($$atom start1)
                                                  ($$atom end0))
                                                 (let ((case-temp.7950
                                                        (($$atom car)
                                                         ($$atom part0))))
                                                   (if (let ((g2470 ($$atom 'ref-glob)))
                                                         (if (($$atom number?)
                                                              ($$atom case-temp.7950))
                                                             (if (($$atom number?)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                          ($$atom g2470))
                         (($$atom =) ($$atom case-temp.7950) ($$atom g2470))
                         ($$atom #f))
                     (($$atom eq?) ($$atom case-temp.7950) ($$atom g2470))))
               (begin
                 (($$atom ofile-wsym)
                  ($$atom 34816)
                  (($$atom cdr) ($$atom part0)))
                 (($$atom loop10)
                  ($$atom rest0)
                  (($$atom +) ($$atom loc0) ($$atom 2))))
               (if (let ((g2480 ($$atom 'set-glob)))
                     (if (($$atom number?) ($$atom case-temp.7950))
                         (if (($$atom number?) ($$atom g2480))
                             (($$atom =)
                              ($$atom case-temp.7950)
                              ($$atom g2480))
                             ($$atom #f))
                         (($$atom eq?)
                          ($$atom case-temp.7950)
                          ($$atom g2480))))
                   (begin
                     (($$atom ofile-wsym)
                      ($$atom 36864)
                      (($$atom cdr) ($$atom part0)))
                     (($$atom loop10)
                      ($$atom rest0)
                      (($$atom +) ($$atom loc0) ($$atom 10))))
                   (if (let ((g2490 ($$atom 'ref-glob-jump)))
                         (if (($$atom number?) ($$atom case-temp.7950))
                             (if (($$atom number?) ($$atom g2490))
                                 (($$atom =)
                                  ($$atom case-temp.7950)
                                  ($$atom g2490))
                                 ($$atom #f))
                             (($$atom eq?)
                              ($$atom case-temp.7950)
                              ($$atom g2490))))
                       (begin
                         (($$atom ofile-wsym)
                          ($$atom 38912)
                          (($$atom cdr) ($$atom part0)))
                         (($$atom loop10)
                          ($$atom rest0)
                          (($$atom +) ($$atom loc0) ($$atom 2))))
                       (if (let ((g2500 ($$atom 'proc-ref)))
                             (if (($$atom number?) ($$atom case-temp.7950))
                                 (if (($$atom number?) ($$atom g2500))
                                     (($$atom =)
                                      ($$atom case-temp.7950)
                                      ($$atom g2500))
                                     ($$atom #f))
                                 (($$atom eq?)
                                  ($$atom case-temp.7950)
                                  ($$atom g2500))))
                           (begin
                             (($$atom ofile-word)
                              (($$atom +)
                               ($$atom 49152)
                               (($$atom car) (($$atom cdr) ($$atom part0)))))
                             (($$atom ofile-word)
                              (($$atom cdr) (($$atom cdr) ($$atom part0))))
                             (($$atom loop10)
                              ($$atom rest0)
                              (($$atom +) ($$atom loc0) ($$atom 4))))
                           (if (let ((g2510 ($$atom 'prim-ref)))
                                 (if (($$atom number?) ($$atom case-temp.7950))
                                     (if (($$atom number?) ($$atom g2510))
                                         (($$atom =)
                                          ($$atom case-temp.7950)
                                          ($$atom g2510))
                                         ($$atom #f))
                                     (($$atom eq?)
                                      ($$atom case-temp.7950)
                                      ($$atom g2510))))
                               (begin
                                 (($$atom ofile-wsym)
                                  ($$atom 40960)
                                  (($$atom car) (($$atom cdr) ($$atom part0))))
                                 (($$atom ofile-word)
                                  (($$atom cdr) (($$atom cdr) ($$atom part0))))
                                 (($$atom loop10)
                                  ($$atom rest0)
                                  (($$atom +) ($$atom loc0) ($$atom 4))))
                               (if (let ((g2520 ($$atom 'm68020-proc)))
                                     (if (($$atom number?)
                                          ($$atom case-temp.7950))
                                         (if (($$atom number?) ($$atom g2520))
                                             (($$atom =)
                                              ($$atom case-temp.7950)
                                              ($$atom g2520))
                                             ($$atom #f))
                                         (($$atom eq?)
                                          ($$atom case-temp.7950)
                                          ($$atom g2520))))
                                   (begin
                                     (($$atom ofile-word) ($$atom 32769))
                                     (($$atom loop10)
                                      ($$atom rest0)
                                      ($$atom loc0)))
                                   (if (let ((g2530 ($$atom 'm68881-proc)))
                                         (if (($$atom number?)
                                              ($$atom case-temp.7950))
                                             (if (($$atom number?)
                                                  ($$atom g2530))
                                                 (($$atom =)
                                                  ($$atom case-temp.7950)
                                                  ($$atom g2530))
                                                 ($$atom #f))
                                             (($$atom eq?)
                                              ($$atom case-temp.7950)
                                              ($$atom g2530))))
                                       (begin
                                         (($$atom ofile-word) ($$atom 32770))
                                         (($$atom loop10)
                                          ($$atom rest0)
                                          ($$atom loc0)))
                                       (if (let ((g2540 ($$atom 'stat)))
                                             (if (($$atom number?)
                                                  ($$atom case-temp.7950))
                                                 (if (($$atom number?)
                                                      ($$atom g2540))
                                                     (($$atom =)
                                                      ($$atom case-temp.7950)
                                                      ($$atom g2540))
                                                     ($$atom #f))
                                                 (($$atom eq?)
                                                  ($$atom case-temp.7950)
                                                  ($$atom g2540))))
                                           (begin
                                             (($$atom ofile-word)
                                              ($$atom 32771))
                                             (($$atom ofile-stat)
                                              (($$atom cdr) ($$atom part0)))
                                             (($$atom loop10)
                                              ($$atom rest0)
                                              (($$atom +)
                                               ($$atom loc0)
                                               ($$atom 4))))
                                           ($$atom #f)))))))))))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                         (($$atom loop20)
                          ($$atom start1)
                          ($$atom start-loc1)
                          ($$atom rest0)
                          (($$atom +) ($$atom loc0) ($$atom 2)))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                      (($$atom loop20)
                                       ($$atom start0)
                                       ($$atom start-loc0)
                                       ($$atom start0)
                                       ($$atom start-loc0))))))
                   (($$atom loop10) ($$atom code-list0) ($$atom 2)))
                 (($$atom ofile-word) ($$atom 32768))
                 (($$atom for-each) ($$atom ofile-ref) ($$atom const-list0))
                 (let ((x0 (($$atom obj-encoding)
                            (($$atom +)
                             (($$atom length) ($$atom const-list0))
                             ($$atom 1)))))
                   (begin
                     (($$atom ofile-word) (($$atom upper-16bits) ($$atom x0)))
                     (($$atom ofile-word) ($$atom x0))))))))))))
 (define const-lbl ($$atom 0))
 (define identical-opnd68?
   (lambda (opnd10 opnd20)
     (if (($$atom number?) ($$atom opnd10))
         (if (($$atom number?) ($$atom opnd20))
             (($$atom =) ($$atom opnd10) ($$atom opnd20))
             ($$atom #f))
         (($$atom eq?) ($$atom opnd10) ($$atom opnd20)))))
 (define reg68?
   (lambda (x0)
     (let ((g2550 (($$atom dreg?) ($$atom x0))))
       (if ($$atom g2550) ($$atom g2550) (($$atom areg?) ($$atom x0))))))
 (define make-dreg (lambda (num0) ($$atom num0)))
 (define dreg?
   (lambda (x0)
     (if (($$atom integer?) ($$atom x0))
         (if (($$atom >=) ($$atom x0) ($$atom 0))
             (($$atom <) ($$atom x0) ($$atom 8))
             ($$atom #f))
         ($$atom #f))))
 (define dreg-num (lambda (x0) ($$atom x0)))
 (define make-areg (lambda (num0) (($$atom +) ($$atom num0) ($$atom 8))))
 (define areg?
   (lambda (x0)
     (if (($$atom integer?) ($$atom x0))
         (if (($$atom >=) ($$atom x0) ($$atom 8))
             (($$atom <) ($$atom x0) ($$atom 16))
             ($$atom #f))
         ($$atom #f))))
 (define areg-num (lambda (x0) (($$atom -) ($$atom x0) ($$atom 8))))
 (define make-ind (lambda (areg0) (($$atom +) ($$atom areg0) ($$atom 8))))
 (define ind?
   (lambda (x0)
     (if (($$atom integer?) ($$atom x0))
         (if (($$atom >=) ($$atom x0) ($$atom 16))
             (($$atom <) ($$atom x0) ($$atom 24))
             ($$atom #f))
         ($$atom #f))))
 (define ind-areg (lambda (x0) (($$atom -) ($$atom x0) ($$atom 8))))
 (define make-pinc (lambda (areg0) (($$atom +) ($$atom areg0) ($$atom 16))))
 (define pinc?
   (lambda (x0)
     (if (($$atom integer?) ($$atom x0))
         (if (($$atom >=) ($$atom x0) ($$atom 24))
             (($$atom <) ($$atom x0) ($$atom 32))
             ($$atom #f))
         ($$atom #f))))
 (define pinc-areg (lambda (x0) (($$atom -) ($$atom x0) ($$atom 16))))
 (define make-pdec (lambda (areg0) (($$atom +) ($$atom areg0) ($$atom 24))))
 (define pdec?
   (lambda (x0)
     (if (($$atom integer?) ($$atom x0))
         (if (($$atom >=) ($$atom x0) ($$atom 32))
             (($$atom <) ($$atom x0) ($$atom 40))
             ($$atom #f))
         ($$atom #f))))
 (define pdec-areg (lambda (x0) (($$atom -) ($$atom x0) ($$atom 24))))
 (define make-disp
   (lambda (areg0 offset0)
     (($$atom +)
      (($$atom +) ($$atom areg0) ($$atom 32))
      (($$atom *)
       (($$atom modulo) ($$atom offset0) ($$atom 65536))
       ($$atom 8)))))
 (define disp?
   (lambda (x0)
     (if (($$atom integer?) ($$atom x0))
         (if (($$atom >=) ($$atom x0) ($$atom 40))
             (($$atom <) ($$atom x0) ($$atom 524328))
             ($$atom #f))
         ($$atom #f))))
 (define disp-areg
   (lambda (x0)
     (($$atom +) (($$atom remainder) ($$atom x0) ($$atom 8)) ($$atom 8))))
 (define disp-offset
   (lambda (x0)
     (($$atom -)
      (($$atom modulo)
       (($$atom +)
        (($$atom quotient) (($$atom -) ($$atom x0) ($$atom 40)) ($$atom 8))
        ($$atom 32768))
       ($$atom 65536))
      ($$atom 32768))))
 (define make-disp*
   (lambda (areg0 offset0)
     (if (($$atom =) ($$atom offset0) ($$atom 0))
         (($$atom +) ($$atom areg0) ($$atom 8))
         (($$atom make-disp) ($$atom areg0) ($$atom offset0)))))
 (define disp*?
   (lambda (x0)
     (let ((g2560 (($$atom ind?) ($$atom x0))))
       (if ($$atom g2560) ($$atom g2560) (($$atom disp?) ($$atom x0))))))
 (define disp*-areg
   (lambda (x0)
     (if (($$atom ind?) ($$atom x0))
         (($$atom -) ($$atom x0) ($$atom 8))
         (($$atom disp-areg) ($$atom x0)))))
 (define disp*-offset
   (lambda (x0)
     (if (($$atom ind?) ($$atom x0))
         ($$atom 0)
         (($$atom disp-offset) ($$atom x0)))))
 (define make-inx
   (lambda (areg0 ireg0 offset0)
     (($$atom +)
      (($$atom +)
       (($$atom +) ($$atom areg0) ($$atom 524320))
       (($$atom *) ($$atom ireg0) ($$atom 8)))
      (($$atom *)
       (($$atom modulo) ($$atom offset0) ($$atom 256))
       ($$atom 128)))))
 (define inx?
   (lambda (x0)
     (if (($$atom integer?) ($$atom x0))
         (if (($$atom >=) ($$atom x0) ($$atom 524328))
             (($$atom <) ($$atom x0) ($$atom 557096))
             ($$atom #f))
         ($$atom #f))))
 (define inx-areg
   (lambda (x0)
     (($$atom +)
      (($$atom remainder) (($$atom -) ($$atom x0) ($$atom 524328)) ($$atom 8))
      ($$atom 8))))
 (define inx-ireg
   (lambda (x0)
     (($$atom quotient)
      (($$atom remainder)
       (($$atom -) ($$atom x0) ($$atom 524328))
       ($$atom 128))
      ($$atom 8))))
 (define inx-offset
   (lambda (x0)
     (($$atom -)
      (($$atom modulo)
       (($$atom +)
        (($$atom quotient)
         (($$atom -) ($$atom x0) ($$atom 524328))
         ($$atom 128))
        ($$atom 128))
       ($$atom 256))
      ($$atom 128))))
 (define make-freg (lambda (num0) (($$atom +) ($$atom 557096) ($$atom num0))))
 (define freg?
   (lambda (x0)
     (if (($$atom integer?) ($$atom x0))
         (if (($$atom >=) ($$atom x0) ($$atom 557096))
             (($$atom <) ($$atom x0) ($$atom 557104))
             ($$atom #f))
         ($$atom #f))))
 (define freg-num (lambda (x0) (($$atom -) ($$atom x0) ($$atom 557096))))
 (define make-pcr
   (lambda (lbl0 offset0)
     (($$atom +)
      ($$atom 557104)
      (($$atom +)
       (($$atom modulo) ($$atom offset0) ($$atom 65536))
       (($$atom *) ($$atom lbl0) ($$atom 65536))))))
 (define pcr?
   (lambda (x0)
     (if (($$atom integer?) ($$atom x0))
         (($$atom >=) ($$atom x0) ($$atom 557104))
         ($$atom #f))))
 (define pcr-lbl
   (lambda (x0)
     (($$atom quotient)
      (($$atom -) ($$atom x0) ($$atom 557104))
      ($$atom 65536))))
 (define pcr-offset
   (lambda (x0)
     (($$atom -)
      (($$atom modulo) (($$atom -) ($$atom x0) ($$atom 524336)) ($$atom 65536))
      ($$atom 32768))))
 (define make-imm
   (lambda (val0)
     (if (($$atom <) ($$atom val0) ($$atom 0))
         (($$atom *) ($$atom val0) ($$atom 2))
         (($$atom -) ($$atom -1) (($$atom *) ($$atom val0) ($$atom 2))))))
 (define imm?
   (lambda (x0)
     (if (($$atom integer?) ($$atom x0))
         (($$atom <) ($$atom x0) ($$atom 0))
         ($$atom #f))))
 (define imm-val
   (lambda (x0)
     (if (($$atom even?) ($$atom x0))
         (($$atom quotient) ($$atom x0) ($$atom 2))
         (($$atom *) ($$atom -1) (($$atom quotient) ($$atom x0) ($$atom 2))))))
 (define make-glob (lambda (name0) ($$atom name0)))
 (define glob? (lambda (x0) (($$atom symbol?) ($$atom x0))))
 (define glob-name (lambda (x0) ($$atom x0)))
 (define make-frame-base-rel
   (lambda (slot0) (($$atom make-disp) ($$atom 15) ($$atom slot0))))
 (define frame-base-rel?
   (lambda (x0)
     (if (($$atom disp?) ($$atom x0))
         (let ((opnd20 (($$atom disp-areg) ($$atom x0))))
           (if (($$atom number?) ($$atom 15))
               (if (($$atom number?) ($$atom opnd20))
                   (($$atom =) ($$atom 15) ($$atom opnd20))
                   ($$atom #f))
               (($$atom eq?) ($$atom 15) ($$atom opnd20))))
         ($$atom #f))))
 (define frame-base-rel-slot (lambda (x0) (($$atom disp-offset) ($$atom x0))))
 (define make-reg-list (lambda (regs0) ($$atom regs0)))
 (define reg-list?
   (lambda (x0)
     (let ((g2570 (($$atom pair?) ($$atom x0))))
       (if ($$atom g2570) ($$atom g2570) (($$atom null?) ($$atom x0))))))
 (define reg-list-regs (lambda (x0) ($$atom x0)))
 (define first-dtemp ($$atom 0))
 (define gvm-reg1 ($$atom 1))
 (define poll-timer-reg ($$atom 5))
 (define null-reg ($$atom 6))
 (define placeholder-reg ($$atom 6))
 (define false-reg ($$atom 7))
 (define pair-reg ($$atom 7))
 (define gvm-reg0 ($$atom 0))
 (define first-atemp ($$atom 1))
 (define heap-reg ($$atom 11))
 (define ltq-tail-reg ($$atom 12))
 (define pstate-reg ($$atom 13))
 (define table-reg ($$atom 14))
 (define sp-reg ($$atom 15))
 (define pdec-sp ($$atom 39))
 (define pinc-sp ($$atom 31))
 (define dtemp1 ($$atom 0))
 (define atemp1 ($$atom 9))
 (define atemp2 ($$atom 10))
 (define ftemp1 ($$atom 557096))
 (define arg-count-reg ($$atom 0))
 (define trap-offset
   (lambda (n0)
     (($$atom +)
      ($$atom 32768)
      (($$atom *) (($$atom -) ($$atom n0) ($$atom 32)) ($$atom 8)))))
 (define emit-move.l
   (lambda (opnd10 opnd20)
     (let ((dst0 (($$atom opnd->reg/mode) ($$atom opnd20)))
           (src0 (($$atom opnd->mode/reg) ($$atom opnd10))))
       (begin
         (let ((x0 (($$atom +)
                    ($$atom 8192)
                    (($$atom +) ($$atom dst0) ($$atom src0)))))
           (($$atom queue-put!)
            ($$atom asm-code-queue)
            (($$atom modulo) ($$atom x0) ($$atom 65536))))
         (($$atom opnd-ext-rd-long) ($$atom opnd10))
         (($$atom opnd-ext-wr-long) ($$atom opnd20))
         (if ($$atom ofile-asm?)
             ((lambda l0
                (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                  (($$atom queue-put!)
                   ($$atom asm-code-queue)
                   (($$atom cons) ($$atom 'comment) ($$atom x0)))))
              ($$atom "movl")
              ($$atom char-tab)
              (($$atom opnd-str) ($$atom opnd10))
              ($$atom ",")
              (($$atom opnd-str) ($$atom opnd20)))
             ($$atom #f))))))
 (define emit-move.w
   (lambda (opnd10 opnd20)
     (let ((dst0 (($$atom opnd->reg/mode) ($$atom opnd20)))
           (src0 (($$atom opnd->mode/reg) ($$atom opnd10))))
       (begin
         (let ((x0 (($$atom +)
                    ($$atom 12288)
                    (($$atom +) ($$atom dst0) ($$atom src0)))))
           (($$atom queue-put!)
            ($$atom asm-code-queue)
            (($$atom modulo) ($$atom x0) ($$atom 65536))))
         (($$atom opnd-ext-rd-word) ($$atom opnd10))
         (($$atom opnd-ext-wr-word) ($$atom opnd20))
         (if ($$atom ofile-asm?)
             ((lambda l0
                (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                  (($$atom queue-put!)
                   ($$atom asm-code-queue)
                   (($$atom cons) ($$atom 'comment) ($$atom x0)))))
              ($$atom "movw")
              ($$atom char-tab)
              (($$atom opnd-str) ($$atom opnd10))
              ($$atom ",")
              (($$atom opnd-str) ($$atom opnd20)))
             ($$atom #f))))))
 (define emit-move.b
   (lambda (opnd10 opnd20)
     (let ((dst0 (($$atom opnd->reg/mode) ($$atom opnd20)))
           (src0 (($$atom opnd->mode/reg) ($$atom opnd10))))
       (begin
         (let ((x0 (($$atom +)
                    ($$atom 4096)
                    (($$atom +) ($$atom dst0) ($$atom src0)))))
           (($$atom queue-put!)
            ($$atom asm-code-queue)
            (($$atom modulo) ($$atom x0) ($$atom 65536))))
         (($$atom opnd-ext-rd-word) ($$atom opnd10))
         (($$atom opnd-ext-wr-word) ($$atom opnd20))
         (if ($$atom ofile-asm?)
             ((lambda l0
                (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                  (($$atom queue-put!)
                   ($$atom asm-code-queue)
                   (($$atom cons) ($$atom 'comment) ($$atom x0)))))
              ($$atom "movb")
              ($$atom char-tab)
              (($$atom opnd-str) ($$atom opnd10))
              ($$atom ",")
              (($$atom opnd-str) ($$atom opnd20)))
             ($$atom #f))))))
 (define emit-moveq
   (lambda (n0 opnd0)
     (begin
       (let ((x0 (($$atom +)
                  ($$atom 28672)
                  (($$atom +)
                   (($$atom *) ($$atom opnd0) ($$atom 512))
                   (($$atom modulo) ($$atom n0) ($$atom 256))))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (if ($$atom ofile-asm?)
           ((lambda l0
              (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                (($$atom queue-put!)
                 ($$atom asm-code-queue)
                 (($$atom cons) ($$atom 'comment) ($$atom x0)))))
            ($$atom "moveq")
            ($$atom char-tab)
            ($$atom "#")
            ($$atom n0)
            ($$atom ",")
            (($$atom opnd-str) ($$atom opnd0)))
           ($$atom #f)))))
 (define emit-movem.l
   (lambda (opnd10 opnd20)
     (let ((movem0 (lambda (op0 reg-list0 opnd0)
                     (begin
                       (let ((x0 (($$atom +)
                                  ($$atom op0)
                                  (($$atom opnd->mode/reg) ($$atom opnd0)))))
                         (($$atom queue-put!)
                          ($$atom asm-code-queue)
                          (($$atom modulo) ($$atom x0) ($$atom 65536))))
                       (let ((x0 (let ((flip-bits?0
                                        (($$atom pdec?) ($$atom opnd0))))
                                   (letrec ((loop0 (lambda (reg-list1
                                                            flip-bits?1
                                                            i0
                                                            bit0
                                                            mask0)
                                                     (if (($$atom >=)
                                                          ($$atom i0)
                                                          ($$atom 0))
                                                         (($$atom loop0)
                                                          ($$atom reg-list1)
                                                          ($$atom flip-bits?1)
                                                          (($$atom -)
                                                           ($$atom i0)
                                                           ($$atom 1))
                                                          (($$atom quotient)
                                                           ($$atom bit0)
                                                           ($$atom 2))
                                                          (if (($$atom memq)
                                                               ($$atom i0)
                                                               ($$atom reg-list1))
                                                              (($$atom +)
                                                               ($$atom mask0)
                                                               (if ($$atom flip-bits?1)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                           (($$atom quotient) ($$atom 32768) ($$atom bit0))
                           ($$atom bit0)))
                      ($$atom mask0)))
                 ($$atom mask0)))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                     (($$atom loop0)
                                      ($$atom reg-list0)
                                      ($$atom flip-bits?0)
                                      ($$atom 15)
                                      ($$atom 32768)
                                      ($$atom 0))))))
                         (($$atom queue-put!)
                          ($$atom asm-code-queue)
                          (($$atom modulo) ($$atom x0) ($$atom 65536)))))))
           (reg-mask0
            (lambda (reg-list0 flip-bits?0)
              (letrec ((loop0 (lambda (reg-list1 flip-bits?1 i0 bit0 mask0)
                                (if (($$atom >=) ($$atom i0) ($$atom 0))
                                    (let ((mask1 (if (($$atom memq)
                                                      ($$atom i0)
                                                      ($$atom reg-list1))
                                                     (($$atom +)
                                                      ($$atom mask0)
                                                      (if ($$atom flip-bits?1)
                                                          (($$atom quotient)
                                                           ($$atom 32768)
                                                           ($$atom bit0))
                                                          ($$atom bit0)))
                                                     ($$atom mask0)))
                                          (bit1 (($$atom quotient)
                                                 ($$atom bit0)
                                                 ($$atom 2)))
                                          (i1 (($$atom -)
                                               ($$atom i0)
                                               ($$atom 1))))
                                      (if (($$atom >=) ($$atom i1) ($$atom 0))
                                          (($$atom loop0)
                                           ($$atom reg-list1)
                                           ($$atom flip-bits?1)
                                           (($$atom -) ($$atom i1) ($$atom 1))
                                           (($$atom quotient)
                                            ($$atom bit1)
                                            ($$atom 2))
                                           (if (($$atom memq)
                                                ($$atom i1)
                                                ($$atom reg-list1))
                                               (($$atom +)
                                                ($$atom mask1)
                                                (if ($$atom flip-bits?1)
                                                    (($$atom quotient)
                                                     ($$atom 32768)
                                                     ($$atom bit1))
                                                    ($$atom bit1)))
                                               ($$atom mask1)))
                                          ($$atom mask1)))
                                    ($$atom mask0)))))
                (($$atom loop0)
                 ($$atom reg-list0)
                 ($$atom flip-bits?0)
                 ($$atom 15)
                 ($$atom 32768)
                 ($$atom 0))))))
       (begin
         (if (($$atom reg-list?) ($$atom opnd10))
             (begin
               (($$atom movem0) ($$atom 18624) ($$atom opnd10) ($$atom opnd20))
               (($$atom opnd-ext-wr-long) ($$atom opnd20)))
             (begin
               (($$atom movem0) ($$atom 19648) ($$atom opnd20) ($$atom opnd10))
               (($$atom opnd-ext-rd-long) ($$atom opnd10))))
         (if ($$atom ofile-asm?)
             ((lambda l0
                (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                  (($$atom queue-put!)
                   ($$atom asm-code-queue)
                   (($$atom cons) ($$atom 'comment) ($$atom x0)))))
              ($$atom "moveml")
              ($$atom char-tab)
              (($$atom opnd-str) ($$atom opnd10))
              ($$atom ",")
              (($$atom opnd-str) ($$atom opnd20)))
             ($$atom #f))))))
 (define emit-exg
   (lambda (opnd10 opnd20)
     (let ((exg0 (lambda (r10 r20)
                   (let ((num20 (if (($$atom dreg?) ($$atom r20))
                                    ($$atom r20)
                                    (($$atom -) ($$atom r20) ($$atom 8))))
                         (num10 (if (($$atom dreg?) ($$atom r10))
                                    ($$atom r10)
                                    (($$atom -) ($$atom r10) ($$atom 8))))
                         (mode0 (if (($$atom dreg?) ($$atom r20))
                                    ($$atom 49472)
                                    (if (($$atom dreg?) ($$atom r10))
                                        ($$atom 49544)
                                        ($$atom 49480)))))
                     (let ((x0 (($$atom +)
                                ($$atom mode0)
                                (($$atom +)
                                 (($$atom *) ($$atom num10) ($$atom 512))
                                 ($$atom num20)))))
                       (($$atom queue-put!)
                        ($$atom asm-code-queue)
                        (($$atom modulo) ($$atom x0) ($$atom 65536))))))))
       (begin
         (if (($$atom dreg?) ($$atom opnd20))
             (($$atom exg0) ($$atom opnd20) ($$atom opnd10))
             (($$atom exg0) ($$atom opnd10) ($$atom opnd20)))
         (if ($$atom ofile-asm?)
             ((lambda l0
                (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                  (($$atom queue-put!)
                   ($$atom asm-code-queue)
                   (($$atom cons) ($$atom 'comment) ($$atom x0)))))
              ($$atom "exg")
              ($$atom char-tab)
              (($$atom opnd-str) ($$atom opnd10))
              ($$atom ",")
              (($$atom opnd-str) ($$atom opnd20)))
             ($$atom #f))))))
 (define emit-eor.l
   (lambda (opnd10 opnd20)
     (begin
       (if (($$atom imm?) ($$atom opnd10))
           (begin
             (let ((x0 (($$atom +)
                        ($$atom 2688)
                        (($$atom opnd->mode/reg) ($$atom opnd20)))))
               (($$atom queue-put!)
                ($$atom asm-code-queue)
                (($$atom modulo) ($$atom x0) ($$atom 65536))))
             (($$atom opnd-ext-rd-long) ($$atom opnd10))
             (($$atom opnd-ext-wr-long) ($$atom opnd20)))
           (begin
             (let ((x0 (($$atom +)
                        ($$atom 45440)
                        (($$atom +)
                         (($$atom *) ($$atom opnd10) ($$atom 512))
                         (($$atom opnd->mode/reg) ($$atom opnd20))))))
               (($$atom queue-put!)
                ($$atom asm-code-queue)
                (($$atom modulo) ($$atom x0) ($$atom 65536))))
             (($$atom opnd-ext-wr-long) ($$atom opnd20))))
       (if ($$atom ofile-asm?)
           ((lambda l0
              (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                (($$atom queue-put!)
                 ($$atom asm-code-queue)
                 (($$atom cons) ($$atom 'comment) ($$atom x0)))))
            ($$atom "eorl")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd10))
            ($$atom ",")
            (($$atom opnd-str) ($$atom opnd20)))
           ($$atom #f)))))
 (define emit-and.l
   (lambda (opnd10 opnd20)
     (begin
       (if (($$atom imm?) ($$atom opnd10))
           (begin
             (let ((x0 (($$atom +)
                        ($$atom 640)
                        (($$atom opnd->mode/reg) ($$atom opnd20)))))
               (($$atom queue-put!)
                ($$atom asm-code-queue)
                (($$atom modulo) ($$atom x0) ($$atom 65536))))
             (($$atom opnd-ext-rd-long) ($$atom opnd10))
             (($$atom opnd-ext-wr-long) ($$atom opnd20)))
           (let ((other0 (if (($$atom dreg?) ($$atom opnd20))
                             ($$atom opnd10)
                             ($$atom opnd20)))
                 (reg0 (if (($$atom dreg?) ($$atom opnd20))
                           ($$atom opnd20)
                           ($$atom opnd10)))
                 (mode0 (if (($$atom dreg?) ($$atom opnd20))
                            ($$atom 49280)
                            ($$atom 49536))))
             (begin
               (let ((x0 (($$atom +)
                          ($$atom mode0)
                          (($$atom +)
                           (($$atom *) ($$atom reg0) ($$atom 512))
                           (($$atom opnd->mode/reg) ($$atom other0))))))
                 (($$atom queue-put!)
                  ($$atom asm-code-queue)
                  (($$atom modulo) ($$atom x0) ($$atom 65536))))
               (if (($$atom dreg?) ($$atom opnd20))
                   (($$atom opnd-ext-rd-long) ($$atom other0))
                   (($$atom opnd-ext-wr-long) ($$atom other0))))))
       (if ($$atom ofile-asm?)
           ((lambda l0
              (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                (($$atom queue-put!)
                 ($$atom asm-code-queue)
                 (($$atom cons) ($$atom 'comment) ($$atom x0)))))
            ($$atom "andl")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd10))
            ($$atom ",")
            (($$atom opnd-str) ($$atom opnd20)))
           ($$atom #f)))))
 (define emit-and.w
   (lambda (opnd10 opnd20)
     (begin
       (if (($$atom imm?) ($$atom opnd10))
           (begin
             (let ((x0 (($$atom +)
                        ($$atom 576)
                        (($$atom opnd->mode/reg) ($$atom opnd20)))))
               (($$atom queue-put!)
                ($$atom asm-code-queue)
                (($$atom modulo) ($$atom x0) ($$atom 65536))))
             (($$atom opnd-ext-rd-word) ($$atom opnd10))
             (($$atom opnd-ext-wr-word) ($$atom opnd20)))
           (let ((other0 (if (($$atom dreg?) ($$atom opnd20))
                             ($$atom opnd10)
                             ($$atom opnd20)))
                 (reg0 (if (($$atom dreg?) ($$atom opnd20))
                           ($$atom opnd20)
                           ($$atom opnd10)))
                 (mode0 (if (($$atom dreg?) ($$atom opnd20))
                            ($$atom 49216)
                            ($$atom 49472))))
             (begin
               (let ((x0 (($$atom +)
                          ($$atom mode0)
                          (($$atom +)
                           (($$atom *) ($$atom reg0) ($$atom 512))
                           (($$atom opnd->mode/reg) ($$atom other0))))))
                 (($$atom queue-put!)
                  ($$atom asm-code-queue)
                  (($$atom modulo) ($$atom x0) ($$atom 65536))))
               (if (($$atom dreg?) ($$atom opnd20))
                   (($$atom opnd-ext-rd-word) ($$atom other0))
                   (($$atom opnd-ext-wr-word) ($$atom other0))))))
       (if ($$atom ofile-asm?)
           ((lambda l0
              (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                (($$atom queue-put!)
                 ($$atom asm-code-queue)
                 (($$atom cons) ($$atom 'comment) ($$atom x0)))))
            ($$atom "andw")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd10))
            ($$atom ",")
            (($$atom opnd-str) ($$atom opnd20)))
           ($$atom #f)))))
 (define emit-or.l
   (lambda (opnd10 opnd20)
     (begin
       (if (($$atom imm?) ($$atom opnd10))
           (begin
             (let ((x0 (($$atom +)
                        ($$atom 128)
                        (($$atom opnd->mode/reg) ($$atom opnd20)))))
               (($$atom queue-put!)
                ($$atom asm-code-queue)
                (($$atom modulo) ($$atom x0) ($$atom 65536))))
             (($$atom opnd-ext-rd-long) ($$atom opnd10))
             (($$atom opnd-ext-wr-long) ($$atom opnd20)))
           (let ((other0 (if (($$atom dreg?) ($$atom opnd20))
                             ($$atom opnd10)
                             ($$atom opnd20)))
                 (reg0 (if (($$atom dreg?) ($$atom opnd20))
                           ($$atom opnd20)
                           ($$atom opnd10)))
                 (mode0 (if (($$atom dreg?) ($$atom opnd20))
                            ($$atom 32896)
                            ($$atom 33152))))
             (begin
               (let ((x0 (($$atom +)
                          ($$atom mode0)
                          (($$atom +)
                           (($$atom *) ($$atom reg0) ($$atom 512))
                           (($$atom opnd->mode/reg) ($$atom other0))))))
                 (($$atom queue-put!)
                  ($$atom asm-code-queue)
                  (($$atom modulo) ($$atom x0) ($$atom 65536))))
               (if (($$atom dreg?) ($$atom opnd20))
                   (($$atom opnd-ext-rd-long) ($$atom other0))
                   (($$atom opnd-ext-wr-long) ($$atom other0))))))
       (if ($$atom ofile-asm?)
           ((lambda l0
              (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                (($$atom queue-put!)
                 ($$atom asm-code-queue)
                 (($$atom cons) ($$atom 'comment) ($$atom x0)))))
            ($$atom "orl")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd10))
            ($$atom ",")
            (($$atom opnd-str) ($$atom opnd20)))
           ($$atom #f)))))
 (define emit-addq.l
   (lambda (n0 opnd0)
     (let ((m0 (if (($$atom =) ($$atom n0) ($$atom 8))
                   ($$atom 0)
                   ($$atom n0))))
       (begin
         (let ((x0 (($$atom +)
                    (($$atom +)
                     ($$atom 20608)
                     (($$atom *) ($$atom m0) ($$atom 512)))
                    (($$atom opnd->mode/reg) ($$atom opnd0)))))
           (($$atom queue-put!)
            ($$atom asm-code-queue)
            (($$atom modulo) ($$atom x0) ($$atom 65536))))
         (($$atom opnd-ext-wr-long) ($$atom opnd0))
         (if ($$atom ofile-asm?)
             ((lambda l0
                (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                  (($$atom queue-put!)
                   ($$atom asm-code-queue)
                   (($$atom cons) ($$atom 'comment) ($$atom x0)))))
              ($$atom "addql")
              ($$atom char-tab)
              ($$atom "#")
              ($$atom n0)
              ($$atom ",")
              (($$atom opnd-str) ($$atom opnd0)))
             ($$atom #f))))))
 (define emit-addq.w
   (lambda (n0 opnd0)
     (let ((m0 (if (($$atom =) ($$atom n0) ($$atom 8))
                   ($$atom 0)
                   ($$atom n0))))
       (begin
         (let ((x0 (($$atom +)
                    (($$atom +)
                     ($$atom 20544)
                     (($$atom *) ($$atom m0) ($$atom 512)))
                    (($$atom opnd->mode/reg) ($$atom opnd0)))))
           (($$atom queue-put!)
            ($$atom asm-code-queue)
            (($$atom modulo) ($$atom x0) ($$atom 65536))))
         (($$atom opnd-ext-wr-word) ($$atom opnd0))
         (if ($$atom ofile-asm?)
             ((lambda l0
                (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                  (($$atom queue-put!)
                   ($$atom asm-code-queue)
                   (($$atom cons) ($$atom 'comment) ($$atom x0)))))
              ($$atom "addqw")
              ($$atom char-tab)
              ($$atom "#")
              ($$atom n0)
              ($$atom ",")
              (($$atom opnd-str) ($$atom opnd0)))
             ($$atom #f))))))
 (define emit-add.l
   (lambda (opnd10 opnd20)
     (begin
       (if (($$atom areg?) ($$atom opnd20))
           (begin
             (let ((x0 (($$atom +)
                        ($$atom 53696)
                        (($$atom +)
                         (($$atom *)
                          (($$atom -) ($$atom opnd20) ($$atom 8))
                          ($$atom 512))
                         (($$atom opnd->mode/reg) ($$atom opnd10))))))
               (($$atom queue-put!)
                ($$atom asm-code-queue)
                (($$atom modulo) ($$atom x0) ($$atom 65536))))
             (($$atom opnd-ext-rd-long) ($$atom opnd10)))
           (if (($$atom imm?) ($$atom opnd10))
               (begin
                 (let ((x0 (($$atom +)
                            ($$atom 1664)
                            (($$atom opnd->mode/reg) ($$atom opnd20)))))
                   (($$atom queue-put!)
                    ($$atom asm-code-queue)
                    (($$atom modulo) ($$atom x0) ($$atom 65536))))
                 (($$atom opnd-ext-rd-long) ($$atom opnd10))
                 (($$atom opnd-ext-wr-long) ($$atom opnd20)))
               (let ((other0 (if (($$atom dreg?) ($$atom opnd20))
                                 ($$atom opnd10)
                                 ($$atom opnd20)))
                     (reg0 (if (($$atom dreg?) ($$atom opnd20))
                               ($$atom opnd20)
                               ($$atom opnd10)))
                     (mode0 (if (($$atom dreg?) ($$atom opnd20))
                                ($$atom 53376)
                                ($$atom 53632))))
                 (begin
                   (let ((x0 (($$atom +)
                              ($$atom mode0)
                              (($$atom +)
                               (($$atom *) ($$atom reg0) ($$atom 512))
                               (($$atom opnd->mode/reg) ($$atom other0))))))
                     (($$atom queue-put!)
                      ($$atom asm-code-queue)
                      (($$atom modulo) ($$atom x0) ($$atom 65536))))
                   (if (($$atom dreg?) ($$atom opnd20))
                       (($$atom opnd-ext-rd-long) ($$atom other0))
                       (($$atom opnd-ext-wr-long) ($$atom other0)))))))
       (if ($$atom ofile-asm?)
           ((lambda l0
              (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                (($$atom queue-put!)
                 ($$atom asm-code-queue)
                 (($$atom cons) ($$atom 'comment) ($$atom x0)))))
            ($$atom "addl")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd10))
            ($$atom ",")
            (($$atom opnd-str) ($$atom opnd20)))
           ($$atom #f)))))
 (define emit-add.w
   (lambda (opnd10 opnd20)
     (begin
       (if (($$atom areg?) ($$atom opnd20))
           (begin
             (let ((x0 (($$atom +)
                        ($$atom 53440)
                        (($$atom +)
                         (($$atom *)
                          (($$atom -) ($$atom opnd20) ($$atom 8))
                          ($$atom 512))
                         (($$atom opnd->mode/reg) ($$atom opnd10))))))
               (($$atom queue-put!)
                ($$atom asm-code-queue)
                (($$atom modulo) ($$atom x0) ($$atom 65536))))
             (($$atom opnd-ext-rd-word) ($$atom opnd10)))
           (if (($$atom imm?) ($$atom opnd10))
               (begin
                 (let ((x0 (($$atom +)
                            ($$atom 1600)
                            (($$atom opnd->mode/reg) ($$atom opnd20)))))
                   (($$atom queue-put!)
                    ($$atom asm-code-queue)
                    (($$atom modulo) ($$atom x0) ($$atom 65536))))
                 (($$atom opnd-ext-rd-word) ($$atom opnd10))
                 (($$atom opnd-ext-wr-word) ($$atom opnd20)))
               (let ((other0 (if (($$atom dreg?) ($$atom opnd20))
                                 ($$atom opnd10)
                                 ($$atom opnd20)))
                     (reg0 (if (($$atom dreg?) ($$atom opnd20))
                               ($$atom opnd20)
                               ($$atom opnd10)))
                     (mode0 (if (($$atom dreg?) ($$atom opnd20))
                                ($$atom 53312)
                                ($$atom 53568))))
                 (begin
                   (let ((x0 (($$atom +)
                              ($$atom mode0)
                              (($$atom +)
                               (($$atom *) ($$atom reg0) ($$atom 512))
                               (($$atom opnd->mode/reg) ($$atom other0))))))
                     (($$atom queue-put!)
                      ($$atom asm-code-queue)
                      (($$atom modulo) ($$atom x0) ($$atom 65536))))
                   (if (($$atom dreg?) ($$atom opnd20))
                       (($$atom opnd-ext-rd-word) ($$atom other0))
                       (($$atom opnd-ext-wr-word) ($$atom other0)))))))
       (if ($$atom ofile-asm?)
           ((lambda l0
              (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                (($$atom queue-put!)
                 ($$atom asm-code-queue)
                 (($$atom cons) ($$atom 'comment) ($$atom x0)))))
            ($$atom "addw")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd10))
            ($$atom ",")
            (($$atom opnd-str) ($$atom opnd20)))
           ($$atom #f)))))
 (define emit-addx.w
   (lambda (opnd10 opnd20)
     (begin
       (if (($$atom dreg?) ($$atom opnd10))
           (let ((x0 (($$atom +)
                      ($$atom 53568)
                      (($$atom +)
                       (($$atom *) ($$atom opnd20) ($$atom 512))
                       ($$atom opnd10)))))
             (($$atom queue-put!)
              ($$atom asm-code-queue)
              (($$atom modulo) ($$atom x0) ($$atom 65536))))
           (let ((x0 (($$atom +)
                      ($$atom 53576)
                      (($$atom +)
                       (($$atom *)
                        (let ((x0 (($$atom -) ($$atom opnd20) ($$atom 24))))
                          (($$atom -) ($$atom x0) ($$atom 8)))
                        ($$atom 512))
                       (let ((x0 (($$atom -) ($$atom opnd10) ($$atom 24))))
                         (($$atom -) ($$atom x0) ($$atom 8)))))))
             (($$atom queue-put!)
              ($$atom asm-code-queue)
              (($$atom modulo) ($$atom x0) ($$atom 65536)))))
       (if ($$atom ofile-asm?)
           ((lambda l0
              (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                (($$atom queue-put!)
                 ($$atom asm-code-queue)
                 (($$atom cons) ($$atom 'comment) ($$atom x0)))))
            ($$atom "addxw")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd10))
            ($$atom ",")
            (($$atom opnd-str) ($$atom opnd20)))
           ($$atom #f)))))
 (define emit-subq.l
   (lambda (n0 opnd0)
     (let ((m0 (if (($$atom =) ($$atom n0) ($$atom 8))
                   ($$atom 0)
                   ($$atom n0))))
       (begin
         (let ((x0 (($$atom +)
                    (($$atom +)
                     ($$atom 20864)
                     (($$atom *) ($$atom m0) ($$atom 512)))
                    (($$atom opnd->mode/reg) ($$atom opnd0)))))
           (($$atom queue-put!)
            ($$atom asm-code-queue)
            (($$atom modulo) ($$atom x0) ($$atom 65536))))
         (($$atom opnd-ext-wr-long) ($$atom opnd0))
         (if ($$atom ofile-asm?)
             ((lambda l0
                (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                  (($$atom queue-put!)
                   ($$atom asm-code-queue)
                   (($$atom cons) ($$atom 'comment) ($$atom x0)))))
              ($$atom "subql")
              ($$atom char-tab)
              ($$atom "#")
              ($$atom n0)
              ($$atom ",")
              (($$atom opnd-str) ($$atom opnd0)))
             ($$atom #f))))))
 (define emit-subq.w
   (lambda (n0 opnd0)
     (let ((m0 (if (($$atom =) ($$atom n0) ($$atom 8))
                   ($$atom 0)
                   ($$atom n0))))
       (begin
         (let ((x0 (($$atom +)
                    (($$atom +)
                     ($$atom 20800)
                     (($$atom *) ($$atom m0) ($$atom 512)))
                    (($$atom opnd->mode/reg) ($$atom opnd0)))))
           (($$atom queue-put!)
            ($$atom asm-code-queue)
            (($$atom modulo) ($$atom x0) ($$atom 65536))))
         (($$atom opnd-ext-wr-word) ($$atom opnd0))
         (if ($$atom ofile-asm?)
             ((lambda l0
                (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                  (($$atom queue-put!)
                   ($$atom asm-code-queue)
                   (($$atom cons) ($$atom 'comment) ($$atom x0)))))
              ($$atom "subqw")
              ($$atom char-tab)
              ($$atom "#")
              ($$atom n0)
              ($$atom ",")
              (($$atom opnd-str) ($$atom opnd0)))
             ($$atom #f))))))
 (define emit-sub.l
   (lambda (opnd10 opnd20)
     (begin
       (if (($$atom areg?) ($$atom opnd20))
           (begin
             (let ((x0 (($$atom +)
                        ($$atom 37312)
                        (($$atom +)
                         (($$atom *)
                          (($$atom -) ($$atom opnd20) ($$atom 8))
                          ($$atom 512))
                         (($$atom opnd->mode/reg) ($$atom opnd10))))))
               (($$atom queue-put!)
                ($$atom asm-code-queue)
                (($$atom modulo) ($$atom x0) ($$atom 65536))))
             (($$atom opnd-ext-rd-long) ($$atom opnd10)))
           (if (($$atom imm?) ($$atom opnd10))
               (begin
                 (let ((x0 (($$atom +)
                            ($$atom 1152)
                            (($$atom opnd->mode/reg) ($$atom opnd20)))))
                   (($$atom queue-put!)
                    ($$atom asm-code-queue)
                    (($$atom modulo) ($$atom x0) ($$atom 65536))))
                 (($$atom opnd-ext-rd-long) ($$atom opnd10))
                 (($$atom opnd-ext-wr-long) ($$atom opnd20)))
               (let ((other0 (if (($$atom dreg?) ($$atom opnd20))
                                 ($$atom opnd10)
                                 ($$atom opnd20)))
                     (reg0 (if (($$atom dreg?) ($$atom opnd20))
                               ($$atom opnd20)
                               ($$atom opnd10)))
                     (mode0 (if (($$atom dreg?) ($$atom opnd20))
                                ($$atom 36992)
                                ($$atom 37248))))
                 (begin
                   (let ((x0 (($$atom +)
                              ($$atom mode0)
                              (($$atom +)
                               (($$atom *) ($$atom reg0) ($$atom 512))
                               (($$atom opnd->mode/reg) ($$atom other0))))))
                     (($$atom queue-put!)
                      ($$atom asm-code-queue)
                      (($$atom modulo) ($$atom x0) ($$atom 65536))))
                   (if (($$atom dreg?) ($$atom opnd20))
                       (($$atom opnd-ext-rd-long) ($$atom other0))
                       (($$atom opnd-ext-wr-long) ($$atom other0)))))))
       (if ($$atom ofile-asm?)
           ((lambda l0
              (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                (($$atom queue-put!)
                 ($$atom asm-code-queue)
                 (($$atom cons) ($$atom 'comment) ($$atom x0)))))
            ($$atom "subl")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd10))
            ($$atom ",")
            (($$atom opnd-str) ($$atom opnd20)))
           ($$atom #f)))))
 (define emit-sub.w
   (lambda (opnd10 opnd20)
     (begin
       (if (($$atom areg?) ($$atom opnd20))
           (begin
             (let ((x0 (($$atom +)
                        ($$atom 37056)
                        (($$atom +)
                         (($$atom *)
                          (($$atom -) ($$atom opnd20) ($$atom 8))
                          ($$atom 512))
                         (($$atom opnd->mode/reg) ($$atom opnd10))))))
               (($$atom queue-put!)
                ($$atom asm-code-queue)
                (($$atom modulo) ($$atom x0) ($$atom 65536))))
             (($$atom opnd-ext-rd-word) ($$atom opnd10)))
           (if (($$atom imm?) ($$atom opnd10))
               (begin
                 (let ((x0 (($$atom +)
                            ($$atom 1088)
                            (($$atom opnd->mode/reg) ($$atom opnd20)))))
                   (($$atom queue-put!)
                    ($$atom asm-code-queue)
                    (($$atom modulo) ($$atom x0) ($$atom 65536))))
                 (($$atom opnd-ext-rd-word) ($$atom opnd10))
                 (($$atom opnd-ext-wr-word) ($$atom opnd20)))
               (let ((other0 (if (($$atom dreg?) ($$atom opnd20))
                                 ($$atom opnd10)
                                 ($$atom opnd20)))
                     (reg0 (if (($$atom dreg?) ($$atom opnd20))
                               ($$atom opnd20)
                               ($$atom opnd10)))
                     (mode0 (if (($$atom dreg?) ($$atom opnd20))
                                ($$atom 36928)
                                ($$atom 37184))))
                 (begin
                   (let ((x0 (($$atom +)
                              ($$atom mode0)
                              (($$atom +)
                               (($$atom *) ($$atom reg0) ($$atom 512))
                               (($$atom opnd->mode/reg) ($$atom other0))))))
                     (($$atom queue-put!)
                      ($$atom asm-code-queue)
                      (($$atom modulo) ($$atom x0) ($$atom 65536))))
                   (if (($$atom dreg?) ($$atom opnd20))
                       (($$atom opnd-ext-rd-word) ($$atom other0))
                       (($$atom opnd-ext-wr-word) ($$atom other0)))))))
       (if ($$atom ofile-asm?)
           ((lambda l0
              (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                (($$atom queue-put!)
                 ($$atom asm-code-queue)
                 (($$atom cons) ($$atom 'comment) ($$atom x0)))))
            ($$atom "subw")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd10))
            ($$atom ",")
            (($$atom opnd-str) ($$atom opnd20)))
           ($$atom #f)))))
 (define emit-asl.l
   (lambda (opnd10 opnd20)
     (begin
       (if (($$atom dreg?) ($$atom opnd10))
           (let ((x0 (($$atom +)
                      ($$atom 57760)
                      (($$atom +)
                       (($$atom *) ($$atom opnd10) ($$atom 512))
                       ($$atom opnd20)))))
             (($$atom queue-put!)
              ($$atom asm-code-queue)
              (($$atom modulo) ($$atom x0) ($$atom 65536))))
           (let ((n0 (($$atom imm-val) ($$atom opnd10))))
             (let ((x0 (($$atom +)
                        ($$atom 57728)
                        (($$atom +)
                         (($$atom *)
                          (if (($$atom =) ($$atom n0) ($$atom 8))
                              ($$atom 0)
                              ($$atom n0))
                          ($$atom 512))
                         ($$atom opnd20)))))
               (($$atom queue-put!)
                ($$atom asm-code-queue)
                (($$atom modulo) ($$atom x0) ($$atom 65536))))))
       (if ($$atom ofile-asm?)
           ((lambda l0
              (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                (($$atom queue-put!)
                 ($$atom asm-code-queue)
                 (($$atom cons) ($$atom 'comment) ($$atom x0)))))
            ($$atom "asll")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd10))
            ($$atom ",")
            (($$atom opnd-str) ($$atom opnd20)))
           ($$atom #f)))))
 (define emit-asl.w
   (lambda (opnd10 opnd20)
     (begin
       (if (($$atom dreg?) ($$atom opnd10))
           (let ((x0 (($$atom +)
                      ($$atom 57696)
                      (($$atom +)
                       (($$atom *) ($$atom opnd10) ($$atom 512))
                       ($$atom opnd20)))))
             (($$atom queue-put!)
              ($$atom asm-code-queue)
              (($$atom modulo) ($$atom x0) ($$atom 65536))))
           (let ((n0 (($$atom imm-val) ($$atom opnd10))))
             (let ((x0 (($$atom +)
                        ($$atom 57664)
                        (($$atom +)
                         (($$atom *)
                          (if (($$atom =) ($$atom n0) ($$atom 8))
                              ($$atom 0)
                              ($$atom n0))
                          ($$atom 512))
                         ($$atom opnd20)))))
               (($$atom queue-put!)
                ($$atom asm-code-queue)
                (($$atom modulo) ($$atom x0) ($$atom 65536))))))
       (if ($$atom ofile-asm?)
           ((lambda l0
              (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                (($$atom queue-put!)
                 ($$atom asm-code-queue)
                 (($$atom cons) ($$atom 'comment) ($$atom x0)))))
            ($$atom "aslw")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd10))
            ($$atom ",")
            (($$atom opnd-str) ($$atom opnd20)))
           ($$atom #f)))))
 (define emit-asr.l
   (lambda (opnd10 opnd20)
     (begin
       (if (($$atom dreg?) ($$atom opnd10))
           (let ((x0 (($$atom +)
                      ($$atom 57504)
                      (($$atom +)
                       (($$atom *) ($$atom opnd10) ($$atom 512))
                       ($$atom opnd20)))))
             (($$atom queue-put!)
              ($$atom asm-code-queue)
              (($$atom modulo) ($$atom x0) ($$atom 65536))))
           (let ((n0 (($$atom imm-val) ($$atom opnd10))))
             (let ((x0 (($$atom +)
                        ($$atom 57472)
                        (($$atom +)
                         (($$atom *)
                          (if (($$atom =) ($$atom n0) ($$atom 8))
                              ($$atom 0)
                              ($$atom n0))
                          ($$atom 512))
                         ($$atom opnd20)))))
               (($$atom queue-put!)
                ($$atom asm-code-queue)
                (($$atom modulo) ($$atom x0) ($$atom 65536))))))
       (if ($$atom ofile-asm?)
           ((lambda l0
              (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                (($$atom queue-put!)
                 ($$atom asm-code-queue)
                 (($$atom cons) ($$atom 'comment) ($$atom x0)))))
            ($$atom "asrl")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd10))
            ($$atom ",")
            (($$atom opnd-str) ($$atom opnd20)))
           ($$atom #f)))))
 (define emit-asr.w
   (lambda (opnd10 opnd20)
     (begin
       (if (($$atom dreg?) ($$atom opnd10))
           (let ((x0 (($$atom +)
                      ($$atom 57440)
                      (($$atom +)
                       (($$atom *) ($$atom opnd10) ($$atom 512))
                       ($$atom opnd20)))))
             (($$atom queue-put!)
              ($$atom asm-code-queue)
              (($$atom modulo) ($$atom x0) ($$atom 65536))))
           (let ((n0 (($$atom imm-val) ($$atom opnd10))))
             (let ((x0 (($$atom +)
                        ($$atom 57408)
                        (($$atom +)
                         (($$atom *)
                          (if (($$atom =) ($$atom n0) ($$atom 8))
                              ($$atom 0)
                              ($$atom n0))
                          ($$atom 512))
                         ($$atom opnd20)))))
               (($$atom queue-put!)
                ($$atom asm-code-queue)
                (($$atom modulo) ($$atom x0) ($$atom 65536))))))
       (if ($$atom ofile-asm?)
           ((lambda l0
              (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                (($$atom queue-put!)
                 ($$atom asm-code-queue)
                 (($$atom cons) ($$atom 'comment) ($$atom x0)))))
            ($$atom "asrw")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd10))
            ($$atom ",")
            (($$atom opnd-str) ($$atom opnd20)))
           ($$atom #f)))))
 (define emit-lsl.l
   (lambda (opnd10 opnd20)
     (begin
       (if (($$atom dreg?) ($$atom opnd10))
           (let ((x0 (($$atom +)
                      ($$atom 57768)
                      (($$atom +)
                       (($$atom *) ($$atom opnd10) ($$atom 512))
                       ($$atom opnd20)))))
             (($$atom queue-put!)
              ($$atom asm-code-queue)
              (($$atom modulo) ($$atom x0) ($$atom 65536))))
           (let ((n0 (($$atom imm-val) ($$atom opnd10))))
             (let ((x0 (($$atom +)
                        ($$atom 57736)
                        (($$atom +)
                         (($$atom *)
                          (if (($$atom =) ($$atom n0) ($$atom 8))
                              ($$atom 0)
                              ($$atom n0))
                          ($$atom 512))
                         ($$atom opnd20)))))
               (($$atom queue-put!)
                ($$atom asm-code-queue)
                (($$atom modulo) ($$atom x0) ($$atom 65536))))))
       (if ($$atom ofile-asm?)
           ((lambda l0
              (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                (($$atom queue-put!)
                 ($$atom asm-code-queue)
                 (($$atom cons) ($$atom 'comment) ($$atom x0)))))
            ($$atom "lsll")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd10))
            ($$atom ",")
            (($$atom opnd-str) ($$atom opnd20)))
           ($$atom #f)))))
 (define emit-lsr.l
   (lambda (opnd10 opnd20)
     (begin
       (if (($$atom dreg?) ($$atom opnd10))
           (let ((x0 (($$atom +)
                      ($$atom 57512)
                      (($$atom +)
                       (($$atom *) ($$atom opnd10) ($$atom 512))
                       ($$atom opnd20)))))
             (($$atom queue-put!)
              ($$atom asm-code-queue)
              (($$atom modulo) ($$atom x0) ($$atom 65536))))
           (let ((n0 (($$atom imm-val) ($$atom opnd10))))
             (let ((x0 (($$atom +)
                        ($$atom 57480)
                        (($$atom +)
                         (($$atom *)
                          (if (($$atom =) ($$atom n0) ($$atom 8))
                              ($$atom 0)
                              ($$atom n0))
                          ($$atom 512))
                         ($$atom opnd20)))))
               (($$atom queue-put!)
                ($$atom asm-code-queue)
                (($$atom modulo) ($$atom x0) ($$atom 65536))))))
       (if ($$atom ofile-asm?)
           ((lambda l0
              (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                (($$atom queue-put!)
                 ($$atom asm-code-queue)
                 (($$atom cons) ($$atom 'comment) ($$atom x0)))))
            ($$atom "lsrl")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd10))
            ($$atom ",")
            (($$atom opnd-str) ($$atom opnd20)))
           ($$atom #f)))))
 (define emit-lsr.w
   (lambda (opnd10 opnd20)
     (begin
       (if (($$atom dreg?) ($$atom opnd10))
           (let ((x0 (($$atom +)
                      ($$atom 57448)
                      (($$atom +)
                       (($$atom *) ($$atom opnd10) ($$atom 512))
                       ($$atom opnd20)))))
             (($$atom queue-put!)
              ($$atom asm-code-queue)
              (($$atom modulo) ($$atom x0) ($$atom 65536))))
           (let ((n0 (($$atom imm-val) ($$atom opnd10))))
             (let ((x0 (($$atom +)
                        ($$atom 57416)
                        (($$atom +)
                         (($$atom *)
                          (if (($$atom =) ($$atom n0) ($$atom 8))
                              ($$atom 0)
                              ($$atom n0))
                          ($$atom 512))
                         ($$atom opnd20)))))
               (($$atom queue-put!)
                ($$atom asm-code-queue)
                (($$atom modulo) ($$atom x0) ($$atom 65536))))))
       (if ($$atom ofile-asm?)
           ((lambda l0
              (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                (($$atom queue-put!)
                 ($$atom asm-code-queue)
                 (($$atom cons) ($$atom 'comment) ($$atom x0)))))
            ($$atom "lsrw")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd10))
            ($$atom ",")
            (($$atom opnd-str) ($$atom opnd20)))
           ($$atom #f)))))
 (define emit-clr.l
   (lambda (opnd0)
     (begin
       (let ((x0 (($$atom +)
                  ($$atom 17024)
                  (($$atom opnd->mode/reg) ($$atom opnd0)))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (($$atom opnd-ext-wr-long) ($$atom opnd0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "clrl")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd0)))
           ($$atom #f)))))
 (define emit-neg.l
   (lambda (opnd0)
     (begin
       (let ((x0 (($$atom +)
                  ($$atom 17536)
                  (($$atom opnd->mode/reg) ($$atom opnd0)))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (($$atom opnd-ext-wr-long) ($$atom opnd0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "negl")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd0)))
           ($$atom #f)))))
 (define emit-not.l
   (lambda (opnd0)
     (begin
       (let ((x0 (($$atom +)
                  ($$atom 18048)
                  (($$atom opnd->mode/reg) ($$atom opnd0)))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (($$atom opnd-ext-wr-long) ($$atom opnd0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "notl")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd0)))
           ($$atom #f)))))
 (define emit-ext.l
   (lambda (opnd0)
     (begin
       (let ((x0 (($$atom +) ($$atom 18624) ($$atom opnd0))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "extl")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd0)))
           ($$atom #f)))))
 (define emit-ext.w
   (lambda (opnd0)
     (begin
       (let ((x0 (($$atom +) ($$atom 18560) ($$atom opnd0))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "extw")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd0)))
           ($$atom #f)))))
 (define emit-swap
   (lambda (opnd0)
     (begin
       (let ((x0 (($$atom +) ($$atom 18496) ($$atom opnd0))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "swap")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd0)))
           ($$atom #f)))))
 (define emit-cmp.l
   (lambda (opnd10 opnd20)
     (begin
       (if (($$atom areg?) ($$atom opnd20))
           (begin
             (let ((x0 (($$atom +)
                        ($$atom 45504)
                        (($$atom +)
                         (($$atom *)
                          (($$atom -) ($$atom opnd20) ($$atom 8))
                          ($$atom 512))
                         (($$atom opnd->mode/reg) ($$atom opnd10))))))
               (($$atom queue-put!)
                ($$atom asm-code-queue)
                (($$atom modulo) ($$atom x0) ($$atom 65536))))
             (($$atom opnd-ext-rd-long) ($$atom opnd10)))
           (if (($$atom imm?) ($$atom opnd10))
               (begin
                 (let ((x0 (($$atom +)
                            ($$atom 3200)
                            (($$atom opnd->mode/reg) ($$atom opnd20)))))
                   (($$atom queue-put!)
                    ($$atom asm-code-queue)
                    (($$atom modulo) ($$atom x0) ($$atom 65536))))
                 (($$atom opnd-ext-rd-long) ($$atom opnd10))
                 (($$atom opnd-ext-rd-long) ($$atom opnd20)))
               (begin
                 (let ((x0 (($$atom +)
                            ($$atom 45184)
                            (($$atom +)
                             (($$atom *) ($$atom opnd20) ($$atom 512))
                             (($$atom opnd->mode/reg) ($$atom opnd10))))))
                   (($$atom queue-put!)
                    ($$atom asm-code-queue)
                    (($$atom modulo) ($$atom x0) ($$atom 65536))))
                 (($$atom opnd-ext-rd-long) ($$atom opnd10)))))
       (if ($$atom ofile-asm?)
           ((lambda l0
              (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                (($$atom queue-put!)
                 ($$atom asm-code-queue)
                 (($$atom cons) ($$atom 'comment) ($$atom x0)))))
            ($$atom "cmpl")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd10))
            ($$atom ",")
            (($$atom opnd-str) ($$atom opnd20)))
           ($$atom #f)))))
 (define emit-cmp.w
   (lambda (opnd10 opnd20)
     (begin
       (if (($$atom areg?) ($$atom opnd20))
           (begin
             (let ((x0 (($$atom +)
                        ($$atom 45248)
                        (($$atom +)
                         (($$atom *)
                          (($$atom -) ($$atom opnd20) ($$atom 8))
                          ($$atom 512))
                         (($$atom opnd->mode/reg) ($$atom opnd10))))))
               (($$atom queue-put!)
                ($$atom asm-code-queue)
                (($$atom modulo) ($$atom x0) ($$atom 65536))))
             (($$atom opnd-ext-rd-word) ($$atom opnd10)))
           (if (($$atom imm?) ($$atom opnd10))
               (begin
                 (let ((x0 (($$atom +)
                            ($$atom 3136)
                            (($$atom opnd->mode/reg) ($$atom opnd20)))))
                   (($$atom queue-put!)
                    ($$atom asm-code-queue)
                    (($$atom modulo) ($$atom x0) ($$atom 65536))))
                 (($$atom opnd-ext-rd-word) ($$atom opnd10))
                 (($$atom opnd-ext-rd-word) ($$atom opnd20)))
               (begin
                 (let ((x0 (($$atom +)
                            ($$atom 45120)
                            (($$atom +)
                             (($$atom *) ($$atom opnd20) ($$atom 512))
                             (($$atom opnd->mode/reg) ($$atom opnd10))))))
                   (($$atom queue-put!)
                    ($$atom asm-code-queue)
                    (($$atom modulo) ($$atom x0) ($$atom 65536))))
                 (($$atom opnd-ext-rd-word) ($$atom opnd10)))))
       (if ($$atom ofile-asm?)
           ((lambda l0
              (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                (($$atom queue-put!)
                 ($$atom asm-code-queue)
                 (($$atom cons) ($$atom 'comment) ($$atom x0)))))
            ($$atom "cmpw")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd10))
            ($$atom ",")
            (($$atom opnd-str) ($$atom opnd20)))
           ($$atom #f)))))
 (define emit-cmp.b
   (lambda (opnd10 opnd20)
     (begin
       (if (($$atom imm?) ($$atom opnd10))
           (begin
             (let ((x0 (($$atom +)
                        ($$atom 3072)
                        (($$atom opnd->mode/reg) ($$atom opnd20)))))
               (($$atom queue-put!)
                ($$atom asm-code-queue)
                (($$atom modulo) ($$atom x0) ($$atom 65536))))
             (($$atom opnd-ext-rd-word) ($$atom opnd10))
             (($$atom opnd-ext-rd-word) ($$atom opnd20)))
           (begin
             (let ((x0 (($$atom +)
                        ($$atom 45056)
                        (($$atom +)
                         (($$atom *) ($$atom opnd20) ($$atom 512))
                         (($$atom opnd->mode/reg) ($$atom opnd10))))))
               (($$atom queue-put!)
                ($$atom asm-code-queue)
                (($$atom modulo) ($$atom x0) ($$atom 65536))))
             (($$atom opnd-ext-rd-word) ($$atom opnd10))))
       (if ($$atom ofile-asm?)
           ((lambda l0
              (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                (($$atom queue-put!)
                 ($$atom asm-code-queue)
                 (($$atom cons) ($$atom 'comment) ($$atom x0)))))
            ($$atom "cmpb")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd10))
            ($$atom ",")
            (($$atom opnd-str) ($$atom opnd20)))
           ($$atom #f)))))
 (define emit-tst.l
   (lambda (opnd0)
     (begin
       (let ((x0 (($$atom +)
                  ($$atom 19072)
                  (($$atom opnd->mode/reg) ($$atom opnd0)))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (($$atom opnd-ext-rd-long) ($$atom opnd0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "tstl")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd0)))
           ($$atom #f)))))
 (define emit-tst.w
   (lambda (opnd0)
     (begin
       (let ((x0 (($$atom +)
                  ($$atom 19008)
                  (($$atom opnd->mode/reg) ($$atom opnd0)))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (($$atom opnd-ext-rd-word) ($$atom opnd0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "tstw")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd0)))
           ($$atom #f)))))
 (define emit-lea
   (lambda (opnd0 areg0)
     (begin
       (let ((x0 (($$atom +)
                  ($$atom 16832)
                  (($$atom +)
                   (($$atom *)
                    (($$atom -) ($$atom areg0) ($$atom 8))
                    ($$atom 512))
                   (($$atom opnd->mode/reg) ($$atom opnd0))))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (($$atom opnd-ext-rd-long) ($$atom opnd0))
       (if ($$atom ofile-asm?)
           ((lambda l0
              (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                (($$atom queue-put!)
                 ($$atom asm-code-queue)
                 (($$atom cons) ($$atom 'comment) ($$atom x0)))))
            ($$atom "lea")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd0))
            ($$atom ",")
            (($$atom opnd-str) ($$atom areg0)))
           ($$atom #f)))))
 (define emit-unlk
   (lambda (areg0)
     (begin
       (let ((x0 (($$atom +)
                  ($$atom 20056)
                  (($$atom -) ($$atom areg0) ($$atom 8)))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "unlk")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom areg0)))
           ($$atom #f)))))
 (define emit-move-proc
   (lambda (num0 opnd0)
     (let ((dst0 (($$atom opnd->reg/mode) ($$atom opnd0))))
       (begin
         (let ((x0 (($$atom +)
                    ($$atom 8192)
                    (($$atom +) ($$atom dst0) ($$atom 60)))))
           (($$atom queue-put!)
            ($$atom asm-code-queue)
            (($$atom modulo) ($$atom x0) ($$atom 65536))))
         (($$atom asm-proc-ref) ($$atom num0) ($$atom 0))
         (($$atom opnd-ext-wr-long) ($$atom opnd0))
         (if ($$atom ofile-asm?)
             (($$atom emit-asm)
              ($$atom "MOVE_PROC(")
              ($$atom num0)
              ($$atom ",")
              (($$atom opnd-str) ($$atom opnd0))
              ($$atom ")"))
             ($$atom #f))))))
 (define emit-move-prim
   (lambda (val0 opnd0)
     (let ((dst0 (($$atom opnd->reg/mode) ($$atom opnd0))))
       (begin
         (let ((x0 (($$atom +)
                    ($$atom 8192)
                    (($$atom +) ($$atom dst0) ($$atom 60)))))
           (($$atom queue-put!)
            ($$atom asm-code-queue)
            (($$atom modulo) ($$atom x0) ($$atom 65536))))
         (($$atom asm-prim-ref) ($$atom val0) ($$atom 0))
         (($$atom opnd-ext-wr-long) ($$atom opnd0))
         (if ($$atom ofile-asm?)
             ((lambda l0
                (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                  (($$atom queue-put!)
                   ($$atom asm-code-queue)
                   (($$atom cons) ($$atom 'comment) ($$atom x0)))))
              ($$atom "MOVE_PRIM(")
              (($$atom proc-obj-name) ($$atom val0))
              ($$atom ",")
              (($$atom opnd-str) ($$atom opnd0))
              ($$atom ")"))
             ($$atom #f))))))
 (define emit-pea
   (lambda (opnd0)
     (begin
       (let ((x0 (($$atom +)
                  ($$atom 18496)
                  (($$atom opnd->mode/reg) ($$atom opnd0)))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (($$atom opnd-ext-rd-long) ($$atom opnd0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "pea")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd0)))
           ($$atom #f)))))
 (define emit-pea*
   (lambda (n0)
     (begin
       (($$atom asm-word) ($$atom 18552))
       (($$atom asm-word) ($$atom n0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm) ($$atom "pea") ($$atom char-tab) ($$atom n0))
           ($$atom #f)))))
 (define emit-btst
   (lambda (opnd10 opnd20)
     (begin
       (let ((x0 (($$atom +)
                  ($$atom 256)
                  (($$atom +)
                   (($$atom *) ($$atom opnd10) ($$atom 512))
                   (($$atom opnd->mode/reg) ($$atom opnd20))))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (($$atom opnd-ext-rd-word) ($$atom opnd20))
       (if ($$atom ofile-asm?)
           ((lambda l0
              (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                (($$atom queue-put!)
                 ($$atom asm-code-queue)
                 (($$atom cons) ($$atom 'comment) ($$atom x0)))))
            ($$atom "btst")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd10))
            ($$atom ",")
            (($$atom opnd-str) ($$atom opnd20)))
           ($$atom #f)))))
 (define emit-bra
   (lambda (lbl0)
     (begin
       (($$atom asm-brel) ($$atom 24576) ($$atom lbl0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "bra")
            ($$atom char-tab)
            ($$atom "L")
            ($$atom lbl0))
           ($$atom #f)))))
 (define emit-bcc
   (lambda (lbl0)
     (begin
       (($$atom asm-brel) ($$atom 25600) ($$atom lbl0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "bcc")
            ($$atom char-tab)
            ($$atom "L")
            ($$atom lbl0))
           ($$atom #f)))))
 (define emit-bcs
   (lambda (lbl0)
     (begin
       (($$atom asm-brel) ($$atom 25856) ($$atom lbl0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "bcs")
            ($$atom char-tab)
            ($$atom "L")
            ($$atom lbl0))
           ($$atom #f)))))
 (define emit-bhi
   (lambda (lbl0)
     (begin
       (($$atom asm-brel) ($$atom 25088) ($$atom lbl0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "bhi")
            ($$atom char-tab)
            ($$atom "L")
            ($$atom lbl0))
           ($$atom #f)))))
 (define emit-bls
   (lambda (lbl0)
     (begin
       (($$atom asm-brel) ($$atom 25344) ($$atom lbl0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "bls")
            ($$atom char-tab)
            ($$atom "L")
            ($$atom lbl0))
           ($$atom #f)))))
 (define emit-bmi
   (lambda (lbl0)
     (begin
       (($$atom asm-brel) ($$atom 27392) ($$atom lbl0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "bmi")
            ($$atom char-tab)
            ($$atom "L")
            ($$atom lbl0))
           ($$atom #f)))))
 (define emit-bpl
   (lambda (lbl0)
     (begin
       (($$atom asm-brel) ($$atom 27136) ($$atom lbl0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "bpl")
            ($$atom char-tab)
            ($$atom "L")
            ($$atom lbl0))
           ($$atom #f)))))
 (define emit-beq
   (lambda (lbl0)
     (begin
       (($$atom asm-brel) ($$atom 26368) ($$atom lbl0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "beq")
            ($$atom char-tab)
            ($$atom "L")
            ($$atom lbl0))
           ($$atom #f)))))
 (define emit-bne
   (lambda (lbl0)
     (begin
       (($$atom asm-brel) ($$atom 26112) ($$atom lbl0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "bne")
            ($$atom char-tab)
            ($$atom "L")
            ($$atom lbl0))
           ($$atom #f)))))
 (define emit-blt
   (lambda (lbl0)
     (begin
       (($$atom asm-brel) ($$atom 27904) ($$atom lbl0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "blt")
            ($$atom char-tab)
            ($$atom "L")
            ($$atom lbl0))
           ($$atom #f)))))
 (define emit-bgt
   (lambda (lbl0)
     (begin
       (($$atom asm-brel) ($$atom 28160) ($$atom lbl0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "bgt")
            ($$atom char-tab)
            ($$atom "L")
            ($$atom lbl0))
           ($$atom #f)))))
 (define emit-ble
   (lambda (lbl0)
     (begin
       (($$atom asm-brel) ($$atom 28416) ($$atom lbl0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "ble")
            ($$atom char-tab)
            ($$atom "L")
            ($$atom lbl0))
           ($$atom #f)))))
 (define emit-bge
   (lambda (lbl0)
     (begin
       (($$atom asm-brel) ($$atom 27648) ($$atom lbl0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "bge")
            ($$atom char-tab)
            ($$atom "L")
            ($$atom lbl0))
           ($$atom #f)))))
 (define emit-dbra
   (lambda (dreg0 lbl0)
     (begin
       (let ((x0 (($$atom +) ($$atom 20936) ($$atom dreg0))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (($$atom asm-wrel) ($$atom lbl0) ($$atom 0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "dbra")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom dreg0))
            ($$atom ",L")
            ($$atom lbl0))
           ($$atom #f)))))
 (define emit-trap
   (lambda (num0)
     (begin
       (let ((x0 (($$atom +) ($$atom 20032) ($$atom num0))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "trap")
            ($$atom char-tab)
            ($$atom "#")
            ($$atom num0))
           ($$atom #f)))))
 (define emit-trap1
   (lambda (num0 args0)
     (begin
       (($$atom queue-put!) ($$atom asm-code-queue) ($$atom 20142))
       (let ((x0 (($$atom trap-offset) ($$atom num0))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (letrec ((loop0 (lambda (args1)
                         (if (($$atom null?) ($$atom args1))
                             ($$atom #f)
                             (begin
                               (let ((x0 (($$atom car) ($$atom args1))))
                                 (($$atom queue-put!)
                                  ($$atom asm-code-queue)
                                  (($$atom modulo)
                                   ($$atom x0)
                                   ($$atom 65536))))
                               (($$atom loop0)
                                (($$atom cdr) ($$atom args1))))))))
         (($$atom loop0) ($$atom args0)))
       (if ($$atom ofile-asm?)
           (letrec ((words0 (lambda (l0)
                              (if (($$atom null?) ($$atom l0))
                                  (($$atom list) ($$atom ")"))
                                  (($$atom cons)
                                   ($$atom ",")
                                   (($$atom cons)
                                    (($$atom car) ($$atom l0))
                                    (($$atom words0)
                                     (($$atom cdr) ($$atom l0)))))))))
             (($$atom apply)
              ($$atom emit-asm)
              (($$atom cons)
               ($$atom "TRAP1(")
               (($$atom cons)
                ($$atom num0)
                (($$atom words0) ($$atom args0))))))
           ($$atom #f)))))
 (define emit-trap2
   (lambda (num0 args0)
     (begin
       (($$atom queue-put!) ($$atom asm-code-queue) ($$atom 20142))
       (let ((x0 (($$atom trap-offset) ($$atom num0))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (let ((offset0 (($$atom modulo)
                       (($$atom -)
                        ($$atom 4)
                        (($$atom *)
                         (($$atom length) ($$atom args0))
                         ($$atom 2)))
                       ($$atom 8))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom cons)
           ($$atom 'align)
           (($$atom cons) ($$atom 8) ($$atom offset0)))))
       (letrec ((loop0 (lambda (args1)
                         (if (($$atom null?) ($$atom args1))
                             ($$atom #f)
                             (begin
                               (let ((x0 (($$atom car) ($$atom args1))))
                                 (($$atom queue-put!)
                                  ($$atom asm-code-queue)
                                  (($$atom modulo)
                                   ($$atom x0)
                                   ($$atom 65536))))
                               (($$atom loop0)
                                (($$atom cdr) ($$atom args1))))))))
         (($$atom loop0) ($$atom args0)))
       (if ($$atom ofile-asm?)
           (letrec ((words0 (lambda (l0)
                              (if (($$atom null?) ($$atom l0))
                                  (($$atom list) ($$atom ")"))
                                  (($$atom cons)
                                   ($$atom ",")
                                   (($$atom cons)
                                    (($$atom car) ($$atom l0))
                                    (($$atom words0)
                                     (($$atom cdr) ($$atom l0)))))))))
             (($$atom apply)
              ($$atom emit-asm)
              (($$atom cons)
               ($$atom "TRAP2(")
               (($$atom cons)
                ($$atom num0)
                (($$atom words0) ($$atom args0))))))
           ($$atom #f)))))
 (define emit-trap3
   (lambda (num0)
     (begin
       (($$atom queue-put!) ($$atom asm-code-queue) ($$atom 20206))
       (let ((x0 (($$atom trap-offset) ($$atom num0))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm) ($$atom "TRAP3(") ($$atom num0) ($$atom ")"))
           ($$atom #f)))))
 (define emit-rts
   (lambda ()
     (begin
       (($$atom asm-word) ($$atom 20085))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm) ($$atom "rts"))
           ($$atom #f)))))
 (define emit-nop
   (lambda ()
     (begin
       (($$atom asm-word) ($$atom 20081))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm) ($$atom "nop"))
           ($$atom #f)))))
 (define emit-jmp
   (lambda (opnd0)
     (begin
       (let ((x0 (($$atom +)
                  ($$atom 20160)
                  (($$atom opnd->mode/reg) ($$atom opnd0)))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (($$atom opnd-ext-rd-long) ($$atom opnd0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "jmp")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd0)))
           ($$atom #f)))))
 (define emit-jmp-glob
   (lambda (glob0)
     (begin
       (($$atom asm-word) ($$atom 8814))
       (($$atom asm-ref-glob-jump) ($$atom glob0))
       (($$atom asm-word) ($$atom 20177))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm) ($$atom "JMP_GLOB(") ($$atom glob0) ($$atom ")"))
           ($$atom #f)))))
 (define emit-jmp-proc
   (lambda (num0 offset0)
     (begin
       (($$atom asm-word) ($$atom 20217))
       (($$atom asm-proc-ref) ($$atom num0) ($$atom offset0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "JMP_PROC(")
            ($$atom num0)
            ($$atom ",")
            ($$atom offset0)
            ($$atom ")"))
           ($$atom #f)))))
 (define emit-jmp-prim
   (lambda (val0 offset0)
     (begin
       (($$atom asm-word) ($$atom 20217))
       (($$atom asm-prim-ref) ($$atom val0) ($$atom offset0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "JMP_PRIM(")
            (($$atom vector-ref) ($$atom val0) ($$atom 1))
            ($$atom ",")
            ($$atom offset0)
            ($$atom ")"))
           ($$atom #f)))))
 (define emit-jsr
   (lambda (opnd0)
     (begin
       (let ((x0 (($$atom +)
                  ($$atom 20096)
                  (($$atom opnd->mode/reg) ($$atom opnd0)))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (($$atom opnd-ext-rd-long) ($$atom opnd0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "jsr")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd0)))
           ($$atom #f)))))
 (define emit-word
   (lambda (n0)
     (begin
       (($$atom asm-word) ($$atom n0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm) ($$atom ".word") ($$atom char-tab) ($$atom n0))
           ($$atom #f)))))
 (define emit-label
   (lambda (lbl0)
     (begin
       (($$atom asm-label) ($$atom lbl0) ($$atom #f))
       (if ($$atom ofile-asm?)
           ((lambda l0 (($$atom asm-comment) ($$atom l0)))
            ($$atom "L")
            ($$atom lbl0)
            ($$atom ":"))
           ($$atom #f)))))
 (define emit-label-subproc
   (lambda (lbl0 parent-lbl0 label-descr0)
     (begin
       (($$atom asm-align) ($$atom 8) ($$atom 0))
       (($$atom queue-put!)
        ($$atom asm-code-queue)
        (($$atom cons)
         ($$atom 'wrel)
         (($$atom cons) ($$atom parent-lbl0) ($$atom 32766))))
       (($$atom asm-label) ($$atom lbl0) ($$atom label-descr0))
       (if ($$atom ofile-asm?)
           (begin
             (($$atom emit-asm)
              ($$atom "SUBPROC(L")
              ($$atom parent-lbl0)
              ($$atom ")"))
             ((lambda l0 (($$atom asm-comment) ($$atom l0)))
              ($$atom "L")
              ($$atom lbl0)
              ($$atom ":")))
           ($$atom #f)))))
 (define emit-label-return
   (lambda (lbl0 parent-lbl0 fs0 link0 label-descr0)
     (begin
       (($$atom asm-align) ($$atom 8) ($$atom 4))
       (let ((x0 (($$atom *) ($$atom fs0) ($$atom 4))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (let ((x0 (($$atom *)
                  (($$atom -) ($$atom fs0) ($$atom link0))
                  ($$atom 4))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (($$atom queue-put!)
        ($$atom asm-code-queue)
        (($$atom cons)
         ($$atom 'wrel)
         (($$atom cons) ($$atom parent-lbl0) ($$atom 32766))))
       (($$atom asm-label) ($$atom lbl0) ($$atom label-descr0))
       (if ($$atom ofile-asm?)
           (begin
             (($$atom emit-asm)
              ($$atom "RETURN(L")
              ($$atom parent-lbl0)
              ($$atom ",")
              ($$atom fs0)
              ($$atom ",")
              ($$atom link0)
              ($$atom ")"))
             ((lambda l0 (($$atom asm-comment) ($$atom l0)))
              ($$atom "L")
              ($$atom lbl0)
              ($$atom ":")))
           ($$atom #f)))))
 (define emit-label-task-return
   (lambda (lbl0 parent-lbl0 fs0 link0 label-descr0)
     (begin
       (($$atom asm-align) ($$atom 8) ($$atom 4))
       (let ((x0 (($$atom +)
                  ($$atom 32768)
                  (($$atom *) ($$atom fs0) ($$atom 4)))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (let ((x0 (($$atom *)
                  (($$atom -) ($$atom fs0) ($$atom link0))
                  ($$atom 4))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (($$atom queue-put!)
        ($$atom asm-code-queue)
        (($$atom cons)
         ($$atom 'wrel)
         (($$atom cons) ($$atom parent-lbl0) ($$atom 32766))))
       (($$atom asm-label) ($$atom lbl0) ($$atom label-descr0))
       (if ($$atom ofile-asm?)
           (begin
             (($$atom emit-asm)
              ($$atom "TASK_RETURN(L")
              ($$atom parent-lbl0)
              ($$atom ",")
              ($$atom fs0)
              ($$atom ",")
              ($$atom link0)
              ($$atom ")"))
             ((lambda l0 (($$atom asm-comment) ($$atom l0)))
              ($$atom "L")
              ($$atom lbl0)
              ($$atom ":")))
           ($$atom #f)))))
 (define emit-lbl-ptr
   (lambda (lbl0)
     (begin
       (($$atom asm-wrel) ($$atom lbl0) ($$atom 0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm) ($$atom "LBL_PTR(L") ($$atom lbl0) ($$atom ")"))
           ($$atom #f)))))
 (define emit-set-glob
   (lambda (glob0)
     (begin
       (($$atom asm-set-glob) ($$atom glob0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm) ($$atom "SET_GLOB(") ($$atom glob0) ($$atom ")"))
           ($$atom #f)))))
 (define emit-const
   (lambda (obj0)
     (let ((n0 (($$atom pos-in-list)
                ($$atom obj0)
                (let ((queue0 ($$atom asm-const-queue)))
                  (($$atom car) ($$atom queue0))))))
       (if ($$atom n0)
           (($$atom make-pcr) ($$atom 0) (($$atom *) ($$atom n0) ($$atom 4)))
           (let ((m0 (($$atom length)
                      (let ((queue0 ($$atom asm-const-queue)))
                        (($$atom car) ($$atom queue0))))))
             (begin
               (($$atom queue-put!) ($$atom asm-const-queue) ($$atom obj0))
               (($$atom make-pcr)
                ($$atom 0)
                (($$atom *) ($$atom m0) ($$atom 4)))))))))
 (define emit-stat
   (lambda (stat0)
     (begin
       (($$atom asm-word) ($$atom 21177))
       (($$atom asm-stat) ($$atom stat0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm) ($$atom "STAT(") ($$atom stat0) ($$atom ")"))
           ($$atom #f)))))
 (define emit-asm
   (lambda l0
     (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
       (($$atom queue-put!)
        ($$atom asm-code-queue)
        (($$atom cons) ($$atom 'comment) ($$atom x0))))))
 (define emit-asm* (lambda l0 (($$atom asm-comment) ($$atom l0))))
 (define emit-muls.l
   (lambda (opnd10 opnd20)
     (begin
       (($$atom asm-m68020-proc))
       (let ((x0 (($$atom +)
                  ($$atom 19456)
                  (($$atom opnd->mode/reg) ($$atom opnd10)))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (let ((x0 (($$atom +)
                  ($$atom 2048)
                  (($$atom *) ($$atom opnd20) ($$atom 4096)))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (($$atom opnd-ext-rd-long) ($$atom opnd10))
       (if ($$atom ofile-asm?)
           ((lambda l0
              (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                (($$atom queue-put!)
                 ($$atom asm-code-queue)
                 (($$atom cons) ($$atom 'comment) ($$atom x0)))))
            ($$atom "mulsl")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd10))
            ($$atom ",")
            (($$atom opnd-str) ($$atom opnd20)))
           ($$atom #f)))))
 (define emit-divsl.l
   (lambda (opnd10 opnd20 opnd30)
     (begin
       (($$atom asm-m68020-proc))
       (let ((x0 (($$atom +)
                  ($$atom 19520)
                  (($$atom opnd->mode/reg) ($$atom opnd10)))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (let ((x0 (($$atom +)
                  (($$atom +)
                   ($$atom 2048)
                   (($$atom *) ($$atom opnd30) ($$atom 4096)))
                  ($$atom opnd20))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (($$atom opnd-ext-rd-long) ($$atom opnd10))
       (if ($$atom ofile-asm?)
           ((lambda l0
              (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                (($$atom queue-put!)
                 ($$atom asm-code-queue)
                 (($$atom cons) ($$atom 'comment) ($$atom x0)))))
            ($$atom "divsll")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd10))
            ($$atom ",")
            (($$atom opnd-str) ($$atom opnd20))
            ($$atom ":")
            (($$atom opnd-str) ($$atom opnd30)))
           ($$atom #f)))))
 (define emit-fint.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "int")
      ($$atom 1)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-fsinh.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "sinh")
      ($$atom 2)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-fintrz.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "intrz")
      ($$atom 3)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-fsqrt.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "sqrt")
      ($$atom 4)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-flognp1.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "lognp1")
      ($$atom 6)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-fetoxm1.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "etoxm1")
      ($$atom 8)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-ftanh.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "tanh")
      ($$atom 9)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-fatan.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "atan")
      ($$atom 10)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-fasin.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "asin")
      ($$atom 12)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-fatanh.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "atanh")
      ($$atom 13)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-fsin.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "sin")
      ($$atom 14)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-ftan.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "tan")
      ($$atom 15)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-fetox.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "etox")
      ($$atom 16)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-ftwotox.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "twotox")
      ($$atom 17)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-ftentox.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "tentox")
      ($$atom 18)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-flogn.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "logn")
      ($$atom 20)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-flog10.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "log10")
      ($$atom 21)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-flog2.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "log2")
      ($$atom 22)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-fabs.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "abs")
      ($$atom 24)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-fcosh.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "cosh")
      ($$atom 25)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-fneg.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "neg")
      ($$atom 26)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-facos.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "acos")
      ($$atom 28)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-fcos.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "cos")
      ($$atom 29)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-fgetexp.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "getexp")
      ($$atom 30)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-fgetman.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "getman")
      ($$atom 31)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-fdiv.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "div")
      ($$atom 32)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-fmod.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "mod")
      ($$atom 33)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-fadd.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "add")
      ($$atom 34)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-fmul.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "mul")
      ($$atom 35)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-fsgldiv.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "sgldiv")
      ($$atom 36)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-frem.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "rem")
      ($$atom 37)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-fscale.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "scale")
      ($$atom 38)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-fsglmul.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "sglmul")
      ($$atom 39)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-fsub.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "sub")
      ($$atom 40)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-fcmp.dx
   (lambda (opnd10 opnd20)
     (($$atom emit-fop.dx)
      ($$atom "cmp")
      ($$atom 56)
      ($$atom opnd10)
      ($$atom opnd20))))
 (define emit-fop.dx
   (lambda (name0 code0 opnd10 opnd20)
     (begin
       (($$atom asm-m68881-proc))
       (let ((x0 (($$atom +)
                  ($$atom 61952)
                  (($$atom opnd->mode/reg) ($$atom opnd10)))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (let ((x0 (($$atom +)
                  (($$atom +)
                   (if (if (($$atom integer?) ($$atom opnd10))
                           (if (($$atom >=) ($$atom opnd10) ($$atom 557096))
                               (($$atom <) ($$atom opnd10) ($$atom 557104))
                               ($$atom #f))
                           ($$atom #f))
                       (($$atom *)
                        (($$atom -) ($$atom opnd10) ($$atom 557096))
                        ($$atom 1024))
                       ($$atom 21504))
                   (($$atom *)
                    (($$atom -) ($$atom opnd20) ($$atom 557096))
                    ($$atom 128)))
                  ($$atom code0))))
         (($$atom queue-put!)
          ($$atom asm-code-queue)
          (($$atom modulo) ($$atom x0) ($$atom 65536))))
       (($$atom opnd-ext-rd-long) ($$atom opnd10))
       (if ($$atom ofile-asm?)
           ((lambda l0
              (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                (($$atom queue-put!)
                 ($$atom asm-code-queue)
                 (($$atom cons) ($$atom 'comment) ($$atom x0)))))
            ($$atom "f")
            ($$atom name0)
            (if (($$atom freg?) ($$atom opnd10)) ($$atom "x") ($$atom "d"))
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd10))
            ($$atom ",")
            (($$atom opnd-str) ($$atom opnd20)))
           ($$atom #f)))))
 (define emit-fmov.dx
   (lambda (opnd10 opnd20)
     (begin
       (($$atom emit-fmov)
        (if (if (($$atom freg?) ($$atom opnd10))
                (($$atom freg?) ($$atom opnd20))
                ($$atom #f))
            (($$atom *)
             (($$atom -) ($$atom opnd10) ($$atom 557096))
             ($$atom 1024))
            ($$atom 21504))
        ($$atom opnd10)
        ($$atom opnd20))
       (if ($$atom ofile-asm?)
           ((lambda l0
              (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                (($$atom queue-put!)
                 ($$atom asm-code-queue)
                 (($$atom cons) ($$atom 'comment) ($$atom x0)))))
            (if (if (if (($$atom integer?) ($$atom opnd10))
                        (if (($$atom >=) ($$atom opnd10) ($$atom 557096))
                            (($$atom <) ($$atom opnd10) ($$atom 557104))
                            ($$atom #f))
                        ($$atom #f))
                    (($$atom freg?) ($$atom opnd20))
                    ($$atom #f))
                ($$atom "fmovex")
                ($$atom "fmoved"))
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd10))
            ($$atom ",")
            (($$atom opnd-str) ($$atom opnd20)))
           ($$atom #f)))))
 (define emit-fmov.l
   (lambda (opnd10 opnd20)
     (begin
       (($$atom emit-fmov) ($$atom 16384) ($$atom opnd10) ($$atom opnd20))
       (if ($$atom ofile-asm?)
           ((lambda l0
              (let ((x0 (($$atom cons) ($$atom char-tab) ($$atom l0))))
                (($$atom queue-put!)
                 ($$atom asm-code-queue)
                 (($$atom cons) ($$atom 'comment) ($$atom x0)))))
            ($$atom "fmovel")
            ($$atom char-tab)
            (($$atom opnd-str) ($$atom opnd10))
            ($$atom ",")
            (($$atom opnd-str) ($$atom opnd20)))
           ($$atom #f)))))
 (define emit-fmov
   (lambda (code0 opnd10 opnd20)
     (let ((fmov0 (lambda (code1 opnd11 opnd21)
                    (begin
                      (($$atom asm-m68881-proc))
                      (let ((x0 (($$atom +)
                                 ($$atom 61952)
                                 (($$atom opnd->mode/reg) ($$atom opnd11)))))
                        (($$atom queue-put!)
                         ($$atom asm-code-queue)
                         (($$atom modulo) ($$atom x0) ($$atom 65536))))
                      (let ((x0 (($$atom +)
                                 (($$atom *)
                                  (($$atom -) ($$atom opnd21) ($$atom 557096))
                                  ($$atom 128))
                                 ($$atom code1))))
                        (($$atom queue-put!)
                         ($$atom asm-code-queue)
                         (($$atom modulo) ($$atom x0) ($$atom 65536))))
                      (($$atom opnd-ext-rd-long) ($$atom opnd11))))))
       (if (($$atom freg?) ($$atom opnd20))
           (($$atom fmov0) ($$atom code0) ($$atom opnd10) ($$atom opnd20))
           (($$atom fmov0)
            (($$atom +) ($$atom code0) ($$atom 8192))
            ($$atom opnd20)
            ($$atom opnd10))))))
 (define emit-fbeq
   (lambda (lbl0)
     (begin
       (($$atom asm-m68881-proc))
       (($$atom asm-word) ($$atom 62081))
       (($$atom asm-wrel) ($$atom lbl0) ($$atom 0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "fbeq")
            ($$atom char-tab)
            ($$atom "L")
            ($$atom lbl0))
           ($$atom #f)))))
 (define emit-fbne
   (lambda (lbl0)
     (begin
       (($$atom asm-m68881-proc))
       (($$atom asm-word) ($$atom 62094))
       (($$atom asm-wrel) ($$atom lbl0) ($$atom 0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "fbne")
            ($$atom char-tab)
            ($$atom "L")
            ($$atom lbl0))
           ($$atom #f)))))
 (define emit-fblt
   (lambda (lbl0)
     (begin
       (($$atom asm-m68881-proc))
       (($$atom asm-word) ($$atom 62100))
       (($$atom asm-wrel) ($$atom lbl0) ($$atom 0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "fblt")
            ($$atom char-tab)
            ($$atom "L")
            ($$atom lbl0))
           ($$atom #f)))))
 (define emit-fbgt
   (lambda (lbl0)
     (begin
       (($$atom asm-m68881-proc))
       (($$atom asm-word) ($$atom 62098))
       (($$atom asm-wrel) ($$atom lbl0) ($$atom 0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "fbgt")
            ($$atom char-tab)
            ($$atom "L")
            ($$atom lbl0))
           ($$atom #f)))))
 (define emit-fble
   (lambda (lbl0)
     (begin
       (($$atom asm-m68881-proc))
       (($$atom asm-word) ($$atom 62101))
       (($$atom asm-wrel) ($$atom lbl0) ($$atom 0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "fble")
            ($$atom char-tab)
            ($$atom "L")
            ($$atom lbl0))
           ($$atom #f)))))
 (define emit-fbge
   (lambda (lbl0)
     (begin
       (($$atom asm-m68881-proc))
       (($$atom asm-word) ($$atom 62099))
       (($$atom asm-wrel) ($$atom lbl0) ($$atom 0))
       (if ($$atom ofile-asm?)
           (($$atom emit-asm)
            ($$atom "fbge")
            ($$atom char-tab)
            ($$atom "L")
            ($$atom lbl0))
           ($$atom #f)))))
 (define opnd->mode/reg
   (lambda (opnd0)
     (if (($$atom disp?) ($$atom opnd0))
         (($$atom +) ($$atom 32) (($$atom disp-areg) ($$atom opnd0)))
         (if (($$atom inx?) ($$atom opnd0))
             (($$atom +) ($$atom 40) (($$atom inx-areg) ($$atom opnd0)))
             (if (($$atom pcr?) ($$atom opnd0))
                 ($$atom 58)
                 (if (($$atom imm?) ($$atom opnd0))
                     ($$atom 60)
                     (if (($$atom symbol?) ($$atom opnd0))
                         ($$atom 46)
                         (if (($$atom freg?) ($$atom opnd0))
                             ($$atom 0)
                             ($$atom opnd0)))))))))
 (define opnd->reg/mode
   (lambda (opnd0)
     (let ((x0 (($$atom opnd->mode/reg) ($$atom opnd0))))
       (($$atom *)
        (($$atom +)
         (($$atom *) ($$atom 8) (($$atom remainder) ($$atom x0) ($$atom 8)))
         (($$atom quotient) ($$atom x0) ($$atom 8)))
        ($$atom 64)))))
 (define opnd-ext-rd-long
   (lambda (opnd0)
     (($$atom opnd-extension) ($$atom opnd0) ($$atom #f) ($$atom #f))))
 (define opnd-ext-rd-word
   (lambda (opnd0)
     (($$atom opnd-extension) ($$atom opnd0) ($$atom #f) ($$atom #t))))
 (define opnd-ext-wr-long
   (lambda (opnd0)
     (($$atom opnd-extension) ($$atom opnd0) ($$atom #t) ($$atom #f))))
 (define opnd-ext-wr-word
   (lambda (opnd0)
     (($$atom opnd-extension) ($$atom opnd0) ($$atom #t) ($$atom #t))))
 (define opnd-extension
   (lambda (opnd0 write?0 word?0)
     (if (($$atom disp?) ($$atom opnd0))
         (let ((x0 (($$atom disp-offset) ($$atom opnd0))))
           (($$atom queue-put!)
            ($$atom asm-code-queue)
            (($$atom modulo) ($$atom x0) ($$atom 65536))))
         (if (($$atom inx?) ($$atom opnd0))
             (let ((x0 (($$atom +)
                        (($$atom +)
                         (($$atom *)
                          (($$atom quotient)
                           (($$atom remainder)
                            (($$atom -) ($$atom opnd0) ($$atom 524328))
                            ($$atom 128))
                           ($$atom 8))
                          ($$atom 4096))
                         ($$atom 2048))
                        (($$atom modulo)
                         (($$atom inx-offset) ($$atom opnd0))
                         ($$atom 256)))))
               (($$atom queue-put!)
                ($$atom asm-code-queue)
                (($$atom modulo) ($$atom x0) ($$atom 65536))))
             (if (($$atom pcr?) ($$atom opnd0))
                 (let ((offs0 (($$atom pcr-offset) ($$atom opnd0)))
                       (lbl0 (($$atom pcr-lbl) ($$atom opnd0))))
                   (($$atom queue-put!)
                    ($$atom asm-code-queue)
                    (($$atom cons)
                     ($$atom 'wrel)
                     (($$atom cons) ($$atom lbl0) ($$atom offs0)))))
                 (if (($$atom imm?) ($$atom opnd0))
                     (if ($$atom word?0)
                         (let ((x0 (($$atom imm-val) ($$atom opnd0))))
                           (($$atom queue-put!)
                            ($$atom asm-code-queue)
                            (($$atom modulo) ($$atom x0) ($$atom 65536))))
                         (($$atom asm-long) (($$atom imm-val) ($$atom opnd0))))
                     (if (($$atom symbol?) ($$atom opnd0))
                         (if ($$atom write?0)
                             (($$atom asm-set-glob) ($$atom opnd0))
                             (($$atom asm-ref-glob) ($$atom opnd0)))
                         ($$atom #f))))))))
 (define opnd-str
   (lambda (opnd0)
     (if (($$atom dreg?) ($$atom opnd0))
         (($$atom vector-ref)
          ($$atom '#("d0" "d1" "d2" "d3" "d4" "d5" "d6" "d7"))
          ($$atom opnd0))
         (if (($$atom areg?) ($$atom opnd0))
             (($$atom vector-ref)
              ($$atom '#("a0" "a1" "a2" "a3" "a4" "a5" "a6" "sp"))
              (($$atom -) ($$atom opnd0) ($$atom 8)))
             (if (($$atom ind?) ($$atom opnd0))
                 (($$atom vector-ref)
                  ($$atom '#("a0@" "a1@" "a2@" "a3@" "a4@" "a5@" "a6@" "sp@"))
                  (let ((x0 (($$atom ind-areg) ($$atom opnd0))))
                    (($$atom -) ($$atom x0) ($$atom 8))))
                 (if (($$atom pinc?) ($$atom opnd0))
                     (($$atom vector-ref)
                      ($$atom '#("a0@+"
                                 "a1@+"
                                 "a2@+"
                                 "a3@+"
                                 "a4@+"
                                 "a5@+"
                                 "a6@+"
                                 "sp@+"))
                      (let ((x0 (($$atom pinc-areg) ($$atom opnd0))))
                        (($$atom -) ($$atom x0) ($$atom 8))))
                     (if (($$atom pdec?) ($$atom opnd0))
                         (($$atom vector-ref)
                          ($$atom '#("a0@-"
                                     "a1@-"
                                     "a2@-"
                                     "a3@-"
                                     "a4@-"
                                     "a5@-"
                                     "a6@-"
                                     "sp@-"))
                          (let ((x0 (($$atom pdec-areg) ($$atom opnd0))))
                            (($$atom -) ($$atom x0) ($$atom 8))))
                         (if (($$atom disp?) ($$atom opnd0))
                             (($$atom string-append)
                              (($$atom opnd-str)
                               (($$atom disp-areg) ($$atom opnd0)))
                              ($$atom "@(")
                              (($$atom number->string)
                               (($$atom disp-offset) ($$atom opnd0)))
                              ($$atom ")"))
                             (if (($$atom inx?) ($$atom opnd0))
                                 (($$atom string-append)
                                  (($$atom opnd-str)
                                   (($$atom inx-areg) ($$atom opnd0)))
                                  ($$atom "@(")
                                  (($$atom number->string)
                                   (($$atom inx-offset) ($$atom opnd0)))
                                  ($$atom ",")
                                  (($$atom opnd-str)
                                   (($$atom inx-ireg) ($$atom opnd0)))
                                  ($$atom ":l)"))
                                 (if (($$atom pcr?) ($$atom opnd0))
                                     (let ((offs0 (($$atom pcr-offset)
                                                   ($$atom opnd0)))
                                           (lbl0 (($$atom pcr-lbl)
                                                  ($$atom opnd0))))
                                       (if (($$atom =)
                                            ($$atom offs0)
                                            ($$atom 0))
                                           (($$atom string-append)
                                            ($$atom "L")
                                            (($$atom number->string)
                                             ($$atom lbl0)))
                                           (($$atom string-append)
                                            ($$atom "L")
                                            (($$atom number->string)
                                             ($$atom lbl0))
                                            ($$atom "+")
                                            (($$atom number->string)
                                             ($$atom offs0)))))
                                     (if (($$atom imm?) ($$atom opnd0))
                                         (($$atom string-append)
                                          ($$atom "#")
                                          (($$atom number->string)
                                           (($$atom imm-val) ($$atom opnd0))))
                                         (if (($$atom symbol?) ($$atom opnd0))
                                             (($$atom string-append)
                                              ($$atom "GLOB(")
                                              (($$atom symbol->string)
                                               ($$atom opnd0))
                                              ($$atom ")"))
                                             (if (($$atom freg?)
                                                  ($$atom opnd0))
                                                 (($$atom vector-ref)
                                                  ($$atom '#("fp0"
                                                             "fp1"
                                                             "fp2"
                                                             "fp3"
                                                             "fp4"
                                                             "fp5"
                                                             "fp6"
                                                             "fp7"))
                                                  (($$atom -)
                                                   ($$atom opnd0)
                                                   ($$atom 557096)))
                                                 (if (($$atom reg-list?)
                                                      ($$atom opnd0))
                                                     (letrec ((loop0 (lambda (l0
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                      result0
                                      sep0)
                               (if (($$atom pair?) ($$atom l0))
                                   (($$atom loop0)
                                    (($$atom cdr) ($$atom l0))
                                    (($$atom string-append)
                                     ($$atom result0)
                                     ($$atom sep0)
                                     (($$atom opnd-str)
                                      (($$atom car) ($$atom l0))))
                                    ($$atom "/"))
                                   (($$atom string-append)
                                    ($$atom result0)
                                    ($$atom "]"))))))
               (($$atom loop0) ($$atom opnd0) ($$atom "[") ($$atom "")))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                     (($$atom compiler-internal-error)
                                                      ($$atom "opnd-str, unknown 'opnd'")
                                                      ($$atom opnd0))))))))))))))))
 (define begin!
   (lambda (info-port0 targ0)
     (begin
       (set! return-reg ($$atom 0))
       (($$atom vector-set!) ($$atom targ0) ($$atom 3) ($$atom end!))
       (($$atom vector-set!) ($$atom targ0) ($$atom 4) ($$atom dump))
       (($$atom vector-set!) ($$atom targ0) ($$atom 5) ($$atom 5))
       (($$atom vector-set!) ($$atom targ0) ($$atom 6) ($$atom prim-info))
       (($$atom vector-set!) ($$atom targ0) ($$atom 7) ($$atom label-info))
       (($$atom vector-set!) ($$atom targ0) ($$atom 8) ($$atom jump-info))
       (($$atom vector-set!) ($$atom targ0) ($$atom 9) ($$atom 1))
       (let ((y0 ($$atom return-reg)))
         (($$atom vector-set!) ($$atom targ0) ($$atom 10) ($$atom y0)))
       (set! *info-port* ($$atom info-port0))
       ($$atom '()))))
 (define end! (lambda () ($$atom '())))
 (define *info-port* ($$atom '()))
 (define nb-gvm-regs ($$atom 5))
 (define nb-arg-regs ($$atom 3))
 (define pointer-size ($$atom 4))
 (define prim-proc-table
   (($$atom map)
    (lambda (x0)
      (($$atom cons)
       (($$atom string->canonical-symbol) (($$atom car) ($$atom x0)))
       (($$atom apply)
        ($$atom make-proc-obj)
        (($$atom car) ($$atom x0))
        ($$atom #t)
        ($$atom #f)
        (($$atom cdr) ($$atom x0)))))
    ($$atom '(("not" (1) #f 0 boolean)
              ("boolean?" (1) #f 0 boolean)
              ("eqv?" (2) #f 0 boolean)
              ("eq?" (2) #f 0 boolean)
              ("equal?" (2) #f 0 boolean)
              ("pair?" (1) #f 0 boolean)
              ("cons" (2) #f () pair)
              ("car" (1) #f 0 (#f))
              ("cdr" (1) #f 0 (#f))
              ("set-car!" (2) #t (1) pair)
              ("set-cdr!" (2) #t (1) pair)
              ("caar" (1) #f 0 (#f))
              ("cadr" (1) #f 0 (#f))
              ("cdar" (1) #f 0 (#f))
              ("cddr" (1) #f 0 (#f))
              ("caaar" (1) #f 0 (#f))
              ("caadr" (1) #f 0 (#f))
              ("cadar" (1) #f 0 (#f))
              ("caddr" (1) #f 0 (#f))
              ("cdaar" (1) #f 0 (#f))
              ("cdadr" (1) #f 0 (#f))
              ("cddar" (1) #f 0 (#f))
              ("cdddr" (1) #f 0 (#f))
              ("caaaar" (1) #f 0 (#f))
              ("caaadr" (1) #f 0 (#f))
              ("caadar" (1) #f 0 (#f))
              ("caaddr" (1) #f 0 (#f))
              ("cadaar" (1) #f 0 (#f))
              ("cadadr" (1) #f 0 (#f))
              ("caddar" (1) #f 0 (#f))
              ("cadddr" (1) #f 0 (#f))
              ("cdaaar" (1) #f 0 (#f))
              ("cdaadr" (1) #f 0 (#f))
              ("cdadar" (1) #f 0 (#f))
              ("cdaddr" (1) #f 0 (#f))
              ("cddaar" (1) #f 0 (#f))
              ("cddadr" (1) #f 0 (#f))
              ("cdddar" (1) #f 0 (#f))
              ("cddddr" (1) #f 0 (#f))
              ("null?" (1) #f 0 boolean)
              ("list?" (1) #f 0 boolean)
              ("list" 0 #f () list)
              ("length" (1) #f 0 integer)
              ("append" 0 #f 0 list)
              ("reverse" (1) #f 0 list)
              ("list-ref" (2) #f 0 (#f))
              ("memq" (2) #f 0 list)
              ("memv" (2) #f 0 list)
              ("member" (2) #f 0 list)
              ("assq" (2) #f 0 #f)
              ("assv" (2) #f 0 #f)
              ("assoc" (2) #f 0 #f)
              ("symbol?" (1) #f 0 boolean)
              ("symbol->string" (1) #f 0 string)
              ("string->symbol" (1) #f 0 symbol)
              ("number?" (1) #f 0 boolean)
              ("complex?" (1) #f 0 boolean)
              ("real?" (1) #f 0 boolean)
              ("rational?" (1) #f 0 boolean)
              ("integer?" (1) #f 0 boolean)
              ("exact?" (1) #f 0 boolean)
              ("inexact?" (1) #f 0 boolean)
              ("=" 0 #f 0 boolean)
              ("<" 0 #f 0 boolean)
              (">" 0 #f 0 boolean)
              ("<=" 0 #f 0 boolean)
              (">=" 0 #f 0 boolean)
              ("zero?" (1) #f 0 boolean)
              ("positive?" (1) #f 0 boolean)
              ("negative?" (1) #f 0 boolean)
              ("odd?" (1) #f 0 boolean)
              ("even?" (1) #f 0 boolean)
              ("max" 1 #f 0 number)
              ("min" 1 #f 0 number)
              ("+" 0 #f 0 number)
              ("*" 0 #f 0 number)
              ("-" 1 #f 0 number)
              ("/" 1 #f 0 number)
              ("abs" (1) #f 0 number)
              ("quotient" 1 #f 0 integer)
              ("remainder" (2) #f 0 integer)
              ("modulo" (2) #f 0 integer)
              ("gcd" 1 #f 0 integer)
              ("lcm" 1 #f 0 integer)
              ("numerator" (1) #f 0 integer)
              ("denominator" (1) #f 0 integer)
              ("floor" (1) #f 0 integer)
              ("ceiling" (1) #f 0 integer)
              ("truncate" (1) #f 0 integer)
              ("round" (1) #f 0 integer)
              ("rationalize" (2) #f 0 number)
              ("exp" (1) #f 0 number)
              ("log" (1) #f 0 number)
              ("sin" (1) #f 0 number)
              ("cos" (1) #f 0 number)
              ("tan" (1) #f 0 number)
              ("asin" (1) #f 0 number)
              ("acos" (1) #f 0 number)
              ("atan" (1 2) #f 0 number)
              ("sqrt" (1) #f 0 number)
              ("expt" (2) #f 0 number)
              ("make-rectangular" (2) #f 0 number)
              ("make-polar" (2) #f 0 number)
              ("real-part" (1) #f 0 real)
              ("imag-part" (1) #f 0 real)
              ("magnitude" (1) #f 0 real)
              ("angle" (1) #f 0 real)
              ("exact->inexact" (1) #f 0 number)
              ("inexact->exact" (1) #f 0 number)
              ("number->string" (1 2) #f 0 string)
              ("string->number" (1 2) #f 0 number)
              ("char?" (1) #f 0 boolean)
              ("char=?" 0 #f 0 boolean)
              ("char<?" 0 #f 0 boolean)
              ("char>?" 0 #f 0 boolean)
              ("char<=?" 0 #f 0 boolean)
              ("char>=?" 0 #f 0 boolean)
              ("char-ci=?" 0 #f 0 boolean)
              ("char-ci<?" 0 #f 0 boolean)
              ("char-ci>?" 0 #f 0 boolean)
              ("char-ci<=?" 0 #f 0 boolean)
              ("char-ci>=?" 0 #f 0 boolean)
              ("char-alphabetic?" (1) #f 0 boolean)
              ("char-numeric?" (1) #f 0 boolean)
              ("char-whitespace?" (1) #f 0 boolean)
              ("char-upper-case?" (1) #f 0 boolean)
              ("char-lower-case?" (1) #f 0 boolean)
              ("char->integer" (1) #f 0 integer)
              ("integer->char" (1) #f 0 char)
              ("char-upcase" (1) #f 0 char)
              ("char-downcase" (1) #f 0 char)
              ("string?" (1) #f 0 boolean)
              ("make-string" (1 2) #f 0 string)
              ("string" 0 #f 0 string)
              ("string-length" (1) #f 0 integer)
              ("string-ref" (2) #f 0 char)
              ("string-set!" (3) #t 0 string)
              ("string=?" 0 #f 0 boolean)
              ("string<?" 0 #f 0 boolean)
              ("string>?" 0 #f 0 boolean)
              ("string<=?" 0 #f 0 boolean)
              ("string>=?" 0 #f 0 boolean)
              ("string-ci=?" 0 #f 0 boolean)
              ("string-ci<?" 0 #f 0 boolean)
              ("string-ci>?" 0 #f 0 boolean)
              ("string-ci<=?" 0 #f 0 boolean)
              ("string-ci>=?" 0 #f 0 boolean)
              ("substring" (3) #f 0 string)
              ("string-append" 0 #f 0 string)
              ("vector?" (1) #f 0 boolean)
              ("make-vector" (1 2) #f (1) vector)
              ("vector" 0 #f () vector)
              ("vector-length" (1) #f 0 integer)
              ("vector-ref" (2) #f 0 (#f))
              ("vector-set!" (3) #t (1 2) vector)
              ("procedure?" (1) #f 0 boolean)
              ("apply" 2 #t 0 (#f))
              ("map" 2 #t 0 list)
              ("for-each" 2 #t 0 #f)
              ("call-with-current-continuation" (1) #t 0 (#f))
              ("call-with-input-file" (2) #t 0 (#f))
              ("call-with-output-file" (2) #t 0 (#f))
              ("input-port?" (1) #f 0 boolean)
              ("output-port?" (1) #f 0 boolean)
              ("current-input-port" (0) #f 0 port)
              ("current-output-port" (0) #f 0 port)
              ("open-input-file" (1) #t 0 port)
              ("open-output-file" (1) #t 0 port)
              ("close-input-port" (1) #t 0 #f)
              ("close-output-port" (1) #t 0 #f)
              ("eof-object?" (1) #f 0 boolean)
              ("read" (0 1) #t 0 #f)
              ("read-char" (0 1) #t 0 #f)
              ("peek-char" (0 1) #t 0 #f)
              ("write" (0 1) #t 0 #f)
              ("display" (0 1) #t 0 #f)
              ("newline" (0 1) #t 0 #f)
              ("write-char" (1 2) #t 0 #f)
              ("list-tail" (2) #f 0 (#f))
              ("string->list" (1) #f 0 list)
              ("list->string" (1) #f 0 string)
              ("string-copy" (1) #f 0 string)
              ("string-fill!" (2) #t 0 string)
              ("vector->list" (1) #f 0 list)
              ("list->vector" (1) #f 0 vector)
              ("vector-fill!" (2) #t 0 vector)
              ("force" (1) #t 0 #f)
              ("with-input-from-file" (2) #t 0 (#f))
              ("with-output-to-file" (2) #t 0 (#f))
              ("char-ready?" (0 1) #f 0 boolean)
              ("load" (1) #t 0 (#f))
              ("transcript-on" (1) #t 0 #f)
              ("transcript-off" (0) #t 0 #f)
              ("touch" (1) #t 0 #f)
              ("##type" (1) #f () integer)
              ("##type-cast" (2) #f () (#f))
              ("##subtype" (1) #f () integer)
              ("##subtype-set!" (2) #t () #f)
              ("##not" (1) #f () boolean)
              ("##null?" (1) #f () boolean)
              ("##unassigned?" (1) #f () boolean)
              ("##unbound?" (1) #f () boolean)
              ("##eq?" (2) #f () boolean)
              ("##fixnum?" (1) #f () boolean)
              ("##flonum?" (1) #f () boolean)
              ("##special?" (1) #f () boolean)
              ("##pair?" (1) #f () boolean)
              ("##subtyped?" (1) #f () boolean)
              ("##procedure?" (1) #f () boolean)
              ("##placeholder?" (1) #f () boolean)
              ("##vector?" (1) #f () boolean)
              ("##symbol?" (1) #f () boolean)
              ("##ratnum?" (1) #f () boolean)
              ("##cpxnum?" (1) #f () boolean)
              ("##string?" (1) #f () boolean)
              ("##bignum?" (1) #f () boolean)
              ("##char?" (1) #f () boolean)
              ("##closure?" (1) #f () boolean)
              ("##subprocedure?" (1) #f () boolean)
              ("##return-dynamic-env-bind?" (1) #f () boolean)
              ("##fixnum.+" 0 #f () integer)
              ("##fixnum.*" 0 #f () integer)
              ("##fixnum.-" 1 #f () integer)
              ("##fixnum.quotient" (2) #f () integer)
              ("##fixnum.remainder" (2) #f () integer)
              ("##fixnum.modulo" (2) #f () integer)
              ("##fixnum.logior" 0 #f () integer)
              ("##fixnum.logxor" 0 #f () integer)
              ("##fixnum.logand" 0 #f () integer)
              ("##fixnum.lognot" (1) #f () integer)
              ("##fixnum.ash" (2) #f () integer)
              ("##fixnum.lsh" (2) #f () integer)
              ("##fixnum.zero?" (1) #f () boolean)
              ("##fixnum.positive?" (1) #f () boolean)
              ("##fixnum.negative?" (1) #f () boolean)
              ("##fixnum.odd?" (1) #f () boolean)
              ("##fixnum.even?" (1) #f () boolean)
              ("##fixnum.=" 0 #f () boolean)
              ("##fixnum.<" 0 #f () boolean)
              ("##fixnum.>" 0 #f () boolean)
              ("##fixnum.<=" 0 #f () boolean)
              ("##fixnum.>=" 0 #f () boolean)
              ("##flonum.->fixnum" (1) #f () integer)
              ("##flonum.<-fixnum" (1) #f () real)
              ("##flonum.+" 0 #f () real)
              ("##flonum.*" 0 #f () real)
              ("##flonum.-" 1 #f () real)
              ("##flonum./" 1 #f () real)
              ("##flonum.abs" (1) #f () real)
              ("##flonum.truncate" (1) #f () real)
              ("##flonum.round" (1) #f () real)
              ("##flonum.exp" (1) #f () real)
              ("##flonum.log" (1) #f () real)
              ("##flonum.sin" (1) #f () real)
              ("##flonum.cos" (1) #f () real)
              ("##flonum.tan" (1) #f () real)
              ("##flonum.asin" (1) #f () real)
              ("##flonum.acos" (1) #f () real)
              ("##flonum.atan" (1) #f () real)
              ("##flonum.sqrt" (1) #f () real)
              ("##flonum.zero?" (1) #f () boolean)
              ("##flonum.positive?" (1) #f () boolean)
              ("##flonum.negative?" (1) #f () boolean)
              ("##flonum.=" 0 #f () boolean)
              ("##flonum.<" 0 #f () boolean)
              ("##flonum.>" 0 #f () boolean)
              ("##flonum.<=" 0 #f () boolean)
              ("##flonum.>=" 0 #f () boolean)
              ("##char=?" 0 #f () boolean)
              ("##char<?" 0 #f () boolean)
              ("##char>?" 0 #f () boolean)
              ("##char<=?" 0 #f () boolean)
              ("##char>=?" 0 #f () boolean)
              ("##cons" (2) #f () pair)
              ("##set-car!" (2) #t () pair)
              ("##set-cdr!" (2) #t () pair)
              ("##car" (1) #f () (#f))
              ("##cdr" (1) #f () (#f))
              ("##caar" (1) #f () (#f))
              ("##cadr" (1) #f () (#f))
              ("##cdar" (1) #f () (#f))
              ("##cddr" (1) #f () (#f))
              ("##caaar" (1) #f () (#f))
              ("##caadr" (1) #f () (#f))
              ("##cadar" (1) #f () (#f))
              ("##caddr" (1) #f () (#f))
              ("##cdaar" (1) #f () (#f))
              ("##cdadr" (1) #f () (#f))
              ("##cddar" (1) #f () (#f))
              ("##cdddr" (1) #f () (#f))
              ("##caaaar" (1) #f () (#f))
              ("##caaadr" (1) #f () (#f))
              ("##caadar" (1) #f () (#f))
              ("##caaddr" (1) #f () (#f))
              ("##cadaar" (1) #f () (#f))
              ("##cadadr" (1) #f () (#f))
              ("##caddar" (1) #f () (#f))
              ("##cadddr" (1) #f () (#f))
              ("##cdaaar" (1) #f () (#f))
              ("##cdaadr" (1) #f () (#f))
              ("##cdadar" (1) #f () (#f))
              ("##cdaddr" (1) #f () (#f))
              ("##cddaar" (1) #f () (#f))
              ("##cddadr" (1) #f () (#f))
              ("##cdddar" (1) #f () (#f))
              ("##cddddr" (1) #f () (#f))
              ("##make-cell" (1) #f () pair)
              ("##cell-ref" (1) #f () (#f))
              ("##cell-set!" (2) #t () pair)
              ("##vector" 0 #f () vector)
              ("##make-vector" (2) #f () vector)
              ("##vector-length" (1) #f () integer)
              ("##vector-ref" (2) #f () (#f))
              ("##vector-set!" (3) #t () vector)
              ("##vector-shrink!" (2) #t () vector)
              ("##string" 0 #f () string)
              ("##make-string" (2) #f () string)
              ("##string-length" (1) #f () integer)
              ("##string-ref" (2) #f () char)
              ("##string-set!" (3) #t () string)
              ("##string-shrink!" (2) #t () string)
              ("##vector8" 0 #f () string)
              ("##make-vector8" (2) #f () string)
              ("##vector8-length" (1) #f () integer)
              ("##vector8-ref" (2) #f () integer)
              ("##vector8-set!" (3) #t () string)
              ("##vector8-shrink!" (2) #t () string)
              ("##vector16" 0 #f () string)
              ("##make-vector16" (2) #f () string)
              ("##vector16-length" (1) #f () integer)
              ("##vector16-ref" (2) #f () integer)
              ("##vector16-set!" (3) #t () string)
              ("##vector16-shrink!" (2) #t () string)
              ("##closure-code" (1) #f () #f)
              ("##closure-ref" (2) #f () (#f))
              ("##closure-set!" (3) #t () #f)
              ("##subprocedure-id" (1) #f () #f)
              ("##subprocedure-parent" (1) #f () #f)
              ("##return-fs" (1) #f () #f)
              ("##return-link" (1) #f () #f)
              ("##procedure-info" (1) #f () #f)
              ("##pstate" (0) #f () #f)
              ("##make-placeholder" (1) #f 0 (#f))
              ("##touch" (1) #t 0 #f)
              ("##apply" (2) #t () (#f))
              ("##call-with-current-continuation" (1) #t () (#f))
              ("##global-var" (1) #t () #f)
              ("##global-var-ref" (1) #f () (#f))
              ("##global-var-set!" (2) #t () #f)
              ("##atomic-car" (1) #f () (#f))
              ("##atomic-cdr" (1) #f () (#f))
              ("##atomic-set-car!" (2) #t () pair)
              ("##atomic-set-cdr!" (2) #t () pair)
              ("##atomic-set-car-if-eq?!" (3) #t () boolean)
              ("##atomic-set-cdr-if-eq?!" (3) #t () boolean)
              ("##quasi-append" 0 #f 0 list)
              ("##quasi-list" 0 #f () list)
              ("##quasi-cons" (2) #f () pair)
              ("##quasi-list->vector" (1) #f 0 vector)
              ("##case-memv" (2) #f 0 list)))))
 (define prim-info
   (lambda (name0)
     (let ((x0 (($$atom assq) ($$atom name0) ($$atom prim-proc-table))))
       (if ($$atom x0) (($$atom cdr) ($$atom x0)) ($$atom #f)))))
 (define get-prim-info
   (lambda (name0)
     (let ((proc0 (($$atom prim-info)
                   (($$atom string->canonical-symbol) ($$atom name0)))))
       (if ($$atom proc0)
           ($$atom proc0)
           (($$atom compiler-internal-error)
            ($$atom "get-prim-info, unknown primitive:")
            ($$atom name0))))))
 (define label-info
   (lambda (min-args0 nb-parms0 rest?0 closed?0)
     (let ((nb-stacked0
            (($$atom max)
             ($$atom 0)
             (($$atom -) ($$atom nb-parms0) ($$atom 3)))))
       (letrec ((location-of-parms0
                 (lambda (nb-parms1 nb-stacked1 i0)
                   (if (($$atom >) ($$atom i0) ($$atom nb-parms1))
                       ($$atom '())
                       (($$atom cons)
                        (($$atom cons)
                         ($$atom i0)
                         (if (($$atom >) ($$atom i0) ($$atom nb-stacked1))
                             (let ((num0 (($$atom -)
                                          ($$atom i0)
                                          ($$atom nb-stacked1))))
                               ($$atom num0))
                             (($$atom +) ($$atom i0) ($$atom 10000))))
                        (($$atom location-of-parms0)
                         ($$atom nb-parms1)
                         ($$atom nb-stacked1)
                         (($$atom +) ($$atom i0) ($$atom 1))))))))
         (let ((x0 (($$atom cons)
                    (($$atom cons) ($$atom 'return) ($$atom 0))
                    (($$atom location-of-parms0)
                     ($$atom nb-parms0)
                     ($$atom nb-stacked0)
                     ($$atom 1)))))
           (let ((map0 (if ($$atom closed?0)
                           (($$atom cons)
                            (($$atom cons) ($$atom 'closure-env) ($$atom 4))
                            ($$atom x0))
                           ($$atom x0))))
             (($$atom vector) ($$atom nb-stacked0) ($$atom map0))))))))
 (define jump-info
   (lambda (nb-args0)
     (let ((nb-stacked0
            (($$atom max)
             ($$atom 0)
             (($$atom -) ($$atom nb-args0) ($$atom 3)))))
       (letrec ((location-of-args0
                 (lambda (nb-args1 nb-stacked1 i0)
                   (if (($$atom >) ($$atom i0) ($$atom nb-args1))
                       ($$atom '())
                       (($$atom cons)
                        (($$atom cons)
                         ($$atom i0)
                         (if (($$atom >) ($$atom i0) ($$atom nb-stacked1))
                             (let ((num0 (($$atom -)
                                          ($$atom i0)
                                          ($$atom nb-stacked1))))
                               ($$atom num0))
                             (($$atom +) ($$atom i0) ($$atom 10000))))
                        (($$atom location-of-args0)
                         ($$atom nb-args1)
                         ($$atom nb-stacked1)
                         (($$atom +) ($$atom i0) ($$atom 1))))))))
         (let ((map0 (($$atom cons)
                      (($$atom cons) ($$atom 'return) ($$atom 0))
                      (($$atom location-of-args0)
                       ($$atom nb-args0)
                       ($$atom nb-stacked0)
                       ($$atom 1)))))
           (($$atom vector) ($$atom nb-stacked0) ($$atom map0)))))))
 (define closed-var-offset
   (lambda (i0) (($$atom +) (($$atom *) ($$atom i0) ($$atom 4)) ($$atom 2))))
 (define dump
   (lambda (proc0 filename0 c-intf0 options0)
     (begin
       (if ($$atom *info-port*)
           (begin
             (($$atom display) ($$atom "Dumping:") ($$atom *info-port*))
             (($$atom newline) ($$atom *info-port*)))
           ($$atom #f))
       (set! ofile-asm? (($$atom memq) ($$atom 'asm) ($$atom options0)))
       (set! ofile-stats? (($$atom memq) ($$atom 'stats) ($$atom options0)))
       (set! debug-info? (($$atom memq) ($$atom 'debug) ($$atom options0)))
       (set! object-queue (($$atom queue-empty)))
       (set! objects-dumped (($$atom queue-empty)))
       (($$atom ofile.begin!) ($$atom filename0) ($$atom add-object))
       (($$atom queue-put!) ($$atom object-queue) ($$atom proc0))
       (($$atom queue-put!) ($$atom objects-dumped) ($$atom proc0))
       (letrec ((loop0 (lambda (index0)
                         (if (($$atom queue-empty?) ($$atom object-queue))
                             ($$atom #f)
                             (let ((obj0 (($$atom queue-get!)
                                          ($$atom object-queue))))
                               (begin
                                 (($$atom dump-object)
                                  ($$atom obj0)
                                  ($$atom index0))
                                 (($$atom loop0)
                                  (($$atom +)
                                   ($$atom index0)
                                   ($$atom 1)))))))))
         (($$atom loop0) ($$atom 0)))
       (($$atom ofile.end!))
       (if ($$atom *info-port*)
           (($$atom newline) ($$atom *info-port*))
           ($$atom #f))
       (set! object-queue ($$atom '()))
       (set! objects-dumped ($$atom '())))))
 (define debug-info? ($$atom '()))
 (define object-queue ($$atom '()))
 (define objects-dumped ($$atom '()))
 (define add-object
   (lambda (obj0)
     (if (if (($$atom proc-obj?) ($$atom obj0))
             (($$atom not) (($$atom vector-ref) ($$atom obj0) ($$atom 3)))
             ($$atom #f))
         ($$atom #f)
         (let ((n0 (($$atom pos-in-list)
                    ($$atom obj0)
                    (let ((queue0 ($$atom objects-dumped)))
                      (($$atom car) ($$atom queue0))))))
           (if ($$atom n0)
               ($$atom n0)
               (let ((m0 (($$atom length)
                          (let ((queue0 ($$atom objects-dumped)))
                            (($$atom car) ($$atom queue0))))))
                 (begin
                   (($$atom queue-put!) ($$atom objects-dumped) ($$atom obj0))
                   (($$atom queue-put!) ($$atom object-queue) ($$atom obj0))
                   ($$atom m0))))))))
 (define dump-object
   (lambda (obj0 index0)
     (begin
       (($$atom ofile-line)
        ($$atom "|------------------------------------------------------"))
       (let ((case-temp.10690 (($$atom obj-type) ($$atom obj0))))
         (if (let ((g2580 ($$atom 'pair)))
               (if (($$atom number?) ($$atom case-temp.10690))
                   (if (($$atom number?) ($$atom g2580))
                       (($$atom =) ($$atom case-temp.10690) ($$atom g2580))
                       ($$atom #f))
                   (($$atom eq?) ($$atom case-temp.10690) ($$atom g2580))))
             (($$atom dump-pair) ($$atom obj0))
             (if (let ((g2590 ($$atom 'flonum)))
                   (if (($$atom number?) ($$atom case-temp.10690))
                       (if (($$atom number?) ($$atom g2590))
                           (($$atom =) ($$atom case-temp.10690) ($$atom g2590))
                           ($$atom #f))
                       (($$atom eq?) ($$atom case-temp.10690) ($$atom g2590))))
                 (($$atom dump-flonum) ($$atom obj0))
                 (if (let ((g2600 ($$atom 'subtyped)))
                       (if (($$atom number?) ($$atom case-temp.10690))
                           (if (($$atom number?) ($$atom g2600))
                               (($$atom =)
                                ($$atom case-temp.10690)
                                ($$atom g2600))
                               ($$atom #f))
                           (($$atom eq?)
                            ($$atom case-temp.10690)
                            ($$atom g2600))))
                     (let ((case-temp.10700
                            (($$atom obj-subtype) ($$atom obj0))))
                       (if (let ((g2610 ($$atom 'vector)))
                             (if (($$atom number?) ($$atom case-temp.10700))
                                 (if (($$atom number?) ($$atom g2610))
                                     (($$atom =)
                                      ($$atom case-temp.10700)
                                      ($$atom g2610))
                                     ($$atom #f))
                                 (($$atom eq?)
                                  ($$atom case-temp.10700)
                                  ($$atom g2610))))
                           (($$atom dump-vector) ($$atom obj0))
                           (if (let ((g2620 ($$atom 'symbol)))
                                 (if (($$atom number?)
                                      ($$atom case-temp.10700))
                                     (if (($$atom number?) ($$atom g2620))
                                         (($$atom =)
                                          ($$atom case-temp.10700)
                                          ($$atom g2620))
                                         ($$atom #f))
                                     (($$atom eq?)
                                      ($$atom case-temp.10700)
                                      ($$atom g2620))))
                               (($$atom compiler-internal-error)
                                ($$atom "dump-symbol, can't dump SYMBOL type"))
                               (if (let ((g2630 ($$atom 'string)))
                                     (if (($$atom number?)
                                          ($$atom case-temp.10700))
                                         (if (($$atom number?) ($$atom g2630))
                                             (($$atom =)
                                              ($$atom case-temp.10700)
                                              ($$atom g2630))
                                             ($$atom #f))
                                         (($$atom eq?)
                                          ($$atom case-temp.10700)
                                          ($$atom g2630))))
                                   (($$atom dump-string) ($$atom obj0))
                                   (if (let ((g2640 ($$atom 'bignum)))
                                         (if (($$atom number?)
                                              ($$atom case-temp.10700))
                                             (if (($$atom number?)
                                                  ($$atom g2640))
                                                 (($$atom =)
                                                  ($$atom case-temp.10700)
                                                  ($$atom g2640))
                                                 ($$atom #f))
                                             (($$atom eq?)
                                              ($$atom case-temp.10700)
                                              ($$atom g2640))))
                                       (($$atom dump-bignum) ($$atom obj0))
                                       (($$atom compiler-internal-error)
                                        ($$atom "dump-object, can't dump object 'obj':")
                                        ($$atom obj0)))))))
                     (if (let ((g2650 ($$atom 'procedure)))
                           (if (($$atom number?) ($$atom case-temp.10690))
                               (if (($$atom number?) ($$atom g2650))
                                   (($$atom =)
                                    ($$atom case-temp.10690)
                                    ($$atom g2650))
                                   ($$atom #f))
                               (($$atom eq?)
                                ($$atom case-temp.10690)
                                ($$atom g2650))))
                         (($$atom dump-procedure) ($$atom obj0))
                         (($$atom compiler-internal-error)
                          ($$atom "dump-object, can't dump object 'obj':")
                          ($$atom obj0))))))))))
 (define dump-pair
   (lambda (pair0)
     (begin
       (($$atom ofile-long) ($$atom 3))
       (($$atom ofile-ref) (($$atom cdr) ($$atom pair0)))
       (($$atom ofile-ref) (($$atom car) ($$atom pair0))))))
 (define dump-vector
   (lambda (v0)
     (begin
       (let ((x0 (($$atom +)
                  (($$atom *)
                   (($$atom vector-length) ($$atom v0))
                   ($$atom 1024))
                  ($$atom 0))))
         (begin
           (($$atom ofile-word) (($$atom upper-16bits) ($$atom x0)))
           (($$atom ofile-word) ($$atom x0))))
       (let ((len0 (($$atom vector-length) ($$atom v0))))
         (letrec ((loop0 (lambda (v1 len1 i0)
                           (if (($$atom <) ($$atom i0) ($$atom len1))
                               (begin
                                 (($$atom ofile-ref)
                                  (($$atom vector-ref)
                                   ($$atom v1)
                                   ($$atom i0)))
                                 (($$atom loop0)
                                  ($$atom v1)
                                  ($$atom len1)
                                  (($$atom +) ($$atom i0) ($$atom 1))))
                               ($$atom #f)))))
           (($$atom loop0) ($$atom v0) ($$atom len0) ($$atom 0)))))))
 (define dump-symbol
   (lambda (sym0)
     (($$atom compiler-internal-error)
      ($$atom "dump-symbol, can't dump SYMBOL type"))))
 (define dump-string
   (lambda (s0)
     (begin
       (let ((x0 (($$atom +)
                  (($$atom *)
                   (($$atom +) (($$atom string-length) ($$atom s0)) ($$atom 1))
                   ($$atom 256))
                  ($$atom 128))))
         (begin
           (($$atom ofile-word) (($$atom upper-16bits) ($$atom x0)))
           (($$atom ofile-word) ($$atom x0))))
       (let ((len0 (($$atom string-length) ($$atom s0))))
         (let ((ref0 (lambda (s1 len1 i0)
                       (if (($$atom >=) ($$atom i0) ($$atom len1))
                           ($$atom 0)
                           (($$atom char->integer)
                            (($$atom string-ref) ($$atom s1) ($$atom i0)))))))
           (letrec ((loop0 (lambda (s1 len1 i0)
                             (if (($$atom <=) ($$atom i0) ($$atom len1))
                                 (begin
                                   (($$atom ofile-word)
                                    (($$atom +)
                                     (($$atom *)
                                      (($$atom ref0)
                                       ($$atom s1)
                                       ($$atom len1)
                                       ($$atom i0))
                                      ($$atom 256))
                                     (($$atom ref0)
                                      ($$atom s1)
                                      ($$atom len1)
                                      (($$atom +) ($$atom i0) ($$atom 1)))))
                                   (($$atom loop0)
                                    ($$atom s1)
                                    ($$atom len1)
                                    (($$atom +) ($$atom i0) ($$atom 2))))
                                 ($$atom #f)))))
             (($$atom loop0) ($$atom s0) ($$atom len0) ($$atom 0))))))))
 (define dump-flonum
   (lambda (x0)
     (let ((bits0 (($$atom flonum->bits) ($$atom x0))))
       (begin
         (($$atom ofile-long) ($$atom 4))
         (($$atom ofile-long)
          (($$atom quotient) ($$atom bits0) ($$atom 4294967296)))
         (($$atom ofile-long)
          (($$atom modulo) ($$atom bits0) ($$atom 4294967296)))))))
 (define flonum->inexact-exponential-format
   (lambda (x0)
     (letrec ((exp-form0
               (lambda (x1)
                 (if (($$atom <) ($$atom x1) ($$atom 1.))
                     (let ((z0 (($$atom exp-form-neg0)
                                ($$atom x1)
                                ($$atom .5)
                                ($$atom 1))))
                       (begin
                         (($$atom set-car!)
                          ($$atom z0)
                          (($$atom *) ($$atom 2.) (($$atom car) ($$atom z0))))
                         (($$atom set-cdr!)
                          ($$atom z0)
                          (($$atom -) ($$atom -1) (($$atom cdr) ($$atom z0))))
                         ($$atom z0)))
                     (($$atom exp-form-pos0)
                      ($$atom x1)
                      ($$atom 2.)
                      ($$atom 1)))))
              (exp-form-neg0
               (lambda (x1 y0 i0)
                 (let ((i*20 (($$atom +) ($$atom i0) ($$atom i0))))
                   (let ((z0 (if (if (($$atom <) ($$atom i*20) ($$atom 1022))
                                     (($$atom <) ($$atom x1) ($$atom y0))
                                     ($$atom #f))
                                 (($$atom exp-form-neg0)
                                  ($$atom x1)
                                  (($$atom *) ($$atom y0) ($$atom y0))
                                  ($$atom i*20))
                                 (($$atom cons) ($$atom x1) ($$atom 0)))))
                     (let ((b0 (($$atom cdr) ($$atom z0)))
                           (a0 (($$atom car) ($$atom z0))))
                       (let ((i+b0 (($$atom +) ($$atom i0) ($$atom b0))))
                         (begin
                           (if (if (($$atom <) ($$atom i+b0) ($$atom 1022))
                                   (($$atom <) ($$atom a0) ($$atom y0))
                                   ($$atom #f))
                               (begin
                                 (($$atom set-car!)
                                  ($$atom z0)
                                  (($$atom /) ($$atom a0) ($$atom y0)))
                                 (($$atom set-cdr!) ($$atom z0) ($$atom i+b0)))
                               ($$atom #f))
                           ($$atom z0))))))))
              (exp-form-pos0
               (lambda (x1 y0 i0)
                 (let ((i*20 (($$atom +) ($$atom i0) ($$atom i0))))
                   (let ((z0 (if (if (($$atom <) ($$atom 1023) ($$atom i*20))
                                     ($$atom #f)
                                     (($$atom not)
                                      (($$atom <) ($$atom x1) ($$atom y0))))
                                 (($$atom exp-form-pos0)
                                  ($$atom x1)
                                  (($$atom *) ($$atom y0) ($$atom y0))
                                  ($$atom i*20))
                                 (($$atom cons) ($$atom x1) ($$atom 0)))))
                     (let ((b0 (($$atom cdr) ($$atom z0)))
                           (a0 (($$atom car) ($$atom z0))))
                       (let ((i+b0 (($$atom +) ($$atom i0) ($$atom b0))))
                         (begin
                           (if (if (($$atom <) ($$atom 1023) ($$atom i+b0))
                                   ($$atom #f)
                                   (($$atom not)
                                    (($$atom <) ($$atom a0) ($$atom y0))))
                               (begin
                                 (($$atom set-car!)
                                  ($$atom z0)
                                  (($$atom /) ($$atom a0) ($$atom y0)))
                                 (($$atom set-cdr!) ($$atom z0) ($$atom i+b0)))
                               ($$atom #f))
                           ($$atom z0)))))))))
       (if (($$atom negative?) ($$atom x0))
           (let ((z0 (($$atom exp-form0)
                      (($$atom -) ($$atom 0.) ($$atom x0)))))
             (begin
               (($$atom set-car!)
                ($$atom z0)
                (($$atom -) ($$atom 0.) (($$atom car) ($$atom z0))))
               ($$atom z0)))
           (($$atom exp-form0) ($$atom x0))))))
 (define flonum->exact-exponential-format
   (lambda (x0)
     (let ((z0 (($$atom flonum->inexact-exponential-format) ($$atom x0))))
       (let ((y0 (($$atom car) ($$atom z0))))
         (begin
           (if (($$atom <) ($$atom y0) ($$atom 2.))
               (if (($$atom <) ($$atom -2.) ($$atom y0))
                   (($$atom set-car!)
                    ($$atom z0)
                    (($$atom NYItruncate)
                     (($$atom NYIinexact->exact)
                      (($$atom *)
                       (($$atom car) ($$atom z0))
                       ($$atom 4.503599627370496e15)))))
                   (begin
                     (($$atom set-car!) ($$atom z0) ($$atom flonum--m-min))
                     (($$atom set-cdr!) ($$atom z0) ($$atom 1024))))
               (begin
                 (($$atom set-car!) ($$atom z0) ($$atom 4503599627370496))
                 (($$atom set-cdr!) ($$atom z0) ($$atom 1024))))
           (($$atom set-cdr!)
            ($$atom z0)
            (($$atom -) (($$atom cdr) ($$atom z0)) ($$atom 52)))
           ($$atom z0))))))
 (define flonum->bits
   (lambda (x0)
     (let ((bits0 (lambda (a0 b0)
                    (if (($$atom <) ($$atom a0) ($$atom 4503599627370496))
                        ($$atom a0)
                        (($$atom +)
                         (($$atom -) ($$atom a0) ($$atom 4503599627370496))
                         (($$atom *)
                          (($$atom +)
                           (($$atom +) ($$atom b0) ($$atom 52))
                           ($$atom 1023))
                          ($$atom 4503599627370496)))))))
       (let ((z0 (($$atom flonum->exact-exponential-format) ($$atom x0))))
         (let ((b0 (($$atom cdr) ($$atom z0))) (a0 (($$atom car) ($$atom z0))))
           (if (($$atom negative?) ($$atom a0))
               (($$atom +)
                ($$atom 9223372036854775808)
                (($$atom bits0)
                 (($$atom -) ($$atom 0) ($$atom a0))
                 ($$atom b0)))
               (($$atom bits0) ($$atom a0) ($$atom b0))))))))
 (define flonum-m-bits ($$atom 52))
 (define flonum-e-bits ($$atom 11))
 (define flonum-sign-bit ($$atom 9223372036854775808))
 (define flonum-+m-min ($$atom 4503599627370496))
 (define flonum-e-bias ($$atom 1023))
 (define flonum-e-bias-plus-1 ($$atom 1024))
 (define flonum-e-bias-minus-1 ($$atom 1022))
 (define inexact-m-min ($$atom 4.503599627370496e15))
 (define inexact-+2 ($$atom 2.))
 (define inexact--2 ($$atom -2.))
 (define inexact-+1 ($$atom 1.))
 (define inexact-+1/2 ($$atom .5))
 (define inexact-0 ($$atom 0.))
 (define dump-bignum
   (lambda (x0)
     (letrec ((integer->digits0
               (lambda (n0)
                 (if (($$atom =) ($$atom n0) ($$atom 0))
                     ($$atom '())
                     (($$atom cons)
                      (($$atom remainder) ($$atom n0) ($$atom 16384))
                      (($$atom integer->digits0)
                       (($$atom quotient) ($$atom n0) ($$atom 16384)))))))
              (radix0 ($$atom 16384)))
       (let ((l0 (($$atom integer->digits0) (($$atom abs) ($$atom x0)))))
         (begin
           (let ((x1 (($$atom +)
                      (($$atom *)
                       (($$atom +) (($$atom length) ($$atom l0)) ($$atom 1))
                       ($$atom 512))
                      ($$atom 136))))
             (begin
               (($$atom ofile-word) (($$atom upper-16bits) ($$atom x1)))
               (($$atom ofile-word) ($$atom x1))))
           (if (($$atom <) ($$atom x0) ($$atom 0))
               (($$atom ofile-word) ($$atom 0))
               (($$atom ofile-word) ($$atom 1)))
           (($$atom for-each) ($$atom ofile-word) ($$atom l0)))))))
 (define dump-procedure
   (lambda (proc0)
     (let ((bbs0 (($$atom vector-ref) ($$atom proc0) ($$atom 3))))
       (begin
         (set! entry-lbl-num (($$atom vector-ref) ($$atom bbs0) ($$atom 2)))
         (set! label-counter (($$atom vector-ref) ($$atom bbs0) ($$atom 0)))
         (set! var-descr-queue (($$atom queue-empty)))
         (set! first-class-label-queue (($$atom queue-empty)))
         (set! deferred-code-queue (($$atom queue-empty)))
         (if ($$atom *info-port*)
             (begin
               (($$atom display) ($$atom "  #[") ($$atom *info-port*))
               (if (($$atom vector-ref) ($$atom proc0) ($$atom 2))
                   (($$atom display)
                    ($$atom "primitive ")
                    ($$atom *info-port*))
                   (($$atom display)
                    ($$atom "procedure ")
                    ($$atom *info-port*)))
               (($$atom display)
                (($$atom vector-ref) ($$atom proc0) ($$atom 1))
                ($$atom *info-port*))
               (($$atom display) ($$atom "]") ($$atom *info-port*)))
             ($$atom #f))
         (if (($$atom vector-ref) ($$atom proc0) ($$atom 2))
             (($$atom ofile-prim-proc)
              (($$atom vector-ref) ($$atom proc0) ($$atom 1)))
             (($$atom ofile-user-proc)))
         (($$atom asm.begin!))
         (letrec ((loop0 (lambda (prev-bb0 prev-gvm-instr0 l0)
                           (if (($$atom null?) ($$atom l0))
                               ($$atom #f)
                               (let ((next-gvm-instr0
                                      (if (($$atom null?)
                                           (($$atom cdr) ($$atom l0)))
                                          ($$atom #f)
                                          (let ((code0 (($$atom car)
                                                        (($$atom cdr)
                                                         ($$atom l0)))))
                                            (($$atom vector-ref)
                                             ($$atom code0)
                                             ($$atom 1)))))
                                     (pres-slots-needed0
                                      (let ((code0 (($$atom car) ($$atom l0))))
                                        (($$atom vector-ref)
                                         ($$atom code0)
                                         ($$atom 2))))
                                     (pres-gvm-instr0
                                      (let ((code0 (($$atom car) ($$atom l0))))
                                        (($$atom vector-ref)
                                         ($$atom code0)
                                         ($$atom 1))))
                                     (pres-bb0
                                      (let ((code0 (($$atom car) ($$atom l0))))
                                        (($$atom vector-ref)
                                         ($$atom code0)
                                         ($$atom 0)))))
                                 (begin
                                   (if ($$atom ofile-asm?)
                                       (let ((x0 (($$atom car) ($$atom l0))))
                                         (($$atom queue-put!)
                                          ($$atom asm-code-queue)
                                          (($$atom cons)
                                           ($$atom 'comment)
                                           ($$atom x0))))
                                       ($$atom #f))
                                   (($$atom gen-gvm-instr)
                                    ($$atom prev-gvm-instr0)
                                    ($$atom pres-gvm-instr0)
                                    ($$atom next-gvm-instr0)
                                    ($$atom pres-slots-needed0))
                                   (($$atom loop0)
                                    ($$atom pres-bb0)
                                    ($$atom pres-gvm-instr0)
                                    (($$atom cdr) ($$atom l0)))))))))
           (($$atom loop0)
            ($$atom #f)
            ($$atom #f)
            (($$atom bbs->code-list) ($$atom bbs0))))
         (let ((debug-info0
                (if ($$atom debug-info?)
                    (($$atom vector)
                     (($$atom lst->vector)
                      (let ((queue0 ($$atom first-class-label-queue)))
                        (($$atom car) ($$atom queue0))))
                     (($$atom lst->vector)
                      (let ((queue0 ($$atom var-descr-queue)))
                        (($$atom car) ($$atom queue0)))))
                    ($$atom #f))))
           (begin
             (($$atom asm-assemble!) ($$atom debug-info0))
             (set! asm-code-queue ($$atom '()))
             (set! asm-const-queue ($$atom '()))
             ($$atom '())))
         (if ($$atom *info-port*)
             (($$atom newline) ($$atom *info-port*))
             ($$atom #f))
         (set! var-descr-queue ($$atom '()))
         (set! first-class-label-queue ($$atom '()))
         (set! deferred-code-queue ($$atom '()))
         (set! instr-source ($$atom '()))
         (set! entry-frame ($$atom '()))
         (set! exit-frame ($$atom '()))))))
 (define label-counter (lambda () ($$atom 0)))
 (define entry-lbl-num ($$atom '()))
 (define var-descr-queue ($$atom '()))
 (define first-class-label-queue ($$atom '()))
 (define deferred-code-queue ($$atom '()))
 (define instr-source ($$atom '()))
 (define entry-frame ($$atom '()))
 (define exit-frame ($$atom '()))
 (define defer-code!
   (lambda (thunk0)
     (($$atom queue-put!) ($$atom deferred-code-queue) ($$atom thunk0))))
 (define gen-deferred-code!
   (lambda ()
     (letrec ((loop0 (lambda ()
                       (if (($$atom queue-empty?) ($$atom deferred-code-queue))
                           ($$atom #f)
                           (let ((thunk0 (($$atom queue-get!)
                                          ($$atom deferred-code-queue))))
                             (begin (($$atom thunk0)) (($$atom loop0))))))))
       (($$atom loop0)))))
 (define add-var-descr!
   (lambda (descr0)
     (let ((n0 (let ((l0 (let ((queue0 ($$atom var-descr-queue)))
                           (($$atom car) ($$atom queue0)))))
                 (letrec ((loop0 (lambda (descr1 l1 i0)
                                   (if (($$atom pair?) ($$atom l1))
                                       (if (($$atom equal?)
                                            (($$atom car) ($$atom l1))
                                            ($$atom descr1))
                                           ($$atom i0)
                                           (($$atom loop0)
                                            ($$atom descr1)
                                            (($$atom cdr) ($$atom l1))
                                            (($$atom +)
                                             ($$atom i0)
                                             ($$atom 1))))
                                       ($$atom #f)))))
                   (($$atom loop0) ($$atom descr0) ($$atom l0) ($$atom 0))))))
       (if ($$atom n0)
           ($$atom n0)
           (let ((m0 (($$atom length)
                      (let ((queue0 ($$atom var-descr-queue)))
                        (($$atom car) ($$atom queue0))))))
             (begin
               (($$atom queue-put!) ($$atom var-descr-queue) ($$atom descr0))
               ($$atom m0)))))))
 (define add-first-class-label!
   (lambda (source0 slots0 frame0)
     (letrec ((loop0 (lambda (source1 frame1 i0 l10 l20)
                       (if (($$atom pair?) ($$atom l10))
                           (let ((var0 (($$atom car) ($$atom l10))))
                             (let ((x0 (($$atom frame-live?)
                                        ($$atom var0)
                                        ($$atom frame1))))
                               (if (if ($$atom x0)
                                       (let ((g2660 (($$atom pair?)
                                                     ($$atom x0))))
                                         (if ($$atom g2660)
                                             ($$atom g2660)
                                             (($$atom not)
                                              (($$atom temp-var?)
                                               ($$atom x0)))))
                                       ($$atom #f))
                                   (let ((descr-index0
                                          (($$atom add-var-descr!)
                                           (if (($$atom pair?) ($$atom x0))
                                               (($$atom map)
                                                (lambda (y0)
                                                  (($$atom add-var-descr!)
                                                   (($$atom vector-ref)
                                                    ($$atom y0)
                                                    ($$atom 1))))
                                                ($$atom x0))
                                               (($$atom vector-ref)
                                                ($$atom x0)
                                                ($$atom 1))))))
                                     (($$atom loop0)
                                      ($$atom source1)
                                      ($$atom frame1)
                                      (($$atom +) ($$atom i0) ($$atom 1))
                                      (($$atom cdr) ($$atom l10))
                                      (($$atom cons)
                                       (($$atom +)
                                        (($$atom *) ($$atom i0) ($$atom 16384))
                                        ($$atom descr-index0))
                                       ($$atom l20))))
                                   (($$atom loop0)
                                    ($$atom source1)
                                    ($$atom frame1)
                                    (($$atom +) ($$atom i0) ($$atom 1))
                                    (($$atom cdr) ($$atom l10))
                                    ($$atom l20)))))
                           (let ((label-descr0
                                  (($$atom lst->vector)
                                   (($$atom cons)
                                    ($$atom 0)
                                    (($$atom cons)
                                     ($$atom source1)
                                     ($$atom l20))))))
                             (begin
                               (($$atom queue-put!)
                                ($$atom first-class-label-queue)
                                ($$atom label-descr0))
                               ($$atom label-descr0)))))))
       (($$atom loop0)
        ($$atom source0)
        ($$atom frame0)
        ($$atom 0)
        ($$atom slots0)
        ($$atom '())))))
 (define gen-gvm-instr
   (lambda (prev-gvm-instr0 gvm-instr0 next-gvm-instr0 sn0)
     (begin
       (set! instr-source
             (($$atom comment-get)
              (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 2))
              ($$atom 'source)))
       (set! exit-frame (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 1)))
       (set! entry-frame
             (if ($$atom prev-gvm-instr0)
                 (($$atom vector-ref) ($$atom prev-gvm-instr0) ($$atom 1))
                 ($$atom #f)))
       (let ((case-temp.11170
              (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 0))))
         (if (let ((g2670 ($$atom 'label)))
               (if (($$atom number?) ($$atom case-temp.11170))
                   (if (($$atom number?) ($$atom g2670))
                       (($$atom =) ($$atom case-temp.11170) ($$atom g2670))
                       ($$atom #f))
                   (($$atom eq?) ($$atom case-temp.11170) ($$atom g2670))))
             (begin
               (set! entry-frame ($$atom exit-frame))
               (set! current-fs
                     (let ((x0 ($$atom exit-frame)))
                       (($$atom vector-ref) ($$atom x0) ($$atom 0))))
               (let ((case-temp.11180
                      (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 4))))
                 (if (let ((g2680 ($$atom 'simple)))
                       (if (($$atom number?) ($$atom case-temp.11180))
                           (if (($$atom number?) ($$atom g2680))
                               (($$atom =)
                                ($$atom case-temp.11180)
                                ($$atom g2680))
                               ($$atom #f))
                           (($$atom eq?)
                            ($$atom case-temp.11180)
                            ($$atom g2680))))
                     (($$atom gen-label-simple)
                      (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 3))
                      ($$atom sn0))
                     (if (let ((g2690 ($$atom 'entry)))
                           (if (($$atom number?) ($$atom case-temp.11180))
                               (if (($$atom number?) ($$atom g2690))
                                   (($$atom =)
                                    ($$atom case-temp.11180)
                                    ($$atom g2690))
                                   ($$atom #f))
                               (($$atom eq?)
                                ($$atom case-temp.11180)
                                ($$atom g2690))))
                         (($$atom gen-label-entry)
                          (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 3))
                          (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 5))
                          (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 6))
                          (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 7))
                          (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 8))
                          ($$atom sn0))
                         (if (let ((g2700 ($$atom 'return)))
                               (if (($$atom number?) ($$atom case-temp.11180))
                                   (if (($$atom number?) ($$atom g2700))
                                       (($$atom =)
                                        ($$atom case-temp.11180)
                                        ($$atom g2700))
                                       ($$atom #f))
                                   (($$atom eq?)
                                    ($$atom case-temp.11180)
                                    ($$atom g2700))))
                             (($$atom gen-label-return)
                              (($$atom vector-ref)
                               ($$atom gvm-instr0)
                               ($$atom 3))
                              ($$atom sn0))
                             (if (let ((g2710 ($$atom 'task-entry)))
                                   (if (($$atom number?)
                                        ($$atom case-temp.11180))
                                       (if (($$atom number?) ($$atom g2710))
                                           (($$atom =)
                                            ($$atom case-temp.11180)
                                            ($$atom g2710))
                                           ($$atom #f))
                                       (($$atom eq?)
                                        ($$atom case-temp.11180)
                                        ($$atom g2710))))
                                 (($$atom gen-label-task-entry)
                                  (($$atom vector-ref)
                                   ($$atom gvm-instr0)
                                   ($$atom 3))
                                  ($$atom sn0))
                                 (if (let ((g2720 ($$atom 'task-return)))
                                       (if (($$atom number?)
                                            ($$atom case-temp.11180))
                                           (if (($$atom number?)
                                                ($$atom g2720))
                                               (($$atom =)
                                                ($$atom case-temp.11180)
                                                ($$atom g2720))
                                               ($$atom #f))
                                           (($$atom eq?)
                                            ($$atom case-temp.11180)
                                            ($$atom g2720))))
                                     (($$atom gen-label-task-return)
                                      (($$atom vector-ref)
                                       ($$atom gvm-instr0)
                                       ($$atom 3))
                                      ($$atom sn0))
                                     (($$atom compiler-internal-error)
                                      ($$atom "gen-gvm-instr, unknown label type")))))))))
             (if (let ((g2730 ($$atom 'apply)))
                   (if (($$atom number?) ($$atom case-temp.11170))
                       (if (($$atom number?) ($$atom g2730))
                           (($$atom =) ($$atom case-temp.11170) ($$atom g2730))
                           ($$atom #f))
                       (($$atom eq?) ($$atom case-temp.11170) ($$atom g2730))))
                 (($$atom gen-apply)
                  (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 3))
                  (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 4))
                  (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 5))
                  ($$atom sn0))
                 (if (let ((g2740 ($$atom 'copy)))
                       (if (($$atom number?) ($$atom case-temp.11170))
                           (if (($$atom number?) ($$atom g2740))
                               (($$atom =)
                                ($$atom case-temp.11170)
                                ($$atom g2740))
                               ($$atom #f))
                           (($$atom eq?)
                            ($$atom case-temp.11170)
                            ($$atom g2740))))
                     (($$atom gen-copy)
                      (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 3))
                      (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 4))
                      ($$atom sn0))
                     (if (let ((g2750 ($$atom 'close)))
                           (if (($$atom number?) ($$atom case-temp.11170))
                               (if (($$atom number?) ($$atom g2750))
                                   (($$atom =)
                                    ($$atom case-temp.11170)
                                    ($$atom g2750))
                                   ($$atom #f))
                               (($$atom eq?)
                                ($$atom case-temp.11170)
                                ($$atom g2750))))
                         (($$atom gen-close)
                          (($$atom vector-ref) ($$atom gvm-instr0) ($$atom 3))
                          ($$atom sn0))
                         (if (let ((g2760 ($$atom 'ifjump)))
                               (if (($$atom number?) ($$atom case-temp.11170))
                                   (if (($$atom number?) ($$atom g2760))
                                       (($$atom =)
                                        ($$atom case-temp.11170)
                                        ($$atom g2760))
                                       ($$atom #f))
                                   (($$atom eq?)
                                    ($$atom case-temp.11170)
                                    ($$atom g2760))))
                             (($$atom gen-ifjump)
                              (($$atom vector-ref)
                               ($$atom gvm-instr0)
                               ($$atom 3))
                              (($$atom vector-ref)
                               ($$atom gvm-instr0)
                               ($$atom 4))
                              (($$atom vector-ref)
                               ($$atom gvm-instr0)
                               ($$atom 5))
                              (($$atom vector-ref)
                               ($$atom gvm-instr0)
                               ($$atom 6))
                              (($$atom vector-ref)
                               ($$atom gvm-instr0)
                               ($$atom 7))
                              (if (if ($$atom next-gvm-instr0)
                                      (($$atom memq)
                                       (($$atom vector-ref)
                                        ($$atom next-gvm-instr0)
                                        ($$atom 4))
                                       ($$atom '(simple task-entry)))
                                      ($$atom #f))
                                  (($$atom vector-ref)
                                   ($$atom next-gvm-instr0)
                                   ($$atom 3))
                                  ($$atom #f)))
                             (if (let ((g2770 ($$atom 'jump)))
                                   (if (($$atom number?)
                                        ($$atom case-temp.11170))
                                       (if (($$atom number?) ($$atom g2770))
                                           (($$atom =)
                                            ($$atom case-temp.11170)
                                            ($$atom g2770))
                                           ($$atom #f))
                                       (($$atom eq?)
                                        ($$atom case-temp.11170)
                                        ($$atom g2770))))
                                 (($$atom gen-jump)
                                  (($$atom vector-ref)
                                   ($$atom gvm-instr0)
                                   ($$atom 3))
                                  (($$atom vector-ref)
                                   ($$atom gvm-instr0)
                                   ($$atom 4))
                                  (($$atom vector-ref)
                                   ($$atom gvm-instr0)
                                   ($$atom 5))
                                  (if (if ($$atom next-gvm-instr0)
                                          (($$atom memq)
                                           (($$atom vector-ref)
                                            ($$atom next-gvm-instr0)
                                            ($$atom 4))
                                           ($$atom '(simple task-entry)))
                                          ($$atom #f))
                                      (($$atom vector-ref)
                                       ($$atom next-gvm-instr0)
                                       ($$atom 3))
                                      ($$atom #f)))
                                 (($$atom compiler-internal-error)
                                  ($$atom "gen-gvm-instr, unknown 'gvm-instr':")
                                  ($$atom gvm-instr0))))))))))))
 (define reg-in-opnd68
   (lambda (opnd0)
     (if (($$atom dreg?) ($$atom opnd0))
         ($$atom opnd0)
         (if (($$atom areg?) ($$atom opnd0))
             ($$atom opnd0)
             (if (($$atom ind?) ($$atom opnd0))
                 (($$atom -) ($$atom opnd0) ($$atom 8))
                 (if (($$atom pinc?) ($$atom opnd0))
                     (($$atom -) ($$atom opnd0) ($$atom 16))
                     (if (($$atom pdec?) ($$atom opnd0))
                         (($$atom -) ($$atom opnd0) ($$atom 24))
                         (if (($$atom disp?) ($$atom opnd0))
                             (($$atom disp-areg) ($$atom opnd0))
                             (if (($$atom inx?) ($$atom opnd0))
                                 (($$atom inx-ireg) ($$atom opnd0))
                                 ($$atom #f))))))))))
 (define temp-in-opnd68
   (lambda (opnd0)
     (let ((reg0 (($$atom reg-in-opnd68) ($$atom opnd0))))
       (if ($$atom reg0)
           (if (if (($$atom number?) ($$atom reg0))
                   (if (($$atom number?) ($$atom 0))
                       (($$atom =) ($$atom reg0) ($$atom 0))
                       ($$atom #f))
                   (($$atom eq?) ($$atom reg0) ($$atom 0)))
               ($$atom reg0)
               (if (if (($$atom number?) ($$atom reg0))
                       (if (($$atom number?) ($$atom 9))
                           (($$atom =) ($$atom reg0) ($$atom 9))
                           ($$atom #f))
                       (($$atom eq?) ($$atom reg0) ($$atom 9)))
                   ($$atom reg0)
                   (if (if (($$atom number?) ($$atom reg0))
                           (if (($$atom number?) ($$atom 10))
                               (($$atom =) ($$atom reg0) ($$atom 10))
                               ($$atom #f))
                           (($$atom eq?) ($$atom reg0) ($$atom 10)))
                       ($$atom reg0)
                       ($$atom #f))))
           ($$atom #f)))))
 (define pick-atemp
   (lambda (keep0)
     (if (if ($$atom keep0)
             (if (($$atom number?) ($$atom keep0))
                 (if (($$atom number?) ($$atom 9))
                     (($$atom =) ($$atom keep0) ($$atom 9))
                     ($$atom #f))
                 (($$atom eq?) ($$atom keep0) ($$atom 9)))
             ($$atom #f))
         ($$atom 10)
         ($$atom 9))))
 (define return-reg ($$atom '()))
 (define max-nb-args ($$atom 1024))
 (define heap-allocation-fudge ($$atom 12288))
 (define intr-flag ($$atom 0))
 (define ltq-tail ($$atom 1))
 (define ltq-head ($$atom 2))
 (define heap-lim ($$atom 12))
 (define closure-lim ($$atom 17))
 (define closure-ptr ($$atom 18))
 (define intr-flag-slot (($$atom make-disp*) ($$atom 13) ($$atom 0)))
 (define ltq-tail-slot (($$atom make-disp*) ($$atom 13) ($$atom 4)))
 (define ltq-head-slot (($$atom make-disp*) ($$atom 13) ($$atom 8)))
 (define heap-lim-slot (($$atom make-disp*) ($$atom 13) ($$atom 48)))
 (define closure-lim-slot (($$atom make-disp*) ($$atom 13) ($$atom 68)))
 (define closure-ptr-slot (($$atom make-disp*) ($$atom 13) ($$atom 72)))
 (define touch-trap ($$atom 1))
 (define non-proc-jump-trap ($$atom 6))
 (define rest-params-trap ($$atom 7))
 (define rest-params-closed-trap ($$atom 8))
 (define wrong-nb-arg1-trap ($$atom 9))
 (define wrong-nb-arg1-closed-trap ($$atom 10))
 (define wrong-nb-arg2-trap ($$atom 11))
 (define wrong-nb-arg2-closed-trap ($$atom 12))
 (define heap-alloc1-trap ($$atom 13))
 (define heap-alloc2-trap ($$atom 14))
 (define closure-alloc-trap ($$atom 15))
 (define intr-trap ($$atom 24))
 (define cache-line-length ($$atom 16))
 (define polling-intermittency ($$atom '()))
 (set! polling-intermittency ($$atom 10))
 (define stat-clear!
   (lambda () (set! *stats* (($$atom cons) ($$atom 0) ($$atom '())))))
 (define stat-dump!
   (lambda () (($$atom emit-stat) (($$atom cdr) ($$atom *stats*)))))
 (define stat-add!
   (lambda (bin0 count0)
     (letrec ((add!0 (lambda (stats0 bin1 count1)
                       (begin
                         (($$atom set-car!)
                          ($$atom stats0)
                          (($$atom +)
                           (($$atom car) ($$atom stats0))
                           ($$atom count1)))
                         (if (($$atom null?) ($$atom bin1))
                             ($$atom #f)
                             (let ((x0 (($$atom assoc)
                                        (($$atom car) ($$atom bin1))
                                        (($$atom cdr) ($$atom stats0)))))
                               (if ($$atom x0)
                                   (($$atom add!0)
                                    (($$atom cdr) ($$atom x0))
                                    (($$atom cdr) ($$atom bin1))
                                    ($$atom count1))
                                   (begin
                                     (($$atom set-cdr!)
                                      ($$atom stats0)
                                      (($$atom cons)
                                       (($$atom list)
                                        (($$atom car) ($$atom bin1))
                                        ($$atom 0))
                                       (($$atom cdr) ($$atom stats0))))
                                     (($$atom add!0)
                                      (($$atom cdadr)
                                       ($$atom stats0))
                                      (($$atom cdr) ($$atom bin1))
                                      ($$atom count1))))))))))
       (($$atom add!0) ($$atom *stats*) ($$atom bin0) ($$atom count0)))))
 (define fetch-stat-add!
   (lambda (gvm-opnd0)
     (($$atom opnd-stat-add!) ($$atom 'fetch) ($$atom gvm-opnd0))))
 (define store-stat-add!
   (lambda (gvm-opnd0)
     (($$atom opnd-stat-add!) ($$atom 'store) ($$atom gvm-opnd0))))
 (define jump-stat-add!
   (lambda (gvm-opnd0)
     (($$atom opnd-stat-add!) ($$atom 'jump) ($$atom gvm-opnd0))))
 (define opnd-stat-add!
   (lambda (type0 opnd0)
     (if (($$atom <) ($$atom opnd0) ($$atom 10000))
         (($$atom stat-add!)
          (($$atom list)
           ($$atom 'gvm-opnd)
           ($$atom 'reg)
           ($$atom type0)
           (($$atom modulo) ($$atom opnd0) ($$atom 10000)))
          ($$atom 1))
         (if (($$atom stk?) ($$atom opnd0))
             (($$atom stat-add!)
              (($$atom list) ($$atom 'gvm-opnd) ($$atom 'stk) ($$atom type0))
              ($$atom 1))
             (if (($$atom glo?) ($$atom opnd0))
                 (($$atom stat-add!)
                  (($$atom list)
                   ($$atom 'gvm-opnd)
                   ($$atom 'glo)
                   ($$atom type0)
                   (($$atom glo-name) ($$atom opnd0)))
                  ($$atom 1))
                 (if (($$atom clo?) ($$atom opnd0))
                     (begin
                       (($$atom stat-add!)
                        (($$atom list)
                         ($$atom 'gvm-opnd)
                         ($$atom 'clo)
                         ($$atom type0))
                        ($$atom 1))
                       (let ((gvm-opnd0 (($$atom clo-base) ($$atom opnd0))))
                         (($$atom opnd-stat-add!)
                          ($$atom 'fetch)
                          ($$atom gvm-opnd0))))
                     (if (($$atom lbl?) ($$atom opnd0))
                         (($$atom stat-add!)
                          (($$atom list)
                           ($$atom 'gvm-opnd)
                           ($$atom 'lbl)
                           ($$atom type0))
                          ($$atom 1))
                         (if (($$atom obj?) ($$atom opnd0))
                             (let ((val0 (($$atom obj-val) ($$atom opnd0))))
                               (if (($$atom number?) ($$atom val0))
                                   (($$atom stat-add!)
                                    (($$atom list)
                                     ($$atom 'gvm-opnd)
                                     ($$atom 'obj)
                                     ($$atom type0)
                                     ($$atom val0))
                                    ($$atom 1))
                                   (($$atom stat-add!)
                                    (($$atom list)
                                     ($$atom 'gvm-opnd)
                                     ($$atom 'obj)
                                     ($$atom type0)
                                     (($$atom obj-type) ($$atom val0)))
                                    ($$atom 1))))
                             (($$atom compiler-internal-error)
                              ($$atom "opnd-stat-add!, unknown 'opnd':")
                              ($$atom opnd0))))))))))
 (define opnd-stat
   (lambda (opnd0)
     (if (($$atom <) ($$atom opnd0) ($$atom 10000))
         ($$atom 'reg)
         (if (($$atom stk?) ($$atom opnd0))
             ($$atom 'stk)
             (if (($$atom glo?) ($$atom opnd0))
                 ($$atom 'glo)
                 (if (($$atom clo?) ($$atom opnd0))
                     ($$atom 'clo)
                     (if (($$atom lbl?) ($$atom opnd0))
                         ($$atom 'lbl)
                         (if (($$atom obj?) ($$atom opnd0))
                             ($$atom 'obj)
                             (($$atom compiler-internal-error)
                              ($$atom "opnd-stat, unknown 'opnd':")
                              ($$atom opnd0))))))))))
 (define *stats* ($$atom '()))
 (define move-opnd68-to-loc68
   (lambda (opnd0 loc0)
     (if (if (($$atom number?) ($$atom opnd0))
             (if (($$atom number?) ($$atom loc0))
                 (($$atom =) ($$atom opnd0) ($$atom loc0))
                 ($$atom #f))
             (($$atom eq?) ($$atom opnd0) ($$atom loc0)))
         ($$atom #f)
         (if (($$atom imm?) ($$atom opnd0))
             (($$atom move-n-to-loc68)
              (($$atom imm-val) ($$atom opnd0))
              ($$atom loc0))
             (($$atom emit-move.l) ($$atom opnd0) ($$atom loc0))))))
 (define move-obj-to-loc68
   (lambda (obj0 loc0)
     (let ((n0 (($$atom obj-encoding) ($$atom obj0))))
       (if ($$atom n0)
           (($$atom move-n-to-loc68) ($$atom n0) ($$atom loc0))
           (($$atom emit-move.l)
            (($$atom emit-const) ($$atom obj0))
            ($$atom loc0))))))
 (define move-n-to-loc68
   (lambda (n0 loc0)
     (if (($$atom =) ($$atom n0) ($$atom bits-null))
         (($$atom emit-move.l) ($$atom 6) ($$atom loc0))
         (if (($$atom =) ($$atom n0) ($$atom bits-false))
             (($$atom emit-move.l) ($$atom 7) ($$atom loc0))
             (if (if (($$atom dreg?) ($$atom loc0))
                     (if (($$atom >=) ($$atom n0) ($$atom -128))
                         (($$atom <=) ($$atom n0) ($$atom 127))
                         ($$atom #f))
                     ($$atom #f))
                 (($$atom emit-moveq) ($$atom n0) ($$atom loc0))
                 (if (if (($$atom areg?) ($$atom loc0))
                         (if (($$atom >=) ($$atom n0) ($$atom -32768))
                             (($$atom <=) ($$atom n0) ($$atom 32767))
                             ($$atom #f))
                         ($$atom #f))
                     (($$atom emit-move.w)
                      (($$atom make-imm) ($$atom n0))
                      ($$atom loc0))
                     (if (if (if (($$atom number?) ($$atom loc0))
                                 (if (($$atom number?) ($$atom 39))
                                     (($$atom =) ($$atom loc0) ($$atom 39))
                                     ($$atom #f))
                                 (($$atom eq?) ($$atom loc0) ($$atom 39)))
                             (if (($$atom >=) ($$atom n0) ($$atom -32768))
                                 (($$atom <=) ($$atom n0) ($$atom 32767))
                                 ($$atom #f))
                             ($$atom #f))
                         (($$atom emit-pea*) ($$atom n0))
                         (if (($$atom =) ($$atom n0) ($$atom 0))
                             (($$atom emit-clr.l) ($$atom loc0))
                             (if (if (if (($$atom inx?) ($$atom loc0))
                                         (($$atom =)
                                          (($$atom inx-ireg) ($$atom loc0))
                                          ($$atom 0))
                                         ($$atom #f))
                                     ($$atom #f)
                                     (if (($$atom >=)
                                          ($$atom n0)
                                          ($$atom -128))
                                         (($$atom <=) ($$atom n0) ($$atom 127))
                                         ($$atom #f)))
                                 (begin
                                   (($$atom emit-moveq) ($$atom n0) ($$atom 0))
                                   (($$atom emit-move.l)
                                    ($$atom 0)
                                    ($$atom loc0)))
                                 (($$atom emit-move.l)
                                  (($$atom make-imm) ($$atom n0))
                                  ($$atom loc0)))))))))))
 (define add-n-to-loc68
   (lambda (n0 loc0)
     (if (($$atom =) ($$atom n0) ($$atom 0))
         ($$atom #f)
         (if (if (($$atom >=) ($$atom n0) ($$atom -8))
                 (($$atom <=) ($$atom n0) ($$atom 8))
                 ($$atom #f))
             (if (($$atom >) ($$atom n0) ($$atom 0))
                 (($$atom emit-addq.l) ($$atom n0) ($$atom loc0))
                 (($$atom emit-subq.l)
                  (($$atom *) ($$atom -1) ($$atom n0))
                  ($$atom loc0)))
             (if (if (($$atom areg?) ($$atom loc0))
                     (if (($$atom >=) ($$atom n0) ($$atom -32768))
                         (($$atom <=) ($$atom n0) ($$atom 32767))
                         ($$atom #f))
                     ($$atom #f))
                 (($$atom emit-lea)
                  (($$atom make-disp) ($$atom loc0) ($$atom n0))
                  ($$atom loc0))
                 (if (if (if (($$atom number?) ($$atom loc0))
                             (if (($$atom number?) ($$atom 0))
                                 (($$atom =) ($$atom loc0) ($$atom 0))
                                 ($$atom #f))
                             (($$atom eq?) ($$atom loc0) ($$atom 0)))
                         ($$atom #f)
                         (if (($$atom >=) ($$atom n0) ($$atom -128))
                             (($$atom <=) ($$atom n0) ($$atom 128))
                             ($$atom #f)))
                     (begin
                       (($$atom emit-moveq)
                        (($$atom *) ($$atom -1) (($$atom abs) ($$atom n0)))
                        ($$atom 0))
                       (if (($$atom >) ($$atom n0) ($$atom 0))
                           (($$atom emit-sub.l) ($$atom 0) ($$atom loc0))
                           (($$atom emit-add.l) ($$atom 0) ($$atom loc0))))
                     (($$atom emit-add.l)
                      (($$atom make-imm) ($$atom n0))
                      ($$atom loc0))))))))
 (define power-of-2
   (lambda (n0)
     (letrec ((loop0 (lambda (n1 i0 k0)
                       (if (($$atom =) ($$atom k0) ($$atom n1))
                           ($$atom i0)
                           (if (($$atom >) ($$atom k0) ($$atom n1))
                               ($$atom #f)
                               (($$atom loop0)
                                ($$atom n1)
                                (($$atom +) ($$atom i0) ($$atom 1))
                                (($$atom *) ($$atom k0) ($$atom 2))))))))
       (($$atom loop0) ($$atom n0) ($$atom 0) ($$atom 1)))))
 (define mul-n-to-reg68
   (lambda (n0 reg0)
     (if (($$atom =) ($$atom n0) ($$atom 0))
         (($$atom emit-moveq) ($$atom 0) ($$atom reg0))
         (let ((abs-n0 (($$atom abs) ($$atom n0))))
           (if (($$atom =) ($$atom abs-n0) ($$atom 1))
               (if (($$atom <) ($$atom n0) ($$atom 0))
                   (($$atom emit-neg.l) ($$atom reg0))
                   ($$atom #f))
               (let ((shift0 (($$atom power-of-2) ($$atom abs-n0))))
                 (if ($$atom shift0)
                     (let ((m0 (($$atom min) ($$atom shift0) ($$atom 32))))
                       (begin
                         (if (let ((g2780 (($$atom <=)
                                           ($$atom m0)
                                           ($$atom 8))))
                               (if ($$atom g2780)
                                   ($$atom g2780)
                                   (if (($$atom number?) ($$atom reg0))
                                       (if (($$atom number?) ($$atom 0))
                                           (($$atom =)
                                            ($$atom reg0)
                                            ($$atom 0))
                                           ($$atom #f))
                                       (($$atom eq?)
                                        ($$atom reg0)
                                        ($$atom 0)))))
                             (letrec ((loop0 (lambda (reg1 i0)
                                               (if (($$atom >)
                                                    ($$atom i0)
                                                    ($$atom 0))
                                                   (begin
                                                     (($$atom emit-asl.l)
                                                      (($$atom make-imm)
                                                       (($$atom min)
                                                        ($$atom i0)
                                                        ($$atom 8)))
                                                      ($$atom reg1))
                                                     (($$atom loop0)
                                                      ($$atom reg1)
                                                      (($$atom -)
                                                       ($$atom i0)
                                                       ($$atom 8))))
                                                   ($$atom #f)))))
                               (($$atom loop0) ($$atom reg0) ($$atom m0)))
                             (begin
                               (($$atom emit-moveq) ($$atom m0) ($$atom 0))
                               (($$atom emit-asl.l) ($$atom 0) ($$atom reg0))))
                         (if (($$atom <) ($$atom n0) ($$atom 0))
                             (($$atom emit-neg.l) ($$atom reg0))
                             ($$atom #f))))
                     (($$atom emit-muls.l)
                      (($$atom make-imm) ($$atom n0))
                      ($$atom reg0)))))))))
 (define div-n-to-reg68
   (lambda (n0 reg0)
     (let ((abs-n0 (($$atom abs) ($$atom n0))))
       (if (($$atom =) ($$atom abs-n0) ($$atom 1))
           (if (($$atom <) ($$atom n0) ($$atom 0))
               (($$atom emit-neg.l) ($$atom reg0))
               ($$atom #f))
           (let ((shift0 (($$atom power-of-2) ($$atom abs-n0))))
             (if ($$atom shift0)
                 (let ((lbl0 (($$atom label-counter)))
                       (m0 (($$atom min) ($$atom shift0) ($$atom 32))))
                   (begin
                     (($$atom emit-move.l) ($$atom reg0) ($$atom reg0))
                     (($$atom emit-bpl) ($$atom lbl0))
                     (($$atom add-n-to-loc68)
                      (($$atom *)
                       (($$atom -) ($$atom abs-n0) ($$atom 1))
                       ($$atom 8))
                      ($$atom reg0))
                     (($$atom emit-label) ($$atom lbl0))
                     (if (let ((g2790 (($$atom <=) ($$atom m0) ($$atom 8))))
                           (if ($$atom g2790)
                               ($$atom g2790)
                               (if (($$atom number?) ($$atom reg0))
                                   (if (($$atom number?) ($$atom 0))
                                       (($$atom =) ($$atom reg0) ($$atom 0))
                                       ($$atom #f))
                                   (($$atom eq?) ($$atom reg0) ($$atom 0)))))
                         (letrec ((loop0 (lambda (reg1 i0)
                                           (if (($$atom >)
                                                ($$atom i0)
                                                ($$atom 0))
                                               (begin
                                                 (($$atom emit-asr.l)
                                                  (($$atom make-imm)
                                                   (($$atom min)
                                                    ($$atom i0)
                                                    ($$atom 8)))
                                                  ($$atom reg1))
                                                 (($$atom loop0)
                                                  ($$atom reg1)
                                                  (($$atom -)
                                                   ($$atom i0)
                                                   ($$atom 8))))
                                               ($$atom #f)))))
                           (($$atom loop0) ($$atom reg0) ($$atom m0)))
                         (begin
                           (($$atom emit-moveq) ($$atom m0) ($$atom 0))
                           (($$atom emit-asr.l) ($$atom 0) ($$atom reg0))))
                     (if (($$atom <) ($$atom n0) ($$atom 0))
                         (($$atom emit-neg.l) ($$atom reg0))
                         ($$atom #f))))
                 (($$atom emit-divsl.l)
                  (($$atom make-imm) ($$atom n0))
                  ($$atom reg0)
                  ($$atom reg0))))))))
 (define cmp-n-to-opnd68
   (lambda (n0 opnd0)
     (if (($$atom =) ($$atom n0) ($$atom bits-null))
         (begin (($$atom emit-cmp.l) ($$atom opnd0) ($$atom 6)) ($$atom #f))
         (if (($$atom =) ($$atom n0) ($$atom bits-false))
             (begin
               (($$atom emit-cmp.l) ($$atom opnd0) ($$atom 7))
               ($$atom #f))
             (if (let ((g2800 (($$atom pcr?) ($$atom opnd0))))
                   (if ($$atom g2800)
                       ($$atom g2800)
                       (($$atom imm?) ($$atom opnd0))))
                 (if (($$atom =) ($$atom n0) ($$atom 0))
                     (begin
                       (($$atom emit-move.l) ($$atom opnd0) ($$atom 0))
                       ($$atom #t))
                     (begin
                       (($$atom move-opnd68-to-loc68)
                        ($$atom opnd0)
                        ($$atom 9))
                       (if (if (($$atom >=) ($$atom n0) ($$atom -32768))
                               (($$atom <=) ($$atom n0) ($$atom 32767))
                               ($$atom #f))
                           (($$atom emit-cmp.w)
                            (($$atom make-imm) ($$atom n0))
                            ($$atom 9))
                           (($$atom emit-cmp.l)
                            (($$atom make-imm) ($$atom n0))
                            ($$atom 9)))
                       ($$atom #t)))
                 (if (($$atom =) ($$atom n0) ($$atom 0))
                     (begin
                       (($$atom emit-move.l) ($$atom opnd0) ($$atom 0))
                       ($$atom #t))
                     (if (if (($$atom >=) ($$atom n0) ($$atom -128))
                             (if (($$atom <=) ($$atom n0) ($$atom 127))
                                 (($$atom not)
                                  (if (($$atom number?) ($$atom opnd0))
                                      (if (($$atom number?) ($$atom 0))
                                          (($$atom =)
                                           ($$atom opnd0)
                                           ($$atom 0))
                                          ($$atom #f))
                                      (($$atom eq?)
                                       ($$atom opnd0)
                                       ($$atom 0))))
                                 ($$atom #f))
                             ($$atom #f))
                         (begin
                           (($$atom emit-moveq) ($$atom n0) ($$atom 0))
                           (($$atom emit-cmp.l) ($$atom opnd0) ($$atom 0))
                           ($$atom #f))
                         (begin
                           (($$atom emit-cmp.l)
                            (($$atom make-imm) ($$atom n0))
                            ($$atom opnd0))
                           ($$atom #t)))))))))
 (define current-fs ($$atom '()))
 (define adjust-current-fs
   (lambda (n0)
     (set! current-fs (($$atom +) ($$atom current-fs) ($$atom n0)))))
 (define new-lbl! (lambda () (($$atom label-counter))))
 (define needed?
   (lambda (loc0 sn0)
     (if ($$atom loc0)
         (if (($$atom stk?) ($$atom loc0))
             (($$atom <=)
              (($$atom modulo) ($$atom loc0) ($$atom 10000))
              ($$atom sn0))
             ($$atom #t))
         ($$atom #f))))
 (define sn-opnd
   (lambda (opnd0 sn0)
     (if (($$atom stk?) ($$atom opnd0))
         (($$atom max)
          (($$atom modulo) ($$atom opnd0) ($$atom 10000))
          ($$atom sn0))
         (if (($$atom clo?) ($$atom opnd0))
             (($$atom sn-opnd) (($$atom clo-base) ($$atom opnd0)) ($$atom sn0))
             ($$atom sn0)))))
 (define sn-opnds
   (lambda (opnds0 sn0)
     (if (($$atom null?) ($$atom opnds0))
         ($$atom sn0)
         (($$atom sn-opnd)
          (($$atom car) ($$atom opnds0))
          (($$atom sn-opnds) (($$atom cdr) ($$atom opnds0)) ($$atom sn0))))))
 (define sn-opnd68
   (lambda (opnd0 sn0)
     (if (if (($$atom disp*?) ($$atom opnd0))
             (let ((opnd10 (($$atom disp*-areg) ($$atom opnd0))))
               (if (($$atom number?) ($$atom opnd10))
                   (if (($$atom number?) ($$atom 15))
                       (($$atom =) ($$atom opnd10) ($$atom 15))
                       ($$atom #f))
                   (($$atom eq?) ($$atom opnd10) ($$atom 15))))
             ($$atom #f))
         (($$atom max) (($$atom disp*-offset) ($$atom opnd0)) ($$atom sn0))
         (if (if (($$atom number?) ($$atom opnd0))
                 (if (($$atom number?) ($$atom 39))
                     (($$atom =) ($$atom opnd0) ($$atom 39))
                     ($$atom #f))
                 (($$atom eq?) ($$atom opnd0) ($$atom 39)))
             (($$atom max)
              (($$atom +) ($$atom current-fs) ($$atom 1))
              ($$atom sn0))
             (if (if (($$atom number?) ($$atom opnd0))
                     (if (($$atom number?) ($$atom 31))
                         (($$atom =) ($$atom opnd0) ($$atom 31))
                         ($$atom #f))
                     (($$atom eq?) ($$atom opnd0) ($$atom 31)))
                 (($$atom max) ($$atom current-fs) ($$atom sn0))
                 ($$atom sn0))))))
 (define resize-frame
   (lambda (n0)
     (let ((x0 (($$atom -) ($$atom n0) ($$atom current-fs))))
       (begin
         (($$atom adjust-current-fs) ($$atom x0))
         (($$atom add-n-to-loc68)
          (($$atom *) ($$atom -4) ($$atom x0))
          ($$atom 15))))))
 (define shrink-frame
   (lambda (n0)
     (if (($$atom <) ($$atom n0) ($$atom current-fs))
         (($$atom resize-frame) ($$atom n0))
         (if (($$atom >) ($$atom n0) ($$atom current-fs))
             (($$atom compiler-internal-error)
              ($$atom "shrink-frame, can't increase frame size"))
             ($$atom #f)))))
 (define make-top-of-frame
   (lambda (n0 sn0)
     (if (if (($$atom <) ($$atom n0) ($$atom current-fs))
             (($$atom >=) ($$atom n0) ($$atom sn0))
             ($$atom #f))
         (($$atom resize-frame) ($$atom n0))
         ($$atom #f))))
 (define make-top-of-frame-if-stk-opnd68
   (lambda (opnd0 sn0)
     (if (($$atom frame-base-rel?) ($$atom opnd0))
         (($$atom make-top-of-frame)
          (($$atom disp-offset) ($$atom opnd0))
          ($$atom sn0))
         ($$atom #f))))
 (define make-top-of-frame-if-stk-opnds68
   (lambda (opnd10 opnd20 sn0)
     (if (($$atom frame-base-rel?) ($$atom opnd10))
         (let ((slot10 (($$atom disp-offset) ($$atom opnd10))))
           (if (($$atom frame-base-rel?) ($$atom opnd20))
               (($$atom make-top-of-frame)
                (($$atom max)
                 (($$atom disp-offset) ($$atom opnd20))
                 ($$atom slot10))
                ($$atom sn0))
               (($$atom make-top-of-frame) ($$atom slot10) ($$atom sn0))))
         (if (($$atom frame-base-rel?) ($$atom opnd20))
             (($$atom make-top-of-frame)
              (($$atom disp-offset) ($$atom opnd20))
              ($$atom sn0))
             ($$atom #f)))))
 (define opnd68->true-opnd68
   (lambda (opnd0 sn0)
     (if (($$atom frame-base-rel?) ($$atom opnd0))
         (let ((slot0 (($$atom disp-offset) ($$atom opnd0))))
           (if (($$atom >) ($$atom slot0) ($$atom current-fs))
               (begin (($$atom adjust-current-fs) ($$atom 1)) ($$atom 39))
               (if (if (($$atom =) ($$atom slot0) ($$atom current-fs))
                       (($$atom <) ($$atom sn0) ($$atom current-fs))
                       ($$atom #f))
                   (begin (($$atom adjust-current-fs) ($$atom -1)) ($$atom 31))
                   (let ((offset0 (($$atom *)
                                   ($$atom 4)
                                   (($$atom -)
                                    ($$atom current-fs)
                                    ($$atom slot0)))))
                     (if (($$atom =) ($$atom offset0) ($$atom 0))
                         ($$atom 23)
                         (($$atom make-disp) ($$atom 15) ($$atom offset0)))))))
         ($$atom opnd0))))
 (define move-opnd68-to-any-areg
   (lambda (opnd0 keep0 sn0)
     (if (($$atom areg?) ($$atom opnd0))
         ($$atom opnd0)
         (let ((areg0 (($$atom pick-atemp) ($$atom keep0))))
           (begin
             (($$atom make-top-of-frame-if-stk-opnd68)
              ($$atom opnd0)
              ($$atom sn0))
             (($$atom move-opnd68-to-loc68)
              (($$atom opnd68->true-opnd68) ($$atom opnd0) ($$atom sn0))
              ($$atom areg0))
             ($$atom areg0))))))
 (define clo->opnd68
   (lambda (opnd0 keep0 sn0)
     (let ((offs0 (let ((i0 (($$atom clo-index) ($$atom opnd0))))
                    (($$atom +)
                     (($$atom *) ($$atom i0) ($$atom 4))
                     ($$atom 2))))
           (base0 (($$atom clo-base) ($$atom opnd0))))
       (if (($$atom lbl?) ($$atom base0))
           (($$atom make-pcr)
            (($$atom modulo) ($$atom base0) ($$atom 10000))
            ($$atom offs0))
           (($$atom clo->loc68) ($$atom opnd0) ($$atom keep0) ($$atom sn0))))))
 (define clo->loc68
   (lambda (opnd0 keep0 sn0)
     (let ((offs0 (let ((i0 (($$atom clo-index) ($$atom opnd0))))
                    (($$atom +)
                     (($$atom *) ($$atom i0) ($$atom 4))
                     ($$atom 2))))
           (base0 (($$atom clo-base) ($$atom opnd0))))
       (if (($$atom eq?) ($$atom base0) ($$atom return-reg))
           (($$atom make-disp*)
            (($$atom reg->reg68) ($$atom base0))
            ($$atom offs0))
           (if (($$atom obj?) ($$atom base0))
               (let ((areg0 (($$atom pick-atemp) ($$atom keep0))))
                 (begin
                   (($$atom move-obj-to-loc68)
                    (($$atom obj-val) ($$atom base0))
                    ($$atom areg0))
                   (($$atom make-disp*) ($$atom areg0) ($$atom offs0))))
               (let ((areg0 (($$atom pick-atemp) ($$atom keep0))))
                 (begin
                   (($$atom move-opnd-to-loc68)
                    ($$atom base0)
                    ($$atom areg0)
                    ($$atom sn0))
                   (($$atom make-disp*) ($$atom areg0) ($$atom offs0)))))))))
 (define reg->reg68
   (lambda (reg0)
     (($$atom reg-num->reg68) (($$atom modulo) ($$atom reg0) ($$atom 10000)))))
 (define reg-num->reg68
   (lambda (num0)
     (if (($$atom =) ($$atom num0) ($$atom 0))
         ($$atom 8)
         (let ((num1 (($$atom +)
                      (($$atom -) ($$atom num0) ($$atom 1))
                      ($$atom 1))))
           ($$atom num1)))))
 (define opnd->opnd68
   (lambda (opnd0 keep0 sn0)
     (if (($$atom lbl?) ($$atom opnd0))
         (let ((areg0 (($$atom pick-atemp) ($$atom keep0))))
           (begin
             (($$atom emit-lea)
              (($$atom make-pcr)
               (($$atom modulo) ($$atom opnd0) ($$atom 10000))
               ($$atom 0))
              ($$atom areg0))
             ($$atom areg0)))
         (if (($$atom obj?) ($$atom opnd0))
             (let ((val0 (($$atom obj-val) ($$atom opnd0))))
               (if (($$atom proc-obj?) ($$atom val0))
                   (let ((areg0 (($$atom pick-atemp) ($$atom keep0)))
                         (num0 (($$atom add-object) ($$atom val0))))
                     (begin
                       (if ($$atom num0)
                           (($$atom emit-move-proc)
                            ($$atom num0)
                            ($$atom areg0))
                           (($$atom emit-move-prim)
                            ($$atom val0)
                            ($$atom areg0)))
                       ($$atom areg0)))
                   (let ((n0 (($$atom obj-encoding) ($$atom val0))))
                     (if ($$atom n0)
                         (($$atom make-imm) ($$atom n0))
                         (($$atom emit-const) ($$atom val0))))))
             (if (($$atom clo?) ($$atom opnd0))
                 (($$atom clo->opnd68)
                  ($$atom opnd0)
                  ($$atom keep0)
                  ($$atom sn0))
                 (($$atom loc->loc68)
                  ($$atom opnd0)
                  ($$atom keep0)
                  ($$atom sn0)))))))
 (define loc->loc68
   (lambda (loc0 keep0 sn0)
     (if (($$atom <) ($$atom loc0) ($$atom 10000))
         (($$atom reg->reg68) ($$atom loc0))
         (if (($$atom stk?) ($$atom loc0))
             (let ((slot0 (($$atom stk-num) ($$atom loc0))))
               (($$atom make-disp) ($$atom 15) ($$atom slot0)))
             (if (($$atom glo?) ($$atom loc0))
                 (let ((name0 (($$atom glo-name) ($$atom loc0))))
                   ($$atom name0))
                 (if (($$atom clo?) ($$atom loc0))
                     (($$atom clo->loc68)
                      ($$atom loc0)
                      ($$atom keep0)
                      ($$atom sn0))
                     (($$atom compiler-internal-error)
                      ($$atom "loc->loc68, unknown 'loc':")
                      ($$atom loc0))))))))
 (define move-opnd68-to-loc
   (lambda (opnd0 loc0 sn0)
     (if (($$atom <) ($$atom loc0) ($$atom 10000))
         (begin
           (($$atom make-top-of-frame-if-stk-opnd68)
            ($$atom opnd0)
            ($$atom sn0))
           (($$atom move-opnd68-to-loc68)
            (($$atom opnd68->true-opnd68) ($$atom opnd0) ($$atom sn0))
            (($$atom reg->reg68) ($$atom loc0))))
         (if (($$atom stk?) ($$atom loc0))
             (let ((loc-slot0 (($$atom modulo) ($$atom loc0) ($$atom 10000))))
               (let ((sn-after-opnd10
                      (if (($$atom <) ($$atom loc-slot0) ($$atom sn0))
                          ($$atom sn0)
                          (($$atom -) ($$atom loc-slot0) ($$atom 1)))))
                 (begin
                   (if (($$atom >) ($$atom current-fs) ($$atom loc-slot0))
                       (let ((n0 (if (($$atom frame-base-rel?) ($$atom opnd0))
                                     (let ((opnd-slot0
                                            (($$atom frame-base-rel-slot)
                                             ($$atom opnd0))))
                                       (if (($$atom >=)
                                            ($$atom opnd-slot0)
                                            (($$atom -)
                                             ($$atom loc-slot0)
                                             ($$atom 1)))
                                           ($$atom opnd-slot0)
                                           ($$atom loc-slot0)))
                                     ($$atom loc-slot0))))
                         (if (if (($$atom <) ($$atom n0) ($$atom current-fs))
                                 (($$atom >=)
                                  ($$atom n0)
                                  ($$atom sn-after-opnd10))
                                 ($$atom #f))
                             (let ((x0 (($$atom -)
                                        ($$atom n0)
                                        ($$atom current-fs))))
                               (begin
                                 (($$atom adjust-current-fs) ($$atom x0))
                                 (($$atom add-n-to-loc68)
                                  (($$atom *) ($$atom -4) ($$atom x0))
                                  ($$atom 15))))
                             ($$atom #f)))
                       ($$atom #f))
                   (let ((opnd10 (($$atom opnd68->true-opnd68)
                                  ($$atom opnd0)
                                  ($$atom sn-after-opnd10))))
                     (let ((opnd20 (($$atom opnd68->true-opnd68)
                                    (($$atom make-disp)
                                     ($$atom 15)
                                     ($$atom loc-slot0))
                                    ($$atom sn0))))
                       (($$atom move-opnd68-to-loc68)
                        ($$atom opnd10)
                        ($$atom opnd20)))))))
             (if (($$atom glo?) ($$atom loc0))
                 (begin
                   (($$atom make-top-of-frame-if-stk-opnd68)
                    ($$atom opnd0)
                    ($$atom sn0))
                   (($$atom move-opnd68-to-loc68)
                    (($$atom opnd68->true-opnd68) ($$atom opnd0) ($$atom sn0))
                    (let ((name0 (($$atom glo-name) ($$atom loc0))))
                      ($$atom name0))))
                 (if (($$atom clo?) ($$atom loc0))
                     (let ((clo0 (($$atom clo->loc68)
                                  ($$atom loc0)
                                  (($$atom temp-in-opnd68) ($$atom opnd0))
                                  (($$atom sn-opnd68)
                                   ($$atom opnd0)
                                   ($$atom sn0)))))
                       (begin
                         (($$atom make-top-of-frame-if-stk-opnd68)
                          ($$atom opnd0)
                          ($$atom sn0))
                         (($$atom move-opnd68-to-loc68)
                          (($$atom opnd68->true-opnd68)
                           ($$atom opnd0)
                           ($$atom sn0))
                          ($$atom clo0))))
                     (($$atom compiler-internal-error)
                      ($$atom "move-opnd68-to-loc, unknown 'loc':")
                      ($$atom loc0))))))))
 (define move-opnd-to-loc68
   (lambda (opnd0 loc680 sn0)
     (if (if (($$atom lbl?) ($$atom opnd0))
             (($$atom areg?) ($$atom loc680))
             ($$atom #f))
         (($$atom emit-lea)
          (($$atom make-pcr)
           (($$atom modulo) ($$atom opnd0) ($$atom 10000))
           ($$atom 0))
          ($$atom loc680))
         (let ((sn-after-opnd680
                (($$atom sn-opnd68) ($$atom loc680) ($$atom sn0))))
           (let ((opnd680 (($$atom opnd->opnd68)
                           ($$atom opnd0)
                           (($$atom temp-in-opnd68) ($$atom loc680))
                           ($$atom sn-after-opnd680))))
             (begin
               (($$atom make-top-of-frame-if-stk-opnds68)
                ($$atom opnd680)
                ($$atom loc680)
                ($$atom sn0))
               (let ((opnd68*0
                      (($$atom opnd68->true-opnd68)
                       ($$atom opnd680)
                       ($$atom sn-after-opnd680))))
                 (let ((loc68*0 (($$atom opnd68->true-opnd68)
                                 ($$atom loc680)
                                 ($$atom sn0))))
                   (($$atom move-opnd68-to-loc68)
                    ($$atom opnd68*0)
                    ($$atom loc68*0))))))))))
 (define copy-opnd-to-loc
   (lambda (opnd0 loc0 sn0)
     (if (if (($$atom lbl?) ($$atom opnd0))
             (($$atom eq?) ($$atom loc0) ($$atom return-reg))
             ($$atom #f))
         (($$atom emit-lea)
          (($$atom make-pcr)
           (($$atom modulo) ($$atom opnd0) ($$atom 10000))
           ($$atom 0))
          (($$atom reg->reg68) ($$atom loc0)))
         (($$atom move-opnd68-to-loc)
          (($$atom opnd->opnd68)
           ($$atom opnd0)
           ($$atom #f)
           (($$atom sn-opnd) ($$atom loc0) ($$atom sn0)))
          ($$atom loc0)
          ($$atom sn0)))))
 (define touch-reg68-to-reg68
   (lambda (src0 dst0)
     (letrec ((touch-dreg-to-reg0
               (lambda (src1 dst1)
                 (let ((lbl10 (($$atom label-counter))))
                   (begin
                     (($$atom emit-btst) ($$atom src1) ($$atom 6))
                     (($$atom emit-bne) ($$atom lbl10))
                     (if ($$atom ofile-stats?)
                         (($$atom emit-stat)
                          ($$atom '((touch 0
                                           (non-placeholder -1)
                                           (determined-placeholder 1)))))
                         ($$atom #f))
                     (($$atom trap-to-touch-handler0)
                      ($$atom src1)
                      ($$atom lbl10))
                     (($$atom move-opnd68-to-loc68)
                      ($$atom src1)
                      ($$atom dst1))))))
              (trap-to-touch-handler0
               (lambda (dreg0 lbl0)
                 (begin
                   (if ($$atom ofile-stats?)
                       (($$atom emit-stat)
                        ($$atom '((touch 0
                                         (determined-placeholder -1)
                                         (undetermined-placeholder 1)))))
                       ($$atom #f))
                   (($$atom gen-trap)
                    ($$atom instr-source)
                    ($$atom entry-frame)
                    ($$atom #t)
                    ($$atom dreg0)
                    (($$atom +) ($$atom 1) ($$atom dreg0))
                    ($$atom lbl0))))))
       (begin
         (if ($$atom ofile-stats?)
             (($$atom emit-stat) ($$atom '((touch 1 (non-placeholder 1)))))
             ($$atom #f))
         (if (($$atom dreg?) ($$atom src0))
             (($$atom touch-dreg-to-reg0) ($$atom src0) ($$atom dst0))
             (if (($$atom dreg?) ($$atom dst0))
                 (let ((lbl10 (($$atom label-counter))))
                   (begin
                     (($$atom emit-move.l) ($$atom src0) ($$atom dst0))
                     (($$atom emit-btst) ($$atom dst0) ($$atom 6))
                     (($$atom emit-bne) ($$atom lbl10))
                     (if ($$atom ofile-stats?)
                         (($$atom emit-stat)
                          ($$atom '((touch 0
                                           (non-placeholder -1)
                                           (determined-placeholder 1)))))
                         ($$atom #f))
                     (($$atom trap-to-touch-handler0)
                      ($$atom dst0)
                      ($$atom lbl10))))
                 (begin
                   (($$atom emit-move.l) ($$atom src0) ($$atom 0))
                   (($$atom touch-dreg-to-reg0)
                    ($$atom 0)
                    ($$atom dst0)))))))))
 (define touch-opnd-to-any-reg68
   (lambda (opnd0 sn0)
     (if (($$atom <) ($$atom opnd0) ($$atom 10000))
         (let ((reg0 (($$atom reg->reg68) ($$atom opnd0))))
           (begin
             (($$atom touch-reg68-to-reg68) ($$atom reg0) ($$atom reg0))
             ($$atom reg0)))
         (let ((opnd680 (($$atom opnd->opnd68)
                         ($$atom opnd0)
                         ($$atom #f)
                         ($$atom sn0))))
           (begin
             (($$atom make-top-of-frame-if-stk-opnd68)
              ($$atom opnd680)
              ($$atom sn0))
             (($$atom move-opnd68-to-loc68)
              (($$atom opnd68->true-opnd68) ($$atom opnd680) ($$atom sn0))
              ($$atom 0))
             (($$atom touch-reg68-to-reg68) ($$atom 0) ($$atom 0))
             ($$atom 0))))))
 (define touch-opnd-to-loc
   (lambda (opnd0 loc0 sn0)
     (if (($$atom <) ($$atom opnd0) ($$atom 10000))
         (let ((reg680 (($$atom reg->reg68) ($$atom opnd0))))
           (if (($$atom <) ($$atom loc0) ($$atom 10000))
               (($$atom touch-reg68-to-reg68)
                ($$atom reg680)
                (($$atom reg->reg68) ($$atom loc0)))
               (begin
                 (($$atom touch-reg68-to-reg68)
                  ($$atom reg680)
                  ($$atom reg680))
                 (($$atom move-opnd68-to-loc)
                  ($$atom reg680)
                  ($$atom loc0)
                  ($$atom sn0)))))
         (if (($$atom <) ($$atom loc0) ($$atom 10000))
             (let ((reg680 (($$atom reg->reg68) ($$atom loc0))))
               (begin
                 (($$atom move-opnd-to-loc68)
                  ($$atom opnd0)
                  ($$atom reg680)
                  ($$atom sn0))
                 (($$atom touch-reg68-to-reg68)
                  ($$atom reg680)
                  ($$atom reg680))))
             (let ((reg680 (($$atom touch-opnd-to-any-reg68)
                            ($$atom opnd0)
                            ($$atom sn0))))
               (($$atom move-opnd68-to-loc)
                ($$atom reg680)
                ($$atom loc0)
                ($$atom sn0)))))))
 (define gen-trap
   (lambda (source0 frame0 save-live?0 not-save-reg0 num0 lbl0)
     (letrec ((adjust-slots0
               (lambda (l0 n0)
                 (if (($$atom =) ($$atom n0) ($$atom 0))
                     (($$atom ##append-two) ($$atom l0) ($$atom '()))
                     (if (($$atom <) ($$atom n0) ($$atom 0))
                         (($$atom adjust-slots0)
                          (($$atom cdr) ($$atom l0))
                          (($$atom +) ($$atom n0) ($$atom 1)))
                         (($$atom adjust-slots0)
                          (($$atom cons) ($$atom empty-var) ($$atom l0))
                          (($$atom -) ($$atom n0) ($$atom 1))))))))
       (let ((ret-slot0 (($$atom frame-first-empty-slot) ($$atom frame0))))
         (letrec ((loop10 (lambda (source1
                                   frame1
                                   save-live?1
                                   not-save-reg1
                                   num1
                                   lbl1
                                   ret-slot1
                                   save10
                                   save20
                                   regs0
                                   i0)
                            (if (($$atom pair?) ($$atom regs0))
                                (let ((var0 (($$atom car) ($$atom regs0))))
                                  (if (($$atom eq?)
                                       ($$atom var0)
                                       ($$atom ret-var))
                                      (let ((x0 (($$atom cons)
                                                 (($$atom reg-num->reg68)
                                                  (($$atom modulo)
                                                   ($$atom i0)
                                                   ($$atom 10000)))
                                                 ($$atom var0))))
                                        (if (($$atom >)
                                             ($$atom ret-slot1)
                                             ($$atom current-fs))
                                            (($$atom loop10)
                                             ($$atom source1)
                                             ($$atom frame1)
                                             ($$atom save-live?1)
                                             ($$atom not-save-reg1)
                                             ($$atom num1)
                                             ($$atom lbl1)
                                             ($$atom ret-slot1)
                                             (($$atom cons)
                                              ($$atom x0)
                                              ($$atom save10))
                                             ($$atom save20)
                                             (($$atom cdr) ($$atom regs0))
                                             (($$atom +)
                                              ($$atom i0)
                                              ($$atom 1)))
                                            (($$atom loop10)
                                             ($$atom source1)
                                             ($$atom frame1)
                                             ($$atom save-live?1)
                                             ($$atom not-save-reg1)
                                             ($$atom num1)
                                             ($$atom lbl1)
                                             ($$atom ret-slot1)
                                             ($$atom save10)
                                             ($$atom x0)
                                             (($$atom cdr) ($$atom regs0))
                                             (($$atom +)
                                              ($$atom i0)
                                              ($$atom 1)))))
                                      (if (if ($$atom save-live?1)
                                              (if (($$atom frame-live?)
                                                   ($$atom var0)
                                                   ($$atom frame1))
                                                  (($$atom not)
                                                   (let ((g2810 (($$atom reg-num->reg68)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                         (($$atom modulo) ($$atom i0) ($$atom 10000)))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                     (if (($$atom number?)
                                                          ($$atom not-save-reg1))
                                                         (if (($$atom number?)
                                                              ($$atom g2810))
                                                             (($$atom =)
                                                              ($$atom not-save-reg1)
                                                              ($$atom g2810))
                                                             ($$atom #f))
                                                         (($$atom eq?)
                                                          ($$atom not-save-reg1)
                                                          ($$atom g2810)))))
                                                  ($$atom #f))
                                              ($$atom #f))
                                          (($$atom loop10)
                                           ($$atom source1)
                                           ($$atom frame1)
                                           ($$atom save-live?1)
                                           ($$atom not-save-reg1)
                                           ($$atom num1)
                                           ($$atom lbl1)
                                           ($$atom ret-slot1)
                                           (($$atom cons)
                                            (($$atom cons)
                                             (($$atom reg-num->reg68)
                                              (($$atom modulo)
                                               ($$atom i0)
                                               ($$atom 10000)))
                                             ($$atom var0))
                                            ($$atom save10))
                                           ($$atom save20)
                                           (($$atom cdr) ($$atom regs0))
                                           (($$atom +) ($$atom i0) ($$atom 1)))
                                          (($$atom loop10)
                                           ($$atom source1)
                                           ($$atom frame1)
                                           ($$atom save-live?1)
                                           ($$atom not-save-reg1)
                                           ($$atom num1)
                                           ($$atom lbl1)
                                           ($$atom ret-slot1)
                                           ($$atom save10)
                                           ($$atom save20)
                                           (($$atom cdr) ($$atom regs0))
                                           (($$atom +)
                                            ($$atom i0)
                                            ($$atom 1))))))
                                (let ((order0 (($$atom sort-list)
                                               ($$atom save10)
                                               (lambda (x0 y0)
                                                 (($$atom <)
                                                  (($$atom car) ($$atom x0))
                                                  (($$atom car)
                                                   ($$atom y0)))))))
                                  (let ((nb-regs0
                                         (($$atom length) ($$atom order0)))
                                        (reg-list0
                                         (($$atom map)
                                          ($$atom car)
                                          ($$atom order0)))
                                        (slots0 (($$atom ##append-two)
                                                 (($$atom map)
                                                  ($$atom cdr)
                                                  ($$atom order0))
                                                 (($$atom adjust-slots0)
                                                  (($$atom vector-ref)
                                                   ($$atom frame1)
                                                   ($$atom 1))
                                                  (($$atom -)
                                                   ($$atom current-fs)
                                                   (($$atom vector-ref)
                                                    ($$atom frame1)
                                                    ($$atom 0)))))))
                                    (let ((trap0 (lambda (source2
                                                          frame2
                                                          num2
                                                          slots1)
                                                   (begin
                                                     (($$atom emit-trap2)
                                                      ($$atom num2)
                                                      ($$atom '()))
                                                     (($$atom gen-label-return*)
                                                      (($$atom label-counter))
                                                      (($$atom add-first-class-label!)
                                                       ($$atom source2)
                                                       ($$atom slots1)
                                                       ($$atom frame2))
                                                      ($$atom slots1)
                                                      ($$atom 0))))))
                                      (begin
                                        (if ($$atom save20)
                                            (begin
                                              (($$atom emit-move.l)
                                               (($$atom car) ($$atom save20))
                                               (let ((offset0 (($$atom *)
                                                               ($$atom 4)
                                                               (($$atom -)
                                                                ($$atom current-fs)
                                                                ($$atom ret-slot1)))))
                                                 (if (($$atom =)
                                                      ($$atom offset0)
                                                      ($$atom 0))
                                                     ($$atom 23)
                                                     (($$atom make-disp)
                                                      ($$atom 15)
                                                      ($$atom offset0)))))
                                              (let ((x0 (($$atom cdr)
                                                         ($$atom save20))))
                                                (letrec ((loop0 (lambda (x1
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                 l0
                                 n0)
                          (if (($$atom >) ($$atom n0) ($$atom 0))
                              (($$atom loop0)
                               ($$atom x1)
                               (($$atom cdr) ($$atom l0))
                               (($$atom -) ($$atom n0) ($$atom 1)))
                              (($$atom set-car!) ($$atom l0) ($$atom x1))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                  (($$atom loop0)
                                                   ($$atom x0)
                                                   ($$atom slots0)
                                                   (($$atom -)
                                                    (($$atom length)
                                                     ($$atom slots0))
                                                    ($$atom ret-slot1))))))
                                            ($$atom #f))
                                        (if (($$atom >)
                                             (($$atom length) ($$atom order0))
                                             ($$atom 2))
                                            (begin
                                              (($$atom emit-movem.l)
                                               ($$atom reg-list0)
                                               ($$atom 39))
                                              (($$atom trap0)
                                               ($$atom source1)
                                               ($$atom frame1)
                                               ($$atom num1)
                                               ($$atom slots0))
                                              (($$atom emit-movem.l)
                                               ($$atom 31)
                                               ($$atom reg-list0)))
                                            (letrec ((loop20 (lambda (source2
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                              frame2
                              num2
                              slots1
                              l0)
                       (if (($$atom pair?) ($$atom l0))
                           (let ((reg0 (($$atom car) ($$atom l0))))
                             (begin
                               (($$atom emit-move.l) ($$atom reg0) ($$atom 39))
                               (($$atom loop20)
                                ($$atom source2)
                                ($$atom frame2)
                                ($$atom num2)
                                ($$atom slots1)
                                (($$atom cdr) ($$atom l0)))
                               (($$atom emit-move.l)
                                ($$atom 31)
                                ($$atom reg0))))
                           (($$atom trap0)
                            ($$atom source2)
                            ($$atom frame2)
                            ($$atom num2)
                            ($$atom slots1))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                              (($$atom loop20)
                                               ($$atom source1)
                                               ($$atom frame1)
                                               ($$atom num1)
                                               ($$atom slots0)
                                               (($$atom reverse)
                                                ($$atom reg-list0)))))
                                        (if ($$atom save20)
                                            (($$atom emit-move.l)
                                             (let ((offset0 (($$atom *)
                                                             ($$atom 4)
                                                             (($$atom -)
                                                              ($$atom current-fs)
                                                              ($$atom ret-slot1)))))
                                               (if (($$atom =)
                                                    ($$atom offset0)
                                                    ($$atom 0))
                                                   ($$atom 23)
                                                   (($$atom make-disp)
                                                    ($$atom 15)
                                                    ($$atom offset0))))
                                             (($$atom car) ($$atom save20)))
                                            ($$atom #f))
                                        (($$atom emit-label)
                                         ($$atom lbl1))))))))))
           (($$atom loop10)
            ($$atom source0)
            ($$atom frame0)
            ($$atom save-live?0)
            ($$atom not-save-reg0)
            ($$atom num0)
            ($$atom lbl0)
            ($$atom ret-slot0)
            ($$atom '())
            ($$atom #f)
            (($$atom vector-ref) ($$atom frame0) ($$atom 2))
            ($$atom 0)))))))
 (define gen-label-simple
   (lambda (lbl0 sn0)
     (begin
       (if ($$atom ofile-stats?)
           (begin
             (($$atom stat-clear!))
             (($$atom stat-add!)
              ($$atom '(gvm-instr label simple))
              ($$atom 1)))
           ($$atom #f))
       (set! pointers-allocated ($$atom 0))
       (($$atom emit-label) ($$atom lbl0)))))
 (define gen-label-entry
   (lambda (lbl0 nb-parms0 min0 rest?0 closed?0 sn0)
     (begin
       (if ($$atom ofile-stats?)
           (begin
             (($$atom stat-clear!))
             (($$atom stat-add!)
              (($$atom list)
               ($$atom 'gvm-instr)
               ($$atom 'label)
               ($$atom 'entry)
               ($$atom nb-parms0)
               ($$atom min0)
               (if ($$atom rest?0) ($$atom 'rest) ($$atom 'not-rest))
               (if ($$atom closed?0) ($$atom 'closed) ($$atom 'not-closed)))
              ($$atom 1)))
           ($$atom #f))
       (set! pointers-allocated ($$atom 0))
       (let ((label-descr0
              (($$atom add-first-class-label!)
               ($$atom instr-source)
               ($$atom '())
               ($$atom exit-frame))))
         (if (($$atom =) ($$atom lbl0) ($$atom entry-lbl-num))
             (($$atom emit-label) ($$atom lbl0))
             (($$atom emit-label-subproc)
              ($$atom lbl0)
              ($$atom entry-lbl-num)
              ($$atom label-descr0))))
       (let ((nb-parms*0
              (if ($$atom rest?0)
                  (($$atom -) ($$atom nb-parms0) ($$atom 1))
                  ($$atom nb-parms0))))
         (let ((dispatch-lbls0
                (($$atom make-vector)
                 (($$atom +)
                  (($$atom -) ($$atom nb-parms0) ($$atom min0))
                  ($$atom 1)))))
           (let ((optional-lbls0
                  (($$atom make-vector)
                   (($$atom +)
                    (($$atom -) ($$atom nb-parms0) ($$atom min0))
                    ($$atom 1)))))
             (begin
               (letrec ((loop0 (lambda (nb-parms1
                                        dispatch-lbls1
                                        optional-lbls1
                                        i0)
                                 (if (($$atom <=)
                                      ($$atom i0)
                                      ($$atom nb-parms1))
                                     (let ((lbl1 (($$atom label-counter))))
                                       (begin
                                         (($$atom vector-set!)
                                          ($$atom optional-lbls1)
                                          (($$atom -)
                                           ($$atom nb-parms1)
                                           ($$atom i0))
                                          ($$atom lbl1))
                                         (($$atom vector-set!)
                                          ($$atom dispatch-lbls1)
                                          (($$atom -)
                                           ($$atom nb-parms1)
                                           ($$atom i0))
                                          (if (let ((g2820 (($$atom >=)
                                                            ($$atom i0)
                                                            ($$atom nb-parms1))))
                                                (if ($$atom g2820)
                                                    ($$atom g2820)
                                                    (($$atom <=)
                                                     ($$atom nb-parms1)
                                                     ($$atom 3))))
                                              ($$atom lbl1)
                                              (($$atom label-counter))))
                                         (($$atom loop0)
                                          ($$atom nb-parms1)
                                          ($$atom dispatch-lbls1)
                                          ($$atom optional-lbls1)
                                          (($$atom +)
                                           ($$atom i0)
                                           ($$atom 1)))))
                                     ($$atom #f)))))
                 (($$atom loop0)
                  ($$atom nb-parms0)
                  ($$atom dispatch-lbls0)
                  ($$atom optional-lbls0)
                  ($$atom min0)))
               (if ($$atom closed?0)
                   (let ((closure-reg0 (($$atom reg-num->reg68) ($$atom 4))))
                     (begin
                       (($$atom emit-move.l) ($$atom 31) ($$atom closure-reg0))
                       (($$atom emit-subq.l) ($$atom 6) ($$atom closure-reg0))
                       (if (let ((g2830 (if (($$atom <=)
                                             ($$atom min0)
                                             ($$atom 1))
                                            (($$atom <=)
                                             ($$atom 1)
                                             ($$atom nb-parms*0))
                                            ($$atom #f))))
                             (if ($$atom g2830)
                                 ($$atom g2830)
                                 (if (($$atom <=) ($$atom min0) ($$atom 2))
                                     (($$atom <=)
                                      ($$atom 2)
                                      ($$atom nb-parms*0))
                                     ($$atom #f))))
                           (($$atom emit-move.w) ($$atom 0) ($$atom 0))
                           ($$atom #f))))
                   ($$atom #f))
               (if (if (($$atom <=) ($$atom min0) ($$atom 2))
                       (($$atom <=) ($$atom 2) ($$atom nb-parms*0))
                       ($$atom #f))
                   (($$atom emit-beq)
                    (($$atom vector-ref)
                     ($$atom dispatch-lbls0)
                     (($$atom -) ($$atom nb-parms0) ($$atom 2))))
                   ($$atom #f))
               (if (if (($$atom <=) ($$atom min0) ($$atom 1))
                       (($$atom <=) ($$atom 1) ($$atom nb-parms*0))
                       ($$atom #f))
                   (($$atom emit-bmi)
                    (($$atom vector-ref)
                     ($$atom dispatch-lbls0)
                     (($$atom -) ($$atom nb-parms0) ($$atom 1))))
                   ($$atom #f))
               (letrec ((loop0 (lambda (nb-parms1 nb-parms*1 dispatch-lbls1 i0)
                                 (if (($$atom <=)
                                      ($$atom i0)
                                      ($$atom nb-parms*1))
                                     (begin
                                       (if (let ((g2840 (($$atom =)
                                                         ($$atom i0)
                                                         ($$atom 1))))
                                             (if ($$atom g2840)
                                                 ($$atom g2840)
                                                 (($$atom =)
                                                  ($$atom i0)
                                                  ($$atom 2))))
                                           ($$atom #f)
                                           (begin
                                             (($$atom emit-cmp.w)
                                              (($$atom make-imm)
                                               (($$atom encode-arg-count)
                                                ($$atom i0)))
                                              ($$atom 0))
                                             (($$atom emit-beq)
                                              (($$atom vector-ref)
                                               ($$atom dispatch-lbls1)
                                               (($$atom -)
                                                ($$atom nb-parms1)
                                                ($$atom i0))))))
                                       (($$atom loop0)
                                        ($$atom nb-parms1)
                                        ($$atom nb-parms*1)
                                        ($$atom dispatch-lbls1)
                                        (($$atom +) ($$atom i0) ($$atom 1))))
                                     ($$atom #f)))))
                 (($$atom loop0)
                  ($$atom nb-parms0)
                  ($$atom nb-parms*0)
                  ($$atom dispatch-lbls0)
                  ($$atom min0)))
               (if ($$atom rest?0)
                   (begin
                     (($$atom emit-trap1)
                      (if ($$atom closed?0) ($$atom 8) ($$atom 7))
                      (($$atom list) ($$atom min0) ($$atom nb-parms*0)))
                     (if ($$atom closed?0)
                         ($$atom #f)
                         (($$atom emit-lbl-ptr) ($$atom lbl0)))
                     (set! pointers-allocated ($$atom 1))
                     (($$atom gen-guarantee-fudge))
                     (($$atom emit-bra)
                      (($$atom vector-ref)
                       ($$atom optional-lbls0)
                       ($$atom 0))))
                   (if (($$atom =) ($$atom min0) ($$atom nb-parms*0))
                       (begin
                         (($$atom emit-trap1)
                          (if ($$atom closed?0) ($$atom 10) ($$atom 9))
                          (($$atom list) ($$atom nb-parms*0)))
                         (if ($$atom closed?0)
                             ($$atom #f)
                             (($$atom emit-lbl-ptr) ($$atom lbl0))))
                       (begin
                         (($$atom emit-trap1)
                          (if ($$atom closed?0) ($$atom 12) ($$atom 11))
                          (($$atom list) ($$atom min0) ($$atom nb-parms*0)))
                         (if ($$atom closed?0)
                             ($$atom #f)
                             (($$atom emit-lbl-ptr) ($$atom lbl0))))))
               (if (($$atom >) ($$atom nb-parms0) ($$atom 3))
                   (letrec ((loop10 (lambda (nb-parms1
                                             min1
                                             dispatch-lbls1
                                             optional-lbls1
                                             i0)
                                      (if (($$atom >=)
                                           ($$atom i0)
                                           ($$atom min1))
                                          (let ((nb-stacked0
                                                 (if (($$atom <=)
                                                      ($$atom i0)
                                                      ($$atom 3))
                                                     ($$atom 0)
                                                     (($$atom -)
                                                      ($$atom i0)
                                                      ($$atom 3)))))
                                            (begin
                                              (($$atom emit-label)
                                               (($$atom vector-ref)
                                                ($$atom dispatch-lbls1)
                                                (($$atom -)
                                                 ($$atom nb-parms1)
                                                 ($$atom i0))))
                                              (letrec ((loop20 (lambda (nb-parms2
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                i1
                                nb-stacked1
                                j0)
                         (if (if (($$atom <=) ($$atom j0) ($$atom 3))
                                 (if (($$atom <=) ($$atom j0) ($$atom i1))
                                     (($$atom <=)
                                      ($$atom j0)
                                      (($$atom -)
                                       (($$atom -)
                                        ($$atom nb-parms2)
                                        ($$atom 3))
                                       ($$atom nb-stacked1)))
                                     ($$atom #f))
                                 ($$atom #f))
                             (begin
                               (($$atom emit-move.l)
                                (($$atom reg-num->reg68) ($$atom j0))
                                ($$atom 39))
                               (($$atom loop20)
                                ($$atom nb-parms2)
                                ($$atom i1)
                                ($$atom nb-stacked1)
                                (($$atom +) ($$atom j0) ($$atom 1))))
                             (letrec ((loop30 (lambda (i2 j1 k0)
                                                (if (if (($$atom <=)
                                                         ($$atom k0)
                                                         ($$atom 3))
                                                        (($$atom <=)
                                                         ($$atom k0)
                                                         ($$atom i2))
                                                        ($$atom #f))
                                                    (begin
                                                      (($$atom emit-move.l)
                                                       (($$atom reg-num->reg68)
                                                        ($$atom k0))
                                                       (($$atom reg-num->reg68)
                                                        (($$atom +)
                                                         (($$atom -)
                                                          ($$atom k0)
                                                          ($$atom j1))
                                                         ($$atom 1))))
                                                      (($$atom loop30)
                                                       ($$atom i2)
                                                       ($$atom j1)
                                                       (($$atom +)
                                                        ($$atom k0)
                                                        ($$atom 1))))
                                                    ($$atom #f)))))
                               (($$atom loop30)
                                ($$atom i1)
                                ($$atom j0)
                                ($$atom j0)))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                (($$atom loop20)
                                                 ($$atom nb-parms1)
                                                 ($$atom i0)
                                                 ($$atom nb-stacked0)
                                                 ($$atom 1)))
                                              (if (($$atom >)
                                                   ($$atom i0)
                                                   ($$atom min1))
                                                  (($$atom emit-bra)
                                                   (($$atom vector-ref)
                                                    ($$atom optional-lbls1)
                                                    (($$atom -)
                                                     ($$atom nb-parms1)
                                                     ($$atom i0))))
                                                  ($$atom #f))
                                              (($$atom loop10)
                                               ($$atom nb-parms1)
                                               ($$atom min1)
                                               ($$atom dispatch-lbls1)
                                               ($$atom optional-lbls1)
                                               (($$atom -)
                                                ($$atom i0)
                                                ($$atom 1)))))
                                          ($$atom #f)))))
                     (($$atom loop10)
                      ($$atom nb-parms0)
                      ($$atom min0)
                      ($$atom dispatch-lbls0)
                      ($$atom optional-lbls0)
                      (($$atom -) ($$atom nb-parms0) ($$atom 1))))
                   ($$atom #f))
               (letrec ((loop0 (lambda (nb-parms1 nb-parms*1 optional-lbls1 i0)
                                 (if (($$atom <=)
                                      ($$atom i0)
                                      ($$atom nb-parms1))
                                     (let ((val0 (if (($$atom =)
                                                      ($$atom i0)
                                                      ($$atom nb-parms*1))
                                                     ($$atom bits-null)
                                                     ($$atom bits-unass))))
                                       (begin
                                         (($$atom emit-label)
                                          (($$atom vector-ref)
                                           ($$atom optional-lbls1)
                                           (($$atom -)
                                            ($$atom nb-parms1)
                                            ($$atom i0))))
                                         (if (($$atom >)
                                              (($$atom -)
                                               ($$atom nb-parms1)
                                               ($$atom i0))
                                              ($$atom 3))
                                             (($$atom move-n-to-loc68)
                                              ($$atom val0)
                                              ($$atom 39))
                                             (if (($$atom <)
                                                  ($$atom i0)
                                                  ($$atom nb-parms1))
                                                 (($$atom move-n-to-loc68)
                                                  ($$atom val0)
                                                  (($$atom reg-num->reg68)
                                                   (($$atom parm->reg-num)
                                                    (($$atom +)
                                                     ($$atom i0)
                                                     ($$atom 1))
                                                    ($$atom nb-parms1))))
                                                 ($$atom #f)))
                                         (($$atom loop0)
                                          ($$atom nb-parms1)
                                          ($$atom nb-parms*1)
                                          ($$atom optional-lbls1)
                                          (($$atom +)
                                           ($$atom i0)
                                           ($$atom 1)))))
                                     ($$atom #f)))))
                 (($$atom loop0)
                  ($$atom nb-parms0)
                  ($$atom nb-parms*0)
                  ($$atom optional-lbls0)
                  ($$atom min0))))))))))
 (define encode-arg-count
   (lambda (n0)
     (if (($$atom =) ($$atom n0) ($$atom 1))
         ($$atom -1)
         (if (($$atom =) ($$atom n0) ($$atom 2))
             ($$atom 0)
             (($$atom +) ($$atom n0) ($$atom 1))))))
 (define parm->reg-num
   (lambda (i0 nb-parms0)
     (if (($$atom <=) ($$atom nb-parms0) ($$atom 3))
         ($$atom i0)
         (($$atom +) ($$atom i0) (($$atom -) ($$atom 3) ($$atom nb-parms0))))))
 (define no-arg-check-entry-offset
   (lambda (proc0 nb-args0)
     (let ((x0 (($$atom vector-ref) ($$atom proc0) ($$atom 4))))
       (if (if (($$atom pair?) ($$atom x0))
               (($$atom null?) (($$atom cdr) ($$atom x0)))
               ($$atom #f))
           (let ((arg-count0 (($$atom car) ($$atom x0))))
             (if (($$atom =) ($$atom arg-count0) ($$atom nb-args0))
                 (if (let ((g2850 (($$atom =) ($$atom arg-count0) ($$atom 1))))
                       (if ($$atom g2850)
                           ($$atom g2850)
                           (($$atom =) ($$atom arg-count0) ($$atom 2))))
                     ($$atom 10)
                     ($$atom 14))
                 ($$atom 0)))
           ($$atom 0)))))
 (define gen-label-return
   (lambda (lbl0 sn0)
     (begin
       (if ($$atom ofile-stats?)
           (begin
             (($$atom stat-clear!))
             (($$atom stat-add!)
              ($$atom '(gvm-instr label return))
              ($$atom 1)))
           ($$atom #f))
       (set! pointers-allocated ($$atom 0))
       (let ((slots0 (let ((x0 ($$atom exit-frame)))
                       (($$atom vector-ref) ($$atom x0) ($$atom 1)))))
         (($$atom gen-label-return*)
          ($$atom lbl0)
          (($$atom add-first-class-label!)
           ($$atom instr-source)
           ($$atom slots0)
           ($$atom exit-frame))
          ($$atom slots0)
          ($$atom 0))))))
 (define gen-label-return*
   (lambda (lbl0 label-descr0 slots0 extra0)
     (let ((i0 (($$atom pos-in-list) ($$atom ret-var) ($$atom slots0))))
       (if ($$atom i0)
           (let ((fs0 (($$atom length) ($$atom slots0))))
             (let ((link0 (($$atom -) ($$atom fs0) ($$atom i0))))
               (($$atom emit-label-return)
                ($$atom lbl0)
                ($$atom entry-lbl-num)
                (($$atom +) ($$atom fs0) ($$atom extra0))
                ($$atom link0)
                ($$atom label-descr0))))
           (($$atom compiler-internal-error)
            ($$atom "gen-label-return*, no return address in frame"))))))
 (define gen-label-task-entry
   (lambda (lbl0 sn0)
     (begin
       (if ($$atom ofile-stats?)
           (begin
             (($$atom stat-clear!))
             (($$atom stat-add!)
              ($$atom '(gvm-instr label task-entry))
              ($$atom 1)))
           ($$atom #f))
       (set! pointers-allocated ($$atom 0))
       (($$atom emit-label) ($$atom lbl0))
       (if (($$atom =) ($$atom current-fs) ($$atom 0))
           (begin
             (($$atom emit-move.l)
              (($$atom reg->reg68) ($$atom return-reg))
              ($$atom 39))
             (($$atom emit-move.l) ($$atom 15) ($$atom 28)))
           (begin
             (($$atom emit-move.l) ($$atom 15) ($$atom 9))
             (($$atom emit-move.l) ($$atom 25) ($$atom 39))
             (letrec ((loop0 (lambda (i0)
                               (if (($$atom >) ($$atom i0) ($$atom 0))
                                   (begin
                                     (($$atom emit-move.l)
                                      ($$atom 25)
                                      (($$atom make-disp)
                                       ($$atom 9)
                                       ($$atom -8)))
                                     (($$atom loop0)
                                      (($$atom -) ($$atom i0) ($$atom 1))))
                                   ($$atom #f)))))
               (($$atom loop0) (($$atom -) ($$atom current-fs) ($$atom 1))))
             (($$atom emit-move.l)
              (($$atom reg->reg68) ($$atom return-reg))
              ($$atom 33))
             (($$atom emit-move.l) ($$atom 9) ($$atom 28))))
       (($$atom emit-move.l) ($$atom 12) ($$atom ltq-tail-slot)))))
 (define gen-label-task-return
   (lambda (lbl0 sn0)
     (begin
       (if ($$atom ofile-stats?)
           (begin
             (($$atom stat-clear!))
             (($$atom stat-add!)
              ($$atom '(gvm-instr label task-return))
              ($$atom 1)))
           ($$atom #f))
       (set! pointers-allocated ($$atom 0))
       (let ((slots0 (let ((x0 ($$atom exit-frame)))
                       (($$atom vector-ref) ($$atom x0) ($$atom 1)))))
         (begin
           (set! current-fs (($$atom +) ($$atom current-fs) ($$atom 1)))
           (let ((skip-lbl0 (($$atom label-counter)))
                 (dummy-lbl0 (($$atom label-counter))))
             (begin
               (($$atom gen-label-return*)
                ($$atom dummy-lbl0)
                (($$atom add-first-class-label!)
                 ($$atom instr-source)
                 ($$atom slots0)
                 ($$atom exit-frame))
                ($$atom slots0)
                ($$atom 1))
               (($$atom emit-bra) ($$atom skip-lbl0))
               (($$atom gen-label-task-return*)
                ($$atom lbl0)
                (($$atom add-first-class-label!)
                 ($$atom instr-source)
                 ($$atom slots0)
                 ($$atom exit-frame))
                ($$atom slots0)
                ($$atom 1))
               (($$atom emit-subq.l) ($$atom 4) ($$atom 12))
               (($$atom emit-label) ($$atom skip-lbl0)))))))))
 (define gen-label-task-return*
   (lambda (lbl0 label-descr0 slots0 extra0)
     (let ((i0 (($$atom pos-in-list) ($$atom ret-var) ($$atom slots0))))
       (if ($$atom i0)
           (let ((fs0 (($$atom length) ($$atom slots0))))
             (let ((link0 (($$atom -) ($$atom fs0) ($$atom i0))))
               (($$atom emit-label-task-return)
                ($$atom lbl0)
                ($$atom entry-lbl-num)
                (($$atom +) ($$atom fs0) ($$atom extra0))
                ($$atom link0)
                ($$atom label-descr0))))
           (($$atom compiler-internal-error)
            ($$atom "gen-label-task-return*, no return address in frame"))))))
 (define gen-apply
   (lambda (prim0 opnds0 loc0 sn0)
     (begin
       (if ($$atom ofile-stats?)
           (begin
             (($$atom stat-add!)
              (($$atom list)
               ($$atom 'gvm-instr)
               ($$atom 'apply)
               (($$atom string->canonical-symbol)
                (($$atom vector-ref) ($$atom prim0) ($$atom 1)))
               (($$atom map) ($$atom opnd-stat) ($$atom opnds0))
               (if ($$atom loc0)
                   (($$atom opnd-stat) ($$atom loc0))
                   ($$atom #f)))
              ($$atom 1))
             (($$atom for-each) ($$atom fetch-stat-add!) ($$atom opnds0))
             (if ($$atom loc0)
                 (($$atom opnd-stat-add!) ($$atom 'store) ($$atom loc0))
                 ($$atom #f)))
           ($$atom #f))
       (let ((x0 (($$atom vector-ref) ($$atom prim0) ($$atom 6))))
         (if ($$atom x0)
             (if (let ((g2860 (($$atom needed?) ($$atom loc0) ($$atom sn0))))
                   (if ($$atom g2860)
                       ($$atom g2860)
                       (($$atom car) ($$atom x0))))
                 ((($$atom cdr) ($$atom x0))
                  ($$atom opnds0)
                  ($$atom loc0)
                  ($$atom sn0))
                 ($$atom #f))
             (($$atom compiler-internal-error)
              ($$atom "gen-APPLY, unknown 'prim':")
              ($$atom prim0)))))))
 (define define-apply
   (lambda (name0 side-effects?0 proc0)
     (let ((prim0 (($$atom get-prim-info) ($$atom name0))))
       (let ((x0 (($$atom cons) ($$atom side-effects?0) ($$atom proc0))))
         (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0))))))
 (define gen-copy
   (lambda (opnd0 loc0 sn0)
     (begin
       (if ($$atom ofile-stats?)
           (begin
             (($$atom stat-add!)
              (($$atom list)
               ($$atom 'gvm-instr)
               ($$atom 'copy)
               (($$atom opnd-stat) ($$atom opnd0))
               (($$atom opnd-stat) ($$atom loc0)))
              ($$atom 1))
             (($$atom opnd-stat-add!) ($$atom 'fetch) ($$atom opnd0))
             (($$atom opnd-stat-add!) ($$atom 'store) ($$atom loc0)))
           ($$atom #f))
       (if (($$atom needed?) ($$atom loc0) ($$atom sn0))
           (($$atom copy-opnd-to-loc)
            ($$atom opnd0)
            ($$atom loc0)
            ($$atom sn0))
           ($$atom #f)))))
 (define gen-close
   (lambda (parms0 sn0)
     (letrec ((parms->bytes0
               (lambda (parms1)
                 (if (($$atom null?) ($$atom parms1))
                     ($$atom 0)
                     (($$atom +)
                      (($$atom size->bytes0)
                       (($$atom length)
                        (let ((x0 (($$atom car) ($$atom parms1))))
                          (($$atom vector-ref) ($$atom x0) ($$atom 2)))))
                      (($$atom parms->bytes0)
                       (($$atom cdr) ($$atom parms1)))))))
              (size->bytes0
               (lambda (size0)
                 (($$atom *)
                  (($$atom quotient)
                   (($$atom +)
                    (($$atom *)
                     (($$atom +) ($$atom size0) ($$atom 2))
                     ($$atom 4))
                    ($$atom 15))
                   ($$atom 16))
                  ($$atom 16)))))
       (begin
         (if ($$atom ofile-stats?)
             (($$atom for-each)
              (lambda (x0)
                (begin
                  (($$atom stat-add!)
                   (($$atom list)
                    ($$atom 'gvm-instr)
                    ($$atom 'close)
                    (($$atom opnd-stat)
                     (($$atom vector-ref) ($$atom x0) ($$atom 0)))
                    (($$atom map)
                     ($$atom opnd-stat)
                     (($$atom vector-ref) ($$atom x0) ($$atom 2))))
                   ($$atom 1))
                  (let ((gvm-opnd0 (($$atom closure-parms-loc) ($$atom x0))))
                    (($$atom opnd-stat-add!)
                     ($$atom 'store)
                     ($$atom gvm-opnd0)))
                  (let ((gvm-opnd0
                         (let ((num0 (($$atom closure-parms-lbl) ($$atom x0))))
                           (($$atom +) ($$atom num0) ($$atom 20000)))))
                    (($$atom opnd-stat-add!)
                     ($$atom 'fetch)
                     ($$atom gvm-opnd0)))
                  (($$atom for-each)
                   ($$atom fetch-stat-add!)
                   (($$atom vector-ref) ($$atom x0) ($$atom 2)))))
              ($$atom parms0))
             ($$atom #f))
         (let ((lbl10 (($$atom label-counter)))
               (total-space-needed0 (($$atom parms->bytes0) ($$atom parms0))))
           (begin
             (($$atom emit-move.l) ($$atom closure-ptr-slot) ($$atom 10))
             (($$atom move-n-to-loc68) ($$atom total-space-needed0) ($$atom 0))
             (($$atom emit-sub.l) ($$atom 0) ($$atom 10))
             (($$atom emit-cmp.l) ($$atom closure-lim-slot) ($$atom 10))
             (($$atom emit-bcc) ($$atom lbl10))
             (($$atom gen-trap)
              ($$atom instr-source)
              ($$atom entry-frame)
              ($$atom #f)
              ($$atom #f)
              ($$atom 15)
              ($$atom lbl10))
             (($$atom emit-move.l) ($$atom 10) ($$atom closure-ptr-slot))
             (let ((opnds*0 (($$atom apply)
                             ($$atom append)
                             (($$atom map)
                              ($$atom closure-parms-opnds)
                              ($$atom parms0)))))
               (let ((sn*0 (($$atom sn-opnds) ($$atom opnds*0) ($$atom sn0))))
                 (begin
                   (letrec ((loop10 (lambda (total-space-needed1 sn*1 parms1)
                                      (let ((rest0 (($$atom cdr)
                                                    ($$atom parms1)))
                                            (size0 (($$atom length)
                                                    (let ((x0 (($$atom car)
                                                               ($$atom parms1))))
                                                      (($$atom vector-ref)
                                                       ($$atom x0)
                                                       ($$atom 2)))))
                                            (loc0 (let ((x0 (($$atom car)
                                                             ($$atom parms1))))
                                                    (($$atom vector-ref)
                                                     ($$atom x0)
                                                     ($$atom 0)))))
                                        (begin
                                          (if (($$atom =)
                                               ($$atom size0)
                                               ($$atom 1))
                                              (($$atom emit-addq.l)
                                               ($$atom 2)
                                               ($$atom 10))
                                              (($$atom emit-move.w)
                                               (let ((val0 (($$atom +)
                                                            ($$atom 32768)
                                                            (($$atom *)
                                                             (($$atom +)
                                                              ($$atom size0)
                                                              ($$atom 1))
                                                             ($$atom 4)))))
                                                 (if (($$atom <)
                                                      ($$atom val0)
                                                      ($$atom 0))
                                                     (($$atom *)
                                                      ($$atom val0)
                                                      ($$atom 2))
                                                     (($$atom -)
                                                      ($$atom -1)
                                                      (($$atom *)
                                                       ($$atom val0)
                                                       ($$atom 2)))))
                                               ($$atom 26)))
                                          (($$atom move-opnd68-to-loc)
                                           ($$atom 10)
                                           ($$atom loc0)
                                           (($$atom sn-opnds)
                                            (($$atom map)
                                             ($$atom closure-parms-loc)
                                             ($$atom rest0))
                                            ($$atom sn*1)))
                                          (if (($$atom null?) ($$atom rest0))
                                              (($$atom add-n-to-loc68)
                                               (($$atom +)
                                                (($$atom -)
                                                 (($$atom size->bytes0)
                                                  ($$atom size0))
                                                 ($$atom total-space-needed1))
                                                ($$atom 2))
                                               ($$atom 10))
                                              (begin
                                                (($$atom add-n-to-loc68)
                                                 (($$atom -)
                                                  (($$atom size->bytes0)
                                                   ($$atom size0))
                                                  ($$atom 2))
                                                 ($$atom 10))
                                                (($$atom loop10)
                                                 ($$atom total-space-needed1)
                                                 ($$atom sn*1)
                                                 ($$atom rest0)))))))))
                     (($$atom loop10)
                      ($$atom total-space-needed0)
                      ($$atom sn*0)
                      ($$atom parms0)))
                   (letrec ((loop20 (lambda (sn1 parms1)
                                      (let ((opnds0 (let ((x0 (($$atom car)
                                                               ($$atom parms1))))
                                                      (($$atom vector-ref)
                                                       ($$atom x0)
                                                       ($$atom 2)))))
                                        (let ((lbl0 (let ((x0 (($$atom car)
                                                               ($$atom parms1))))
                                                      (($$atom vector-ref)
                                                       ($$atom x0)
                                                       ($$atom 1)))))
                                          (let ((size0 (($$atom length)
                                                        ($$atom opnds0))))
                                            (let ((rest0 (($$atom cdr)
                                                          ($$atom parms1))))
                                              (begin
                                                (($$atom emit-lea)
                                                 (($$atom make-pcr)
                                                  ($$atom lbl0)
                                                  ($$atom 0))
                                                 ($$atom 9))
                                                (($$atom emit-move.l)
                                                 ($$atom 9)
                                                 ($$atom 26))
                                                (letrec ((loop30 (lambda (sn2
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                  rest1
                                  opnds1)
                           (if (($$atom null?) ($$atom opnds1))
                               ($$atom #f)
                               (let ((sn**0 (($$atom sn-opnds)
                                             (($$atom apply)
                                              ($$atom append)
                                              (($$atom map)
                                               ($$atom closure-parms-opnds)
                                               ($$atom rest1)))
                                             ($$atom sn2))))
                                 (begin
                                   (($$atom move-opnd-to-loc68)
                                    (($$atom car) ($$atom opnds1))
                                    ($$atom 26)
                                    (($$atom sn-opnds)
                                     (($$atom cdr) ($$atom opnds1))
                                     ($$atom sn**0)))
                                   (($$atom loop30)
                                    ($$atom sn2)
                                    ($$atom rest1)
                                    (($$atom cdr) ($$atom opnds1)))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                  (($$atom loop30)
                                                   ($$atom sn1)
                                                   ($$atom rest0)
                                                   ($$atom opnds0)))
                                                (if (($$atom null?)
                                                     ($$atom rest0))
                                                    ($$atom #f)
                                                    (begin
                                                      (($$atom add-n-to-loc68)
                                                       (($$atom -)
                                                        (($$atom size->bytes0)
                                                         ($$atom size0))
                                                        (($$atom *)
                                                         (($$atom +)
                                                          ($$atom size0)
                                                          ($$atom 1))
                                                         ($$atom 4)))
                                                       ($$atom 10))
                                                      (($$atom loop20)
                                                       ($$atom sn1)
                                                       ($$atom rest0))))))))))))
                     (($$atom loop20) ($$atom sn0) ($$atom parms0))))))))))))
 (define gen-ifjump
   (lambda (test0 opnds0 true-lbl0 false-lbl0 poll?0 next-lbl0)
     (begin
       (if ($$atom ofile-stats?)
           (begin
             (($$atom stat-add!)
              (($$atom list)
               ($$atom 'gvm-instr)
               ($$atom 'ifjump)
               (($$atom string->canonical-symbol)
                (($$atom vector-ref) ($$atom test0) ($$atom 1)))
               (($$atom map) ($$atom opnd-stat) ($$atom opnds0))
               (if ($$atom poll?0) ($$atom 'poll) ($$atom 'not-poll)))
              ($$atom 1))
             (($$atom for-each) ($$atom fetch-stat-add!) ($$atom opnds0))
             (($$atom stat-dump!)))
           ($$atom #f))
       (let ((proc0 (($$atom vector-ref) ($$atom test0) ($$atom 5))))
         (if ($$atom proc0)
             (($$atom gen-ifjump*)
              ($$atom proc0)
              ($$atom opnds0)
              ($$atom true-lbl0)
              ($$atom false-lbl0)
              ($$atom poll?0)
              ($$atom next-lbl0))
             (($$atom compiler-internal-error)
              ($$atom "gen-IFJUMP, unknown 'test':")
              ($$atom test0)))))))
 (define gen-ifjump*
   (lambda (proc0 opnds0 true-lbl0 false-lbl0 poll?0 next-lbl0)
     (let ((fs0 (let ((x0 ($$atom exit-frame)))
                  (($$atom vector-ref) ($$atom x0) ($$atom 0)))))
       (let ((double-branch0
              (lambda (proc1 opnds1 true-lbl1 false-lbl1 fs1)
                (begin
                  (($$atom proc1)
                   ($$atom #t)
                   ($$atom opnds1)
                   ($$atom false-lbl1)
                   ($$atom fs1))
                  (if ($$atom ofile-stats?)
                      (($$atom emit-stat)
                       ($$atom '((gvm-instr.ifjump.fall-through 1)
                                 (gvm-instr.ifjump.double-branch 1))))
                      ($$atom #f))
                  (($$atom emit-bra) ($$atom true-lbl1))
                  (($$atom gen-deferred-code!))))))
         (begin
           (($$atom gen-guarantee-fudge))
           (if ($$atom poll?0) (($$atom gen-poll)) ($$atom #f))
           (if ($$atom next-lbl0)
               (if (($$atom =) ($$atom true-lbl0) ($$atom next-lbl0))
                   (begin
                     (($$atom proc0)
                      ($$atom #t)
                      ($$atom opnds0)
                      ($$atom false-lbl0)
                      ($$atom fs0))
                     (if ($$atom ofile-stats?)
                         (($$atom emit-stat)
                          ($$atom '((gvm-instr.ifjump.fall-through 1))))
                         ($$atom #f)))
                   (if (($$atom =) ($$atom false-lbl0) ($$atom next-lbl0))
                       (begin
                         (($$atom proc0)
                          ($$atom #f)
                          ($$atom opnds0)
                          ($$atom true-lbl0)
                          ($$atom fs0))
                         (if ($$atom ofile-stats?)
                             (($$atom emit-stat)
                              ($$atom '((gvm-instr.ifjump.fall-through 1))))
                             ($$atom #f)))
                       (($$atom double-branch0)
                        ($$atom proc0)
                        ($$atom opnds0)
                        ($$atom true-lbl0)
                        ($$atom false-lbl0)
                        ($$atom fs0))))
               (($$atom double-branch0)
                ($$atom proc0)
                ($$atom opnds0)
                ($$atom true-lbl0)
                ($$atom false-lbl0)
                ($$atom fs0))))))))
 (define define-ifjump
   (lambda (name0 proc0)
     (begin
       (let ((proc1 (lambda (opnds0 loc0 sn0)
                      (let ((true-lbl0 (($$atom label-counter)))
                            (cont-lbl0 (($$atom label-counter)))
                            (reg680 (if (if (($$atom reg?) ($$atom loc0))
                                            (($$atom not)
                                             (($$atom eq?)
                                              ($$atom loc0)
                                              ($$atom return-reg)))
                                            ($$atom #f))
                                        (($$atom reg->reg68) ($$atom loc0))
                                        ($$atom 0))))
                        (begin
                          (($$atom proc0)
                           ($$atom #f)
                           ($$atom opnds0)
                           ($$atom true-lbl0)
                           ($$atom current-fs))
                          (($$atom move-n-to-loc68)
                           ($$atom bits-false)
                           ($$atom reg680))
                          (($$atom emit-bra) ($$atom cont-lbl0))
                          (($$atom emit-label) ($$atom true-lbl0))
                          (($$atom move-n-to-loc68)
                           ($$atom bits-true)
                           ($$atom reg680))
                          (($$atom emit-label) ($$atom cont-lbl0))
                          (($$atom move-opnd68-to-loc)
                           ($$atom reg680)
                           ($$atom loc0)
                           ($$atom sn0)))))))
         (let ((prim0 (let ((proc2 (let ((name1 (let ((len0 (($$atom string-length)
                                                             ($$atom name0))))
                                                  (letrec ((loop0 (lambda (str0
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                   s0
                                   i0)
                            (if (($$atom >=) ($$atom i0) ($$atom 0))
                                (begin
                                  (($$atom string-set!)
                                   ($$atom s0)
                                   ($$atom i0)
                                   (($$atom char-downcase)
                                    (($$atom string-ref)
                                     ($$atom str0)
                                     ($$atom i0))))
                                  (($$atom loop0)
                                   ($$atom str0)
                                   ($$atom s0)
                                   (($$atom -) ($$atom i0) ($$atom 1))))
                                (($$atom string->symbol) ($$atom s0))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                    (($$atom loop0)
                                                     ($$atom name0)
                                                     (($$atom make-string)
                                                      ($$atom len0))
                                                     (($$atom -)
                                                      ($$atom len0)
                                                      ($$atom 1)))))))
                                     (let ((x0 (($$atom assq)
                                                ($$atom name1)
                                                ($$atom prim-proc-table))))
                                       (if ($$atom x0)
                                           (($$atom cdr) ($$atom x0))
                                           ($$atom #f))))))
                        (if ($$atom proc2)
                            ($$atom proc2)
                            (($$atom compiler-internal-error)
                             ($$atom "get-prim-info, unknown primitive:")
                             ($$atom name0))))))
           (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc1))))
             (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
       (let ((obj0 (($$atom get-prim-info) ($$atom name0))))
         (($$atom vector-set!) ($$atom obj0) ($$atom 5) ($$atom proc0))))))
 (define gen-jump
   (lambda (opnd0 nb-args0 poll?0 next-lbl0)
     (let ((fs0 (let ((x0 ($$atom exit-frame)))
                  (($$atom vector-ref) ($$atom x0) ($$atom 0)))))
       (begin
         (if ($$atom ofile-stats?)
             (begin
               (($$atom stat-add!)
                (($$atom list)
                 ($$atom 'gvm-instr)
                 ($$atom 'jump)
                 (($$atom opnd-stat) ($$atom opnd0))
                 ($$atom nb-args0)
                 (if ($$atom poll?0) ($$atom 'poll) ($$atom 'not-poll)))
                ($$atom 1))
               (($$atom opnd-stat-add!) ($$atom 'jump) ($$atom opnd0))
               (if (if (($$atom lbl?) ($$atom opnd0))
                       (if ($$atom next-lbl0)
                           (($$atom =)
                            ($$atom next-lbl0)
                            (($$atom modulo) ($$atom opnd0) ($$atom 10000)))
                           ($$atom #f))
                       ($$atom #f))
                   (($$atom stat-add!)
                    ($$atom '(gvm-instr.jump.fall-through))
                    ($$atom 1))
                   ($$atom #f))
               (($$atom stat-dump!)))
             ($$atom #f))
         (($$atom gen-guarantee-fudge))
         (if (($$atom glo?) ($$atom opnd0))
             (begin
               (if ($$atom poll?0) (($$atom gen-poll)) ($$atom #f))
               (($$atom setup-jump) ($$atom fs0) ($$atom nb-args0))
               (($$atom emit-jmp-glob)
                (let ((name0 (($$atom glo-name) ($$atom opnd0))))
                  ($$atom name0)))
               (($$atom gen-deferred-code!)))
             (if (if (($$atom stk?) ($$atom opnd0))
                     (if (($$atom =)
                          (($$atom modulo) ($$atom opnd0) ($$atom 10000))
                          (($$atom +) ($$atom fs0) ($$atom 1)))
                         (($$atom not) ($$atom nb-args0))
                         ($$atom #f))
                     ($$atom #f))
                 (begin
                   (if ($$atom poll?0) (($$atom gen-poll)) ($$atom #f))
                   (($$atom setup-jump)
                    (($$atom +) ($$atom fs0) ($$atom 1))
                    ($$atom nb-args0))
                   (($$atom emit-rts))
                   (($$atom gen-deferred-code!)))
                 (if (($$atom lbl?) ($$atom opnd0))
                     (if (if ($$atom poll?0)
                             (if (($$atom =) ($$atom fs0) ($$atom current-fs))
                                 (if ($$atom nb-args0)
                                     ($$atom #f)
                                     (($$atom not)
                                      (if ($$atom next-lbl0)
                                          (($$atom =)
                                           ($$atom next-lbl0)
                                           (($$atom modulo)
                                            ($$atom opnd0)
                                            ($$atom 10000)))
                                          ($$atom #f))))
                                 ($$atom #f))
                             ($$atom #f))
                         (($$atom gen-poll-branch)
                          (($$atom modulo) ($$atom opnd0) ($$atom 10000)))
                         (begin
                           (if ($$atom poll?0) (($$atom gen-poll)) ($$atom #f))
                           (($$atom setup-jump) ($$atom fs0) ($$atom nb-args0))
                           (if (if ($$atom next-lbl0)
                                   (($$atom =)
                                    ($$atom next-lbl0)
                                    (($$atom modulo)
                                     ($$atom opnd0)
                                     ($$atom 10000)))
                                   ($$atom #f))
                               ($$atom #f)
                               (($$atom emit-bra)
                                (($$atom modulo)
                                 ($$atom opnd0)
                                 ($$atom 10000))))))
                     (if (($$atom obj?) ($$atom opnd0))
                         (begin
                           (if ($$atom poll?0) (($$atom gen-poll)) ($$atom #f))
                           (let ((val0 (($$atom obj-val) ($$atom opnd0))))
                             (if (($$atom proc-obj?) ($$atom val0))
                                 (let ((offset0 (($$atom no-arg-check-entry-offset)
                                                 ($$atom val0)
                                                 ($$atom nb-args0)))
                                       (num0 (($$atom add-object)
                                              ($$atom val0))))
                                   (begin
                                     (let ((nb-args1
                                            (if (($$atom <=)
                                                 ($$atom offset0)
                                                 ($$atom 0))
                                                ($$atom nb-args0)
                                                ($$atom #f))))
                                       (begin
                                         (($$atom shrink-frame) ($$atom fs0))
                                         (if ($$atom nb-args1)
                                             (($$atom move-n-to-loc68)
                                              (($$atom encode-arg-count)
                                               ($$atom nb-args1))
                                              ($$atom 0))
                                             ($$atom #f))))
                                     (if ($$atom num0)
                                         (($$atom emit-jmp-proc)
                                          ($$atom num0)
                                          ($$atom offset0))
                                         (($$atom emit-jmp-prim)
                                          ($$atom val0)
                                          ($$atom offset0)))
                                     (($$atom gen-deferred-code!))))
                                 (($$atom gen-jump*)
                                  (($$atom opnd->opnd68)
                                   ($$atom opnd0)
                                   ($$atom #f)
                                   ($$atom fs0))
                                  ($$atom fs0)
                                  ($$atom nb-args0)))))
                         (begin
                           (if ($$atom poll?0) (($$atom gen-poll)) ($$atom #f))
                           (($$atom gen-jump*)
                            (($$atom opnd->opnd68)
                             ($$atom opnd0)
                             ($$atom #f)
                             ($$atom fs0))
                            ($$atom fs0)
                            ($$atom nb-args0)))))))))))
 (define gen-jump*
   (lambda (opnd0 fs0 nb-args0)
     (begin
       (if ($$atom nb-args0)
           (let ((lbl0 (($$atom label-counter))))
             (begin
               (($$atom make-top-of-frame-if-stk-opnd68)
                ($$atom opnd0)
                ($$atom fs0))
               (($$atom move-opnd68-to-loc68)
                (($$atom opnd68->true-opnd68) ($$atom opnd0) ($$atom fs0))
                ($$atom 9))
               (($$atom shrink-frame) ($$atom fs0))
               (($$atom emit-move.l) ($$atom 9) ($$atom 0))
               (($$atom emit-addq.w) ($$atom 2) ($$atom 0))
               (($$atom emit-btst) ($$atom 0) ($$atom 7))
               (($$atom emit-beq) ($$atom lbl0))
               (($$atom move-n-to-loc68)
                (($$atom encode-arg-count) ($$atom nb-args0))
                ($$atom 0))
               (($$atom emit-trap3) ($$atom 6))
               (($$atom emit-label) ($$atom lbl0))
               (($$atom move-n-to-loc68)
                (($$atom encode-arg-count) ($$atom nb-args0))
                ($$atom 0))
               (($$atom emit-jmp) ($$atom 17))))
           (let ((areg0 (($$atom move-opnd68-to-any-areg)
                         ($$atom opnd0)
                         ($$atom #f)
                         ($$atom fs0))))
             (begin
               (($$atom setup-jump) ($$atom fs0) ($$atom nb-args0))
               (($$atom emit-jmp) (($$atom +) ($$atom areg0) ($$atom 8))))))
       (($$atom gen-deferred-code!)))))
 (define setup-jump
   (lambda (fs0 nb-args0)
     (begin
       (($$atom shrink-frame) ($$atom fs0))
       (if ($$atom nb-args0)
           (($$atom move-n-to-loc68)
            (($$atom encode-arg-count) ($$atom nb-args0))
            ($$atom 0))
           ($$atom #f)))))
 (define gen-poll
   (lambda ()
     (let ((lbl0 (($$atom label-counter))))
       (begin
         (($$atom emit-dbra) ($$atom 5) ($$atom lbl0))
         (($$atom emit-moveq)
          (($$atom -) ($$atom polling-intermittency) ($$atom 1))
          ($$atom 5))
         (($$atom emit-cmp.l) ($$atom intr-flag-slot) ($$atom 15))
         (($$atom emit-bcc) ($$atom lbl0))
         (($$atom gen-trap)
          ($$atom instr-source)
          ($$atom entry-frame)
          ($$atom #f)
          ($$atom #f)
          ($$atom 24)
          ($$atom lbl0))))))
 (define gen-poll-branch
   (lambda (lbl0)
     (begin
       (($$atom emit-dbra) ($$atom 5) ($$atom lbl0))
       (($$atom emit-moveq)
        (($$atom -) ($$atom polling-intermittency) ($$atom 1))
        ($$atom 5))
       (($$atom emit-cmp.l) ($$atom intr-flag-slot) ($$atom 15))
       (($$atom emit-bcc) ($$atom lbl0))
       (($$atom gen-trap)
        ($$atom instr-source)
        ($$atom entry-frame)
        ($$atom #f)
        ($$atom #f)
        ($$atom 24)
        (($$atom label-counter)))
       (($$atom emit-bra) ($$atom lbl0)))))
 (define make-gen-slot-ref
   (lambda (slot0 type0)
     (lambda (opnds0 loc0 sn0)
       (let ((opnd0 (($$atom car) ($$atom opnds0)))
             (sn-loc0 (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))))
         (begin
           (($$atom move-opnd-to-loc68)
            ($$atom opnd0)
            ($$atom 9)
            ($$atom sn-loc0))
           (($$atom move-opnd68-to-loc)
            (let ((offset0 (($$atom -)
                            (($$atom *) ($$atom slot0) ($$atom 4))
                            ($$atom type0))))
              (if (($$atom =) ($$atom offset0) ($$atom 0))
                  ($$atom 17)
                  (($$atom make-disp) ($$atom 9) ($$atom offset0))))
            ($$atom loc0)
            ($$atom sn0)))))))
 (define make-gen-slot-set!
   (lambda (slot0 type0)
     (lambda (opnds0 loc0 sn0)
       (let ((sn-loc0 (if ($$atom loc0)
                          (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))
                          ($$atom sn0))))
         (let ((first-opnd0 (($$atom car) ($$atom opnds0))))
           (let ((second-opnd0 (($$atom car) (($$atom cdr) ($$atom opnds0)))))
             (let ((sn-second-opnd0
                    (($$atom sn-opnd) ($$atom second-opnd0) ($$atom sn-loc0))))
               (begin
                 (($$atom move-opnd-to-loc68)
                  ($$atom first-opnd0)
                  ($$atom 9)
                  ($$atom sn-second-opnd0))
                 (($$atom move-opnd-to-loc68)
                  ($$atom second-opnd0)
                  (let ((offset0 (($$atom -)
                                  (($$atom *) ($$atom slot0) ($$atom 4))
                                  ($$atom type0))))
                    (if (($$atom =) ($$atom offset0) ($$atom 0))
                        ($$atom 17)
                        (($$atom make-disp) ($$atom 9) ($$atom offset0))))
                  ($$atom sn-loc0))
                 (if ($$atom loc0)
                     (if (($$atom eq?) ($$atom first-opnd0) ($$atom loc0))
                         ($$atom #f)
                         (($$atom move-opnd68-to-loc)
                          ($$atom 9)
                          ($$atom loc0)
                          ($$atom sn0)))
                     ($$atom #f))))))))))
 (define gen-cons
   (lambda (opnds0 loc0 sn0)
     (let ((sn-loc0 (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))))
       (let ((second-opnd0 (($$atom car) (($$atom cdr) ($$atom opnds0))))
             (first-opnd0 (($$atom car) ($$atom opnds0))))
         (begin
           (($$atom gen-guarantee-space) ($$atom 2))
           (if (($$atom contains-opnd?) ($$atom loc0) ($$atom second-opnd0))
               (let ((sn-second-opnd0
                      (($$atom sn-opnd)
                       ($$atom second-opnd0)
                       ($$atom sn-loc0))))
                 (begin
                   (($$atom move-opnd-to-loc68)
                    ($$atom first-opnd0)
                    ($$atom 35)
                    ($$atom sn-second-opnd0))
                   (($$atom move-opnd68-to-loc68) ($$atom 11) ($$atom 10))
                   (($$atom move-opnd-to-loc68)
                    ($$atom second-opnd0)
                    ($$atom 35)
                    ($$atom sn-loc0))
                   (($$atom move-opnd68-to-loc)
                    ($$atom 10)
                    ($$atom loc0)
                    ($$atom sn0))))
               (let ((sn-second-opnd0
                      (($$atom sn-opnd) ($$atom second-opnd0) ($$atom sn0))))
                 (let ((sn-loc1 (($$atom sn-opnd)
                                 ($$atom loc0)
                                 ($$atom sn-second-opnd0))))
                   (begin
                     (($$atom move-opnd-to-loc68)
                      ($$atom first-opnd0)
                      ($$atom 35)
                      ($$atom sn-loc1))
                     (($$atom move-opnd68-to-loc)
                      ($$atom 11)
                      ($$atom loc0)
                      ($$atom sn-second-opnd0))
                     (($$atom move-opnd-to-loc68)
                      ($$atom second-opnd0)
                      ($$atom 35)
                      ($$atom sn0)))))))))))
 (define make-gen-apply-c...r
   (lambda (pattern0)
     (lambda (opnds0 loc0 sn0)
       (let ((opnd0 (($$atom car) ($$atom opnds0)))
             (sn-loc0 (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))))
         (begin
           (($$atom move-opnd-to-loc68)
            ($$atom opnd0)
            ($$atom 9)
            ($$atom sn-loc0))
           (letrec ((loop0 (lambda (loc1 sn1 pattern1)
                             (if (($$atom <=) ($$atom pattern1) ($$atom 3))
                                 (if (($$atom =) ($$atom pattern1) ($$atom 3))
                                     (($$atom move-opnd68-to-loc)
                                      ($$atom 33)
                                      ($$atom loc1)
                                      ($$atom sn1))
                                     (($$atom move-opnd68-to-loc)
                                      ($$atom 17)
                                      ($$atom loc1)
                                      ($$atom sn1)))
                                 (begin
                                   (if (($$atom odd?) ($$atom pattern1))
                                       (($$atom emit-move.l)
                                        ($$atom 33)
                                        ($$atom 9))
                                       (($$atom emit-move.l)
                                        ($$atom 17)
                                        ($$atom 9)))
                                   (($$atom loop0)
                                    ($$atom loc1)
                                    ($$atom sn1)
                                    (($$atom quotient)
                                     ($$atom pattern1)
                                     ($$atom 2))))))))
             (($$atom loop0)
              ($$atom loc0)
              ($$atom sn0)
              ($$atom pattern0))))))))
 (define gen-set-car!
   (lambda (opnds0 loc0 sn0)
     (let ((sn-loc0 (if ($$atom loc0)
                        (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))
                        ($$atom sn0))))
       (let ((first-opnd0 (($$atom car) ($$atom opnds0))))
         (let ((second-opnd0 (($$atom car) (($$atom cdr) ($$atom opnds0)))))
           (let ((sn-second-opnd0
                  (($$atom sn-opnd) ($$atom second-opnd0) ($$atom sn-loc0))))
             (begin
               (($$atom move-opnd-to-loc68)
                ($$atom first-opnd0)
                ($$atom 9)
                ($$atom sn-second-opnd0))
               (($$atom move-opnd-to-loc68)
                ($$atom second-opnd0)
                ($$atom 17)
                ($$atom sn-loc0))
               (if (if ($$atom loc0)
                       (($$atom not)
                        (($$atom eq?) ($$atom first-opnd0) ($$atom loc0)))
                       ($$atom #f))
                   (($$atom move-opnd68-to-loc)
                    ($$atom 9)
                    ($$atom loc0)
                    ($$atom sn0))
                   ($$atom #f)))))))))
 (define gen-set-cdr!
   (lambda (opnds0 loc0 sn0)
     (let ((sn-loc0 (if ($$atom loc0)
                        (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))
                        ($$atom sn0))))
       (let ((first-opnd0 (($$atom car) ($$atom opnds0))))
         (let ((second-opnd0 (($$atom car) (($$atom cdr) ($$atom opnds0)))))
           (let ((sn-second-opnd0
                  (($$atom sn-opnd) ($$atom second-opnd0) ($$atom sn-loc0))))
             (begin
               (($$atom move-opnd-to-loc68)
                ($$atom first-opnd0)
                ($$atom 9)
                ($$atom sn-second-opnd0))
               (if (if ($$atom loc0)
                       (($$atom not)
                        (($$atom eq?) ($$atom first-opnd0) ($$atom loc0)))
                       ($$atom #f))
                   (($$atom move-opnd-to-loc68)
                    ($$atom second-opnd0)
                    (($$atom make-disp) ($$atom 9) ($$atom -4))
                    ($$atom sn-loc0))
                   (($$atom move-opnd-to-loc68)
                    ($$atom second-opnd0)
                    ($$atom 33)
                    ($$atom sn-loc0)))
               (if (if ($$atom loc0)
                       (($$atom not)
                        (($$atom eq?) ($$atom first-opnd0) ($$atom loc0)))
                       ($$atom #f))
                   (($$atom move-opnd68-to-loc)
                    ($$atom 9)
                    ($$atom loc0)
                    ($$atom sn0))
                   ($$atom #f)))))))))
 (define commut-oper
   (lambda (gen0 opnds0 loc0 sn0 self?0 accum-self0 accum-other0)
     (if (($$atom null?) ($$atom opnds0))
         (($$atom gen0)
          (($$atom reverse) ($$atom accum-self0))
          (($$atom reverse) ($$atom accum-other0))
          ($$atom loc0)
          ($$atom sn0)
          ($$atom self?0))
         (let ((rest0 (($$atom cdr) ($$atom opnds0)))
               (opnd0 (($$atom car) ($$atom opnds0))))
           (if (if ($$atom self?0)
                   ($$atom #f)
                   (($$atom eq?) ($$atom opnd0) ($$atom loc0)))
               (($$atom commut-oper)
                ($$atom gen0)
                ($$atom rest0)
                ($$atom loc0)
                ($$atom sn0)
                ($$atom #t)
                ($$atom accum-self0)
                ($$atom accum-other0))
               (if (($$atom contains-opnd?) ($$atom loc0) ($$atom opnd0))
                   (($$atom commut-oper)
                    ($$atom gen0)
                    ($$atom rest0)
                    ($$atom loc0)
                    ($$atom sn0)
                    ($$atom self?0)
                    (($$atom cons) ($$atom opnd0) ($$atom accum-self0))
                    ($$atom accum-other0))
                   (($$atom commut-oper)
                    ($$atom gen0)
                    ($$atom rest0)
                    ($$atom loc0)
                    ($$atom sn0)
                    ($$atom self?0)
                    ($$atom accum-self0)
                    (($$atom cons) ($$atom opnd0) ($$atom accum-other0)))))))))
 (define gen-add-in-place
   (lambda (opnds0 loc680 sn0)
     (if (($$atom null?) ($$atom opnds0))
         ($$atom #f)
         (let ((first-opnd0 (($$atom car) ($$atom opnds0))))
           (let ((other-opnds0 (($$atom cdr) ($$atom opnds0))))
             (let ((sn-other-opnds0
                    (($$atom sn-opnds) ($$atom other-opnds0) ($$atom sn0))))
               (begin
                 (($$atom sn-opnd)
                  ($$atom first-opnd0)
                  ($$atom sn-other-opnds0))
                 (let ((opnd680 (($$atom opnd->opnd68)
                                 ($$atom first-opnd0)
                                 (($$atom temp-in-opnd68) ($$atom loc680))
                                 (($$atom sn-opnd68)
                                  ($$atom loc680)
                                  ($$atom sn0)))))
                   (begin
                     (($$atom make-top-of-frame-if-stk-opnds68)
                      ($$atom opnd680)
                      ($$atom loc680)
                      ($$atom sn-other-opnds0))
                     (if (($$atom imm?) ($$atom opnd680))
                         (($$atom add-n-to-loc68)
                          (($$atom imm-val) ($$atom opnd680))
                          (($$atom opnd68->true-opnd68)
                           ($$atom loc680)
                           ($$atom sn-other-opnds0)))
                         (let ((opnd68*0
                                (($$atom opnd68->true-opnd68)
                                 ($$atom opnd680)
                                 ($$atom sn-other-opnds0))))
                           (if (let ((g2870 (($$atom dreg?) ($$atom opnd680))))
                                 (if ($$atom g2870)
                                     ($$atom g2870)
                                     (($$atom reg68?) ($$atom loc680))))
                               (($$atom emit-add.l)
                                ($$atom opnd68*0)
                                (($$atom opnd68->true-opnd68)
                                 ($$atom loc680)
                                 ($$atom sn-other-opnds0)))
                               (begin
                                 (($$atom move-opnd68-to-loc68)
                                  ($$atom opnd68*0)
                                  ($$atom 0))
                                 (($$atom emit-add.l)
                                  ($$atom 0)
                                  (($$atom opnd68->true-opnd68)
                                   ($$atom loc680)
                                   ($$atom sn-other-opnds0)))))))
                     (($$atom gen-add-in-place)
                      ($$atom other-opnds0)
                      ($$atom loc680)
                      ($$atom sn0)))))))))))
 (define gen-add
   (lambda (self-opnds0 other-opnds0 loc0 sn0 self?0)
     (let ((opnds0 (($$atom ##append-two)
                    ($$atom self-opnds0)
                    ($$atom other-opnds0))))
       (let ((first-opnd0 (($$atom car) ($$atom opnds0))))
         (let ((other-opnds1 (($$atom cdr) ($$atom opnds0))))
           (let ((sn-other-opnds0
                  (($$atom sn-opnds) ($$atom other-opnds1) ($$atom sn0))))
             (let ((sn-first-opnd0
                    (($$atom sn-opnd)
                     ($$atom first-opnd0)
                     ($$atom sn-other-opnds0))))
               (if (($$atom <=)
                    (($$atom length) ($$atom self-opnds0))
                    ($$atom 1))
                   (let ((loc680 (($$atom loc->loc68)
                                  ($$atom loc0)
                                  ($$atom #f)
                                  ($$atom sn-first-opnd0))))
                     (if ($$atom self?0)
                         (($$atom gen-add-in-place)
                          ($$atom opnds0)
                          ($$atom loc680)
                          ($$atom sn0))
                         (begin
                           (($$atom move-opnd-to-loc68)
                            ($$atom first-opnd0)
                            ($$atom loc680)
                            ($$atom sn-other-opnds0))
                           (($$atom gen-add-in-place)
                            ($$atom other-opnds1)
                            ($$atom loc680)
                            ($$atom sn0)))))
                   (begin
                     (($$atom move-opnd-to-loc68)
                      ($$atom first-opnd0)
                      ($$atom 0)
                      (($$atom sn-opnd)
                       ($$atom loc0)
                       ($$atom sn-other-opnds0)))
                     (($$atom gen-add-in-place)
                      ($$atom other-opnds1)
                      ($$atom 0)
                      (($$atom sn-opnd) ($$atom loc0) ($$atom sn0)))
                     (if ($$atom self?0)
                         (let ((loc680 (($$atom loc->loc68)
                                        ($$atom loc0)
                                        ($$atom 0)
                                        ($$atom sn0))))
                           (begin
                             (($$atom make-top-of-frame-if-stk-opnd68)
                              ($$atom loc680)
                              ($$atom sn0))
                             (($$atom emit-add.l)
                              ($$atom 0)
                              (($$atom opnd68->true-opnd68)
                               ($$atom loc680)
                               ($$atom sn0)))))
                         (($$atom move-opnd68-to-loc)
                          ($$atom 0)
                          ($$atom loc0)
                          ($$atom sn0))))))))))))
 (define gen-sub-in-place
   (lambda (opnds0 loc680 sn0)
     (if (($$atom null?) ($$atom opnds0))
         ($$atom #f)
         (let ((first-opnd0 (($$atom car) ($$atom opnds0))))
           (let ((other-opnds0 (($$atom cdr) ($$atom opnds0))))
             (let ((sn-other-opnds0
                    (($$atom sn-opnds) ($$atom other-opnds0) ($$atom sn0))))
               (begin
                 (($$atom sn-opnd)
                  ($$atom first-opnd0)
                  ($$atom sn-other-opnds0))
                 (let ((opnd680 (($$atom opnd->opnd68)
                                 ($$atom first-opnd0)
                                 (($$atom temp-in-opnd68) ($$atom loc680))
                                 (($$atom sn-opnd68)
                                  ($$atom loc680)
                                  ($$atom sn0)))))
                   (begin
                     (($$atom make-top-of-frame-if-stk-opnds68)
                      ($$atom opnd680)
                      ($$atom loc680)
                      ($$atom sn-other-opnds0))
                     (if (($$atom imm?) ($$atom opnd680))
                         (($$atom add-n-to-loc68)
                          (($$atom *)
                           ($$atom -1)
                           (($$atom imm-val) ($$atom opnd680)))
                          (($$atom opnd68->true-opnd68)
                           ($$atom loc680)
                           ($$atom sn-other-opnds0)))
                         (let ((opnd68*0
                                (($$atom opnd68->true-opnd68)
                                 ($$atom opnd680)
                                 ($$atom sn-other-opnds0))))
                           (if (let ((g2880 (($$atom dreg?) ($$atom opnd680))))
                                 (if ($$atom g2880)
                                     ($$atom g2880)
                                     (($$atom reg68?) ($$atom loc680))))
                               (($$atom emit-sub.l)
                                ($$atom opnd68*0)
                                (($$atom opnd68->true-opnd68)
                                 ($$atom loc680)
                                 ($$atom sn-other-opnds0)))
                               (begin
                                 (($$atom move-opnd68-to-loc68)
                                  ($$atom opnd68*0)
                                  ($$atom 0))
                                 (($$atom emit-sub.l)
                                  ($$atom 0)
                                  (($$atom opnd68->true-opnd68)
                                   ($$atom loc680)
                                   ($$atom sn-other-opnds0)))))))
                     (($$atom gen-sub-in-place)
                      ($$atom other-opnds0)
                      ($$atom loc680)
                      ($$atom sn0)))))))))))
 (define gen-sub
   (lambda (first-opnd0 other-opnds0 loc0 sn0 self-opnds?0)
     (if (($$atom null?) ($$atom other-opnds0))
         (if (if (let ((g2890 (($$atom <) ($$atom loc0) ($$atom 10000))))
                   (if ($$atom g2890)
                       ($$atom g2890)
                       (($$atom stk?) ($$atom loc0))))
                 (($$atom not)
                  (($$atom eq?) ($$atom loc0) ($$atom return-reg)))
                 ($$atom #f))
             (begin
               (($$atom copy-opnd-to-loc)
                ($$atom first-opnd0)
                ($$atom loc0)
                (($$atom sn-opnd) ($$atom loc0) ($$atom sn0)))
               (let ((loc680 (($$atom loc->loc68)
                              ($$atom loc0)
                              ($$atom #f)
                              ($$atom sn0))))
                 (begin
                   (($$atom make-top-of-frame-if-stk-opnd68)
                    ($$atom loc680)
                    ($$atom sn0))
                   (($$atom emit-neg.l)
                    (($$atom opnd68->true-opnd68)
                     ($$atom loc680)
                     ($$atom sn0))))))
             (begin
               (($$atom move-opnd-to-loc68)
                ($$atom first-opnd0)
                ($$atom 0)
                (($$atom sn-opnd) ($$atom loc0) ($$atom sn0)))
               (($$atom emit-neg.l) ($$atom 0))
               (($$atom move-opnd68-to-loc)
                ($$atom 0)
                ($$atom loc0)
                ($$atom sn0))))
         (let ((sn-other-opnds0
                (($$atom sn-opnds) ($$atom other-opnds0) ($$atom sn0))))
           (let ((sn-first-opnd0
                  (($$atom sn-opnd)
                   ($$atom first-opnd0)
                   ($$atom sn-other-opnds0))))
             (if (if ($$atom self-opnds?0)
                     ($$atom #f)
                     (let ((g2900 (($$atom <) ($$atom loc0) ($$atom 10000))))
                       (if ($$atom g2900)
                           ($$atom g2900)
                           (($$atom stk?) ($$atom loc0)))))
                 (let ((loc680 (($$atom loc->loc68)
                                ($$atom loc0)
                                ($$atom #f)
                                ($$atom sn-first-opnd0))))
                   (begin
                     (if (($$atom eq?) ($$atom first-opnd0) ($$atom loc0))
                         ($$atom #f)
                         (($$atom move-opnd-to-loc68)
                          ($$atom first-opnd0)
                          ($$atom loc680)
                          ($$atom sn-other-opnds0)))
                     (($$atom gen-sub-in-place)
                      ($$atom other-opnds0)
                      ($$atom loc680)
                      ($$atom sn0))))
                 (begin
                   (($$atom move-opnd-to-loc68)
                    ($$atom first-opnd0)
                    ($$atom 0)
                    (($$atom sn-opnd) ($$atom loc0) ($$atom sn-other-opnds0)))
                   (($$atom gen-sub-in-place)
                    ($$atom other-opnds0)
                    ($$atom 0)
                    (($$atom sn-opnd) ($$atom loc0) ($$atom sn0)))
                   (($$atom move-opnd68-to-loc)
                    ($$atom 0)
                    ($$atom loc0)
                    ($$atom sn0)))))))))
 (define gen-mul-in-place
   (lambda (opnds0 reg680 sn0)
     (if (($$atom null?) ($$atom opnds0))
         ($$atom #f)
         (let ((first-opnd0 (($$atom car) ($$atom opnds0))))
           (let ((other-opnds0 (($$atom cdr) ($$atom opnds0))))
             (let ((sn-other-opnds0
                    (($$atom sn-opnds) ($$atom other-opnds0) ($$atom sn0))))
               (let ((opnd680 (($$atom opnd->opnd68)
                               ($$atom first-opnd0)
                               (($$atom temp-in-opnd68) ($$atom reg680))
                               ($$atom sn0))))
                 (begin
                   (($$atom make-top-of-frame-if-stk-opnd68)
                    ($$atom opnd680)
                    ($$atom sn-other-opnds0))
                   (if (($$atom imm?) ($$atom opnd680))
                       (($$atom mul-n-to-reg68)
                        (($$atom quotient)
                         (($$atom imm-val) ($$atom opnd680))
                         ($$atom 8))
                        ($$atom reg680))
                       (begin
                         (($$atom emit-asr.l)
                          (($$atom make-imm) ($$atom 3))
                          ($$atom reg680))
                         (($$atom emit-muls.l)
                          (($$atom opnd68->true-opnd68)
                           ($$atom opnd680)
                           ($$atom sn-other-opnds0))
                          ($$atom reg680))))
                   (($$atom gen-mul-in-place)
                    ($$atom other-opnds0)
                    ($$atom reg680)
                    ($$atom sn0))))))))))
 (define gen-mul
   (lambda (self-opnds0 other-opnds0 loc0 sn0 self?0)
     (let ((opnds0 (($$atom ##append-two)
                    ($$atom self-opnds0)
                    ($$atom other-opnds0))))
       (let ((first-opnd0 (($$atom car) ($$atom opnds0))))
         (let ((other-opnds1 (($$atom cdr) ($$atom opnds0))))
           (let ((sn-other-opnds0
                  (($$atom sn-opnds) ($$atom other-opnds1) ($$atom sn0))))
             (let ((sn-first-opnd0
                    (($$atom sn-opnd)
                     ($$atom first-opnd0)
                     ($$atom sn-other-opnds0))))
               (if (($$atom null?) ($$atom self-opnds0))
                   (let ((loc680 (($$atom loc->loc68)
                                  ($$atom loc0)
                                  ($$atom #f)
                                  ($$atom sn-first-opnd0))))
                     (if ($$atom self?0)
                         (($$atom gen-mul-in-place)
                          ($$atom opnds0)
                          ($$atom loc680)
                          ($$atom sn0))
                         (begin
                           (($$atom move-opnd-to-loc68)
                            ($$atom first-opnd0)
                            ($$atom loc680)
                            ($$atom sn-other-opnds0))
                           (($$atom gen-mul-in-place)
                            ($$atom other-opnds1)
                            ($$atom loc680)
                            ($$atom sn0)))))
                   (begin
                     (($$atom move-opnd-to-loc68)
                      ($$atom first-opnd0)
                      ($$atom 0)
                      (($$atom sn-opnd)
                       ($$atom loc0)
                       ($$atom sn-other-opnds0)))
                     (($$atom gen-mul-in-place)
                      ($$atom other-opnds1)
                      ($$atom 0)
                      (($$atom sn-opnd) ($$atom loc0) ($$atom sn0)))
                     (if ($$atom self?0)
                         (let ((loc680 (($$atom loc->loc68)
                                        ($$atom loc0)
                                        ($$atom 0)
                                        ($$atom sn0))))
                           (begin
                             (($$atom make-top-of-frame-if-stk-opnd68)
                              ($$atom loc680)
                              ($$atom sn0))
                             (($$atom emit-asr.l)
                              (($$atom make-imm) ($$atom 3))
                              ($$atom 0))
                             (($$atom emit-muls.l)
                              ($$atom 0)
                              (($$atom opnd68->true-opnd68)
                               ($$atom loc680)
                               ($$atom sn0)))))
                         (($$atom move-opnd68-to-loc)
                          ($$atom 0)
                          ($$atom loc0)
                          ($$atom sn0))))))))))))
 (define gen-div-in-place
   (lambda (opnds0 reg680 sn0)
     (if (($$atom null?) ($$atom opnds0))
         ($$atom #f)
         (let ((first-opnd0 (($$atom car) ($$atom opnds0))))
           (let ((other-opnds0 (($$atom cdr) ($$atom opnds0))))
             (let ((sn-other-opnds0
                    (($$atom sn-opnds) ($$atom other-opnds0) ($$atom sn0))))
               (begin
                 (($$atom sn-opnd)
                  ($$atom first-opnd0)
                  ($$atom sn-other-opnds0))
                 (let ((opnd680 (($$atom opnd->opnd68)
                                 ($$atom first-opnd0)
                                 (($$atom temp-in-opnd68) ($$atom reg680))
                                 ($$atom sn0))))
                   (begin
                     (($$atom make-top-of-frame-if-stk-opnd68)
                      ($$atom opnd680)
                      ($$atom sn-other-opnds0))
                     (if (($$atom imm?) ($$atom opnd680))
                         (let ((n0 (($$atom quotient)
                                    (($$atom imm-val) ($$atom opnd680))
                                    ($$atom 8))))
                           (begin
                             (($$atom div-n-to-reg68)
                              ($$atom n0)
                              ($$atom reg680))
                             (if (($$atom >)
                                  (($$atom abs) ($$atom n0))
                                  ($$atom 1))
                                 (($$atom emit-and.w)
                                  (($$atom make-imm) ($$atom -8))
                                  ($$atom reg680))
                                 ($$atom #f))))
                         (let ((opnd68*0
                                (($$atom opnd68->true-opnd68)
                                 ($$atom opnd680)
                                 ($$atom sn-other-opnds0))))
                           (begin
                             (($$atom emit-divsl.l)
                              ($$atom opnd68*0)
                              ($$atom reg680)
                              ($$atom reg680))
                             (($$atom emit-asl.l)
                              (($$atom make-imm) ($$atom 3))
                              ($$atom reg680)))))
                     (($$atom gen-div-in-place)
                      ($$atom other-opnds0)
                      ($$atom reg680)
                      ($$atom sn0)))))))))))
 (define gen-div
   (lambda (first-opnd0 other-opnds0 loc0 sn0 self-opnds?0)
     (if (($$atom null?) ($$atom other-opnds0))
         (begin
           (($$atom move-opnd-to-loc68)
            ($$atom first-opnd0)
            ($$atom 39)
            (($$atom sn-opnd) ($$atom loc0) ($$atom sn0)))
           (($$atom emit-moveq) ($$atom 8) ($$atom 0))
           (($$atom emit-divsl.l) ($$atom 31) ($$atom 0) ($$atom 0))
           (($$atom emit-asl.l) (($$atom make-imm) ($$atom 3)) ($$atom 0))
           (($$atom emit-and.w) (($$atom make-imm) ($$atom -8)) ($$atom 0))
           (($$atom move-opnd68-to-loc) ($$atom 0) ($$atom loc0) ($$atom sn0)))
         (let ((sn-other-opnds0
                (($$atom sn-opnds) ($$atom other-opnds0) ($$atom sn0))))
           (begin
             (($$atom sn-opnd) ($$atom first-opnd0) ($$atom sn-other-opnds0))
             (if (if (($$atom <) ($$atom loc0) ($$atom 10000))
                     (if ($$atom self-opnds?0)
                         ($$atom #f)
                         (($$atom not)
                          (($$atom eq?) ($$atom loc0) ($$atom return-reg))))
                     ($$atom #f))
                 (let ((reg680 (($$atom reg->reg68) ($$atom loc0))))
                   (begin
                     (if (($$atom eq?) ($$atom first-opnd0) ($$atom loc0))
                         ($$atom #f)
                         (($$atom move-opnd-to-loc68)
                          ($$atom first-opnd0)
                          ($$atom reg680)
                          ($$atom sn-other-opnds0)))
                     (($$atom gen-div-in-place)
                      ($$atom other-opnds0)
                      ($$atom reg680)
                      ($$atom sn0))))
                 (begin
                   (($$atom move-opnd-to-loc68)
                    ($$atom first-opnd0)
                    ($$atom 0)
                    (($$atom sn-opnd) ($$atom loc0) ($$atom sn-other-opnds0)))
                   (($$atom gen-div-in-place)
                    ($$atom other-opnds0)
                    ($$atom 0)
                    (($$atom sn-opnd) ($$atom loc0) ($$atom sn0)))
                   (($$atom move-opnd68-to-loc)
                    ($$atom 0)
                    ($$atom loc0)
                    ($$atom sn0)))))))))
 (define gen-rem
   (lambda (first-opnd0 second-opnd0 loc0 sn0)
     (let ((sn-loc0 (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))))
       (let ((sn-second-opnd0
              (($$atom sn-opnd) ($$atom second-opnd0) ($$atom sn-loc0))))
         (begin
           (($$atom move-opnd-to-loc68)
            ($$atom first-opnd0)
            ($$atom 0)
            ($$atom sn-second-opnd0))
           (let ((reg680 (if (if (($$atom <) ($$atom loc0) ($$atom 10000))
                                 (($$atom not)
                                  (($$atom eq?)
                                   ($$atom loc0)
                                   ($$atom return-reg)))
                                 ($$atom #f))
                             (($$atom reg->reg68) ($$atom loc0))
                             ($$atom 7)))
                 (opnd680 (($$atom opnd->opnd68)
                           ($$atom second-opnd0)
                           ($$atom #f)
                           ($$atom sn-loc0))))
             (begin
               (($$atom make-top-of-frame-if-stk-opnd68)
                ($$atom opnd680)
                ($$atom sn-loc0))
               (let ((opnd68*0
                      (if (($$atom areg?) ($$atom opnd680))
                          (begin
                            (($$atom emit-move.l)
                             ($$atom opnd680)
                             ($$atom reg680))
                            ($$atom reg680))
                          (($$atom opnd68->true-opnd68)
                           ($$atom opnd680)
                           ($$atom sn-loc0)))))
                 (($$atom emit-divsl.l)
                  ($$atom opnd68*0)
                  ($$atom reg680)
                  ($$atom 0)))
               (($$atom move-opnd68-to-loc)
                ($$atom reg680)
                ($$atom loc0)
                ($$atom sn0))
               (if (if (($$atom <) ($$atom loc0) ($$atom 10000))
                       (($$atom not)
                        (($$atom eq?) ($$atom loc0) ($$atom return-reg)))
                       ($$atom #f))
                   ($$atom #f)
                   (($$atom emit-move.l)
                    (($$atom make-imm) ($$atom bits-false))
                    ($$atom 7))))))))))
 (define gen-mod
   (lambda (first-opnd0 second-opnd0 loc0 sn0)
     (let ((sn-loc0 (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))))
       (let ((sn-first-opnd0
              (($$atom sn-opnd) ($$atom first-opnd0) ($$atom sn-loc0))))
         (let ((sn-second-opnd0
                (($$atom sn-opnd)
                 ($$atom second-opnd0)
                 ($$atom sn-first-opnd0))))
           (let ((opnd680 (($$atom opnd->opnd68)
                           ($$atom second-opnd0)
                           ($$atom #f)
                           ($$atom sn-second-opnd0))))
             (let ((general-case0
                    (lambda (first-opnd1 loc1 sn1 sn-second-opnd1 opnd681)
                      (let ((opnd68*0
                             (($$atom opnd68->true-opnd68)
                              (($$atom opnd->opnd68)
                               ($$atom first-opnd1)
                               ($$atom #f)
                               ($$atom sn-second-opnd1))
                              ($$atom sn-second-opnd1)))
                            (opnd68**0
                             (($$atom opnd68->true-opnd68)
                              ($$atom opnd681)
                              ($$atom sn-second-opnd1)))
                            (lbl30 (($$atom label-counter)))
                            (lbl20 (($$atom label-counter)))
                            (lbl10 (($$atom label-counter))))
                        (begin
                          (($$atom move-opnd68-to-loc68)
                           ($$atom opnd68*0)
                           ($$atom 0))
                          (($$atom move-opnd68-to-loc68)
                           ($$atom opnd68**0)
                           ($$atom 7))
                          (($$atom emit-divsl.l)
                           ($$atom 7)
                           ($$atom 7)
                           ($$atom 0))
                          (($$atom emit-move.l) ($$atom 7) ($$atom 7))
                          (($$atom emit-beq) ($$atom lbl30))
                          (($$atom move-opnd68-to-loc68)
                           ($$atom opnd68*0)
                           ($$atom 0))
                          (($$atom emit-bmi) ($$atom lbl10))
                          (($$atom move-opnd68-to-loc68)
                           ($$atom opnd68**0)
                           ($$atom 0))
                          (($$atom emit-bpl) ($$atom lbl30))
                          (($$atom emit-bra) ($$atom lbl20))
                          (($$atom emit-label) ($$atom lbl10))
                          (($$atom move-opnd68-to-loc68)
                           ($$atom opnd68**0)
                           ($$atom 0))
                          (($$atom emit-bmi) ($$atom lbl30))
                          (($$atom emit-label) ($$atom lbl20))
                          (($$atom emit-add.l) ($$atom 0) ($$atom 7))
                          (($$atom emit-label) ($$atom lbl30))
                          (($$atom move-opnd68-to-loc)
                           ($$atom 7)
                           ($$atom loc1)
                           ($$atom sn1))
                          (($$atom emit-move.l)
                           (($$atom make-imm) ($$atom bits-false))
                           ($$atom 7)))))))
               (begin
                 (($$atom make-top-of-frame-if-stk-opnd68)
                  ($$atom opnd680)
                  ($$atom sn-first-opnd0))
                 (if (($$atom imm?) ($$atom opnd680))
                     (let ((n0 (($$atom quotient)
                                (($$atom imm-val) ($$atom opnd680))
                                ($$atom 8))))
                       (if (($$atom >) ($$atom n0) ($$atom 0))
                           (let ((shift0 (($$atom power-of-2) ($$atom n0))))
                             (if ($$atom shift0)
                                 (let ((reg680 (if (if (($$atom <)
                                                        ($$atom loc0)
                                                        ($$atom 10000))
                                                       (($$atom not)
                                                        (($$atom eq?)
                                                         ($$atom loc0)
                                                         ($$atom return-reg)))
                                                       ($$atom #f))
                                                   (($$atom reg->reg68)
                                                    ($$atom loc0))
                                                   ($$atom 0))))
                                   (begin
                                     (($$atom move-opnd-to-loc68)
                                      ($$atom first-opnd0)
                                      ($$atom reg680)
                                      ($$atom sn-loc0))
                                     (($$atom emit-and.l)
                                      (($$atom make-imm)
                                       (($$atom *)
                                        (($$atom -) ($$atom n0) ($$atom 1))
                                        ($$atom 8)))
                                      ($$atom reg680))
                                     (($$atom move-opnd68-to-loc)
                                      ($$atom reg680)
                                      ($$atom loc0)
                                      ($$atom sn0))))
                                 (($$atom general-case0)
                                  ($$atom first-opnd0)
                                  ($$atom loc0)
                                  ($$atom sn0)
                                  ($$atom sn-second-opnd0)
                                  ($$atom opnd680))))
                           (($$atom general-case0)
                            ($$atom first-opnd0)
                            ($$atom loc0)
                            ($$atom sn0)
                            ($$atom sn-second-opnd0)
                            ($$atom opnd680))))
                     (($$atom general-case0)
                      ($$atom first-opnd0)
                      ($$atom loc0)
                      ($$atom sn0)
                      ($$atom sn-second-opnd0)
                      ($$atom opnd680)))))))))))
 (define gen-op
   (lambda (emit-op0 dst-ok?0)
     (letrec ((gen-op-in-place0
               (lambda (emit-op1 dst-ok?1 opnds0 loc680 sn0)
                 (if (($$atom null?) ($$atom opnds0))
                     ($$atom #f)
                     (let ((first-opnd0 (($$atom car) ($$atom opnds0))))
                       (let ((other-opnds0 (($$atom cdr) ($$atom opnds0))))
                         (let ((sn-other-opnds0
                                (($$atom sn-opnds)
                                 ($$atom other-opnds0)
                                 ($$atom sn0))))
                           (begin
                             (($$atom sn-opnd)
                              ($$atom first-opnd0)
                              ($$atom sn-other-opnds0))
                             (let ((opnd680 (($$atom opnd->opnd68)
                                             ($$atom first-opnd0)
                                             (($$atom temp-in-opnd68)
                                              ($$atom loc680))
                                             (($$atom sn-opnd68)
                                              ($$atom loc680)
                                              ($$atom sn0)))))
                               (begin
                                 (($$atom make-top-of-frame-if-stk-opnds68)
                                  ($$atom opnd680)
                                  ($$atom loc680)
                                  ($$atom sn-other-opnds0))
                                 (if (($$atom imm?) ($$atom opnd680))
                                     (($$atom emit-op1)
                                      ($$atom opnd680)
                                      (($$atom opnd68->true-opnd68)
                                       ($$atom loc680)
                                       ($$atom sn-other-opnds0)))
                                     (let ((opnd68*0
                                            (($$atom opnd68->true-opnd68)
                                             ($$atom opnd680)
                                             ($$atom sn-other-opnds0))))
                                       (if (let ((g2910 (($$atom dreg?)
                                                         ($$atom opnd680))))
                                             (if ($$atom g2910)
                                                 ($$atom g2910)
                                                 (($$atom dst-ok?1)
                                                  ($$atom loc680))))
                                           (($$atom emit-op1)
                                            ($$atom opnd68*0)
                                            (($$atom opnd68->true-opnd68)
                                             ($$atom loc680)
                                             ($$atom sn-other-opnds0)))
                                           (begin
                                             (($$atom move-opnd68-to-loc68)
                                              ($$atom opnd68*0)
                                              ($$atom 0))
                                             (($$atom emit-op1)
                                              ($$atom 0)
                                              (($$atom opnd68->true-opnd68)
                                               ($$atom loc680)
                                               ($$atom sn-other-opnds0)))))))
                                 (($$atom gen-op-in-place0)
                                  ($$atom emit-op1)
                                  ($$atom dst-ok?1)
                                  ($$atom other-opnds0)
                                  ($$atom loc680)
                                  ($$atom sn0))))))))))))
       (lambda (self-opnds0 other-opnds0 loc0 sn0 self?0)
         (let ((opnds0 (($$atom ##append-two)
                        ($$atom self-opnds0)
                        ($$atom other-opnds0))))
           (let ((first-opnd0 (($$atom car) ($$atom opnds0))))
             (let ((other-opnds1 (($$atom cdr) ($$atom opnds0))))
               (let ((sn-other-opnds0
                      (($$atom sn-opnds) ($$atom other-opnds1) ($$atom sn0))))
                 (let ((sn-first-opnd0
                        (($$atom sn-opnd)
                         ($$atom first-opnd0)
                         ($$atom sn-other-opnds0))))
                   (if (($$atom <=)
                        (($$atom length) ($$atom self-opnds0))
                        ($$atom 1))
                       (let ((loc680 (($$atom loc->loc68)
                                      ($$atom loc0)
                                      ($$atom #f)
                                      ($$atom sn-first-opnd0))))
                         (if ($$atom self?0)
                             (($$atom gen-op-in-place0)
                              ($$atom emit-op0)
                              ($$atom dst-ok?0)
                              ($$atom opnds0)
                              ($$atom loc680)
                              ($$atom sn0))
                             (begin
                               (($$atom move-opnd-to-loc68)
                                ($$atom first-opnd0)
                                ($$atom loc680)
                                ($$atom sn-other-opnds0))
                               (($$atom gen-op-in-place0)
                                ($$atom emit-op0)
                                ($$atom dst-ok?0)
                                ($$atom other-opnds1)
                                ($$atom loc680)
                                ($$atom sn0)))))
                       (begin
                         (($$atom move-opnd-to-loc68)
                          ($$atom first-opnd0)
                          ($$atom 0)
                          (($$atom sn-opnd)
                           ($$atom loc0)
                           ($$atom sn-other-opnds0)))
                         (($$atom gen-op-in-place0)
                          ($$atom emit-op0)
                          ($$atom dst-ok?0)
                          ($$atom other-opnds1)
                          ($$atom 0)
                          (($$atom sn-opnd) ($$atom loc0) ($$atom sn0)))
                         (if ($$atom self?0)
                             (let ((loc680 (($$atom loc->loc68)
                                            ($$atom loc0)
                                            ($$atom 0)
                                            ($$atom sn0))))
                               (begin
                                 (($$atom make-top-of-frame-if-stk-opnd68)
                                  ($$atom loc680)
                                  ($$atom sn0))
                                 (($$atom emit-op0)
                                  ($$atom 0)
                                  (($$atom opnd68->true-opnd68)
                                   ($$atom loc680)
                                   ($$atom sn0)))))
                             (($$atom move-opnd68-to-loc)
                              ($$atom 0)
                              ($$atom loc0)
                              ($$atom sn0))))))))))))))
 (define gen-logior (($$atom gen-op) ($$atom emit-or.l) ($$atom dreg?)))
 (define gen-logxor
   (($$atom gen-op) ($$atom emit-eor.l) (lambda (x0) ($$atom #f))))
 (define gen-logand (($$atom gen-op) ($$atom emit-and.l) ($$atom dreg?)))
 (define gen-shift
   (lambda (right-shift0)
     (lambda (opnds0 loc0 sn0)
       (let ((sn-loc0 (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))))
         (let ((opnd10 (($$atom car) ($$atom opnds0))))
           (let ((opnd20 (($$atom car) (($$atom cdr) ($$atom opnds0)))))
             (let ((sn-opnd10
                    (($$atom sn-opnd) ($$atom opnd10) ($$atom sn-loc0))))
               (let ((o20 (($$atom opnd->opnd68)
                           ($$atom opnd20)
                           ($$atom #f)
                           ($$atom sn-opnd10))))
                 (begin
                   (($$atom make-top-of-frame-if-stk-opnd68)
                    ($$atom o20)
                    ($$atom sn-opnd10))
                   (if (($$atom imm?) ($$atom o20))
                       (let ((reg680 (if (if (($$atom <)
                                              ($$atom loc0)
                                              ($$atom 10000))
                                             (($$atom not)
                                              (($$atom eq?)
                                               ($$atom loc0)
                                               ($$atom return-reg)))
                                             ($$atom #f))
                                         (($$atom reg->reg68) ($$atom loc0))
                                         ($$atom 0))))
                         (let ((n0 (($$atom quotient)
                                    (($$atom imm-val) ($$atom o20))
                                    ($$atom 8))))
                           (let ((emit-shft0
                                  (if (($$atom >) ($$atom n0) ($$atom 0))
                                      ($$atom emit-lsl.l)
                                      ($$atom right-shift0))))
                             (begin
                               (($$atom move-opnd-to-loc68)
                                ($$atom opnd10)
                                ($$atom reg680)
                                ($$atom sn-loc0))
                               (letrec ((loop0 (lambda (reg681 emit-shft1 i0)
                                                 (if (($$atom >)
                                                      ($$atom i0)
                                                      ($$atom 0))
                                                     (begin
                                                       (($$atom emit-shft1)
                                                        (($$atom make-imm)
                                                         (($$atom min)
                                                          ($$atom i0)
                                                          ($$atom 8)))
                                                        ($$atom reg681))
                                                       (($$atom loop0)
                                                        ($$atom reg681)
                                                        ($$atom emit-shft1)
                                                        (($$atom -)
                                                         ($$atom i0)
                                                         ($$atom 8))))
                                                     ($$atom #f)))))
                                 (($$atom loop0)
                                  ($$atom reg680)
                                  ($$atom emit-shft0)
                                  (($$atom min)
                                   (($$atom abs) ($$atom n0))
                                   ($$atom 29))))
                               (if (($$atom <) ($$atom n0) ($$atom 0))
                                   (($$atom emit-and.w)
                                    (($$atom make-imm) ($$atom -8))
                                    ($$atom reg680))
                                   ($$atom #f))
                               (($$atom move-opnd68-to-loc)
                                ($$atom reg680)
                                ($$atom loc0)
                                ($$atom sn0))))))
                       (let ((reg680 (if (if (($$atom <)
                                              ($$atom loc0)
                                              ($$atom 10000))
                                             (($$atom not)
                                              (($$atom eq?)
                                               ($$atom loc0)
                                               ($$atom return-reg)))
                                             ($$atom #f))
                                         (($$atom reg->reg68) ($$atom loc0))
                                         ($$atom 0))))
                         (let ((reg68*0 (if (if (($$atom <)
                                                 ($$atom loc0)
                                                 ($$atom 10000))
                                                (($$atom not)
                                                 (($$atom eq?)
                                                  ($$atom loc0)
                                                  ($$atom return-reg)))
                                                ($$atom #f))
                                            ($$atom 0)
                                            ($$atom 7))))
                           (let ((lbl10 (($$atom label-counter))))
                             (let ((lbl20 (($$atom label-counter))))
                               (begin
                                 (($$atom emit-move.l)
                                  (($$atom opnd68->true-opnd68)
                                   ($$atom o20)
                                   ($$atom sn-opnd10))
                                  ($$atom reg68*0))
                                 (($$atom move-opnd-to-loc68)
                                  ($$atom opnd10)
                                  ($$atom reg680)
                                  ($$atom sn-loc0))
                                 (($$atom emit-asr.l)
                                  (($$atom make-imm) ($$atom 3))
                                  ($$atom reg68*0))
                                 (($$atom emit-bmi) ($$atom lbl10))
                                 (($$atom emit-lsl.l)
                                  ($$atom reg68*0)
                                  ($$atom reg680))
                                 (($$atom emit-bra) ($$atom lbl20))
                                 (($$atom emit-label) ($$atom lbl10))
                                 (($$atom emit-neg.l) ($$atom reg68*0))
                                 (($$atom right-shift0)
                                  ($$atom reg68*0)
                                  ($$atom reg680))
                                 (($$atom emit-and.w)
                                  (($$atom make-imm) ($$atom -8))
                                  ($$atom reg680))
                                 (($$atom emit-label) ($$atom lbl20))
                                 (($$atom move-opnd68-to-loc)
                                  ($$atom reg680)
                                  ($$atom loc0)
                                  ($$atom sn0))
                                 (if (if (($$atom <)
                                          ($$atom loc0)
                                          ($$atom 10000))
                                         (($$atom not)
                                          (($$atom eq?)
                                           ($$atom loc0)
                                           ($$atom return-reg)))
                                         ($$atom #f))
                                     ($$atom #f)
                                     (($$atom emit-move.l)
                                      (($$atom make-imm) ($$atom bits-false))
                                      ($$atom 7))))))))))))))))))
 (define flo-oper
   (lambda (oper10 oper20 opnds0 loc0 sn0)
     (begin
       (($$atom gen-guarantee-space) ($$atom 2))
       (($$atom move-opnd-to-loc68)
        (($$atom car) ($$atom opnds0))
        ($$atom 9)
        (($$atom sn-opnds)
         (($$atom cdr) ($$atom opnds0))
         (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))))
       (($$atom oper10)
        (($$atom make-disp*) ($$atom 9) ($$atom -1))
        ($$atom 557096))
       (letrec ((loop0 (lambda (oper21 sn1 opnds1)
                         (if (($$atom null?) ($$atom opnds1))
                             ($$atom #f)
                             (let ((opnd0 (($$atom car) ($$atom opnds1))))
                               (let ((other-opnds0
                                      (($$atom cdr) ($$atom opnds1))))
                                 (let ((sn-other-opnds0
                                        (($$atom sn-opnds)
                                         ($$atom other-opnds0)
                                         ($$atom sn1))))
                                   (begin
                                     (($$atom move-opnd-to-loc68)
                                      ($$atom opnd0)
                                      ($$atom 9)
                                      ($$atom sn-other-opnds0))
                                     (($$atom oper21)
                                      (($$atom make-disp*)
                                       ($$atom 9)
                                       ($$atom -1))
                                      ($$atom 557096))
                                     (($$atom loop0)
                                      ($$atom oper21)
                                      ($$atom sn1)
                                      (($$atom cdr) ($$atom opnds1)))))))))))
         (($$atom loop0)
          ($$atom oper20)
          ($$atom sn0)
          (($$atom cdr) ($$atom opnds0))))
       (($$atom add-n-to-loc68) ($$atom -8) ($$atom 11))
       (($$atom emit-fmov.dx) ($$atom 557096) ($$atom 19))
       (let ((reg680 (if (($$atom <) ($$atom loc0) ($$atom 10000))
                         (($$atom reg->reg68) ($$atom loc0))
                         ($$atom 9))))
         (begin
           (($$atom emit-move.l) ($$atom 11) ($$atom reg680))
           (($$atom emit-addq.l) ($$atom 1) ($$atom reg680))))
       (if (($$atom <) ($$atom loc0) ($$atom 10000))
           ($$atom #f)
           (($$atom move-opnd68-to-loc)
            ($$atom 9)
            ($$atom loc0)
            ($$atom sn0))))))
 (define gen-make-placeholder
   (lambda (opnds0 loc0 sn0)
     (let ((sn-loc0 (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))))
       (let ((opnd0 (($$atom car) ($$atom opnds0))))
         (begin
           (($$atom gen-guarantee-space) ($$atom 4))
           (($$atom emit-clr.l) ($$atom 35))
           (($$atom move-opnd-to-loc68)
            ($$atom opnd0)
            ($$atom 35)
            ($$atom sn-loc0))
           (($$atom emit-move.l) ($$atom 6) ($$atom 35))
           (($$atom move-opnd68-to-loc68) ($$atom 11) ($$atom 10))
           (($$atom emit-addq.l) ($$atom 1) ($$atom 10))
           (($$atom emit-move.l) ($$atom 10) ($$atom 35))
           (($$atom move-opnd68-to-loc)
            ($$atom 10)
            ($$atom loc0)
            ($$atom sn0)))))))
 (define gen-subprocedure-id
   (lambda (opnds0 loc0 sn0)
     (let ((reg680 (if (if (($$atom <) ($$atom loc0) ($$atom 10000))
                           (($$atom not)
                            (($$atom eq?) ($$atom loc0) ($$atom return-reg)))
                           ($$atom #f))
                       (($$atom reg->reg68) ($$atom loc0))
                       ($$atom 0)))
           (opnd0 (($$atom car) ($$atom opnds0)))
           (sn-loc0 (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))))
       (begin
         (($$atom move-opnd-to-loc68)
          ($$atom opnd0)
          ($$atom 9)
          ($$atom sn-loc0))
         (($$atom move-n-to-loc68) ($$atom 32768) ($$atom reg680))
         (($$atom emit-sub.w)
          (($$atom make-disp*) ($$atom 9) ($$atom -2))
          ($$atom reg680))
         (($$atom move-opnd68-to-loc)
          ($$atom reg680)
          ($$atom loc0)
          ($$atom sn0))))))
 (define gen-subprocedure-parent
   (lambda (opnds0 loc0 sn0)
     (let ((opnd0 (($$atom car) ($$atom opnds0)))
           (sn-loc0 (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))))
       (begin
         (($$atom move-opnd-to-loc68)
          ($$atom opnd0)
          ($$atom 9)
          ($$atom sn-loc0))
         (($$atom emit-add.w)
          (($$atom make-disp*) ($$atom 9) ($$atom -2))
          ($$atom 9))
         (($$atom add-n-to-loc68) ($$atom -32768) ($$atom 9))
         (($$atom move-opnd68-to-loc)
          ($$atom 9)
          ($$atom loc0)
          ($$atom sn0))))))
 (define gen-return-fs
   (lambda (opnds0 loc0 sn0)
     (let ((lbl0 (($$atom label-counter)))
           (reg680 (if (if (($$atom <) ($$atom loc0) ($$atom 10000))
                           (($$atom not)
                            (($$atom eq?) ($$atom loc0) ($$atom return-reg)))
                           ($$atom #f))
                       (($$atom reg->reg68) ($$atom loc0))
                       ($$atom 0)))
           (opnd0 (($$atom car) ($$atom opnds0)))
           (sn-loc0 (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))))
       (begin
         (($$atom move-opnd-to-loc68)
          ($$atom opnd0)
          ($$atom 9)
          ($$atom sn-loc0))
         (($$atom emit-moveq) ($$atom 0) ($$atom reg680))
         (($$atom emit-move.w)
          (($$atom make-disp*) ($$atom 9) ($$atom -6))
          ($$atom reg680))
         (($$atom emit-beq) ($$atom lbl0))
         (($$atom emit-and.w)
          (($$atom make-imm) ($$atom 32767))
          ($$atom reg680))
         (($$atom emit-subq.l) ($$atom 8) ($$atom reg680))
         (($$atom emit-label) ($$atom lbl0))
         (($$atom emit-addq.l) ($$atom 8) ($$atom reg680))
         (($$atom emit-asl.l) (($$atom make-imm) ($$atom 1)) ($$atom reg680))
         (($$atom move-opnd68-to-loc)
          ($$atom reg680)
          ($$atom loc0)
          ($$atom sn0))))))
 (define gen-return-link
   (lambda (opnds0 loc0 sn0)
     (let ((lbl0 (($$atom label-counter)))
           (reg680 (if (if (($$atom <) ($$atom loc0) ($$atom 10000))
                           (($$atom not)
                            (($$atom eq?) ($$atom loc0) ($$atom return-reg)))
                           ($$atom #f))
                       (($$atom reg->reg68) ($$atom loc0))
                       ($$atom 0)))
           (opnd0 (($$atom car) ($$atom opnds0)))
           (sn-loc0 (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))))
       (begin
         (($$atom move-opnd-to-loc68)
          ($$atom opnd0)
          ($$atom 9)
          ($$atom sn-loc0))
         (($$atom emit-moveq) ($$atom 0) ($$atom reg680))
         (($$atom emit-move.w)
          (($$atom make-disp*) ($$atom 9) ($$atom -6))
          ($$atom reg680))
         (($$atom emit-beq) ($$atom lbl0))
         (($$atom emit-and.w)
          (($$atom make-imm) ($$atom 32767))
          ($$atom reg680))
         (($$atom emit-subq.l) ($$atom 8) ($$atom reg680))
         (($$atom emit-label) ($$atom lbl0))
         (($$atom emit-addq.l) ($$atom 8) ($$atom reg680))
         (($$atom emit-sub.w)
          (($$atom make-disp*) ($$atom 9) ($$atom -4))
          ($$atom reg680))
         (($$atom emit-asl.l) (($$atom make-imm) ($$atom 1)) ($$atom reg680))
         (($$atom move-opnd68-to-loc)
          ($$atom reg680)
          ($$atom loc0)
          ($$atom sn0))))))
 (define gen-procedure-info
   (lambda (opnds0 loc0 sn0)
     (let ((opnd0 (($$atom car) ($$atom opnds0)))
           (sn-loc0 (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))))
       (begin
         (($$atom move-opnd-to-loc68)
          ($$atom opnd0)
          ($$atom 9)
          ($$atom sn-loc0))
         (($$atom emit-add.w)
          (($$atom make-disp*) ($$atom 9) ($$atom -2))
          ($$atom 9))
         (($$atom move-opnd68-to-loc)
          (($$atom make-disp*) ($$atom 9) ($$atom 32762))
          ($$atom loc0)
          ($$atom sn0))))))
 (define gen-guarantee-space
   (lambda (n0)
     (begin
       (set! pointers-allocated
             (($$atom +) ($$atom pointers-allocated) ($$atom n0)))
       (if (($$atom >) ($$atom pointers-allocated) ($$atom 12288))
           (begin
             (($$atom gen-guarantee-fudge))
             (set! pointers-allocated ($$atom n0)))
           ($$atom #f)))))
 (define gen-guarantee-fudge
   (lambda ()
     (if (($$atom >) ($$atom pointers-allocated) ($$atom 0))
         (let ((lbl0 (($$atom label-counter))))
           (begin
             (($$atom emit-cmp.l) ($$atom heap-lim-slot) ($$atom 11))
             (($$atom emit-bcc) ($$atom lbl0))
             (($$atom gen-trap)
              ($$atom instr-source)
              ($$atom entry-frame)
              ($$atom #f)
              ($$atom #f)
              ($$atom 13)
              ($$atom lbl0))
             (set! pointers-allocated ($$atom 0))))
         ($$atom #f))))
 (define pointers-allocated ($$atom '()))
 (define gen-type
   (lambda (opnds0 loc0 sn0)
     (let ((sn-loc0 (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))))
       (let ((opnd0 (($$atom car) ($$atom opnds0))))
         (let ((reg680 (if (if (($$atom <) ($$atom loc0) ($$atom 10000))
                               (($$atom not)
                                (($$atom eq?)
                                 ($$atom loc0)
                                 ($$atom return-reg)))
                               ($$atom #f))
                           (($$atom reg->reg68) ($$atom loc0))
                           ($$atom 0))))
           (begin
             (($$atom move-opnd-to-loc68)
              ($$atom opnd0)
              ($$atom reg680)
              ($$atom sn-loc0))
             (($$atom emit-and.l)
              (($$atom make-imm) ($$atom 7))
              ($$atom reg680))
             (($$atom emit-asl.l)
              (($$atom make-imm) ($$atom 3))
              ($$atom reg680))
             (($$atom move-opnd68-to-loc)
              ($$atom reg680)
              ($$atom loc0)
              ($$atom sn0))))))))
 (define gen-type-cast
   (lambda (opnds0 loc0 sn0)
     (let ((sn-loc0 (if ($$atom loc0)
                        (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))
                        ($$atom sn0))))
       (let ((second-opnd0 (($$atom car) (($$atom cdr) ($$atom opnds0))))
             (first-opnd0 (($$atom car) ($$atom opnds0))))
         (let ((sn-loc1 (if (if ($$atom loc0)
                                (($$atom not)
                                 (($$atom eq?)
                                  ($$atom first-opnd0)
                                  ($$atom loc0)))
                                ($$atom #f))
                            ($$atom sn-loc0)
                            ($$atom sn0))))
           (let ((o10 (($$atom opnd->opnd68)
                       ($$atom first-opnd0)
                       ($$atom #f)
                       (($$atom sn-opnd)
                        ($$atom second-opnd0)
                        ($$atom sn-loc1)))))
             (let ((o20 (($$atom opnd->opnd68)
                         ($$atom second-opnd0)
                         (($$atom temp-in-opnd68) ($$atom o10))
                         ($$atom sn-loc1))))
               (let ((reg680 (if (if (($$atom <) ($$atom loc0) ($$atom 10000))
                                     (($$atom not)
                                      (($$atom eq?)
                                       ($$atom loc0)
                                       ($$atom return-reg)))
                                     ($$atom #f))
                                 (($$atom reg->reg68) ($$atom loc0))
                                 ($$atom 0))))
                 (begin
                   (($$atom make-top-of-frame-if-stk-opnds68)
                    ($$atom o10)
                    ($$atom o20)
                    ($$atom sn-loc1))
                   (($$atom move-opnd68-to-loc68)
                    (($$atom opnd68->true-opnd68)
                     ($$atom o10)
                     (($$atom sn-opnd68) ($$atom o20) ($$atom sn-loc1)))
                    ($$atom reg680))
                   (($$atom emit-and.w)
                    (($$atom make-imm) ($$atom -8))
                    ($$atom reg680))
                   (if (($$atom imm?) ($$atom o20))
                       (let ((n0 (($$atom quotient)
                                  (($$atom imm-val) ($$atom o20))
                                  ($$atom 8))))
                         (if (($$atom >) ($$atom n0) ($$atom 0))
                             (($$atom emit-addq.w) ($$atom n0) ($$atom reg680))
                             ($$atom #f)))
                       (begin
                         (($$atom move-opnd68-to-loc68)
                          (($$atom opnd68->true-opnd68)
                           ($$atom o20)
                           ($$atom sn-loc1))
                          ($$atom 9))
                         (($$atom emit-exg) ($$atom 9) ($$atom reg680))
                         (($$atom emit-asr.l)
                          (($$atom make-imm) ($$atom 3))
                          ($$atom reg680))
                         (($$atom emit-add.l) ($$atom 9) ($$atom reg680))))
                   (($$atom move-opnd68-to-loc)
                    ($$atom reg680)
                    ($$atom loc0)
                    ($$atom sn0)))))))))))
 (define gen-subtype
   (lambda (opnds0 loc0 sn0)
     (let ((reg680 (if (if (($$atom <) ($$atom loc0) ($$atom 10000))
                           (($$atom not)
                            (($$atom eq?) ($$atom loc0) ($$atom return-reg)))
                           ($$atom #f))
                       (($$atom reg->reg68) ($$atom loc0))
                       ($$atom 0)))
           (opnd0 (($$atom car) ($$atom opnds0)))
           (sn-loc0 (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))))
       (begin
         (($$atom move-opnd-to-loc68)
          ($$atom opnd0)
          ($$atom 9)
          ($$atom sn-loc0))
         (($$atom emit-moveq) ($$atom 0) ($$atom reg680))
         (($$atom emit-move.b) ($$atom 17) ($$atom reg680))
         (($$atom move-opnd68-to-loc)
          ($$atom reg680)
          ($$atom loc0)
          ($$atom sn0))))))
 (define gen-subtype-set!
   (lambda (opnds0 loc0 sn0)
     (let ((sn-loc0 (if ($$atom loc0)
                        (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))
                        ($$atom sn0))))
       (let ((second-opnd0 (($$atom car) (($$atom cdr) ($$atom opnds0))))
             (first-opnd0 (($$atom car) ($$atom opnds0))))
         (let ((sn-loc1 (if (if ($$atom loc0)
                                (($$atom not)
                                 (($$atom eq?)
                                  ($$atom first-opnd0)
                                  ($$atom loc0)))
                                ($$atom #f))
                            ($$atom sn-loc0)
                            ($$atom sn0))))
           (let ((o10 (($$atom opnd->opnd68)
                       ($$atom first-opnd0)
                       ($$atom #f)
                       (($$atom sn-opnd)
                        ($$atom second-opnd0)
                        ($$atom sn-loc1)))))
             (let ((o20 (($$atom opnd->opnd68)
                         ($$atom second-opnd0)
                         (($$atom temp-in-opnd68) ($$atom o10))
                         ($$atom sn-loc1))))
               (begin
                 (($$atom make-top-of-frame-if-stk-opnds68)
                  ($$atom o10)
                  ($$atom o20)
                  ($$atom sn-loc1))
                 (($$atom move-opnd68-to-loc68)
                  (($$atom opnd68->true-opnd68)
                   ($$atom o10)
                   (($$atom sn-opnd68) ($$atom o20) ($$atom sn-loc1)))
                  ($$atom 9))
                 (if (($$atom imm?) ($$atom o20))
                     (($$atom emit-move.b)
                      (($$atom make-imm) (($$atom imm-val) ($$atom o20)))
                      ($$atom 17))
                     (begin
                       (($$atom move-opnd68-to-loc68)
                        (($$atom opnd68->true-opnd68)
                         ($$atom o20)
                         ($$atom sn-loc1))
                        ($$atom 0))
                       (($$atom emit-move.b) ($$atom 0) ($$atom 17))))
                 (if (if ($$atom loc0)
                         (($$atom not)
                          (($$atom eq?) ($$atom first-opnd0) ($$atom loc0)))
                         ($$atom #f))
                     (($$atom move-opnd68-to-loc)
                      ($$atom 9)
                      ($$atom loc0)
                      ($$atom sn0))
                     ($$atom #f))))))))))
 (define vector-select
   (lambda (kind0 vector0 string0 vector80 vector160)
     (if (let ((g2920 ($$atom 'string)))
           (if (($$atom number?) ($$atom kind0))
               (if (($$atom number?) ($$atom g2920))
                   (($$atom =) ($$atom kind0) ($$atom g2920))
                   ($$atom #f))
               (($$atom eq?) ($$atom kind0) ($$atom g2920))))
         ($$atom string0)
         (if (let ((g2930 ($$atom 'vector8)))
               (if (($$atom number?) ($$atom kind0))
                   (if (($$atom number?) ($$atom g2930))
                       (($$atom =) ($$atom kind0) ($$atom g2930))
                       ($$atom #f))
                   (($$atom eq?) ($$atom kind0) ($$atom g2930))))
             ($$atom vector80)
             (if (let ((g2940 ($$atom 'vector16)))
                   (if (($$atom number?) ($$atom kind0))
                       (if (($$atom number?) ($$atom g2940))
                           (($$atom =) ($$atom kind0) ($$atom g2940))
                           ($$atom #f))
                       (($$atom eq?) ($$atom kind0) ($$atom g2940))))
                 ($$atom vector160)
                 ($$atom vector0))))))
 (define obj-vector?
   (lambda (kind0)
     (($$atom vector-select)
      ($$atom kind0)
      ($$atom #t)
      ($$atom #f)
      ($$atom #f)
      ($$atom #f))))
 (define make-gen-vector
   (lambda (kind0)
     (lambda (opnds0 loc0 sn0)
       (let ((sn-loc0 (if ($$atom loc0)
                          (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))
                          ($$atom sn0))))
         (let ((n0 (($$atom length) ($$atom opnds0))))
           (let ((bytes0 (($$atom +)
                          ($$atom 4)
                          (($$atom *)
                           (($$atom vector-select)
                            ($$atom kind0)
                            ($$atom 4)
                            ($$atom 1)
                            ($$atom 1)
                            ($$atom 2))
                           (($$atom +)
                            ($$atom n0)
                            (if (($$atom eq?) ($$atom kind0) ($$atom 'string))
                                ($$atom 1)
                                ($$atom 0)))))))
             (let ((adjust0 (($$atom modulo)
                             (($$atom *) ($$atom -1) ($$atom bytes0))
                             ($$atom 8))))
               (begin
                 (let ((n1 (($$atom quotient)
                            (($$atom *)
                             (($$atom quotient)
                              (($$atom +) ($$atom bytes0) ($$atom 7))
                              ($$atom 8))
                             ($$atom 8))
                            ($$atom 4))))
                   (begin
                     (set! pointers-allocated
                           (($$atom +)
                            ($$atom pointers-allocated)
                            ($$atom n1)))
                     (if (($$atom >)
                          ($$atom pointers-allocated)
                          ($$atom 12288))
                         (begin
                           (($$atom gen-guarantee-fudge))
                           (set! pointers-allocated ($$atom n1)))
                         ($$atom #f))))
                 (if (($$atom =) ($$atom adjust0) ($$atom 0))
                     ($$atom #f)
                     (($$atom emit-subq.l) ($$atom adjust0) ($$atom 11)))
                 (if (($$atom eq?) ($$atom kind0) ($$atom 'string))
                     (($$atom emit-move.b)
                      (($$atom make-imm) ($$atom 0))
                      ($$atom 35))
                     ($$atom #f))
                 (letrec ((loop0 (lambda (kind1 sn-loc1 opnds1)
                                   (if (($$atom pair?) ($$atom opnds1))
                                       (let ((o0 (($$atom car)
                                                  ($$atom opnds1))))
                                         (let ((sn-o0 (($$atom sn-opnds)
                                                       (($$atom cdr)
                                                        ($$atom opnds1))
                                                       ($$atom sn-loc1))))
                                           (begin
                                             (if (($$atom eq?)
                                                  ($$atom kind1)
                                                  ($$atom 'vector))
                                                 (($$atom move-opnd-to-loc68)
                                                  ($$atom o0)
                                                  ($$atom 35)
                                                  ($$atom sn-o0))
                                                 (begin
                                                   (($$atom move-opnd-to-loc68)
                                                    ($$atom o0)
                                                    ($$atom 0)
                                                    ($$atom sn-o0))
                                                   (($$atom emit-asr.l)
                                                    (($$atom make-imm)
                                                     ($$atom 3))
                                                    ($$atom 0))
                                                   (if (($$atom eq?)
                                                        ($$atom kind1)
                                                        ($$atom 'vector16))
                                                       (($$atom emit-move.w)
                                                        ($$atom 0)
                                                        ($$atom 35))
                                                       (($$atom emit-move.b)
                                                        ($$atom 0)
                                                        ($$atom 35)))))
                                             (($$atom loop0)
                                              ($$atom kind1)
                                              ($$atom sn-loc1)
                                              (($$atom cdr)
                                               ($$atom opnds1))))))
                                       ($$atom #f)))))
                   (($$atom loop0)
                    ($$atom kind0)
                    ($$atom sn-loc0)
                    (($$atom reverse) ($$atom opnds0))))
                 (($$atom emit-move.l)
                  (let ((val0 (($$atom +)
                               (($$atom *)
                                ($$atom 256)
                                (($$atom -) ($$atom bytes0) ($$atom 4)))
                               (($$atom *)
                                ($$atom 8)
                                (if (($$atom eq?)
                                     ($$atom kind0)
                                     ($$atom 'vector))
                                    ($$atom 0)
                                    ($$atom 16))))))
                    (if (($$atom <) ($$atom val0) ($$atom 0))
                        (($$atom *) ($$atom val0) ($$atom 2))
                        (($$atom -)
                         ($$atom -1)
                         (($$atom *) ($$atom val0) ($$atom 2)))))
                  ($$atom 35))
                 (if ($$atom loc0)
                     (begin
                       (($$atom emit-lea)
                        (($$atom make-disp*) ($$atom 11) ($$atom 3))
                        ($$atom 10))
                       (($$atom move-opnd68-to-loc)
                        ($$atom 10)
                        ($$atom loc0)
                        ($$atom sn0)))
                     ($$atom #f))))))))))
 (define make-gen-vector-length
   (lambda (kind0)
     (lambda (opnds0 loc0 sn0)
       (let ((reg680 (if (if (($$atom <) ($$atom loc0) ($$atom 10000))
                             (($$atom not)
                              (($$atom eq?) ($$atom loc0) ($$atom return-reg)))
                             ($$atom #f))
                         (($$atom reg->reg68) ($$atom loc0))
                         ($$atom 0)))
             (opnd0 (($$atom car) ($$atom opnds0)))
             (sn-loc0 (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))))
         (begin
           (($$atom move-opnd-to-loc68)
            ($$atom opnd0)
            ($$atom 9)
            ($$atom sn-loc0))
           (($$atom move-opnd68-to-loc68)
            (($$atom make-disp*) ($$atom 9) ($$atom -3))
            ($$atom reg680))
           (($$atom emit-lsr.l)
            (($$atom make-imm)
             (($$atom vector-select)
              ($$atom kind0)
              ($$atom 7)
              ($$atom 5)
              ($$atom 5)
              ($$atom 6)))
            ($$atom reg680))
           (if (($$atom eq?) ($$atom kind0) ($$atom 'vector))
               ($$atom #f)
               (begin
                 (($$atom emit-and.w)
                  (($$atom make-imm) ($$atom -8))
                  ($$atom reg680))
                 (if (($$atom eq?) ($$atom kind0) ($$atom 'string))
                     (($$atom emit-subq.l) ($$atom 8) ($$atom reg680))
                     ($$atom #f))))
           (($$atom move-opnd68-to-loc)
            ($$atom reg680)
            ($$atom loc0)
            ($$atom sn0)))))))
 (define make-gen-vector-ref
   (lambda (kind0)
     (lambda (opnds0 loc0 sn0)
       (let ((sn-loc0 (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))))
         (let ((reg680 (if (if (($$atom <) ($$atom loc0) ($$atom 10000))
                               (($$atom not)
                                (($$atom eq?)
                                 ($$atom loc0)
                                 ($$atom return-reg)))
                               ($$atom #f))
                           (($$atom reg->reg68) ($$atom loc0))
                           ($$atom 0)))
               (second-opnd0 (($$atom car) (($$atom cdr) ($$atom opnds0))))
               (first-opnd0 (($$atom car) ($$atom opnds0))))
           (let ((o20 (($$atom opnd->opnd68)
                       ($$atom second-opnd0)
                       ($$atom #f)
                       (($$atom sn-opnd)
                        ($$atom first-opnd0)
                        ($$atom sn-loc0)))))
             (let ((o10 (($$atom opnd->opnd68)
                         ($$atom first-opnd0)
                         (($$atom temp-in-opnd68) ($$atom o20))
                         ($$atom sn-loc0))))
               (begin
                 (($$atom make-top-of-frame-if-stk-opnds68)
                  ($$atom o10)
                  ($$atom o20)
                  ($$atom sn-loc0))
                 (let ((offset0 (if (($$atom eq?)
                                     ($$atom kind0)
                                     ($$atom 'closure))
                                    ($$atom 2)
                                    ($$atom 1))))
                   (let ((loc680 (if (($$atom imm?) ($$atom o20))
                                     (begin
                                       (($$atom move-opnd68-to-loc68)
                                        (($$atom opnd68->true-opnd68)
                                         ($$atom o10)
                                         ($$atom sn-loc0))
                                        ($$atom 9))
                                       (let ((offset1 (($$atom +)
                                                       (($$atom quotient)
                                                        (($$atom imm-val)
                                                         ($$atom o20))
                                                        (($$atom vector-select)
                                                         ($$atom kind0)
                                                         ($$atom 2)
                                                         ($$atom 8)
                                                         ($$atom 8)
                                                         ($$atom 4)))
                                                       ($$atom offset0))))
                                         (if (($$atom =)
                                              ($$atom offset1)
                                              ($$atom 0))
                                             ($$atom 17)
                                             (($$atom make-disp)
                                              ($$atom 9)
                                              ($$atom offset1)))))
                                     (begin
                                       (($$atom move-opnd68-to-loc68)
                                        (($$atom opnd68->true-opnd68)
                                         ($$atom o20)
                                         (($$atom sn-opnd68)
                                          ($$atom o10)
                                          ($$atom sn-loc0)))
                                        ($$atom 0))
                                       (($$atom emit-asr.l)
                                        (($$atom make-imm)
                                         (($$atom vector-select)
                                          ($$atom kind0)
                                          ($$atom 1)
                                          ($$atom 3)
                                          ($$atom 3)
                                          ($$atom 2)))
                                        ($$atom 0))
                                       (($$atom move-opnd68-to-loc68)
                                        (($$atom opnd68->true-opnd68)
                                         ($$atom o10)
                                         ($$atom sn-loc0))
                                        ($$atom 9))
                                       (if (if (if (($$atom number?)
                                                    ($$atom reg680))
                                                   (if (($$atom number?)
                                                        ($$atom 0))
                                                       (($$atom =)
                                                        ($$atom reg680)
                                                        ($$atom 0))
                                                       ($$atom #f))
                                                   (($$atom eq?)
                                                    ($$atom reg680)
                                                    ($$atom 0)))
                                               (($$atom not)
                                                (($$atom obj-vector?)
                                                 ($$atom kind0)))
                                               ($$atom #f))
                                           (begin
                                             (($$atom emit-move.l)
                                              ($$atom 0)
                                              ($$atom 10))
                                             (($$atom make-inx)
                                              ($$atom 9)
                                              ($$atom 10)
                                              ($$atom offset0)))
                                           (($$atom make-inx)
                                            ($$atom 9)
                                            ($$atom 0)
                                            ($$atom offset0)))))))
                     (begin
                       (if (($$atom obj-vector?) ($$atom kind0))
                           ($$atom #f)
                           (($$atom emit-moveq) ($$atom 0) ($$atom reg680)))
                       (if (let ((g2950 (let ((g2960 ($$atom 'string)))
                                          (if (($$atom number?) ($$atom kind0))
                                              (if (($$atom number?)
                                                   ($$atom g2960))
                                                  (($$atom =)
                                                   ($$atom kind0)
                                                   ($$atom g2960))
                                                  ($$atom #f))
                                              (($$atom eq?)
                                               ($$atom kind0)
                                               ($$atom g2960))))))
                             (if ($$atom g2950)
                                 ($$atom g2950)
                                 (let ((g2970 ($$atom 'vector8)))
                                   (if (($$atom number?) ($$atom kind0))
                                       (if (($$atom number?) ($$atom g2970))
                                           (($$atom =)
                                            ($$atom kind0)
                                            ($$atom g2970))
                                           ($$atom #f))
                                       (($$atom eq?)
                                        ($$atom kind0)
                                        ($$atom g2970))))))
                           (($$atom emit-move.b)
                            ($$atom loc680)
                            ($$atom reg680))
                           (if (let ((g2980 ($$atom 'vector16)))
                                 (if (($$atom number?) ($$atom kind0))
                                     (if (($$atom number?) ($$atom g2980))
                                         (($$atom =)
                                          ($$atom kind0)
                                          ($$atom g2980))
                                         ($$atom #f))
                                     (($$atom eq?)
                                      ($$atom kind0)
                                      ($$atom g2980))))
                               (($$atom emit-move.w)
                                ($$atom loc680)
                                ($$atom reg680))
                               (($$atom emit-move.l)
                                ($$atom loc680)
                                ($$atom reg680))))
                       (if (($$atom obj-vector?) ($$atom kind0))
                           ($$atom #f)
                           (begin
                             (($$atom emit-asl.l)
                              (($$atom make-imm) ($$atom 3))
                              ($$atom reg680))
                             (if (($$atom eq?) ($$atom kind0) ($$atom 'string))
                                 (($$atom emit-addq.w)
                                  ($$atom 7)
                                  ($$atom reg680))
                                 ($$atom #f))))
                       (($$atom move-opnd68-to-loc)
                        ($$atom reg680)
                        ($$atom loc0)
                        ($$atom sn0)))))))))))))
 (define make-gen-vector-set!
   (lambda (kind0)
     (lambda (opnds0 loc0 sn0)
       (let ((sn-loc0 (if ($$atom loc0)
                          (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))
                          ($$atom sn0))))
         (let ((third-opnd0
                (($$atom car) (($$atom cdr) (($$atom cdr) ($$atom opnds0)))))
               (second-opnd0 (($$atom car) (($$atom cdr) ($$atom opnds0))))
               (first-opnd0 (($$atom car) ($$atom opnds0))))
           (let ((sn-loc1 (if (if ($$atom loc0)
                                  (($$atom not)
                                   (($$atom eq?)
                                    ($$atom first-opnd0)
                                    ($$atom loc0)))
                                  ($$atom #f))
                              (($$atom sn-opnd)
                               ($$atom first-opnd0)
                               ($$atom sn-loc0))
                              ($$atom sn0))))
             (let ((sn-third-opnd0
                    (($$atom sn-opnd) ($$atom third-opnd0) ($$atom sn-loc1))))
               (let ((o20 (($$atom opnd->opnd68)
                           ($$atom second-opnd0)
                           ($$atom #f)
                           (($$atom sn-opnd)
                            ($$atom first-opnd0)
                            ($$atom sn-third-opnd0)))))
                 (let ((o10 (($$atom opnd->opnd68)
                             ($$atom first-opnd0)
                             (($$atom temp-in-opnd68) ($$atom o20))
                             ($$atom sn-third-opnd0))))
                   (begin
                     (($$atom make-top-of-frame-if-stk-opnds68)
                      ($$atom o10)
                      ($$atom o20)
                      ($$atom sn-third-opnd0))
                     (let ((offset0 (if (($$atom eq?)
                                         ($$atom kind0)
                                         ($$atom 'closure))
                                        ($$atom 2)
                                        ($$atom 1))))
                       (let ((loc680 (if (($$atom imm?) ($$atom o20))
                                         (begin
                                           (($$atom move-opnd68-to-loc68)
                                            (($$atom opnd68->true-opnd68)
                                             ($$atom o10)
                                             ($$atom sn-third-opnd0))
                                            ($$atom 9))
                                           (let ((offset1 (($$atom +)
                                                           (($$atom quotient)
                                                            (($$atom imm-val)
                                                             ($$atom o20))
                                                            (($$atom vector-select)
                                                             ($$atom kind0)
                                                             ($$atom 2)
                                                             ($$atom 8)
                                                             ($$atom 8)
                                                             ($$atom 4)))
                                                           ($$atom offset0))))
                                             (if (($$atom =)
                                                  ($$atom offset1)
                                                  ($$atom 0))
                                                 ($$atom 17)
                                                 (($$atom make-disp)
                                                  ($$atom 9)
                                                  ($$atom offset1)))))
                                         (begin
                                           (($$atom move-opnd68-to-loc68)
                                            (($$atom opnd68->true-opnd68)
                                             ($$atom o20)
                                             (($$atom sn-opnd68)
                                              ($$atom o10)
                                              ($$atom sn-loc1)))
                                            ($$atom 0))
                                           (($$atom emit-asr.l)
                                            (($$atom make-imm)
                                             (($$atom vector-select)
                                              ($$atom kind0)
                                              ($$atom 1)
                                              ($$atom 3)
                                              ($$atom 3)
                                              ($$atom 2)))
                                            ($$atom 0))
                                           (($$atom move-opnd68-to-loc68)
                                            (($$atom opnd68->true-opnd68)
                                             ($$atom o10)
                                             ($$atom sn-loc1))
                                            ($$atom 9))
                                           (if (($$atom obj-vector?)
                                                ($$atom kind0))
                                               (($$atom make-inx)
                                                ($$atom 9)
                                                ($$atom 0)
                                                ($$atom offset0))
                                               (begin
                                                 (($$atom emit-move.l)
                                                  ($$atom 0)
                                                  ($$atom 10))
                                                 (($$atom make-inx)
                                                  ($$atom 9)
                                                  ($$atom 10)
                                                  ($$atom offset0))))))))
                         (begin
                           (if (($$atom obj-vector?) ($$atom kind0))
                               (($$atom move-opnd-to-loc68)
                                ($$atom third-opnd0)
                                ($$atom loc680)
                                ($$atom sn-loc1))
                               (begin
                                 (($$atom move-opnd-to-loc68)
                                  ($$atom third-opnd0)
                                  ($$atom 0)
                                  ($$atom sn-loc1))
                                 (($$atom emit-asr.l)
                                  (($$atom make-imm) ($$atom 3))
                                  ($$atom 0))
                                 (if (($$atom eq?)
                                      ($$atom kind0)
                                      ($$atom 'vector16))
                                     (($$atom emit-move.w)
                                      ($$atom 0)
                                      ($$atom loc680))
                                     (($$atom emit-move.b)
                                      ($$atom 0)
                                      ($$atom loc680)))))
                           (if (if ($$atom loc0)
                                   (($$atom not)
                                    (($$atom eq?)
                                     ($$atom first-opnd0)
                                     ($$atom loc0)))
                                   ($$atom #f))
                               (($$atom copy-opnd-to-loc)
                                ($$atom first-opnd0)
                                ($$atom loc0)
                                ($$atom sn0))
                               ($$atom #f)))))))))))))))
 (define make-gen-vector-shrink!
   (lambda (kind0)
     (lambda (opnds0 loc0 sn0)
       (let ((sn-loc0 (if ($$atom loc0)
                          (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))
                          ($$atom sn0))))
         (let ((second-opnd0 (($$atom car) (($$atom cdr) ($$atom opnds0))))
               (first-opnd0 (($$atom car) ($$atom opnds0))))
           (let ((sn-loc1 (if (if ($$atom loc0)
                                  (($$atom not)
                                   (($$atom eq?)
                                    ($$atom first-opnd0)
                                    ($$atom loc0)))
                                  ($$atom #f))
                              (($$atom sn-opnd)
                               ($$atom first-opnd0)
                               ($$atom sn-loc0))
                              ($$atom sn0))))
             (let ((o20 (($$atom opnd->opnd68)
                         ($$atom second-opnd0)
                         ($$atom #f)
                         (($$atom sn-opnd)
                          ($$atom first-opnd0)
                          ($$atom sn-loc1)))))
               (let ((o10 (($$atom opnd->opnd68)
                           ($$atom first-opnd0)
                           (($$atom temp-in-opnd68) ($$atom o20))
                           ($$atom sn-loc1))))
                 (begin
                   (($$atom make-top-of-frame-if-stk-opnds68)
                    ($$atom o10)
                    ($$atom o20)
                    ($$atom sn-loc1))
                   (($$atom move-opnd68-to-loc68)
                    (($$atom opnd68->true-opnd68)
                     ($$atom o20)
                     (($$atom sn-opnd68) ($$atom o10) ($$atom sn-loc1)))
                    ($$atom 0))
                   (($$atom emit-move.l)
                    (($$atom opnd68->true-opnd68)
                     ($$atom o10)
                     ($$atom sn-loc1))
                    ($$atom 9))
                   (if (($$atom eq?) ($$atom kind0) ($$atom 'string))
                       (begin
                         (($$atom emit-asr.l)
                          (($$atom make-imm) ($$atom 3))
                          ($$atom 0))
                         (($$atom emit-move.b)
                          (($$atom make-imm) ($$atom 0))
                          (($$atom make-inx) ($$atom 9) ($$atom 0) ($$atom 1)))
                         (($$atom emit-addq.l) ($$atom 1) ($$atom 0))
                         (($$atom emit-asl.l)
                          (($$atom make-imm) ($$atom 8))
                          ($$atom 0)))
                       (($$atom emit-asl.l)
                        (($$atom make-imm)
                         (($$atom vector-select)
                          ($$atom kind0)
                          ($$atom 7)
                          ($$atom 5)
                          ($$atom 5)
                          ($$atom 6)))
                        ($$atom 0)))
                   (($$atom emit-move.b) ($$atom 17) ($$atom 0))
                   (($$atom emit-move.l)
                    ($$atom 0)
                    (($$atom make-disp*) ($$atom 9) ($$atom -3)))
                   (if (if ($$atom loc0)
                           (($$atom not)
                            (($$atom eq?) ($$atom first-opnd0) ($$atom loc0)))
                           ($$atom #f))
                       (($$atom move-opnd68-to-loc)
                        ($$atom 9)
                        ($$atom loc0)
                        ($$atom sn0))
                       ($$atom #f)))))))))))
 (define gen-eq-test
   (lambda (bits0 not?0 opnds0 lbl0 fs0)
     (begin
       (($$atom gen-compare*)
        (($$atom opnd->opnd68)
         (($$atom car) ($$atom opnds0))
         ($$atom #f)
         ($$atom fs0))
        (($$atom make-imm) ($$atom bits0))
        ($$atom fs0))
       (if ($$atom not?0)
           (($$atom emit-bne) ($$atom lbl0))
           (($$atom emit-beq) ($$atom lbl0))))))
 (define gen-compare
   (lambda (opnd10 opnd20 fs0)
     (let ((o10 (($$atom opnd->opnd68)
                 ($$atom opnd10)
                 ($$atom #f)
                 (($$atom sn-opnd) ($$atom opnd20) ($$atom fs0)))))
       (let ((o20 (($$atom opnd->opnd68)
                   ($$atom opnd20)
                   (($$atom temp-in-opnd68) ($$atom o10))
                   ($$atom fs0))))
         (($$atom gen-compare*) ($$atom o10) ($$atom o20) ($$atom fs0))))))
 (define gen-compare*
   (lambda (o10 o20 fs0)
     (begin
       (($$atom make-top-of-frame-if-stk-opnds68)
        ($$atom o10)
        ($$atom o20)
        ($$atom fs0))
       (let ((order-1-20
              (if (($$atom imm?) ($$atom o10))
                  (($$atom cmp-n-to-opnd68)
                   (($$atom imm-val) ($$atom o10))
                   (($$atom opnd68->true-opnd68) ($$atom o20) ($$atom fs0)))
                  (if (($$atom imm?) ($$atom o20))
                      (($$atom not)
                       (($$atom cmp-n-to-opnd68)
                        (($$atom imm-val) ($$atom o20))
                        (($$atom opnd68->true-opnd68)
                         ($$atom o10)
                         ($$atom fs0))))
                      (if (($$atom reg68?) ($$atom o10))
                          (begin
                            (($$atom emit-cmp.l)
                             (($$atom opnd68->true-opnd68)
                              ($$atom o20)
                              ($$atom fs0))
                             ($$atom o10))
                            ($$atom #f))
                          (if (($$atom reg68?) ($$atom o20))
                              (begin
                                (($$atom emit-cmp.l)
                                 (($$atom opnd68->true-opnd68)
                                  ($$atom o10)
                                  ($$atom fs0))
                                 ($$atom o20))
                                ($$atom #t))
                              (begin
                                (($$atom emit-move.l)
                                 (($$atom opnd68->true-opnd68)
                                  ($$atom o10)
                                  (($$atom sn-opnd68)
                                   ($$atom o20)
                                   ($$atom fs0)))
                                 ($$atom 0))
                                (($$atom emit-cmp.l)
                                 (($$atom opnd68->true-opnd68)
                                  ($$atom o20)
                                  ($$atom fs0))
                                 ($$atom 0))
                                ($$atom #f))))))))
         (begin (($$atom shrink-frame) ($$atom fs0)) ($$atom order-1-20))))))
 (define gen-compares
   (lambda (branch<0 branch>=0 branch>0 branch<=0 not?0 opnds0 lbl0 fs0)
     (($$atom gen-compares*)
      ($$atom gen-compare)
      ($$atom branch<0)
      ($$atom branch>=0)
      ($$atom branch>0)
      ($$atom branch<=0)
      ($$atom not?0)
      ($$atom opnds0)
      ($$atom lbl0)
      ($$atom fs0))))
 (define gen-compares*
   (lambda (gen-comp0
            branch<0
            branch>=0
            branch>0
            branch<=0
            not?0
            opnds0
            lbl0
            fs0)
     (letrec ((gen-compare-sequence0
               (lambda (gen-comp1
                        branch<1
                        branch>=1
                        branch>1
                        branch<=1
                        not?1
                        lbl1
                        fs1
                        opnd10
                        opnd20
                        rest0)
                 (if (($$atom null?) ($$atom rest0))
                     (if (($$atom gen-comp1)
                          ($$atom opnd10)
                          ($$atom opnd20)
                          ($$atom fs1))
                         (if ($$atom not?1)
                             (($$atom branch<=1) ($$atom lbl1))
                             (($$atom branch>1) ($$atom lbl1)))
                         (if ($$atom not?1)
                             (($$atom branch>=1) ($$atom lbl1))
                             (($$atom branch<1) ($$atom lbl1))))
                     (let ((order-1-20
                            (($$atom gen-comp1)
                             ($$atom opnd10)
                             ($$atom opnd20)
                             (($$atom sn-opnd)
                              ($$atom opnd20)
                              (($$atom sn-opnds)
                               ($$atom rest0)
                               ($$atom fs1))))))
                       (if (($$atom =) ($$atom current-fs) ($$atom fs1))
                           (if ($$atom not?1)
                               (begin
                                 (if ($$atom order-1-20)
                                     (($$atom branch<=1) ($$atom lbl1))
                                     (($$atom branch>=1) ($$atom lbl1)))
                                 (($$atom gen-compare-sequence0)
                                  ($$atom gen-comp1)
                                  ($$atom branch<1)
                                  ($$atom branch>=1)
                                  ($$atom branch>1)
                                  ($$atom branch<=1)
                                  ($$atom not?1)
                                  ($$atom lbl1)
                                  ($$atom fs1)
                                  ($$atom opnd20)
                                  (($$atom car) ($$atom rest0))
                                  (($$atom cdr) ($$atom rest0))))
                               (let ((exit-lbl0 (($$atom label-counter))))
                                 (begin
                                   (if ($$atom order-1-20)
                                       (($$atom branch<=1) ($$atom exit-lbl0))
                                       (($$atom branch>=1) ($$atom exit-lbl0)))
                                   (($$atom gen-compare-sequence0)
                                    ($$atom gen-comp1)
                                    ($$atom branch<1)
                                    ($$atom branch>=1)
                                    ($$atom branch>1)
                                    ($$atom branch<=1)
                                    ($$atom not?1)
                                    ($$atom lbl1)
                                    ($$atom fs1)
                                    ($$atom opnd20)
                                    (($$atom car) ($$atom rest0))
                                    (($$atom cdr) ($$atom rest0)))
                                   (($$atom emit-label) ($$atom exit-lbl0)))))
                           (if ($$atom not?1)
                               (let ((next-lbl0 (($$atom label-counter))))
                                 (begin
                                   (if ($$atom order-1-20)
                                       (($$atom branch>1) ($$atom next-lbl0))
                                       (($$atom branch<1) ($$atom next-lbl0)))
                                   (($$atom shrink-frame) ($$atom fs1))
                                   (($$atom emit-bra) ($$atom lbl1))
                                   (($$atom emit-label) ($$atom next-lbl0))
                                   (($$atom gen-compare-sequence0)
                                    ($$atom gen-comp1)
                                    ($$atom branch<1)
                                    ($$atom branch>=1)
                                    ($$atom branch>1)
                                    ($$atom branch<=1)
                                    ($$atom not?1)
                                    ($$atom lbl1)
                                    ($$atom fs1)
                                    ($$atom opnd20)
                                    (($$atom car) ($$atom rest0))
                                    (($$atom cdr) ($$atom rest0)))))
                               (let ((next-lbl0 (($$atom label-counter))))
                                 (let ((exit-lbl0 (($$atom label-counter))))
                                   (begin
                                     (if ($$atom order-1-20)
                                         (($$atom branch>1) ($$atom next-lbl0))
                                         (($$atom branch<1)
                                          ($$atom next-lbl0)))
                                     (($$atom shrink-frame) ($$atom fs1))
                                     (($$atom emit-bra) ($$atom exit-lbl0))
                                     (($$atom emit-label) ($$atom next-lbl0))
                                     (($$atom gen-compare-sequence0)
                                      ($$atom gen-comp1)
                                      ($$atom branch<1)
                                      ($$atom branch>=1)
                                      ($$atom branch>1)
                                      ($$atom branch<=1)
                                      ($$atom not?1)
                                      ($$atom lbl1)
                                      ($$atom fs1)
                                      ($$atom opnd20)
                                      (($$atom car) ($$atom rest0))
                                      (($$atom cdr) ($$atom rest0)))
                                     (($$atom emit-label)
                                      ($$atom exit-lbl0))))))))))))
       (if (let ((g2990 (($$atom null?) ($$atom opnds0))))
             (if ($$atom g2990)
                 ($$atom g2990)
                 (($$atom null?) (($$atom cdr) ($$atom opnds0)))))
           (begin
             (($$atom shrink-frame) ($$atom fs0))
             (if ($$atom not?0) ($$atom #f) (($$atom emit-bra) ($$atom lbl0))))
           (($$atom gen-compare-sequence0)
            ($$atom gen-comp0)
            ($$atom branch<0)
            ($$atom branch>=0)
            ($$atom branch>0)
            ($$atom branch<=0)
            ($$atom not?0)
            ($$atom lbl0)
            ($$atom fs0)
            (($$atom car) ($$atom opnds0))
            (($$atom car) (($$atom cdr) ($$atom opnds0)))
            (($$atom cdr) (($$atom cdr) ($$atom opnds0))))))))
 (define gen-compare-flo
   (lambda (opnd10 opnd20 fs0)
     (let ((o10 (($$atom opnd->opnd68)
                 ($$atom opnd10)
                 ($$atom #f)
                 (($$atom sn-opnd) ($$atom opnd20) ($$atom fs0)))))
       (let ((o20 (($$atom opnd->opnd68)
                   ($$atom opnd20)
                   (($$atom temp-in-opnd68) ($$atom o10))
                   ($$atom fs0))))
         (begin
           (($$atom make-top-of-frame-if-stk-opnds68)
            ($$atom o10)
            ($$atom o20)
            ($$atom fs0))
           (($$atom emit-move.l)
            (($$atom opnd68->true-opnd68)
             ($$atom o10)
             (($$atom sn-opnd68) ($$atom o20) ($$atom fs0)))
            ($$atom 9))
           (($$atom emit-move.l)
            (($$atom opnd68->true-opnd68) ($$atom o20) ($$atom fs0))
            ($$atom 10))
           (($$atom emit-fmov.dx)
            (($$atom make-disp*) ($$atom 10) ($$atom -1))
            ($$atom 557096))
           (let ((opnd11 (($$atom make-disp*) ($$atom 9) ($$atom -1))))
             (($$atom emit-fop.dx)
              ($$atom "cmp")
              ($$atom 56)
              ($$atom opnd11)
              ($$atom 557096)))
           ($$atom #t))))))
 (define gen-compares-flo
   (lambda (branch<0 branch>=0 branch>0 branch<=0 not?0 opnds0 lbl0 fs0)
     (($$atom gen-compares*)
      ($$atom gen-compare-flo)
      ($$atom branch<0)
      ($$atom branch>=0)
      ($$atom branch>0)
      ($$atom branch<=0)
      ($$atom not?0)
      ($$atom opnds0)
      ($$atom lbl0)
      ($$atom fs0))))
 (define gen-type-test
   (lambda (tag0 not?0 opnds0 lbl0 fs0)
     (let ((opnd0 (($$atom car) ($$atom opnds0))))
       (let ((o0 (($$atom opnd->opnd68)
                  ($$atom opnd0)
                  ($$atom #f)
                  ($$atom fs0))))
         (let ((mask-test0
                (lambda (fs1 o1 set-reg0 correction0)
                  (let ((opnd10 (if (($$atom =)
                                     ($$atom correction0)
                                     ($$atom 0))
                                    (if (($$atom dreg?) ($$atom o1))
                                        ($$atom o1)
                                        (begin
                                          (($$atom emit-move.l)
                                           (($$atom opnd68->true-opnd68)
                                            ($$atom o1)
                                            ($$atom fs1))
                                           ($$atom 0))
                                          ($$atom 0)))
                                    (begin
                                      (if (($$atom eq?) ($$atom o1) ($$atom 0))
                                          ($$atom #f)
                                          (($$atom emit-move.l)
                                           (($$atom opnd68->true-opnd68)
                                            ($$atom o1)
                                            ($$atom fs1))
                                           ($$atom 0)))
                                      (($$atom emit-addq.w)
                                       ($$atom correction0)
                                       ($$atom 0))
                                      ($$atom 0)))))
                    (begin
                      (let ((x0 (($$atom +)
                                 ($$atom 256)
                                 (($$atom +)
                                  (($$atom *) ($$atom opnd10) ($$atom 512))
                                  (($$atom opnd->mode/reg)
                                   ($$atom set-reg0))))))
                        (($$atom queue-put!)
                         ($$atom asm-code-queue)
                         (($$atom modulo) ($$atom x0) ($$atom 65536))))
                      (($$atom opnd-extension)
                       ($$atom set-reg0)
                       ($$atom #f)
                       ($$atom #t))
                      (if ($$atom ofile-asm?)
                          ((lambda l0
                             (let ((x0 (($$atom cons)
                                        ($$atom char-tab)
                                        ($$atom l0))))
                               (($$atom queue-put!)
                                ($$atom asm-code-queue)
                                (($$atom cons)
                                 ($$atom 'comment)
                                 ($$atom x0)))))
                           ($$atom "btst")
                           ($$atom char-tab)
                           (($$atom opnd-str) ($$atom opnd10))
                           ($$atom ",")
                           (($$atom opnd-str) ($$atom set-reg0)))
                          ($$atom #f)))))))
           (begin
             (($$atom make-top-of-frame-if-stk-opnd68)
              ($$atom o0)
              ($$atom fs0))
             (if (($$atom =) ($$atom tag0) ($$atom 0))
                 (if (($$atom eq?) ($$atom o0) ($$atom 0))
                     (($$atom emit-and.w)
                      (($$atom make-imm) ($$atom 7))
                      ($$atom 0))
                     (begin
                       (($$atom emit-move.l)
                        (($$atom opnd68->true-opnd68) ($$atom o0) ($$atom fs0))
                        ($$atom 0))
                       (($$atom emit-and.w)
                        (($$atom make-imm) ($$atom 7))
                        ($$atom 0))))
                 (if (($$atom =) ($$atom tag0) ($$atom 5))
                     (($$atom mask-test0)
                      ($$atom fs0)
                      ($$atom o0)
                      ($$atom 6)
                      ($$atom 0))
                     (($$atom mask-test0)
                      ($$atom fs0)
                      ($$atom o0)
                      ($$atom 7)
                      (($$atom modulo)
                       (($$atom -) ($$atom 4) ($$atom tag0))
                       ($$atom 8)))))
             (($$atom shrink-frame) ($$atom fs0))
             (if ($$atom not?0)
                 (($$atom emit-bne) ($$atom lbl0))
                 (($$atom emit-beq) ($$atom lbl0)))))))))
 (define gen-subtype-test
   (lambda (type0 not?0 opnds0 lbl0 fs0)
     (let ((opnd0 (($$atom car) ($$atom opnds0))))
       (let ((cont-lbl0 (($$atom label-counter)))
             (o0 (($$atom opnd->opnd68)
                  ($$atom opnd0)
                  ($$atom #f)
                  ($$atom fs0))))
         (begin
           (($$atom make-top-of-frame-if-stk-opnd68) ($$atom o0) ($$atom fs0))
           (if (($$atom eq?) ($$atom o0) ($$atom 0))
               ($$atom #f)
               (($$atom emit-move.l)
                (($$atom opnd68->true-opnd68) ($$atom o0) ($$atom fs0))
                ($$atom 0)))
           (($$atom emit-move.l) ($$atom 0) ($$atom 9))
           (($$atom emit-addq.w) ($$atom 1) ($$atom 0))
           (($$atom emit-btst) ($$atom 0) ($$atom 7))
           (($$atom shrink-frame) ($$atom fs0))
           (if ($$atom not?0)
               (($$atom emit-bne) ($$atom lbl0))
               (($$atom emit-bne) ($$atom cont-lbl0)))
           (($$atom emit-cmp.b)
            (($$atom make-imm) (($$atom *) ($$atom type0) ($$atom 8)))
            ($$atom 17))
           (if ($$atom not?0)
               (($$atom emit-bne) ($$atom lbl0))
               (($$atom emit-beq) ($$atom lbl0)))
           (($$atom emit-label) ($$atom cont-lbl0)))))))
 (define gen-even-test
   (lambda (not?0 opnds0 lbl0 fs0)
     (begin
       (($$atom move-opnd-to-loc68)
        (($$atom car) ($$atom opnds0))
        ($$atom 0)
        ($$atom fs0))
       (($$atom emit-and.w) (($$atom make-imm) ($$atom 8)) ($$atom 0))
       (($$atom shrink-frame) ($$atom fs0))
       (if ($$atom not?0)
           (($$atom emit-bne) ($$atom lbl0))
           (($$atom emit-beq) ($$atom lbl0))))))
 (define def-spec
   (lambda (name0 specializer-maker0)
     (let ((proc-name0 (($$atom string->canonical-symbol) ($$atom name0))))
       (let ((proc0 (($$atom prim-info) ($$atom proc-name0))))
         (if ($$atom proc0)
             (let ((x0 (($$atom specializer-maker0)
                        ($$atom proc0)
                        ($$atom proc-name0))))
               (($$atom vector-set!) ($$atom proc0) ($$atom 7) ($$atom x0)))
             (($$atom compiler-internal-error)
              ($$atom "def-spec, unknown primitive:")
              ($$atom name0)))))))
 (define safe
   (lambda (name0)
     (lambda (proc0 proc-name0)
       (let ((spec0 (($$atom get-prim-info) ($$atom name0))))
         (lambda (decls0) ($$atom spec0))))))
 (define unsafe
   (lambda (name0)
     (lambda (proc0 proc-name0)
       (let ((spec0 (($$atom get-prim-info) ($$atom name0))))
         (lambda (decls0)
           (if (($$atom safe?) ($$atom decls0))
               ($$atom proc0)
               ($$atom spec0)))))))
 (define safe-arith
   (lambda (fix-name0 flo-name0)
     (($$atom arith) ($$atom #t) ($$atom fix-name0) ($$atom flo-name0))))
 (define unsafe-arith
   (lambda (fix-name0 flo-name0)
     (($$atom arith) ($$atom #f) ($$atom fix-name0) ($$atom flo-name0))))
 (define arith
   (lambda (fix-safe?0 fix-name0 flo-name0)
     (lambda (proc0 proc-name0)
       (let ((flo-spec0
              (if ($$atom flo-name0)
                  (($$atom get-prim-info) ($$atom flo-name0))
                  ($$atom proc0)))
             (fix-spec0
              (if ($$atom fix-name0)
                  (($$atom get-prim-info) ($$atom fix-name0))
                  ($$atom proc0))))
         (lambda (decls0)
           (let ((arith0 (($$atom arith-implementation)
                          ($$atom proc-name0)
                          ($$atom decls0))))
             (if (($$atom eq?) ($$atom arith0) ($$atom fixnum-sym))
                 (if (let ((g3000 ($$atom fix-safe?0)))
                       (if ($$atom g3000)
                           ($$atom g3000)
                           (($$atom not) (($$atom safe?) ($$atom decls0)))))
                     ($$atom fix-spec0)
                     ($$atom proc0))
                 (if (($$atom eq?) ($$atom arith0) ($$atom flonum-sym))
                     (if (($$atom safe?) ($$atom decls0))
                         ($$atom proc0)
                         ($$atom flo-spec0))
                     ($$atom proc0)))))))))
 (($$atom define-apply)
  ($$atom "##TYPE")
  ($$atom #f)
  (lambda (opnds0 loc0 sn0)
    (($$atom gen-type) ($$atom opnds0) ($$atom loc0) ($$atom sn0))))
 (($$atom define-apply)
  ($$atom "##TYPE-CAST")
  ($$atom #f)
  (lambda (opnds0 loc0 sn0)
    (($$atom gen-type-cast) ($$atom opnds0) ($$atom loc0) ($$atom sn0))))
 (($$atom define-apply)
  ($$atom "##SUBTYPE")
  ($$atom #f)
  (lambda (opnds0 loc0 sn0)
    (($$atom gen-subtype) ($$atom opnds0) ($$atom loc0) ($$atom sn0))))
 (($$atom define-apply)
  ($$atom "##SUBTYPE-SET!")
  ($$atom #t)
  (lambda (opnds0 loc0 sn0)
    (($$atom gen-subtype-set!) ($$atom opnds0) ($$atom loc0) ($$atom sn0))))
 (($$atom define-ifjump)
  ($$atom "##NOT")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-eq-test)
     ($$atom bits-false)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##NULL?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-eq-test)
     ($$atom bits-null)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##UNASSIGNED?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-eq-test)
     ($$atom bits-unass)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##UNBOUND?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-eq-test)
     ($$atom bits-unbound)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##EQ?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-compares*)
     ($$atom gen-compare)
     ($$atom emit-beq)
     ($$atom emit-bne)
     ($$atom emit-beq)
     ($$atom emit-bne)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##FIXNUM?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-type-test)
     ($$atom 0)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##FLONUM?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-type-test)
     ($$atom 1)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##SPECIAL?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-type-test)
     ($$atom 7)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##PAIR?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-type-test)
     ($$atom 4)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##SUBTYPED?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-type-test)
     ($$atom 3)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##PROCEDURE?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-type-test)
     ($$atom 2)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##PLACEHOLDER?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-type-test)
     ($$atom 5)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##VECTOR?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-subtype-test)
     ($$atom 0)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##SYMBOL?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-subtype-test)
     ($$atom 1)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##RATNUM?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-subtype-test)
     ($$atom 3)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##CPXNUM?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-subtype-test)
     ($$atom 4)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##STRING?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-subtype-test)
     ($$atom 16)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##BIGNUM?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-subtype-test)
     ($$atom 17)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##CHAR?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (let ((opnd0 (($$atom car) ($$atom opnds0))))
      (let ((cont-lbl0 (($$atom label-counter)))
            (o0 (($$atom opnd->opnd68)
                 ($$atom opnd0)
                 ($$atom #f)
                 ($$atom fs0))))
        (begin
          (($$atom make-top-of-frame-if-stk-opnd68) ($$atom o0) ($$atom fs0))
          (($$atom emit-move.l)
           (($$atom opnd68->true-opnd68) ($$atom o0) ($$atom fs0))
           ($$atom 0))
          (if ($$atom not?0)
              (($$atom emit-bmi) ($$atom lbl0))
              (($$atom emit-bmi) ($$atom cont-lbl0)))
          (($$atom emit-addq.w) ($$atom 5) ($$atom 0))
          (($$atom emit-btst) ($$atom 0) ($$atom 7))
          (($$atom shrink-frame) ($$atom fs0))
          (if ($$atom not?0)
              (($$atom emit-bne) ($$atom lbl0))
              (($$atom emit-beq) ($$atom lbl0)))
          (($$atom emit-label) ($$atom cont-lbl0)))))))
 (($$atom define-ifjump)
  ($$atom "##CLOSURE?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (begin
      (($$atom move-opnd-to-loc68)
       (($$atom car) ($$atom opnds0))
       ($$atom 9)
       ($$atom fs0))
      (($$atom shrink-frame) ($$atom fs0))
      (($$atom emit-cmp.w) (($$atom make-imm) ($$atom 20153)) ($$atom 17))
      (if ($$atom not?0)
          (($$atom emit-bne) ($$atom lbl0))
          (($$atom emit-beq) ($$atom lbl0))))))
 (($$atom define-ifjump)
  ($$atom "##SUBPROCEDURE?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (begin
      (($$atom move-opnd-to-loc68)
       (($$atom car) ($$atom opnds0))
       ($$atom 9)
       ($$atom fs0))
      (($$atom shrink-frame) ($$atom fs0))
      (($$atom emit-move.w) ($$atom 33) ($$atom 0))
      (if ($$atom not?0)
          (($$atom emit-bmi) ($$atom lbl0))
          (($$atom emit-bpl) ($$atom lbl0))))))
 (($$atom define-ifjump)
  ($$atom "##RETURN-DYNAMIC-ENV-BIND?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (begin
      (($$atom move-opnd-to-loc68)
       (($$atom car) ($$atom opnds0))
       ($$atom 9)
       ($$atom fs0))
      (($$atom shrink-frame) ($$atom fs0))
      (($$atom emit-move.w)
       (($$atom make-disp*) ($$atom 9) ($$atom -6))
       ($$atom 0))
      (if ($$atom not?0)
          (($$atom emit-bne) ($$atom lbl0))
          (($$atom emit-beq) ($$atom lbl0))))))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (begin
                  (if (($$atom =)
                       (($$atom quotient) ($$atom loc0) ($$atom 10000))
                       ($$atom 1))
                      (($$atom max)
                       (($$atom modulo) ($$atom loc0) ($$atom 10000))
                       ($$atom sn0))
                      (if (($$atom =)
                           (($$atom quotient) ($$atom loc0) ($$atom 10000))
                           ($$atom 4))
                          (($$atom sn-opnd)
                           (($$atom clo-base) ($$atom loc0))
                           ($$atom sn0))
                          ($$atom sn0)))
                  (if (($$atom null?) ($$atom opnds0))
                      (($$atom copy-opnd-to-loc)
                       (($$atom make-obj) ($$atom 0))
                       ($$atom loc0)
                       ($$atom sn0))
                      (if (($$atom null?) (($$atom cdr) ($$atom opnds0)))
                          (($$atom copy-opnd-to-loc)
                           (($$atom car) ($$atom opnds0))
                           ($$atom loc0)
                           ($$atom sn0))
                          (if (let ((g3010 (($$atom <)
                                            ($$atom loc0)
                                            ($$atom 10000))))
                                (if ($$atom g3010)
                                    ($$atom g3010)
                                    (($$atom stk?) ($$atom loc0))))
                              (($$atom commut-oper)
                               ($$atom gen-add)
                               ($$atom opnds0)
                               ($$atom loc0)
                               ($$atom sn0)
                               ($$atom #f)
                               ($$atom '())
                               ($$atom '()))
                              (($$atom gen-add)
                               ($$atom opnds0)
                               ($$atom '())
                               ($$atom loc0)
                               ($$atom sn0)
                               ($$atom #f)))))))))
   (let ((prim0 (let ((proc1 (let ((name0 (($$atom string->canonical-symbol)
                                           ($$atom "##FIXNUM.+"))))
                               (let ((x0 (($$atom assq)
                                          ($$atom name0)
                                          ($$atom prim-proc-table))))
                                 (if ($$atom x0)
                                     (($$atom cdr) ($$atom x0))
                                     ($$atom #f))))))
                  (if ($$atom proc1)
                      ($$atom proc1)
                      (($$atom compiler-internal-error)
                       ($$atom "get-prim-info, unknown primitive:")
                       ($$atom "##FIXNUM.+"))))))
     (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (begin
                  (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))
                  (($$atom gen-sub)
                   (($$atom car) ($$atom opnds0))
                   (($$atom cdr) ($$atom opnds0))
                   ($$atom loc0)
                   ($$atom sn0)
                   (($$atom any-contains-opnd?)
                    ($$atom loc0)
                    (($$atom cdr) ($$atom opnds0))))))))
   (let ((prim0 (let ((proc1 (($$atom prim-info)
                              (($$atom string->canonical-symbol)
                               ($$atom "##FIXNUM.-")))))
                  (if ($$atom proc1)
                      ($$atom proc1)
                      (($$atom compiler-internal-error)
                       ($$atom "get-prim-info, unknown primitive:")
                       ($$atom "##FIXNUM.-"))))))
     (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (begin
                  (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))
                  (if (($$atom null?) ($$atom opnds0))
                      (($$atom copy-opnd-to-loc)
                       (($$atom make-obj) ($$atom 1))
                       ($$atom loc0)
                       ($$atom sn0))
                      (if (($$atom null?) (($$atom cdr) ($$atom opnds0)))
                          (($$atom copy-opnd-to-loc)
                           (($$atom car) ($$atom opnds0))
                           ($$atom loc0)
                           ($$atom sn0))
                          (if (if (($$atom reg?) ($$atom loc0))
                                  (($$atom not)
                                   (($$atom eq?)
                                    ($$atom loc0)
                                    ($$atom return-reg)))
                                  ($$atom #f))
                              (($$atom commut-oper)
                               ($$atom gen-mul)
                               ($$atom opnds0)
                               ($$atom loc0)
                               ($$atom sn0)
                               ($$atom #f)
                               ($$atom '())
                               ($$atom '()))
                              (($$atom gen-mul)
                               ($$atom opnds0)
                               ($$atom '())
                               ($$atom loc0)
                               ($$atom sn0)
                               ($$atom #f)))))))))
   (let ((prim0 (let ((proc1 (let ((name0 (letrec ((loop0 (lambda (str0 s0 i0)
                                                            (if (($$atom >=)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                         ($$atom i0)
                         ($$atom 0))
                        (begin
                          (($$atom string-set!)
                           ($$atom s0)
                           ($$atom i0)
                           (($$atom char-downcase)
                            (($$atom string-ref) ($$atom str0) ($$atom i0))))
                          (($$atom loop0)
                           ($$atom str0)
                           ($$atom s0)
                           (($$atom -) ($$atom i0) ($$atom 1))))
                        (($$atom string->symbol) ($$atom s0))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                            (($$atom loop0)
                                             ($$atom "##FIXNUM.*")
                                             (($$atom make-string) ($$atom 10))
                                             ($$atom 9)))))
                               (let ((x0 (($$atom assq)
                                          ($$atom name0)
                                          ($$atom prim-proc-table))))
                                 (if ($$atom x0)
                                     (($$atom cdr) ($$atom x0))
                                     ($$atom #f))))))
                  (if ($$atom proc1)
                      ($$atom proc1)
                      (($$atom compiler-internal-error)
                       ($$atom "get-prim-info, unknown primitive:")
                       ($$atom "##FIXNUM.*"))))))
     (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (begin
                  (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))
                  (($$atom gen-div)
                   (($$atom car) ($$atom opnds0))
                   (($$atom cdr) ($$atom opnds0))
                   ($$atom loc0)
                   ($$atom sn0)
                   (($$atom any-contains-opnd?)
                    ($$atom loc0)
                    (($$atom cdr) ($$atom opnds0))))))))
   (let ((prim0 (let ((proc1 (($$atom prim-info)
                              (($$atom string->canonical-symbol)
                               ($$atom "##FIXNUM.QUOTIENT")))))
                  (if ($$atom proc1)
                      ($$atom proc1)
                      (($$atom compiler-internal-error)
                       ($$atom "get-prim-info, unknown primitive:")
                       ($$atom "##FIXNUM.QUOTIENT"))))))
     (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (begin
                  (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))
                  (($$atom gen-rem)
                   (($$atom car) ($$atom opnds0))
                   (($$atom car) (($$atom cdr) ($$atom opnds0)))
                   ($$atom loc0)
                   ($$atom sn0))))))
   (let ((prim0 (let ((proc1 (($$atom prim-info)
                              (($$atom string->canonical-symbol)
                               ($$atom "##FIXNUM.REMAINDER")))))
                  (if ($$atom proc1)
                      ($$atom proc1)
                      (($$atom compiler-internal-error)
                       ($$atom "get-prim-info, unknown primitive:")
                       ($$atom "##FIXNUM.REMAINDER"))))))
     (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (begin
                  (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))
                  (($$atom gen-mod)
                   (($$atom car) ($$atom opnds0))
                   (($$atom car) (($$atom cdr) ($$atom opnds0)))
                   ($$atom loc0)
                   ($$atom sn0))))))
   (let ((prim0 (let ((proc1 (($$atom prim-info)
                              (($$atom string->canonical-symbol)
                               ($$atom "##FIXNUM.MODULO")))))
                  (if ($$atom proc1)
                      ($$atom proc1)
                      (($$atom compiler-internal-error)
                       ($$atom "get-prim-info, unknown primitive:")
                       ($$atom "##FIXNUM.MODULO"))))))
     (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (begin
                  (if (($$atom =)
                       (($$atom quotient) ($$atom loc0) ($$atom 10000))
                       ($$atom 1))
                      (($$atom max)
                       (($$atom modulo) ($$atom loc0) ($$atom 10000))
                       ($$atom sn0))
                      (if (($$atom =)
                           (($$atom quotient) ($$atom loc0) ($$atom 10000))
                           ($$atom 4))
                          (($$atom sn-opnd)
                           (($$atom clo-base) ($$atom loc0))
                           ($$atom sn0))
                          ($$atom sn0)))
                  (if (($$atom null?) ($$atom opnds0))
                      (($$atom copy-opnd-to-loc)
                       (($$atom make-obj) ($$atom 0))
                       ($$atom loc0)
                       ($$atom sn0))
                      (if (($$atom null?) (($$atom cdr) ($$atom opnds0)))
                          (($$atom copy-opnd-to-loc)
                           (($$atom car) ($$atom opnds0))
                           ($$atom loc0)
                           ($$atom sn0))
                          (if (let ((g3020 (($$atom <)
                                            ($$atom loc0)
                                            ($$atom 10000))))
                                (if ($$atom g3020)
                                    ($$atom g3020)
                                    (($$atom stk?) ($$atom loc0))))
                              (($$atom commut-oper)
                               ($$atom gen-logior)
                               ($$atom opnds0)
                               ($$atom loc0)
                               ($$atom sn0)
                               ($$atom #f)
                               ($$atom '())
                               ($$atom '()))
                              (($$atom gen-logior)
                               ($$atom opnds0)
                               ($$atom '())
                               ($$atom loc0)
                               ($$atom sn0)
                               ($$atom #f)))))))))
   (let ((prim0 (let ((proc1 (let ((name0 (($$atom string->canonical-symbol)
                                           ($$atom "##FIXNUM.LOGIOR"))))
                               (let ((x0 (($$atom assq)
                                          ($$atom name0)
                                          ($$atom prim-proc-table))))
                                 (if ($$atom x0)
                                     (($$atom cdr) ($$atom x0))
                                     ($$atom #f))))))
                  (if ($$atom proc1)
                      ($$atom proc1)
                      (($$atom compiler-internal-error)
                       ($$atom "get-prim-info, unknown primitive:")
                       ($$atom "##FIXNUM.LOGIOR"))))))
     (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (begin
                  (if (($$atom =)
                       (($$atom quotient) ($$atom loc0) ($$atom 10000))
                       ($$atom 1))
                      (($$atom max)
                       (($$atom modulo) ($$atom loc0) ($$atom 10000))
                       ($$atom sn0))
                      (if (($$atom =)
                           (($$atom quotient) ($$atom loc0) ($$atom 10000))
                           ($$atom 4))
                          (($$atom sn-opnd)
                           (($$atom clo-base) ($$atom loc0))
                           ($$atom sn0))
                          ($$atom sn0)))
                  (if (($$atom null?) ($$atom opnds0))
                      (($$atom copy-opnd-to-loc)
                       (($$atom make-obj) ($$atom 0))
                       ($$atom loc0)
                       ($$atom sn0))
                      (if (($$atom null?) (($$atom cdr) ($$atom opnds0)))
                          (($$atom copy-opnd-to-loc)
                           (($$atom car) ($$atom opnds0))
                           ($$atom loc0)
                           ($$atom sn0))
                          (if (let ((g3030 (($$atom <)
                                            ($$atom loc0)
                                            ($$atom 10000))))
                                (if ($$atom g3030)
                                    ($$atom g3030)
                                    (($$atom stk?) ($$atom loc0))))
                              (($$atom commut-oper)
                               ($$atom gen-logxor)
                               ($$atom opnds0)
                               ($$atom loc0)
                               ($$atom sn0)
                               ($$atom #f)
                               ($$atom '())
                               ($$atom '()))
                              (($$atom gen-logxor)
                               ($$atom opnds0)
                               ($$atom '())
                               ($$atom loc0)
                               ($$atom sn0)
                               ($$atom #f)))))))))
   (let ((prim0 (let ((proc1 (let ((name0 (($$atom string->canonical-symbol)
                                           ($$atom "##FIXNUM.LOGXOR"))))
                               (let ((x0 (($$atom assq)
                                          ($$atom name0)
                                          ($$atom prim-proc-table))))
                                 (if ($$atom x0)
                                     (($$atom cdr) ($$atom x0))
                                     ($$atom #f))))))
                  (if ($$atom proc1)
                      ($$atom proc1)
                      (($$atom compiler-internal-error)
                       ($$atom "get-prim-info, unknown primitive:")
                       ($$atom "##FIXNUM.LOGXOR"))))))
     (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (begin
                  (if (($$atom =)
                       (($$atom quotient) ($$atom loc0) ($$atom 10000))
                       ($$atom 1))
                      (($$atom max)
                       (($$atom modulo) ($$atom loc0) ($$atom 10000))
                       ($$atom sn0))
                      (if (($$atom =)
                           (($$atom quotient) ($$atom loc0) ($$atom 10000))
                           ($$atom 4))
                          (($$atom sn-opnd)
                           (($$atom clo-base) ($$atom loc0))
                           ($$atom sn0))
                          ($$atom sn0)))
                  (if (($$atom null?) ($$atom opnds0))
                      (($$atom copy-opnd-to-loc)
                       (($$atom make-obj) ($$atom -1))
                       ($$atom loc0)
                       ($$atom sn0))
                      (if (($$atom null?) (($$atom cdr) ($$atom opnds0)))
                          (($$atom copy-opnd-to-loc)
                           (($$atom car) ($$atom opnds0))
                           ($$atom loc0)
                           ($$atom sn0))
                          (if (let ((g3040 (($$atom <)
                                            ($$atom loc0)
                                            ($$atom 10000))))
                                (if ($$atom g3040)
                                    ($$atom g3040)
                                    (($$atom stk?) ($$atom loc0))))
                              (($$atom commut-oper)
                               ($$atom gen-logand)
                               ($$atom opnds0)
                               ($$atom loc0)
                               ($$atom sn0)
                               ($$atom #f)
                               ($$atom '())
                               ($$atom '()))
                              (($$atom gen-logand)
                               ($$atom opnds0)
                               ($$atom '())
                               ($$atom loc0)
                               ($$atom sn0)
                               ($$atom #f)))))))))
   (let ((prim0 (let ((proc1 (let ((name0 (($$atom string->canonical-symbol)
                                           ($$atom "##FIXNUM.LOGAND"))))
                               (let ((x0 (($$atom assq)
                                          ($$atom name0)
                                          ($$atom prim-proc-table))))
                                 (if ($$atom x0)
                                     (($$atom cdr) ($$atom x0))
                                     ($$atom #f))))))
                  (if ($$atom proc1)
                      ($$atom proc1)
                      (($$atom compiler-internal-error)
                       ($$atom "get-prim-info, unknown primitive:")
                       ($$atom "##FIXNUM.LOGAND"))))))
     (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (let ((sn-loc0 (($$atom sn-opnd) ($$atom loc0) ($$atom sn0)))
                      (opnd0 (($$atom car) ($$atom opnds0))))
                  (if (if (let ((g3050 (($$atom <)
                                        ($$atom loc0)
                                        ($$atom 10000))))
                            (if ($$atom g3050)
                                ($$atom g3050)
                                (($$atom =)
                                 (($$atom quotient)
                                  ($$atom loc0)
                                  ($$atom 10000))
                                 ($$atom 1))))
                          (($$atom not)
                           (($$atom eq?) ($$atom loc0) ($$atom return-reg)))
                          ($$atom #f))
                      (begin
                        (($$atom copy-opnd-to-loc)
                         ($$atom opnd0)
                         ($$atom loc0)
                         ($$atom sn-loc0))
                        (let ((loc680 (($$atom loc->loc68)
                                       ($$atom loc0)
                                       ($$atom #f)
                                       ($$atom sn0))))
                          (begin
                            (($$atom make-top-of-frame-if-stk-opnd68)
                             ($$atom loc680)
                             ($$atom sn0))
                            (($$atom emit-not.l)
                             (($$atom opnd68->true-opnd68)
                              ($$atom loc680)
                              ($$atom sn0)))
                            (($$atom emit-and.w)
                             (($$atom make-imm) ($$atom -8))
                             (($$atom opnd68->true-opnd68)
                              ($$atom loc680)
                              ($$atom sn0))))))
                      (begin
                        (($$atom move-opnd-to-loc68)
                         ($$atom opnd0)
                         ($$atom 0)
                         (($$atom sn-opnd) ($$atom loc0) ($$atom sn0)))
                        (($$atom emit-not.l) ($$atom 0))
                        (($$atom emit-and.w)
                         (($$atom make-imm) ($$atom -8))
                         ($$atom 0))
                        (($$atom move-opnd68-to-loc)
                         ($$atom 0)
                         ($$atom loc0)
                         ($$atom sn0))))))))
   (let ((prim0 (let ((proc1 (let ((name0 (letrec ((loop0 (lambda (str0 s0 i0)
                                                            (if (($$atom >=)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                         ($$atom i0)
                         ($$atom 0))
                        (begin
                          (($$atom string-set!)
                           ($$atom s0)
                           ($$atom i0)
                           (($$atom char-downcase)
                            (($$atom string-ref) ($$atom str0) ($$atom i0))))
                          (let ((i1 (($$atom -) ($$atom i0) ($$atom 1))))
                            (if (($$atom >=) ($$atom i1) ($$atom 0))
                                (begin
                                  (($$atom string-set!)
                                   ($$atom s0)
                                   ($$atom i1)
                                   (($$atom char-downcase)
                                    (($$atom string-ref)
                                     ($$atom str0)
                                     ($$atom i1))))
                                  (($$atom loop0)
                                   ($$atom str0)
                                   ($$atom s0)
                                   (($$atom -) ($$atom i1) ($$atom 1))))
                                (($$atom string->symbol) ($$atom s0)))))
                        (($$atom string->symbol) ($$atom s0))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                            (($$atom loop0)
                                             ($$atom "##FIXNUM.LOGNOT")
                                             (($$atom make-string) ($$atom 15))
                                             ($$atom 14)))))
                               (let ((x0 (($$atom assq)
                                          ($$atom name0)
                                          ($$atom prim-proc-table))))
                                 (if ($$atom x0)
                                     (($$atom cdr) ($$atom x0))
                                     ($$atom #f))))))
                  (if ($$atom proc1)
                      ($$atom proc1)
                      (($$atom compiler-internal-error)
                       ($$atom "get-prim-info, unknown primitive:")
                       ($$atom "##FIXNUM.LOGNOT"))))))
     (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (($$atom define-apply)
  ($$atom "##FIXNUM.ASH")
  ($$atom #f)
  (($$atom gen-shift) ($$atom emit-asr.l)))
 (($$atom define-apply)
  ($$atom "##FIXNUM.LSH")
  ($$atom #f)
  (($$atom gen-shift) ($$atom emit-lsr.l)))
 (($$atom define-ifjump)
  ($$atom "##FIXNUM.ZERO?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-eq-test)
     ($$atom 0)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##FIXNUM.POSITIVE?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (let ((opnds1 (($$atom list)
                   (($$atom car) ($$atom opnds0))
                   (($$atom +)
                    (($$atom enter-opnd) ($$atom 0) ($$atom #f))
                    ($$atom 50000)))))
      (($$atom gen-compares*)
       ($$atom gen-compare)
       ($$atom emit-bgt)
       ($$atom emit-ble)
       ($$atom emit-blt)
       ($$atom emit-bge)
       ($$atom not?0)
       ($$atom opnds1)
       ($$atom lbl0)
       ($$atom fs0)))))
 (($$atom define-ifjump)
  ($$atom "##FIXNUM.NEGATIVE?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (let ((opnds1 (($$atom list)
                   (($$atom car) ($$atom opnds0))
                   (($$atom +)
                    (($$atom enter-opnd) ($$atom 0) ($$atom #f))
                    ($$atom 50000)))))
      (($$atom gen-compares*)
       ($$atom gen-compare)
       ($$atom emit-blt)
       ($$atom emit-bge)
       ($$atom emit-bgt)
       ($$atom emit-ble)
       ($$atom not?0)
       ($$atom opnds1)
       ($$atom lbl0)
       ($$atom fs0)))))
 (($$atom define-ifjump)
  ($$atom "##FIXNUM.ODD?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-even-test)
     (($$atom not) ($$atom not?0))
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##FIXNUM.EVEN?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-even-test)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##FIXNUM.=")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-compares*)
     ($$atom gen-compare)
     ($$atom emit-beq)
     ($$atom emit-bne)
     ($$atom emit-beq)
     ($$atom emit-bne)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##FIXNUM.<")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-compares*)
     ($$atom gen-compare)
     ($$atom emit-blt)
     ($$atom emit-bge)
     ($$atom emit-bgt)
     ($$atom emit-ble)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##FIXNUM.>")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-compares*)
     ($$atom gen-compare)
     ($$atom emit-bgt)
     ($$atom emit-ble)
     ($$atom emit-blt)
     ($$atom emit-bge)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##FIXNUM.<=")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-compares*)
     ($$atom gen-compare)
     ($$atom emit-ble)
     ($$atom emit-bgt)
     ($$atom emit-bge)
     ($$atom emit-blt)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##FIXNUM.>=")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-compares*)
     ($$atom gen-compare)
     ($$atom emit-bge)
     ($$atom emit-blt)
     ($$atom emit-ble)
     ($$atom emit-bgt)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (let ((sn-loc0 (if (($$atom stk?) ($$atom loc0))
                                   (($$atom max)
                                    (($$atom modulo)
                                     ($$atom loc0)
                                     ($$atom 10000))
                                    ($$atom sn0))
                                   (if (($$atom clo?) ($$atom loc0))
                                       (($$atom sn-opnd)
                                        (($$atom clo-base) ($$atom loc0))
                                        ($$atom sn0))
                                       ($$atom sn0)))))
                  (begin
                    (($$atom move-opnd-to-loc68)
                     (($$atom car) ($$atom opnds0))
                     ($$atom 9)
                     ($$atom sn-loc0))
                    (let ((reg680 (if (if (($$atom <)
                                           ($$atom loc0)
                                           ($$atom 10000))
                                          (($$atom not)
                                           (($$atom eq?)
                                            ($$atom loc0)
                                            ($$atom return-reg)))
                                          ($$atom #f))
                                      (($$atom reg->reg68) ($$atom loc0))
                                      ($$atom 0))))
                      (begin
                        (($$atom emit-fmov.dx)
                         (($$atom make-disp*) ($$atom 9) ($$atom -1))
                         ($$atom 557096))
                        (($$atom emit-fmov.l) ($$atom 557096) ($$atom reg680))
                        (($$atom emit-asl.l)
                         (($$atom make-imm) ($$atom 3))
                         ($$atom reg680))
                        (if (if (($$atom reg?) ($$atom loc0))
                                (($$atom not)
                                 (($$atom eq?)
                                  ($$atom loc0)
                                  ($$atom return-reg)))
                                ($$atom #f))
                            ($$atom #f)
                            (($$atom move-opnd68-to-loc)
                             ($$atom reg680)
                             ($$atom loc0)
                             ($$atom sn0))))))))))
   (let ((prim0 (let ((proc1 (let ((name0 (letrec ((loop0 (lambda (str0 s0 i0)
                                                            (if (($$atom >=)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                         ($$atom i0)
                         ($$atom 0))
                        (begin
                          (($$atom string-set!)
                           ($$atom s0)
                           ($$atom i0)
                           (($$atom char-downcase)
                            (($$atom string-ref) ($$atom str0) ($$atom i0))))
                          (($$atom loop0)
                           ($$atom str0)
                           ($$atom s0)
                           (($$atom -) ($$atom i0) ($$atom 1))))
                        (($$atom string->symbol) ($$atom s0))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                            (($$atom loop0)
                                             ($$atom "##FLONUM.->FIXNUM")
                                             (($$atom make-string) ($$atom 17))
                                             ($$atom 16)))))
                               (let ((x0 (($$atom assq)
                                          ($$atom name0)
                                          ($$atom prim-proc-table))))
                                 (if ($$atom x0)
                                     (($$atom cdr) ($$atom x0))
                                     ($$atom #f))))))
                  (if ($$atom proc1)
                      ($$atom proc1)
                      (($$atom compiler-internal-error)
                       ($$atom "get-prim-info, unknown primitive:")
                       ($$atom "##FLONUM.->FIXNUM"))))))
     (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (begin
                  (($$atom gen-guarantee-space) ($$atom 2))
                  (($$atom move-opnd-to-loc68)
                   (($$atom car) ($$atom opnds0))
                   ($$atom 0)
                   (($$atom sn-opnds)
                    (($$atom cdr) ($$atom opnds0))
                    (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))))
                  (($$atom emit-asr.l)
                   (($$atom make-imm) ($$atom 3))
                   ($$atom 0))
                  (($$atom emit-fmov.l) ($$atom 0) ($$atom 557096))
                  (($$atom add-n-to-loc68) ($$atom -8) ($$atom 11))
                  (($$atom emit-fmov.dx) ($$atom 557096) ($$atom 19))
                  (let ((reg680 (if (($$atom <) ($$atom loc0) ($$atom 10000))
                                    (($$atom reg-num->reg68)
                                     (($$atom modulo)
                                      ($$atom loc0)
                                      ($$atom 10000)))
                                    ($$atom 9))))
                    (begin
                      (($$atom emit-move.l) ($$atom 11) ($$atom reg680))
                      (($$atom emit-addq.l) ($$atom 1) ($$atom reg680))))
                  (if (($$atom reg?) ($$atom loc0))
                      ($$atom #f)
                      (($$atom move-opnd68-to-loc)
                       ($$atom 9)
                       ($$atom loc0)
                       ($$atom sn0)))))))
   (let ((prim0 (let ((proc1 (let ((name0 (letrec ((loop0 (lambda (str0 s0 i0)
                                                            (if (($$atom >=)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                         ($$atom i0)
                         ($$atom 0))
                        (begin
                          (($$atom string-set!)
                           ($$atom s0)
                           ($$atom i0)
                           (($$atom char-downcase)
                            (($$atom string-ref) ($$atom str0) ($$atom i0))))
                          (let ((i1 (($$atom -) ($$atom i0) ($$atom 1))))
                            (if (($$atom >=) ($$atom i1) ($$atom 0))
                                (begin
                                  (($$atom string-set!)
                                   ($$atom s0)
                                   ($$atom i1)
                                   (($$atom char-downcase)
                                    (($$atom string-ref)
                                     ($$atom str0)
                                     ($$atom i1))))
                                  (($$atom loop0)
                                   ($$atom str0)
                                   ($$atom s0)
                                   (($$atom -) ($$atom i1) ($$atom 1))))
                                (($$atom string->symbol) ($$atom s0)))))
                        (($$atom string->symbol) ($$atom s0))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                            (($$atom loop0)
                                             ($$atom "##FLONUM.<-FIXNUM")
                                             (($$atom make-string) ($$atom 17))
                                             ($$atom 16)))))
                               (let ((x0 (($$atom assq)
                                          ($$atom name0)
                                          ($$atom prim-proc-table))))
                                 (if ($$atom x0)
                                     (($$atom cdr) ($$atom x0))
                                     ($$atom #f))))))
                  (if ($$atom proc1)
                      ($$atom proc1)
                      (($$atom compiler-internal-error)
                       ($$atom "get-prim-info, unknown primitive:")
                       ($$atom "##FLONUM.<-FIXNUM"))))))
     (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (begin
                  (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))
                  (if (($$atom null?) ($$atom opnds0))
                      (($$atom copy-opnd-to-loc)
                       (($$atom +)
                        (($$atom enter-opnd) ($$atom 0.) ($$atom #f))
                        ($$atom 50000))
                       ($$atom loc0)
                       ($$atom sn0))
                      (if (($$atom null?) (($$atom cdr) ($$atom opnds0)))
                          (($$atom copy-opnd-to-loc)
                           (($$atom car) ($$atom opnds0))
                           ($$atom loc0)
                           ($$atom sn0))
                          (($$atom flo-oper)
                           ($$atom emit-fmov.dx)
                           ($$atom emit-fadd.dx)
                           ($$atom opnds0)
                           ($$atom loc0)
                           ($$atom sn0))))))))
   (let ((prim0 (let ((proc1 (let ((name0 (($$atom string->canonical-symbol)
                                           ($$atom "##FLONUM.+"))))
                               (let ((x0 (($$atom assq)
                                          ($$atom name0)
                                          ($$atom prim-proc-table))))
                                 (if ($$atom x0)
                                     (($$atom cdr) ($$atom x0))
                                     ($$atom #f))))))
                  (if ($$atom proc1)
                      ($$atom proc1)
                      (($$atom compiler-internal-error)
                       ($$atom "get-prim-info, unknown primitive:")
                       ($$atom "##FLONUM.+"))))))
     (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (begin
                  (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))
                  (if (($$atom null?) ($$atom opnds0))
                      (($$atom copy-opnd-to-loc)
                       (($$atom +)
                        (($$atom enter-opnd) ($$atom 1.) ($$atom #f))
                        ($$atom 50000))
                       ($$atom loc0)
                       ($$atom sn0))
                      (if (($$atom null?) (($$atom cdr) ($$atom opnds0)))
                          (($$atom copy-opnd-to-loc)
                           (($$atom car) ($$atom opnds0))
                           ($$atom loc0)
                           ($$atom sn0))
                          (($$atom flo-oper)
                           ($$atom emit-fmov.dx)
                           ($$atom emit-fmul.dx)
                           ($$atom opnds0)
                           ($$atom loc0)
                           ($$atom sn0))))))))
   (let ((prim0 (let ((proc1 (let ((name0 (($$atom string->canonical-symbol)
                                           ($$atom "##FLONUM.*"))))
                               (let ((x0 (($$atom assq)
                                          ($$atom name0)
                                          ($$atom prim-proc-table))))
                                 (if ($$atom x0)
                                     (($$atom cdr) ($$atom x0))
                                     ($$atom #f))))))
                  (if ($$atom proc1)
                      ($$atom proc1)
                      (($$atom compiler-internal-error)
                       ($$atom "get-prim-info, unknown primitive:")
                       ($$atom "##FLONUM.*"))))))
     (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (begin
                  (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))
                  (if (($$atom null?) (($$atom cdr) ($$atom opnds0)))
                      (($$atom flo-oper)
                       ($$atom emit-fneg.dx)
                       ($$atom #f)
                       ($$atom opnds0)
                       ($$atom loc0)
                       ($$atom sn0))
                      (($$atom flo-oper)
                       ($$atom emit-fmov.dx)
                       ($$atom emit-fsub.dx)
                       ($$atom opnds0)
                       ($$atom loc0)
                       ($$atom sn0)))))))
   (let ((prim0 (let ((proc1 (let ((name0 (($$atom string->canonical-symbol)
                                           ($$atom "##FLONUM.-"))))
                               (let ((x0 (($$atom assq)
                                          ($$atom name0)
                                          ($$atom prim-proc-table))))
                                 (if ($$atom x0)
                                     (($$atom cdr) ($$atom x0))
                                     ($$atom #f))))))
                  (if ($$atom proc1)
                      ($$atom proc1)
                      (($$atom compiler-internal-error)
                       ($$atom "get-prim-info, unknown primitive:")
                       ($$atom "##FLONUM.-"))))))
     (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (begin
                  (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))
                  (if (($$atom null?) (($$atom cdr) ($$atom opnds0)))
                      (($$atom flo-oper)
                       ($$atom emit-fmov.dx)
                       ($$atom emit-fdiv.dx)
                       (($$atom cons)
                        (($$atom +)
                         (($$atom enter-opnd) ($$atom 1.) ($$atom #f))
                         ($$atom 50000))
                        ($$atom opnds0))
                       ($$atom loc0)
                       ($$atom sn0))
                      (($$atom flo-oper)
                       ($$atom emit-fmov.dx)
                       ($$atom emit-fdiv.dx)
                       ($$atom opnds0)
                       ($$atom loc0)
                       ($$atom sn0)))))))
   (let ((prim0 (let ((proc1 (let ((name0 (($$atom string->canonical-symbol)
                                           ($$atom "##FLONUM./"))))
                               (let ((x0 (($$atom assq)
                                          ($$atom name0)
                                          ($$atom prim-proc-table))))
                                 (if ($$atom x0)
                                     (($$atom cdr) ($$atom x0))
                                     ($$atom #f))))))
                  (if ($$atom proc1)
                      ($$atom proc1)
                      (($$atom compiler-internal-error)
                       ($$atom "get-prim-info, unknown primitive:")
                       ($$atom "##FLONUM./"))))))
     (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (begin
                  (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))
                  (($$atom flo-oper)
                   ($$atom emit-fabs.dx)
                   ($$atom #f)
                   ($$atom opnds0)
                   ($$atom loc0)
                   ($$atom sn0))))))
   (let ((prim0 (($$atom get-prim-info) ($$atom "##FLONUM.ABS"))))
     (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (begin
                  (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))
                  (($$atom flo-oper)
                   ($$atom emit-fintrz.dx)
                   ($$atom #f)
                   ($$atom opnds0)
                   ($$atom loc0)
                   ($$atom sn0))))))
   (let ((prim0 (($$atom get-prim-info) ($$atom "##FLONUM.TRUNCATE"))))
     (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (begin
                  (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))
                  (($$atom flo-oper)
                   ($$atom emit-fint.dx)
                   ($$atom #f)
                   ($$atom opnds0)
                   ($$atom loc0)
                   ($$atom sn0))))))
   (let ((prim0 (($$atom get-prim-info) ($$atom "##FLONUM.ROUND"))))
     (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (begin
                  (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))
                  (($$atom flo-oper)
                   ($$atom emit-fetox.dx)
                   ($$atom #f)
                   ($$atom opnds0)
                   ($$atom loc0)
                   ($$atom sn0))))))
   (let ((prim0 (($$atom get-prim-info) ($$atom "##FLONUM.EXP"))))
     (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (begin
                  (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))
                  (($$atom flo-oper)
                   ($$atom emit-flogn.dx)
                   ($$atom #f)
                   ($$atom opnds0)
                   ($$atom loc0)
                   ($$atom sn0))))))
   (let ((prim0 (($$atom get-prim-info) ($$atom "##FLONUM.LOG"))))
     (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (begin
                  (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))
                  (($$atom flo-oper)
                   ($$atom emit-fsin.dx)
                   ($$atom #f)
                   ($$atom opnds0)
                   ($$atom loc0)
                   ($$atom sn0))))))
   (let ((prim0 (($$atom get-prim-info) ($$atom "##FLONUM.SIN"))))
     (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (begin
                  (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))
                  (($$atom flo-oper)
                   ($$atom emit-fcos.dx)
                   ($$atom #f)
                   ($$atom opnds0)
                   ($$atom loc0)
                   ($$atom sn0))))))
   (let ((prim0 (($$atom get-prim-info) ($$atom "##FLONUM.COS"))))
     (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (begin
                  (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))
                  (($$atom flo-oper)
                   ($$atom emit-ftan.dx)
                   ($$atom #f)
                   ($$atom opnds0)
                   ($$atom loc0)
                   ($$atom sn0))))))
   (let ((prim0 (($$atom get-prim-info) ($$atom "##FLONUM.TAN"))))
     (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (begin
                  (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))
                  (($$atom flo-oper)
                   ($$atom emit-fasin.dx)
                   ($$atom #f)
                   ($$atom opnds0)
                   ($$atom loc0)
                   ($$atom sn0))))))
   (let ((prim0 (($$atom get-prim-info) ($$atom "##FLONUM.ASIN"))))
     (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (begin
                  (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))
                  (($$atom flo-oper)
                   ($$atom emit-facos.dx)
                   ($$atom #f)
                   ($$atom opnds0)
                   ($$atom loc0)
                   ($$atom sn0))))))
   (let ((prim0 (($$atom get-prim-info) ($$atom "##FLONUM.ACOS"))))
     (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (begin
                  (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))
                  (($$atom flo-oper)
                   ($$atom emit-fatan.dx)
                   ($$atom #f)
                   ($$atom opnds0)
                   ($$atom loc0)
                   ($$atom sn0))))))
   (let ((prim0 (($$atom get-prim-info) ($$atom "##FLONUM.ATAN"))))
     (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (begin
                  (($$atom sn-opnd) ($$atom loc0) ($$atom sn0))
                  (($$atom flo-oper)
                   ($$atom emit-fsqrt.dx)
                   ($$atom #f)
                   ($$atom opnds0)
                   ($$atom loc0)
                   ($$atom sn0))))))
   (let ((prim0 (($$atom get-prim-info) ($$atom "##FLONUM.SQRT"))))
     (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (($$atom define-ifjump)
  ($$atom "##FLONUM.ZERO?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (let ((opnds1 (($$atom list)
                   (($$atom car) ($$atom opnds0))
                   (($$atom +)
                    (($$atom enter-opnd) ($$atom 0.) ($$atom #f))
                    ($$atom 50000)))))
      (($$atom gen-compares*)
       ($$atom gen-compare-flo)
       ($$atom emit-fbeq)
       ($$atom emit-fbne)
       ($$atom emit-fbeq)
       ($$atom emit-fbne)
       ($$atom not?0)
       ($$atom opnds1)
       ($$atom lbl0)
       ($$atom fs0)))))
 (($$atom define-ifjump)
  ($$atom "##FLONUM.NEGATIVE?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (let ((opnds1 (($$atom list)
                   (($$atom car) ($$atom opnds0))
                   (($$atom +)
                    (($$atom enter-opnd) ($$atom 0.) ($$atom #f))
                    ($$atom 50000)))))
      (($$atom gen-compares*)
       ($$atom gen-compare-flo)
       ($$atom emit-fblt)
       ($$atom emit-fbge)
       ($$atom emit-fbgt)
       ($$atom emit-fble)
       ($$atom not?0)
       ($$atom opnds1)
       ($$atom lbl0)
       ($$atom fs0)))))
 (($$atom define-ifjump)
  ($$atom "##FLONUM.POSITIVE?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (let ((opnds1 (($$atom list)
                   (($$atom car) ($$atom opnds0))
                   (($$atom +)
                    (($$atom enter-opnd) ($$atom 0.) ($$atom #f))
                    ($$atom 50000)))))
      (($$atom gen-compares*)
       ($$atom gen-compare-flo)
       ($$atom emit-fbgt)
       ($$atom emit-fble)
       ($$atom emit-fblt)
       ($$atom emit-fbge)
       ($$atom not?0)
       ($$atom opnds1)
       ($$atom lbl0)
       ($$atom fs0)))))
 (($$atom define-ifjump)
  ($$atom "##FLONUM.=")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-compares*)
     ($$atom gen-compare-flo)
     ($$atom emit-fbeq)
     ($$atom emit-fbne)
     ($$atom emit-fbeq)
     ($$atom emit-fbne)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##FLONUM.<")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-compares*)
     ($$atom gen-compare-flo)
     ($$atom emit-fblt)
     ($$atom emit-fbge)
     ($$atom emit-fbgt)
     ($$atom emit-fble)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##FLONUM.>")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-compares*)
     ($$atom gen-compare-flo)
     ($$atom emit-fbgt)
     ($$atom emit-fble)
     ($$atom emit-fblt)
     ($$atom emit-fbge)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##FLONUM.<=")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-compares*)
     ($$atom gen-compare-flo)
     ($$atom emit-fble)
     ($$atom emit-fbgt)
     ($$atom emit-fbge)
     ($$atom emit-fblt)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##FLONUM.>=")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-compares*)
     ($$atom gen-compare-flo)
     ($$atom emit-fbge)
     ($$atom emit-fblt)
     ($$atom emit-fble)
     ($$atom emit-fbgt)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##CHAR=?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-compares*)
     ($$atom gen-compare)
     ($$atom emit-beq)
     ($$atom emit-bne)
     ($$atom emit-beq)
     ($$atom emit-bne)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##CHAR<?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-compares*)
     ($$atom gen-compare)
     ($$atom emit-blt)
     ($$atom emit-bge)
     ($$atom emit-bgt)
     ($$atom emit-ble)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##CHAR>?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-compares*)
     ($$atom gen-compare)
     ($$atom emit-bgt)
     ($$atom emit-ble)
     ($$atom emit-blt)
     ($$atom emit-bge)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##CHAR<=?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-compares*)
     ($$atom gen-compare)
     ($$atom emit-ble)
     ($$atom emit-bgt)
     ($$atom emit-bge)
     ($$atom emit-blt)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-ifjump)
  ($$atom "##CHAR>=?")
  (lambda (not?0 opnds0 lbl0 fs0)
    (($$atom gen-compares*)
     ($$atom gen-compare)
     ($$atom emit-bge)
     ($$atom emit-blt)
     ($$atom emit-ble)
     ($$atom emit-bgt)
     ($$atom not?0)
     ($$atom opnds0)
     ($$atom lbl0)
     ($$atom fs0))))
 (($$atom define-apply)
  ($$atom "##CONS")
  ($$atom #f)
  (lambda (opnds0 loc0 sn0)
    (($$atom gen-cons) ($$atom opnds0) ($$atom loc0) ($$atom sn0))))
 (($$atom define-apply)
  ($$atom "##SET-CAR!")
  ($$atom #t)
  (lambda (opnds0 loc0 sn0)
    (($$atom gen-set-car!) ($$atom opnds0) ($$atom loc0) ($$atom sn0))))
 (($$atom define-apply)
  ($$atom "##SET-CDR!")
  ($$atom #t)
  (lambda (opnds0 loc0 sn0)
    (($$atom gen-set-cdr!) ($$atom opnds0) ($$atom loc0) ($$atom sn0))))
 (($$atom define-apply)
  ($$atom "##CAR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 2)))
 (($$atom define-apply)
  ($$atom "##CDR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 3)))
 (($$atom define-apply)
  ($$atom "##CAAR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 4)))
 (($$atom define-apply)
  ($$atom "##CADR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 5)))
 (($$atom define-apply)
  ($$atom "##CDAR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 6)))
 (($$atom define-apply)
  ($$atom "##CDDR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 7)))
 (($$atom define-apply)
  ($$atom "##CAAAR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 8)))
 (($$atom define-apply)
  ($$atom "##CAADR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 9)))
 (($$atom define-apply)
  ($$atom "##CADAR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 10)))
 (($$atom define-apply)
  ($$atom "##CADDR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 11)))
 (($$atom define-apply)
  ($$atom "##CDAAR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 12)))
 (($$atom define-apply)
  ($$atom "##CDADR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 13)))
 (($$atom define-apply)
  ($$atom "##CDDAR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 14)))
 (($$atom define-apply)
  ($$atom "##CDDDR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 15)))
 (($$atom define-apply)
  ($$atom "##CAAAAR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 16)))
 (($$atom define-apply)
  ($$atom "##CAAADR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 17)))
 (($$atom define-apply)
  ($$atom "##CAADAR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 18)))
 (($$atom define-apply)
  ($$atom "##CAADDR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 19)))
 (($$atom define-apply)
  ($$atom "##CADAAR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 20)))
 (($$atom define-apply)
  ($$atom "##CADADR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 21)))
 (($$atom define-apply)
  ($$atom "##CADDAR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 22)))
 (($$atom define-apply)
  ($$atom "##CADDDR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 23)))
 (($$atom define-apply)
  ($$atom "##CDAAAR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 24)))
 (($$atom define-apply)
  ($$atom "##CDAADR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 25)))
 (($$atom define-apply)
  ($$atom "##CDADAR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 26)))
 (($$atom define-apply)
  ($$atom "##CDADDR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 27)))
 (($$atom define-apply)
  ($$atom "##CDDAAR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 28)))
 (($$atom define-apply)
  ($$atom "##CDDADR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 29)))
 (($$atom define-apply)
  ($$atom "##CDDDAR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 30)))
 (($$atom define-apply)
  ($$atom "##CDDDDR")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 31)))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (($$atom gen-cons)
                 (($$atom list)
                  (($$atom car) ($$atom opnds0))
                  (($$atom +)
                   (($$atom enter-opnd) ($$atom '()) ($$atom #f))
                   ($$atom 50000)))
                 ($$atom loc0)
                 ($$atom sn0)))))
   (let ((prim0 (($$atom get-prim-info) ($$atom "##MAKE-CELL"))))
     (let ((x0 (($$atom cons) ($$atom #f) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (($$atom define-apply)
  ($$atom "##CELL-REF")
  ($$atom #f)
  (($$atom make-gen-apply-c...r) ($$atom 2)))
 (($$atom define-apply)
  ($$atom "##CELL-SET!")
  ($$atom #t)
  (lambda (opnds0 loc0 sn0)
    (($$atom gen-set-car!) ($$atom opnds0) ($$atom loc0) ($$atom sn0))))
 (($$atom define-apply)
  ($$atom "##VECTOR")
  ($$atom #f)
  (($$atom make-gen-vector) ($$atom 'vector)))
 (($$atom define-apply)
  ($$atom "##VECTOR-LENGTH")
  ($$atom #f)
  (($$atom make-gen-vector-length) ($$atom 'vector)))
 (($$atom define-apply)
  ($$atom "##VECTOR-REF")
  ($$atom #f)
  (($$atom make-gen-vector-ref) ($$atom 'vector)))
 (($$atom define-apply)
  ($$atom "##VECTOR-SET!")
  ($$atom #t)
  (($$atom make-gen-vector-set!) ($$atom 'vector)))
 (($$atom define-apply)
  ($$atom "##VECTOR-SHRINK!")
  ($$atom #t)
  (($$atom make-gen-vector-shrink!) ($$atom 'vector)))
 (($$atom define-apply)
  ($$atom "##STRING")
  ($$atom #f)
  (($$atom make-gen-vector) ($$atom 'string)))
 (($$atom define-apply)
  ($$atom "##STRING-LENGTH")
  ($$atom #f)
  (($$atom make-gen-vector-length) ($$atom 'string)))
 (($$atom define-apply)
  ($$atom "##STRING-REF")
  ($$atom #f)
  (($$atom make-gen-vector-ref) ($$atom 'string)))
 (($$atom define-apply)
  ($$atom "##STRING-SET!")
  ($$atom #t)
  (($$atom make-gen-vector-set!) ($$atom 'string)))
 (($$atom define-apply)
  ($$atom "##STRING-SHRINK!")
  ($$atom #t)
  (($$atom make-gen-vector-shrink!) ($$atom 'string)))
 (($$atom define-apply)
  ($$atom "##VECTOR8")
  ($$atom #f)
  (($$atom make-gen-vector) ($$atom 'vector8)))
 (($$atom define-apply)
  ($$atom "##VECTOR8-LENGTH")
  ($$atom #f)
  (($$atom make-gen-vector-length) ($$atom 'vector8)))
 (($$atom define-apply)
  ($$atom "##VECTOR8-REF")
  ($$atom #f)
  (($$atom make-gen-vector-ref) ($$atom 'vector8)))
 (($$atom define-apply)
  ($$atom "##VECTOR8-SET!")
  ($$atom #t)
  (($$atom make-gen-vector-set!) ($$atom 'vector8)))
 (($$atom define-apply)
  ($$atom "##VECTOR8-SHRINK!")
  ($$atom #t)
  (($$atom make-gen-vector-shrink!) ($$atom 'vector8)))
 (($$atom define-apply)
  ($$atom "##VECTOR16")
  ($$atom #f)
  (($$atom make-gen-vector) ($$atom 'vector16)))
 (($$atom define-apply)
  ($$atom "##VECTOR16-LENGTH")
  ($$atom #f)
  (($$atom make-gen-vector-length) ($$atom 'vector16)))
 (($$atom define-apply)
  ($$atom "##VECTOR16-REF")
  ($$atom #f)
  (($$atom make-gen-vector-ref) ($$atom 'vector16)))
 (($$atom define-apply)
  ($$atom "##VECTOR16-SET!")
  ($$atom #t)
  (($$atom make-gen-vector-set!) ($$atom 'vector16)))
 (($$atom define-apply)
  ($$atom "##VECTOR16-SHRINK!")
  ($$atom #t)
  (($$atom make-gen-vector-shrink!) ($$atom 'vector16)))
 (($$atom define-apply)
  ($$atom "##CLOSURE-CODE")
  ($$atom #f)
  (($$atom make-gen-slot-ref) ($$atom 1) ($$atom 2)))
 (($$atom define-apply)
  ($$atom "##CLOSURE-REF")
  ($$atom #f)
  (($$atom make-gen-vector-ref) ($$atom 'closure)))
 (($$atom define-apply)
  ($$atom "##CLOSURE-SET!")
  ($$atom #t)
  (($$atom make-gen-vector-set!) ($$atom 'closure)))
 (($$atom define-apply)
  ($$atom "##SUBPROCEDURE-ID")
  ($$atom #f)
  (lambda (opnds0 loc0 sn0)
    (($$atom gen-subprocedure-id) ($$atom opnds0) ($$atom loc0) ($$atom sn0))))
 (($$atom define-apply)
  ($$atom "##SUBPROCEDURE-PARENT")
  ($$atom #f)
  (lambda (opnds0 loc0 sn0)
    (($$atom gen-subprocedure-parent)
     ($$atom opnds0)
     ($$atom loc0)
     ($$atom sn0))))
 (($$atom define-apply)
  ($$atom "##RETURN-FS")
  ($$atom #f)
  (lambda (opnds0 loc0 sn0)
    (($$atom gen-return-fs) ($$atom opnds0) ($$atom loc0) ($$atom sn0))))
 (($$atom define-apply)
  ($$atom "##RETURN-LINK")
  ($$atom #f)
  (lambda (opnds0 loc0 sn0)
    (($$atom gen-return-link) ($$atom opnds0) ($$atom loc0) ($$atom sn0))))
 (($$atom define-apply)
  ($$atom "##PROCEDURE-INFO")
  ($$atom #f)
  (lambda (opnds0 loc0 sn0)
    (($$atom gen-procedure-info) ($$atom opnds0) ($$atom loc0) ($$atom sn0))))
 (($$atom define-apply)
  ($$atom "##PSTATE")
  ($$atom #f)
  (lambda (opnds0 loc0 sn0)
    (($$atom move-opnd68-to-loc) ($$atom 13) ($$atom loc0) ($$atom sn0))))
 (($$atom define-apply)
  ($$atom "##MAKE-PLACEHOLDER")
  ($$atom #f)
  (lambda (opnds0 loc0 sn0)
    (($$atom gen-make-placeholder)
     ($$atom opnds0)
     ($$atom loc0)
     ($$atom sn0))))
 (let ((proc0 (lambda (opnds0 loc0 sn0)
                (let ((opnd0 (($$atom car) ($$atom opnds0))))
                  (if ($$atom loc0)
                      (($$atom touch-opnd-to-loc)
                       ($$atom opnd0)
                       ($$atom loc0)
                       ($$atom sn0))
                      (($$atom touch-opnd-to-any-reg68)
                       ($$atom opnd0)
                       ($$atom sn0)))))))
   (let ((prim0 (let ((proc1 (($$atom prim-info)
                              (($$atom string->canonical-symbol)
                               ($$atom "##TOUCH")))))
                  (if ($$atom proc1)
                      ($$atom proc1)
                      (($$atom compiler-internal-error)
                       ($$atom "get-prim-info, unknown primitive:")
                       ($$atom "##TOUCH"))))))
     (let ((x0 (($$atom cons) ($$atom #t) ($$atom proc0))))
       (($$atom vector-set!) ($$atom prim0) ($$atom 6) ($$atom x0)))))
 (($$atom def-spec) ($$atom "NOT") (($$atom safe) ($$atom "##NOT")))
 (($$atom def-spec) ($$atom "NULL?") (($$atom safe) ($$atom "##NULL?")))
 (($$atom def-spec) ($$atom "EQ?") (($$atom safe) ($$atom "##EQ?")))
 (($$atom def-spec) ($$atom "PAIR?") (($$atom safe) ($$atom "##PAIR?")))
 (($$atom def-spec)
  ($$atom "PROCEDURE?")
  (($$atom safe) ($$atom "##PROCEDURE?")))
 (($$atom def-spec) ($$atom "VECTOR?") (($$atom safe) ($$atom "##VECTOR?")))
 (($$atom def-spec) ($$atom "SYMBOL?") (($$atom safe) ($$atom "##SYMBOL?")))
 (($$atom def-spec) ($$atom "STRING?") (($$atom safe) ($$atom "##STRING?")))
 (($$atom def-spec) ($$atom "CHAR?") (($$atom safe) ($$atom "##CHAR?")))
 (($$atom def-spec)
  ($$atom "ZERO?")
  (($$atom arith)
   ($$atom #t)
   ($$atom "##FIXNUM.ZERO?")
   ($$atom "##FLONUM.ZERO?")))
 (($$atom def-spec)
  ($$atom "POSITIVE?")
  (($$atom arith)
   ($$atom #t)
   ($$atom "##FIXNUM.POSITIVE?")
   ($$atom "##FLONUM.POSITIVE?")))
 (($$atom def-spec)
  ($$atom "NEGATIVE?")
  (($$atom arith)
   ($$atom #t)
   ($$atom "##FIXNUM.NEGATIVE?")
   ($$atom "##FLONUM.NEGATIVE?")))
 (($$atom def-spec)
  ($$atom "ODD?")
  (($$atom arith) ($$atom #t) ($$atom "##FIXNUM.ODD?") ($$atom #f)))
 (($$atom def-spec)
  ($$atom "EVEN?")
  (($$atom arith) ($$atom #t) ($$atom "##FIXNUM.EVEN?") ($$atom #f)))
 (($$atom def-spec)
  ($$atom "+")
  (($$atom arith) ($$atom #f) ($$atom "##FIXNUM.+") ($$atom "##FLONUM.+")))
 (($$atom def-spec)
  ($$atom "*")
  (($$atom arith) ($$atom #f) ($$atom "##FIXNUM.*") ($$atom "##FLONUM.*")))
 (($$atom def-spec)
  ($$atom "-")
  (($$atom arith) ($$atom #f) ($$atom "##FIXNUM.-") ($$atom "##FLONUM.-")))
 (($$atom def-spec)
  ($$atom "/")
  (($$atom arith) ($$atom #f) ($$atom #f) ($$atom "##FLONUM./")))
 (($$atom def-spec)
  ($$atom "QUOTIENT")
  (($$atom arith) ($$atom #f) ($$atom "##FIXNUM.QUOTIENT") ($$atom #f)))
 (($$atom def-spec)
  ($$atom "REMAINDER")
  (($$atom arith) ($$atom #f) ($$atom "##FIXNUM.REMAINDER") ($$atom #f)))
 (($$atom def-spec)
  ($$atom "MODULO")
  (($$atom arith) ($$atom #f) ($$atom "##FIXNUM.MODULO") ($$atom #f)))
 (($$atom def-spec)
  ($$atom "=")
  (($$atom arith) ($$atom #t) ($$atom "##FIXNUM.=") ($$atom "##FLONUM.=")))
 (($$atom def-spec)
  ($$atom "<")
  (($$atom arith) ($$atom #t) ($$atom "##FIXNUM.<") ($$atom "##FLONUM.<")))
 (($$atom def-spec)
  ($$atom ">")
  (($$atom arith) ($$atom #t) ($$atom "##FIXNUM.>") ($$atom "##FLONUM.>")))
 (($$atom def-spec)
  ($$atom "<=")
  (($$atom arith) ($$atom #t) ($$atom "##FIXNUM.<=") ($$atom "##FLONUM.<=")))
 (($$atom def-spec)
  ($$atom ">=")
  (($$atom arith) ($$atom #t) ($$atom "##FIXNUM.>=") ($$atom "##FLONUM.>=")))
 (($$atom def-spec)
  ($$atom "ABS")
  (($$atom arith) ($$atom #f) ($$atom #f) ($$atom "##FLONUM.ABS")))
 (($$atom def-spec)
  ($$atom "TRUNCATE")
  (($$atom arith) ($$atom #f) ($$atom #f) ($$atom "##FLONUM.TRUNCATE")))
 (($$atom def-spec)
  ($$atom "EXP")
  (($$atom arith) ($$atom #f) ($$atom #f) ($$atom "##FLONUM.EXP")))
 (($$atom def-spec)
  ($$atom "LOG")
  (($$atom arith) ($$atom #f) ($$atom #f) ($$atom "##FLONUM.LOG")))
 (($$atom def-spec)
  ($$atom "SIN")
  (($$atom arith) ($$atom #f) ($$atom #f) ($$atom "##FLONUM.SIN")))
 (($$atom def-spec)
  ($$atom "COS")
  (($$atom arith) ($$atom #f) ($$atom #f) ($$atom "##FLONUM.COS")))
 (($$atom def-spec)
  ($$atom "TAN")
  (($$atom arith) ($$atom #f) ($$atom #f) ($$atom "##FLONUM.TAN")))
 (($$atom def-spec)
  ($$atom "ASIN")
  (($$atom arith) ($$atom #f) ($$atom #f) ($$atom "##FLONUM.ASIN")))
 (($$atom def-spec)
  ($$atom "ACOS")
  (($$atom arith) ($$atom #f) ($$atom #f) ($$atom "##FLONUM.ACOS")))
 (($$atom def-spec)
  ($$atom "ATAN")
  (($$atom arith) ($$atom #f) ($$atom #f) ($$atom "##FLONUM.ATAN")))
 (($$atom def-spec)
  ($$atom "SQRT")
  (($$atom arith) ($$atom #f) ($$atom #f) ($$atom "##FLONUM.SQRT")))
 (($$atom def-spec) ($$atom "CHAR=?") (($$atom safe) ($$atom "##CHAR=?")))
 (($$atom def-spec) ($$atom "CHAR<?") (($$atom safe) ($$atom "##CHAR<?")))
 (($$atom def-spec) ($$atom "CHAR>?") (($$atom safe) ($$atom "##CHAR>?")))
 (($$atom def-spec) ($$atom "CHAR<=?") (($$atom safe) ($$atom "##CHAR<=?")))
 (($$atom def-spec) ($$atom "CHAR>=?") (($$atom safe) ($$atom "##CHAR>=?")))
 (($$atom def-spec) ($$atom "CONS") (($$atom safe) ($$atom "##CONS")))
 (($$atom def-spec)
  ($$atom "SET-CAR!")
  (($$atom unsafe) ($$atom "##SET-CAR!")))
 (($$atom def-spec)
  ($$atom "SET-CDR!")
  (($$atom unsafe) ($$atom "##SET-CDR!")))
 (($$atom def-spec) ($$atom "CAR") (($$atom unsafe) ($$atom "##CAR")))
 (($$atom def-spec) ($$atom "CDR") (($$atom unsafe) ($$atom "##CDR")))
 (($$atom def-spec) ($$atom "CAAR") (($$atom unsafe) ($$atom "##CAAR")))
 (($$atom def-spec) ($$atom "CADR") (($$atom unsafe) ($$atom "##CADR")))
 (($$atom def-spec) ($$atom "CDAR") (($$atom unsafe) ($$atom "##CDAR")))
 (($$atom def-spec) ($$atom "CDDR") (($$atom unsafe) ($$atom "##CDDR")))
 (($$atom def-spec) ($$atom "CAAAR") (($$atom unsafe) ($$atom "##CAAAR")))
 (($$atom def-spec) ($$atom "CAADR") (($$atom unsafe) ($$atom "##CAADR")))
 (($$atom def-spec) ($$atom "CADAR") (($$atom unsafe) ($$atom "##CADAR")))
 (($$atom def-spec) ($$atom "CADDR") (($$atom unsafe) ($$atom "##CADDR")))
 (($$atom def-spec) ($$atom "CDAAR") (($$atom unsafe) ($$atom "##CDAAR")))
 (($$atom def-spec) ($$atom "CDADR") (($$atom unsafe) ($$atom "##CDADR")))
 (($$atom def-spec) ($$atom "CDDAR") (($$atom unsafe) ($$atom "##CDDAR")))
 (($$atom def-spec) ($$atom "CDDDR") (($$atom unsafe) ($$atom "##CDDDR")))
 (($$atom def-spec) ($$atom "CAAAAR") (($$atom unsafe) ($$atom "##CAAAAR")))
 (($$atom def-spec) ($$atom "CAAADR") (($$atom unsafe) ($$atom "##CAAADR")))
 (($$atom def-spec) ($$atom "CAADAR") (($$atom unsafe) ($$atom "##CAADAR")))
 (($$atom def-spec) ($$atom "CAADDR") (($$atom unsafe) ($$atom "##CAADDR")))
 (($$atom def-spec) ($$atom "CADAAR") (($$atom unsafe) ($$atom "##CADAAR")))
 (($$atom def-spec) ($$atom "CADADR") (($$atom unsafe) ($$atom "##CADADR")))
 (($$atom def-spec) ($$atom "CADDAR") (($$atom unsafe) ($$atom "##CADDAR")))
 (($$atom def-spec) ($$atom "CADDDR") (($$atom unsafe) ($$atom "##CADDDR")))
 (($$atom def-spec) ($$atom "CDAAAR") (($$atom unsafe) ($$atom "##CDAAAR")))
 (($$atom def-spec) ($$atom "CDAADR") (($$atom unsafe) ($$atom "##CDAADR")))
 (($$atom def-spec) ($$atom "CDADAR") (($$atom unsafe) ($$atom "##CDADAR")))
 (($$atom def-spec) ($$atom "CDADDR") (($$atom unsafe) ($$atom "##CDADDR")))
 (($$atom def-spec) ($$atom "CDDAAR") (($$atom unsafe) ($$atom "##CDDAAR")))
 (($$atom def-spec) ($$atom "CDDADR") (($$atom unsafe) ($$atom "##CDDADR")))
 (($$atom def-spec) ($$atom "CDDDAR") (($$atom unsafe) ($$atom "##CDDDAR")))
 (($$atom def-spec) ($$atom "CDDDDR") (($$atom unsafe) ($$atom "##CDDDDR")))
 (($$atom def-spec) ($$atom "VECTOR") (($$atom safe) ($$atom "##VECTOR")))
 (($$atom def-spec)
  ($$atom "VECTOR-LENGTH")
  (($$atom unsafe) ($$atom "##VECTOR-LENGTH")))
 (($$atom def-spec)
  ($$atom "VECTOR-REF")
  (($$atom unsafe) ($$atom "##VECTOR-REF")))
 (($$atom def-spec)
  ($$atom "VECTOR-SET!")
  (($$atom unsafe) ($$atom "##VECTOR-SET!")))
 (($$atom def-spec) ($$atom "STRING") (($$atom safe) ($$atom "##STRING")))
 (($$atom def-spec)
  ($$atom "STRING-LENGTH")
  (($$atom unsafe) ($$atom "##STRING-LENGTH")))
 (($$atom def-spec)
  ($$atom "STRING-REF")
  (($$atom unsafe) ($$atom "##STRING-REF")))
 (($$atom def-spec)
  ($$atom "STRING-SET!")
  (($$atom unsafe) ($$atom "##STRING-SET!")))
 (($$atom def-spec) ($$atom "TOUCH") (($$atom safe) ($$atom "##TOUCH")))
 (let ((targ0 (($$atom make-target) ($$atom 4) ($$atom 'm68000))))
   (begin
     (let ((y0 (lambda (info-port0)
                 (($$atom begin!) ($$atom info-port0) ($$atom targ0)))))
       (($$atom vector-set!) ($$atom targ0) ($$atom 2) ($$atom y0)))
     (($$atom put-target) ($$atom targ0))))
 (define input-source-code
   ($$atom '(begin
              (declare (standard-bindings) (fixnum) (not safe) (block))
              (define (fib n) (if (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))))
              (define (tak x y z)
                (if (not (< y x))
                    z
                    (tak (tak (- x 1) y z)
                         (tak (- y 1) z x)
                         (tak (- z 1) x y))))
              (define (ack m n)
                (cond ((= m 0) (+ n 1))
                      ((= n 0) (ack (- m 1) 1))
                      (else (ack (- m 1) (ack m (- n 1))))))
              (define (create-x n)
                (define result (make-vector n))
                (do ((i 0 (+ i 1)))
                    ((>= i n) result)
                  (vector-set! result i i)))
              (define (create-y x)
                (let* ((n (vector-length x)) (result (make-vector n)))
                  (do ((i (- n 1) (- i 1)))
                      ((< i 0) result)
                    (vector-set! result i (vector-ref x i)))))
              (define (my-try n) (vector-length (create-y (create-x n))))
              (define (go n)
                (let loop ((repeat 100) (result 0))
                  (if (> repeat 0) (loop (- repeat 1) (my-try n)) result)))
              (+ (fib 20) (tak 18 12 6) (ack 3 9) (go 200000)))))
 (define pp-asm
   (lambda (asm0)
     (if (($$atom null?) ($$atom asm0))
         ($$atom #f)
         (begin
           (let ((n0 (($$atom car) ($$atom asm0))))
             (($$atom gambit$$pp) ($$atom n0)))
           (($$atom pp-asm) (($$atom cdr) ($$atom asm0)))))))
 (($$atom ce)
  ($$atom '(begin
             (declare (standard-bindings) (fixnum) (not safe) (block))
             (define (fib n) (if (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))))
             (define (tak x y z)
               (if (not (< y x))
                   z
                   (tak (tak (- x 1) y z)
                        (tak (- y 1) z x)
                        (tak (- z 1) x y))))
             (define (ack m n)
               (cond ((= m 0) (+ n 1))
                     ((= n 0) (ack (- m 1) 1))
                     (else (ack (- m 1) (ack m (- n 1))))))
             (define (create-x n)
               (define result (make-vector n))
               (do ((i 0 (+ i 1))) ((>= i n) result) (vector-set! result i i)))
             (define (create-y x)
               (let* ((n (vector-length x)) (result (make-vector n)))
                 (do ((i (- n 1) (- i 1)))
                     ((< i 0) result)
                   (vector-set! result i (vector-ref x i)))))
             (define (my-try n) (vector-length (create-y (create-x n))))
             (define (go n)
               (let loop ((repeat 100) (result 0))
                 (if (> repeat 0) (loop (- repeat 1) (my-try n)) result)))
             (+ (fib 20) (tak 18 12 6) (ack 3 9) (go 200000))))
  ($$atom 'm68000)
  ($$atom 'asm))
 (($$atom pp-asm) (($$atom asm-output-get)))

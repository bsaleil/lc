(define for-each
   (lambda (f0 lst0)
     (if (($$atom null?) ($$atom lst0))
         ($$atom #f)
         (begin
           (($$atom f0) (($$atom car) ($$atom lst0)))
           (($$atom for-each) ($$atom f0) (($$atom cdr) ($$atom lst0)))))))
 (define list-ref
   (lambda (lst0 i0)
     (if (($$atom =) ($$atom i0) ($$atom 0))
         (($$atom car) ($$atom lst0))
         (($$atom list-ref)
          (($$atom cdr) ($$atom lst0))
          (($$atom -) ($$atom i0) ($$atom 1))))))
 (define equal?
   (lambda (x0 y0)
     (if (($$atom pair?) ($$atom x0))
         (if (($$atom pair?) ($$atom y0))
             (if (($$atom equal?)
                  (($$atom car) ($$atom x0))
                  (($$atom car) ($$atom y0)))
                 (($$atom equal?)
                  (($$atom cdr) ($$atom x0))
                  (($$atom cdr) ($$atom y0)))
                 ($$atom #f))
             ($$atom #f))
         (if (($$atom string?) ($$atom x0))
             (if (($$atom string?) ($$atom y0))
                 (($$atom string=?) ($$atom x0) ($$atom y0))
                 ($$atom #f))
             (if (($$atom vector?) ($$atom x0))
                 (if (($$atom vector?) ($$atom y0))
                     (if (($$atom eq?)
                          (($$atom vector-length) ($$atom x0))
                          (($$atom vector-length) ($$atom y0)))
                         (letrec ((loop0 (lambda (x1 y1 idx0)
                                           (if (($$atom <)
                                                ($$atom idx0)
                                                ($$atom 0))
                                               ($$atom #t)
                                               (if (($$atom equal?)
                                                    (($$atom vector-ref)
                                                     ($$atom x1)
                                                     ($$atom idx0))
                                                    (($$atom vector-ref)
                                                     ($$atom y1)
                                                     ($$atom idx0)))
                                                   (($$atom loop0)
                                                    ($$atom x1)
                                                    ($$atom y1)
                                                    (($$atom -)
                                                     ($$atom idx0)
                                                     ($$atom 1)))
                                                   ($$atom #f))))))
                           (($$atom loop0)
                            ($$atom x0)
                            ($$atom y0)
                            (($$atom -)
                             (($$atom vector-length) ($$atom x0))
                             ($$atom 1))))
                         ($$atom #f))
                     ($$atom #f))
                 (if (($$atom number?) ($$atom x0))
                     (if (($$atom number?) ($$atom y0))
                         (($$atom =) ($$atom x0) ($$atom y0))
                         ($$atom #f))
                     (($$atom eq?) ($$atom x0) ($$atom y0))))))))
 (define memq
   (lambda (el0 lst0)
     (if (($$atom null?) ($$atom lst0))
         ($$atom #f)
         (if (($$atom eq?) ($$atom el0) (($$atom car) ($$atom lst0)))
             ($$atom lst0)
             (($$atom memq) ($$atom el0) (($$atom cdr) ($$atom lst0)))))))
 (define assq
   (lambda (el0 lst0)
     (if (($$atom null?) ($$atom lst0))
         ($$atom #f)
         (if (($$atom eq?)
              ($$atom el0)
              (($$atom car) (($$atom car) ($$atom lst0))))
             (($$atom car) ($$atom lst0))
             (($$atom assq) ($$atom el0) (($$atom cdr) ($$atom lst0)))))))
 (define length
   (lambda (l0)
     (letrec ((loop0 (lambda (l1 len0)
                       (if (($$atom null?) ($$atom l1))
                           ($$atom len0)
                           (if (($$atom pair?) ($$atom l1))
                               (($$atom loop0)
                                (($$atom cdr) ($$atom l1))
                                (($$atom +) ($$atom 1) ($$atom len0)))
                               (($$atom error) ($$atom "LIST expected")))))))
       (($$atom loop0) ($$atom l0) ($$atom 0)))))
 (define string->list
   (lambda (s0)
     (let ((len0 (($$atom string-length) ($$atom s0))))
       (letrec ((loop0 (lambda (s1 i0 lst0)
                         (if (($$atom <) ($$atom i0) ($$atom 0))
                             ($$atom lst0)
                             (($$atom loop0)
                              ($$atom s1)
                              (($$atom -) ($$atom i0) ($$atom 1))
                              (($$atom cons)
                               (($$atom string-ref) ($$atom s1) ($$atom i0))
                               ($$atom lst0)))))))
         (($$atom loop0)
          ($$atom s0)
          (($$atom -) ($$atom len0) ($$atom 1))
          ($$atom '()))))))
 (define list->string-h
   (lambda (l0 str0 pos0)
     (if (($$atom null?) ($$atom l0))
         ($$atom str0)
         (begin
           (($$atom string-set!)
            ($$atom str0)
            ($$atom pos0)
            (($$atom car) ($$atom l0)))
           (($$atom list->string-h)
            (($$atom cdr) ($$atom l0))
            ($$atom str0)
            (($$atom +) ($$atom pos0) ($$atom 1)))))))
 (define list->string
   (lambda (l0)
     (let ((str0 (($$atom make-string) (($$atom length) ($$atom l0)))))
       (($$atom list->string-h) ($$atom l0) ($$atom str0) ($$atom 0)))))
 (define number->string
   (lambda (num0)
     (letrec ((number->string-h0
               (lambda (num1)
                 (if (($$atom =) ($$atom num1) ($$atom 0))
                     ($$atom "")
                     (($$atom string-append)
                      (($$atom number->string-h0)
                       (($$atom quotient) ($$atom num1) ($$atom 10)))
                      (let ((d0 (($$atom modulo) ($$atom num1) ($$atom 10))))
                        (($$atom make-string)
                         ($$atom 1)
                         (($$atom integer->char)
                          (($$atom +) ($$atom d0) ($$atom 48)))))))))
              (digit->string0
               (lambda (d0)
                 (($$atom make-string)
                  ($$atom 1)
                  (($$atom integer->char)
                   (($$atom +) ($$atom d0) ($$atom 48)))))))
       (if (($$atom =) ($$atom num0) ($$atom 0))
           ($$atom "0")
           (if (($$atom <) ($$atom num0) ($$atom 0))
               (($$atom string-append)
                ($$atom "-")
                (($$atom number->string-h0)
                 (($$atom *) ($$atom num0) ($$atom -1))))
               (($$atom number->string-h0) ($$atom num0)))))))
 (define string-append-two
   (lambda (str0 str20)
     (($$atom list->string)
      (($$atom ##append-two)
       (($$atom string->list) ($$atom str0))
       (($$atom string->list) ($$atom str20))))))
 (define string-append-h
   (lambda (strings0)
     (if (($$atom null?) ($$atom strings0))
         ($$atom "")
         (if (($$atom null?) (($$atom cdr) ($$atom strings0)))
             (($$atom car) ($$atom strings0))
             (($$atom string-append-h)
              (($$atom cons)
               (($$atom string-append-two)
                (($$atom car) ($$atom strings0))
                (($$atom car) (($$atom cdr) ($$atom strings0))))
               (($$atom cdr) (($$atom cdr) ($$atom strings0)))))))))
 (define string-append
   (lambda strings0 (($$atom string-append-h) ($$atom strings0))))
 (define string->symbol
   (lambda (str0) (($$atom gambit$$string->symbol) ($$atom str0))))
 (define map
   (lambda (fn0 lst0)
     (if (($$atom null?) ($$atom lst0))
         ($$atom '())
         (($$atom cons)
          (($$atom fn0) (($$atom car) ($$atom lst0)))
          (($$atom map) ($$atom fn0) (($$atom cdr) ($$atom lst0)))))))
 (define ##append-two
   (lambda (lst10 lst20)
     (if (($$atom null?) ($$atom lst10))
         ($$atom lst20)
         (let ((result0 (($$atom cons)
                         (($$atom car) ($$atom lst10))
                         ($$atom '()))))
           (letrec ((loop0 (lambda (lst21 result1 sentinel0 src0)
                             (if (($$atom null?) ($$atom src0))
                                 (begin
                                   (($$atom set-cdr!)
                                    ($$atom sentinel0)
                                    ($$atom lst21))
                                   ($$atom result1))
                                 (begin
                                   (($$atom set-cdr!)
                                    ($$atom sentinel0)
                                    (($$atom cons)
                                     (($$atom car) ($$atom src0))
                                     ($$atom '())))
                                   (($$atom loop0)
                                    ($$atom lst21)
                                    ($$atom result1)
                                    (($$atom cdr) ($$atom sentinel0))
                                    (($$atom cdr) ($$atom src0))))))))
             (($$atom loop0)
              ($$atom lst20)
              ($$atom result0)
              ($$atom result0)
              (($$atom cdr) ($$atom lst10))))))))
 (define every?
   (lambda (pred?0 l0)
     (letrec ((loop0 (lambda (pred?1 l1)
                       (let ((g00 (($$atom null?) ($$atom l1))))
                         (if ($$atom g00)
                             ($$atom g00)
                             (if (($$atom pred?1) (($$atom car) ($$atom l1)))
                                 (($$atom loop0)
                                  ($$atom pred?1)
                                  (($$atom cdr) ($$atom l1)))
                                 ($$atom #f)))))))
       (($$atom loop0) ($$atom pred?0) ($$atom l0)))))
 (define some?
   (lambda (pred?0 l0)
     (letrec ((loop0 (lambda (pred?1 l1)
                       (if (($$atom null?) ($$atom l1))
                           ($$atom #f)
                           (let ((g10 (($$atom pred?1)
                                       (($$atom car) ($$atom l1)))))
                             (if ($$atom g10)
                                 ($$atom g10)
                                 (($$atom loop0)
                                  ($$atom pred?1)
                                  (($$atom cdr) ($$atom l1)))))))))
       (($$atom loop0) ($$atom pred?0) ($$atom l0)))))
 (define map2
   (lambda (f0 l10 l20)
     (letrec ((loop0 (lambda (f1 l11 l21)
                       (if (($$atom pair?) ($$atom l11))
                           (($$atom cons)
                            (($$atom f1)
                             (($$atom car) ($$atom l11))
                             (($$atom car) ($$atom l21)))
                            (($$atom loop0)
                             ($$atom f1)
                             (($$atom cdr) ($$atom l11))
                             (($$atom cdr) ($$atom l21))))
                           ($$atom '())))))
       (($$atom loop0) ($$atom f0) ($$atom l10) ($$atom l20)))))
 (define get-last-pair
   (lambda (l0)
     (letrec ((loop0 (lambda (l1)
                       (let ((x0 (($$atom cdr) ($$atom l1))))
                         (if (($$atom pair?) ($$atom x0))
                             (($$atom loop0) ($$atom x0))
                             ($$atom l1))))))
       (($$atom loop0) ($$atom l0)))))
 (define partial-evaluate
   (lambda (proc0 args0)
     (($$atom peval)
      (($$atom alphatize) ($$atom proc0) ($$atom '()))
      ($$atom args0))))
 (define alphatize
   (lambda (exp0 env0)
     (letrec ((alpha0 (lambda (exp1)
                        (if (($$atom const-expr?) ($$atom exp1))
                            (($$atom quot)
                             (($$atom const-value) ($$atom exp1)))
                            (if (($$atom symbol?) ($$atom exp1))
                                (let ((x0 (($$atom assq)
                                           ($$atom exp1)
                                           ($$atom env0))))
                                  (if ($$atom x0)
                                      (($$atom cdr) ($$atom x0))
                                      ($$atom exp1)))
                                (if (let ((g20 (($$atom eq?)
                                                (($$atom car) ($$atom exp1))
                                                ($$atom 'if))))
                                      (if ($$atom g20)
                                          ($$atom g20)
                                          (($$atom eq?)
                                           (($$atom car) ($$atom exp1))
                                           ($$atom 'begin))))
                                    (($$atom cons)
                                     (($$atom car) ($$atom exp1))
                                     (($$atom map)
                                      ($$atom alpha0)
                                      (($$atom cdr) ($$atom exp1))))
                                    (if (let ((g30 (($$atom eq?)
                                                    (($$atom car)
                                                     ($$atom exp1))
                                                    ($$atom 'let))))
                                          (if ($$atom g30)
                                              ($$atom g30)
                                              (($$atom eq?)
                                               (($$atom car) ($$atom exp1))
                                               ($$atom 'letrec))))
                                        (let ((new-env0
                                               (($$atom new-variables)
                                                (($$atom map)
                                                 ($$atom car)
                                                 (($$atom car)
                                                  (($$atom cdr)
                                                   ($$atom exp1))))
                                                ($$atom env0))))
                                          (($$atom list)
                                           (($$atom car) ($$atom exp1))
                                           (($$atom map)
                                            (lambda (x0)
                                              (($$atom list)
                                               (($$atom cdr)
                                                (($$atom assq)
                                                 (($$atom car) ($$atom x0))
                                                 ($$atom new-env0)))
                                               (if (($$atom eq?)
                                                    (($$atom car)
                                                     ($$atom exp1))
                                                    ($$atom 'let))
                                                   (($$atom alpha0)
                                                    (($$atom car)
                                                     (($$atom cdr)
                                                      ($$atom x0))))
                                                   (($$atom alphatize)
                                                    (($$atom car)
                                                     (($$atom cdr)
                                                      ($$atom x0)))
                                                    ($$atom new-env0)))))
                                            (($$atom car)
                                             (($$atom cdr) ($$atom exp1))))
                                           (($$atom alphatize)
                                            (($$atom car)
                                             (($$atom cdr)
                                              (($$atom cdr) ($$atom exp1))))
                                            ($$atom new-env0))))
                                        (if (($$atom eq?)
                                             (($$atom car) ($$atom exp1))
                                             ($$atom 'lambda))
                                            (let ((new-env0
                                                   (($$atom new-variables)
                                                    (($$atom car)
                                                     (($$atom cdr)
                                                      ($$atom exp1)))
                                                    ($$atom env0))))
                                              (($$atom list)
                                               ($$atom 'lambda)
                                               (($$atom map)
                                                (lambda (x0)
                                                  (($$atom cdr)
                                                   (($$atom assq)
                                                    ($$atom x0)
                                                    ($$atom new-env0))))
                                                (($$atom car)
                                                 (($$atom cdr) ($$atom exp1))))
                                               (($$atom alphatize)
                                                (($$atom car)
                                                 (($$atom cdr)
                                                  (($$atom cdr)
                                                   ($$atom exp1))))
                                                ($$atom new-env0))))
                                            (($$atom map)
                                             ($$atom alpha0)
                                             ($$atom exp1))))))))))
       (($$atom alpha0) ($$atom exp0)))))
 (define const-expr?
   (lambda (expr0)
     (if (($$atom symbol?) ($$atom expr0))
         ($$atom #f)
         (let ((g40 (($$atom not) (($$atom pair?) ($$atom expr0)))))
           (if ($$atom g40)
               ($$atom g40)
               (($$atom eq?)
                (($$atom car) ($$atom expr0))
                ($$atom 'quote)))))))
 (define const-value
   (lambda (expr0)
     (if (($$atom pair?) ($$atom expr0))
         (($$atom car) (($$atom cdr) ($$atom expr0)))
         ($$atom expr0))))
 (define quot (lambda (val0) (($$atom list) ($$atom 'quote) ($$atom val0))))
 (define new-variables
   (lambda (parms0 env0)
     (($$atom ##append-two)
      (($$atom map)
       (lambda (x0)
         (($$atom cons) ($$atom x0) (($$atom new-variable) ($$atom x0))))
       ($$atom parms0))
      ($$atom env0))))
 (define *current-num* ($$atom 0))
 (define new-variable
   (lambda (name0)
     (begin
       (set! *current-num* (($$atom +) ($$atom *current-num*) ($$atom 1)))
       (($$atom string->symbol)
        (($$atom string-append)
         (($$atom symbol->string) ($$atom name0))
         ($$atom "_")
         (($$atom number->string) ($$atom *current-num*)))))))
 (define peval
   (lambda (proc0 args0)
     (($$atom simplify!)
      (let ((body0 (($$atom car) (($$atom cdr) (($$atom cdr) ($$atom proc0)))))
            (parms0 (($$atom car) (($$atom cdr) ($$atom proc0)))))
        (($$atom list)
         ($$atom 'lambda)
         (($$atom remove-constant) ($$atom parms0) ($$atom args0))
         (($$atom beta-subst)
          ($$atom body0)
          (($$atom map2)
           (lambda (x0 y0)
             (if (($$atom not-constant?) ($$atom y0))
                 ($$atom '(()))
                 (($$atom cons) ($$atom x0) (($$atom quot) ($$atom y0)))))
           ($$atom parms0)
           ($$atom args0))))))))
 (define not-constant (($$atom list) ($$atom '?)))
 (define not-constant?
   (lambda (x0) (($$atom eq?) ($$atom x0) ($$atom not-constant))))
 (define remove-constant
   (lambda (l0 a0)
     (if (($$atom null?) ($$atom l0))
         ($$atom '())
         (if (($$atom not-constant?) (($$atom car) ($$atom a0)))
             (($$atom cons)
              (($$atom car) ($$atom l0))
              (($$atom remove-constant)
               (($$atom cdr) ($$atom l0))
               (($$atom cdr) ($$atom a0))))
             (($$atom remove-constant)
              (($$atom cdr) ($$atom l0))
              (($$atom cdr) ($$atom a0)))))))
 (define extract-constant
   (lambda (l0 a0)
     (if (($$atom null?) ($$atom l0))
         ($$atom '())
         (if (($$atom not-constant?) (($$atom car) ($$atom a0)))
             (($$atom extract-constant)
              (($$atom cdr) ($$atom l0))
              (($$atom cdr) ($$atom a0)))
             (($$atom cons)
              (($$atom car) ($$atom l0))
              (($$atom extract-constant)
               (($$atom cdr) ($$atom l0))
               (($$atom cdr) ($$atom a0))))))))
 (define beta-subst
   (lambda (exp0 env0)
     (letrec ((bs0 (lambda (exp1)
                     (if (($$atom const-expr?) ($$atom exp1))
                         (($$atom quot) (($$atom const-value) ($$atom exp1)))
                         (if (($$atom symbol?) ($$atom exp1))
                             (let ((x0 (($$atom assq)
                                        ($$atom exp1)
                                        ($$atom env0))))
                               (if ($$atom x0)
                                   (($$atom cdr) ($$atom x0))
                                   ($$atom exp1)))
                             (if (let ((g50 (($$atom eq?)
                                             (($$atom car) ($$atom exp1))
                                             ($$atom 'if))))
                                   (if ($$atom g50)
                                       ($$atom g50)
                                       (($$atom eq?)
                                        (($$atom car) ($$atom exp1))
                                        ($$atom 'begin))))
                                 (($$atom cons)
                                  (($$atom car) ($$atom exp1))
                                  (($$atom map)
                                   ($$atom bs0)
                                   (($$atom cdr) ($$atom exp1))))
                                 (if (let ((g60 (($$atom eq?)
                                                 (($$atom car) ($$atom exp1))
                                                 ($$atom 'let))))
                                       (if ($$atom g60)
                                           ($$atom g60)
                                           (($$atom eq?)
                                            (($$atom car) ($$atom exp1))
                                            ($$atom 'letrec))))
                                     (($$atom list)
                                      (($$atom car) ($$atom exp1))
                                      (($$atom map)
                                       (lambda (x0)
                                         (($$atom list)
                                          (($$atom car) ($$atom x0))
                                          (($$atom bs0)
                                           (($$atom car)
                                            (($$atom cdr) ($$atom x0))))))
                                       (($$atom car)
                                        (($$atom cdr) ($$atom exp1))))
                                      (($$atom bs0)
                                       (($$atom car)
                                        (($$atom cdr)
                                         (($$atom cdr) ($$atom exp1))))))
                                     (if (($$atom eq?)
                                          (($$atom car) ($$atom exp1))
                                          ($$atom 'lambda))
                                         (($$atom list)
                                          ($$atom 'lambda)
                                          (($$atom car)
                                           (($$atom cdr) ($$atom exp1)))
                                          (($$atom bs0)
                                           (($$atom car)
                                            (($$atom cdr)
                                             (($$atom cdr) ($$atom exp1))))))
                                         (($$atom map)
                                          ($$atom bs0)
                                          ($$atom exp1))))))))))
       (($$atom bs0) ($$atom exp0)))))
 (define simplify!
   (lambda (exp0)
     (letrec ((changed?0 (($$atom ##box) ($$atom #f)))
              (remove-empty-calls!0
               (lambda (changed?1 where0 env0)
                 (letrec ((rec!0 (lambda (where1)
                                   (let ((exp1 (($$atom car) ($$atom where1))))
                                     (let ((g70 (($$atom const-expr?)
                                                 ($$atom exp1))))
                                       (if ($$atom g70)
                                           ($$atom g70)
                                           (let ((g80 (($$atom symbol?)
                                                       ($$atom exp1))))
                                             (if ($$atom g80)
                                                 ($$atom g80)
                                                 (if (($$atom eq?)
                                                      (($$atom car)
                                                       ($$atom exp1))
                                                      ($$atom 'if))
                                                     (begin
                                                       (($$atom rec!0)
                                                        (($$atom cdr)
                                                         ($$atom exp1)))
                                                       (($$atom rec!0)
                                                        (($$atom cdr)
                                                         (($$atom cdr)
                                                          ($$atom exp1))))
                                                       (($$atom rec!0)
                                                        (($$atom cdr)
                                                         (($$atom cdr)
                                                          (($$atom cdr)
                                                           ($$atom exp1))))))
                                                     (if (($$atom eq?)
                                                          (($$atom car)
                                                           ($$atom exp1))
                                                          ($$atom 'begin))
                                                         (($$atom for-each!)
                                                          ($$atom rec!0)
                                                          (($$atom cdr)
                                                           ($$atom exp1)))
                                                         (if (let ((g90 (($$atom eq?)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                 (($$atom car) ($$atom exp1))
                                 ($$atom 'let))))
                       (if ($$atom g90)
                           ($$atom g90)
                           (($$atom eq?)
                            (($$atom car) ($$atom exp1))
                            ($$atom 'letrec))))
                     (let ((new-env0
                            (($$atom cons) ($$atom exp1) ($$atom env0))))
                       (begin
                         (($$atom remove-empty-calls!0)
                          ($$atom changed?1)
                          (($$atom cdr) (($$atom cdr) ($$atom exp1)))
                          ($$atom new-env0))
                         (($$atom for-each!)
                          (lambda (x0)
                            (($$atom remove-empty-calls!0)
                             ($$atom changed?1)
                             (($$atom cdr) (($$atom car) ($$atom x0)))
                             ($$atom new-env0)))
                          (($$atom car) (($$atom cdr) ($$atom exp1))))))
                     (if (($$atom eq?)
                          (($$atom car) ($$atom exp1))
                          ($$atom 'lambda))
                         (($$atom rec!0)
                          (($$atom cdr) (($$atom cdr) ($$atom exp1))))
                         (begin
                           (($$atom for-each!)
                            ($$atom rec!0)
                            (($$atom cdr) ($$atom exp1)))
                           (if (if (($$atom null?)
                                    (($$atom cdr) ($$atom exp1)))
                                   (($$atom symbol?)
                                    (($$atom car) ($$atom exp1)))
                                   ($$atom #f))
                               (let ((frame0 (($$atom binding-frame)
                                              (($$atom car) ($$atom exp1))
                                              ($$atom env0))))
                                 (if ($$atom frame0)
                                     (let ((proc0 (($$atom bound-expr)
                                                   (($$atom car) ($$atom exp1))
                                                   ($$atom frame0))))
                                       (if (if (($$atom pair?) ($$atom proc0))
                                               (($$atom eq?)
                                                (($$atom car) ($$atom proc0))
                                                ($$atom 'lambda))
                                               ($$atom #f))
                                           (begin
                                             (($$atom ##set-box!)
                                              ($$atom changed?1)
                                              ($$atom #t))
                                             (($$atom set-car!)
                                              ($$atom where1)
                                              (($$atom car)
                                               (($$atom cdr)
                                                (($$atom cdr)
                                                 ($$atom proc0))))))
                                           ($$atom #f)))
                                     ($$atom #f)))
                               ($$atom #f)))))))))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                   (($$atom rec!0) ($$atom where0)))))
              (simp!0 (lambda (where0 env0)
                        (letrec ((s!0 (lambda (where1)
                                        (let ((exp1 (($$atom car)
                                                     ($$atom where1))))
                                          (let ((g100 (($$atom const-expr?)
                                                       ($$atom exp1))))
                                            (if ($$atom g100)
                                                ($$atom g100)
                                                (let ((g110 (($$atom symbol?)
                                                             ($$atom exp1))))
                                                  (if ($$atom g110)
                                                      ($$atom g110)
                                                      (if (($$atom eq?)
                                                           (($$atom car)
                                                            ($$atom exp1))
                                                           ($$atom 'if))
                                                          (begin
                                                            (($$atom s!0)
                                                             (($$atom cdr)
                                                              ($$atom exp1)))
                                                            (if (($$atom const-expr?)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                         (($$atom car) (($$atom cdr) ($$atom exp1))))
                        (begin
                          (($$atom set-car!)
                           ($$atom where1)
                           (if (($$atom memq)
                                (($$atom const-value)
                                 (($$atom car) (($$atom cdr) ($$atom exp1))))
                                ($$atom '(#f ())))
                               (if (($$atom =)
                                    (($$atom length) ($$atom exp1))
                                    ($$atom 3))
                                   ($$atom ''())
                                   (($$atom car)
                                    (($$atom cdr)
                                     (($$atom cdr)
                                      (($$atom cdr) ($$atom exp1))))))
                               (($$atom car)
                                (($$atom cdr) (($$atom cdr) ($$atom exp1))))))
                          (($$atom s!0) ($$atom where1)))
                        (($$atom for-each!)
                         ($$atom s!0)
                         (($$atom cdr) (($$atom cdr) ($$atom exp1))))))
                  (if (($$atom eq?)
                       (($$atom car) ($$atom exp1))
                       ($$atom 'begin))
                      (begin
                        (($$atom for-each!)
                         ($$atom s!0)
                         (($$atom cdr) ($$atom exp1)))
                        (letrec ((loop0 (lambda (exps0)
                                          (if (($$atom null?)
                                               (($$atom cdr)
                                                (($$atom cdr) ($$atom exps0))))
                                              ($$atom #f)
                                              (let ((x0 (($$atom car)
                                                         (($$atom cdr)
                                                          ($$atom exps0)))))
                                                (($$atom loop0)
                                                 (if (let ((g120 (($$atom const-expr?)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                          ($$atom x0))))
               (if ($$atom g120)
                   ($$atom g120)
                   (let ((g130 (($$atom symbol?) ($$atom x0))))
                     (if ($$atom g130)
                         ($$atom g130)
                         (if (($$atom pair?) ($$atom x0))
                             (($$atom eq?)
                              (($$atom car) ($$atom x0))
                              ($$atom 'lambda))
                             ($$atom #f))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                     (begin
                                                       (($$atom set-cdr!)
                                                        ($$atom exps0)
                                                        (($$atom cdr)
                                                         (($$atom cdr)
                                                          ($$atom exps0))))
                                                       ($$atom exps0))
                                                     (($$atom cdr)
                                                      ($$atom exps0)))))))))
                          (($$atom loop0) ($$atom exp1)))
                        (if (($$atom null?)
                             (($$atom cdr) (($$atom cdr) ($$atom exp1))))
                            (($$atom set-car!)
                             ($$atom where1)
                             (($$atom car) (($$atom cdr) ($$atom exp1))))
                            ($$atom #f)))
                      (if (let ((g140 (($$atom eq?)
                                       (($$atom car) ($$atom exp1))
                                       ($$atom 'let))))
                            (if ($$atom g140)
                                ($$atom g140)
                                (($$atom eq?)
                                 (($$atom car) ($$atom exp1))
                                 ($$atom 'letrec))))
                          (let ((new-env0
                                 (($$atom cons) ($$atom exp1) ($$atom env0))))
                            (letrec ((keep0 (lambda (where2 i0)
                                              (if (($$atom >=)
                                                   ($$atom i0)
                                                   (($$atom length)
                                                    (($$atom car)
                                                     (($$atom cdr)
                                                      (($$atom car)
                                                       ($$atom where2))))))
                                                  ($$atom '())
                                                  (let ((var0 (($$atom car)
                                                               (($$atom list-ref)
                                                                (($$atom car)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                         (($$atom cdr) (($$atom car) ($$atom where2))))
                        ($$atom i0)))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                    (let ((val0 (($$atom car)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                         (($$atom cdr)
                          (($$atom assq)
                           ($$atom var0)
                           (($$atom car)
                            (($$atom cdr) (($$atom car) ($$atom where2)))))))))
              (let ((refs0 (($$atom ref-count)
                            (($$atom car) ($$atom where2))
                            ($$atom var0))))
                (let ((self-refs0
                       (($$atom ref-count) ($$atom val0) ($$atom var0))))
                  (let ((total-refs0
                         (($$atom -)
                          (($$atom car) ($$atom refs0))
                          (($$atom car) ($$atom self-refs0)))))
                    (let ((oper-refs0
                           (($$atom -)
                            (($$atom car) (($$atom cdr) ($$atom refs0)))
                            (($$atom car)
                             (($$atom cdr) ($$atom self-refs0))))))
                      (if (($$atom =) ($$atom total-refs0) ($$atom 0))
                          (($$atom keep0)
                           ($$atom where2)
                           (($$atom +) ($$atom i0) ($$atom 1)))
                          (if (let ((g150 (($$atom const-expr?)
                                           ($$atom val0))))
                                (if ($$atom g150)
                                    ($$atom g150)
                                    (let ((g160 (($$atom symbol?)
                                                 ($$atom val0))))
                                      (if ($$atom g160)
                                          ($$atom g160)
                                          (let ((g170 (if (($$atom pair?)
                                                           ($$atom val0))
                                                          (if (($$atom eq?)
                                                               (($$atom car)
                                                                ($$atom val0))
                                                               ($$atom 'lambda))
                                                              (if (($$atom =)
;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                           ($$atom total-refs0)
                           ($$atom 1))
                          (if (($$atom =) ($$atom oper-refs0) ($$atom 1))
                              (($$atom =)
                               (($$atom car) ($$atom self-refs0))
                               ($$atom 0))
                              ($$atom #f))
                          ($$atom #f))
                      ($$atom #f))
                  ($$atom #f))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                            (if ($$atom g170)
                                                ($$atom g170)
                                                (if (($$atom car)
                                                     (($$atom cdr)
                                                      (($$atom cdr)
                                                       ($$atom refs0))))
                                                    (($$atom =)
                                                     ($$atom total-refs0)
                                                     ($$atom 1))
                                                    ($$atom #f))))))))
                              (begin
                                (($$atom set-car!)
                                 ($$atom where2)
                                 (($$atom beta-subst)
                                  (($$atom car) ($$atom where2))
                                  (($$atom list)
                                   (($$atom cons)
                                    ($$atom var0)
                                    ($$atom val0)))))
                                (($$atom keep0)
                                 ($$atom where2)
                                 (($$atom +) ($$atom i0) ($$atom 1))))
                              (($$atom cons)
                               ($$atom var0)
                               (($$atom keep0)
                                ($$atom where2)
                                (($$atom +)
                                 ($$atom i0)
                                 ($$atom 1))))))))))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                              (begin
                                (($$atom simp!0)
                                 (($$atom cdr) (($$atom cdr) ($$atom exp1)))
                                 ($$atom new-env0))
                                (($$atom for-each!)
                                 (lambda (x0)
                                   (($$atom simp!0)
                                    (($$atom cdr) (($$atom car) ($$atom x0)))
                                    ($$atom new-env0)))
                                 (($$atom car) (($$atom cdr) ($$atom exp1))))
                                (let ((to-keep0
                                       (($$atom keep0)
                                        ($$atom where1)
                                        ($$atom 0))))
                                  (if (($$atom <)
                                       (($$atom length) ($$atom to-keep0))
                                       (($$atom length)
                                        (($$atom car)
                                         (($$atom cdr)
                                          (($$atom car) ($$atom where1))))))
                                      (begin
                                        (if (($$atom null?) ($$atom to-keep0))
                                            (($$atom set-car!)
                                             ($$atom where1)
                                             (($$atom car)
                                              (($$atom cdr)
                                               (($$atom cdr)
                                                (($$atom car)
                                                 ($$atom where1))))))
                                            (($$atom set-car!)
                                             (($$atom cdr)
                                              (($$atom car) ($$atom where1)))
                                             (($$atom map)
                                              (lambda (v0)
                                                (($$atom assq)
                                                 ($$atom v0)
                                                 (($$atom car)
                                                  (($$atom cdr)
                                                   (($$atom car)
                                                    ($$atom where1))))))
                                              ($$atom to-keep0))))
                                        (($$atom s!0) ($$atom where1)))
                                      (if (($$atom null?) ($$atom to-keep0))
                                          (($$atom set-car!)
                                           ($$atom where1)
                                           (($$atom car)
                                            (($$atom cdr)
                                             (($$atom cdr)
                                              (($$atom car)
                                               ($$atom where1))))))
                                          ($$atom #f)))))))
                          (if (($$atom eq?)
                               (($$atom car) ($$atom exp1))
                               ($$atom 'lambda))
                              (($$atom simp!0)
                               (($$atom cdr) (($$atom cdr) ($$atom exp1)))
                               (($$atom cons) ($$atom exp1) ($$atom env0)))
                              (begin
                                (($$atom for-each!) ($$atom s!0) ($$atom exp1))
                                (if (($$atom symbol?)
                                     (($$atom car) ($$atom exp1)))
                                    (let ((frame0 (($$atom binding-frame)
                                                   (($$atom car) ($$atom exp1))
                                                   ($$atom env0))))
                                      (if ($$atom frame0)
                                          (let ((proc0 (($$atom bound-expr)
                                                        (($$atom car)
                                                         ($$atom exp1))
                                                        ($$atom frame0))))
                                            (if (if (($$atom pair?)
                                                     ($$atom proc0))
                                                    (if (($$atom eq?)
                                                         (($$atom car)
                                                          ($$atom proc0))
                                                         ($$atom 'lambda))
                                                        (($$atom some?)
                                                         ($$atom const-expr?)
                                                         (($$atom cdr)
                                                          ($$atom exp1)))
                                                        ($$atom #f))
                                                    ($$atom #f))
                                                (let ((args0 (($$atom arg-pattern)
                                                              (($$atom cdr)
                                                               ($$atom exp1)))))
                                                  (let ((new-proc0
                                                         (($$atom peval)
                                                          ($$atom proc0)
                                                          ($$atom args0))))
                                                    (let ((new-args0
                                                           (($$atom remove-constant)
                                                            (($$atom cdr)
                                                             ($$atom exp1))
                                                            ($$atom args0))))
                                                      (($$atom set-car!)
                                                       ($$atom where1)
                                                       (($$atom cons)
                                                        (($$atom add-binding)
                                                         ($$atom new-proc0)
                                                         ($$atom frame0)
                                                         (($$atom car)
                                                          ($$atom exp1)))
                                                        ($$atom new-args0))))))
                                                ($$atom #f)))
                                          (($$atom set-car!)
                                           ($$atom where1)
                                           (($$atom constant-fold-global)
                                            (($$atom car) ($$atom exp1))
                                            (($$atom cdr) ($$atom exp1))))))
                                    (let ((g180 (($$atom not)
                                                 (($$atom pair?)
                                                  (($$atom car)
                                                   ($$atom exp1))))))
                                      (if ($$atom g180)
                                          ($$atom g180)
                                          (if (($$atom eq?)
                                               (($$atom car)
                                                (($$atom car) ($$atom exp1)))
                                               ($$atom 'lambda))
                                              (begin
                                                (($$atom set-car!)
                                                 ($$atom where1)
                                                 (($$atom list)
                                                  ($$atom 'let)
                                                  (($$atom map2)
                                                   ($$atom list)
                                                   (($$atom car)
                                                    (($$atom cdr)
                                                     (($$atom car)
                                                      ($$atom exp1))))
                                                   (($$atom cdr)
                                                    ($$atom exp1)))
                                                  (($$atom car)
                                                   (($$atom cdr)
                                                    (($$atom cdr)
                                                     (($$atom car)
                                                      ($$atom exp1)))))))
                                                (($$atom s!0) ($$atom where1)))
                                              ($$atom #f))))))))))))))))))
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                          (($$atom s!0) ($$atom where0))))))
       (begin
         (($$atom ##set-box!) ($$atom changed?0) ($$atom #f))
         (let ((x0 (($$atom list) ($$atom exp0))))
           (letrec ((loop0 (lambda (changed?1 x1)
                             (begin
                               (($$atom ##set-box!)
                                ($$atom changed?1)
                                ($$atom #f))
                               (($$atom simp!0) ($$atom x1) ($$atom '()))
                               (($$atom remove-empty-calls!0)
                                ($$atom changed?1)
                                ($$atom x1)
                                ($$atom '()))
                               (if (($$atom ##unbox) ($$atom changed?1))
                                   (($$atom loop0)
                                    ($$atom changed?1)
                                    ($$atom x1))
                                   (($$atom car) ($$atom x1)))))))
             (($$atom loop0) ($$atom changed?0) ($$atom x0))))))))
 (define ref-count
   (lambda (exp0 var0)
     (let ((always-evaled0 (($$atom ##box) ($$atom #t)))
           (oper0 (($$atom ##box) ($$atom 0)))
           (total0 (($$atom ##box) ($$atom 0))))
       (letrec ((rc0 (lambda (var1 always-evaled1 oper1 total1 exp1 ae0)
                       (let ((g190 (($$atom const-expr?) ($$atom exp1))))
                         (if ($$atom g190)
                             ($$atom g190)
                             (if (($$atom symbol?) ($$atom exp1))
                                 (if (($$atom eq?) ($$atom exp1) ($$atom var1))
                                     (begin
                                       (($$atom ##set-box!)
                                        ($$atom total1)
                                        (($$atom +)
                                         (($$atom ##unbox) ($$atom total1))
                                         ($$atom 1)))
                                       (($$atom ##set-box!)
                                        ($$atom always-evaled1)
                                        (if ($$atom ae0)
                                            (($$atom ##unbox)
                                             ($$atom always-evaled1))
                                            ($$atom #f))))
                                     ($$atom #f))
                                 (if (($$atom eq?)
                                      (($$atom car) ($$atom exp1))
                                      ($$atom 'if))
                                     (begin
                                       (($$atom rc0)
                                        ($$atom var1)
                                        ($$atom always-evaled1)
                                        ($$atom oper1)
                                        ($$atom total1)
                                        (($$atom car)
                                         (($$atom cdr) ($$atom exp1)))
                                        ($$atom ae0))
                                       (($$atom for-each)
                                        (lambda (x0)
                                          (($$atom rc0)
                                           ($$atom var1)
                                           ($$atom always-evaled1)
                                           ($$atom oper1)
                                           ($$atom total1)
                                           ($$atom x0)
                                           ($$atom #f)))
                                        (($$atom cdr)
                                         (($$atom cdr) ($$atom exp1)))))
                                     (if (($$atom eq?)
                                          (($$atom car) ($$atom exp1))
                                          ($$atom 'begin))
                                         (($$atom for-each)
                                          (lambda (x0)
                                            (($$atom rc0)
                                             ($$atom var1)
                                             ($$atom always-evaled1)
                                             ($$atom oper1)
                                             ($$atom total1)
                                             ($$atom x0)
                                             ($$atom ae0)))
                                          (($$atom cdr) ($$atom exp1)))
                                         (if (let ((g200 (($$atom eq?)
                                                          (($$atom car)
                                                           ($$atom exp1))
                                                          ($$atom 'let))))
                                               (if ($$atom g200)
                                                   ($$atom g200)
                                                   (($$atom eq?)
                                                    (($$atom car)
                                                     ($$atom exp1))
                                                    ($$atom 'letrec))))
                                             (begin
                                               (($$atom for-each)
                                                (lambda (x0)
                                                  (($$atom rc0)
                                                   ($$atom var1)
                                                   ($$atom always-evaled1)
                                                   ($$atom oper1)
                                                   ($$atom total1)
                                                   (($$atom car)
                                                    (($$atom cdr) ($$atom x0)))
                                                   ($$atom ae0)))
                                                (($$atom car)
                                                 (($$atom cdr) ($$atom exp1))))
                                               (($$atom rc0)
                                                ($$atom var1)
                                                ($$atom always-evaled1)
                                                ($$atom oper1)
                                                ($$atom total1)
                                                (($$atom car)
                                                 (($$atom cdr)
                                                  (($$atom cdr)
                                                   ($$atom exp1))))
                                                ($$atom ae0)))
                                             (if (($$atom eq?)
                                                  (($$atom car) ($$atom exp1))
                                                  ($$atom 'lambda))
                                                 (($$atom rc0)
                                                  ($$atom var1)
                                                  ($$atom always-evaled1)
                                                  ($$atom oper1)
                                                  ($$atom total1)
                                                  (($$atom car)
                                                   (($$atom cdr)
                                                    (($$atom cdr)
                                                     ($$atom exp1))))
                                                  ($$atom #f))
                                                 (begin
                                                   (($$atom for-each)
                                                    (lambda (x0)
                                                      (($$atom rc0)
                                                       ($$atom var1)
                                                       ($$atom always-evaled1)
                                                       ($$atom oper1)
                                                       ($$atom total1)
                                                       ($$atom x0)
                                                       ($$atom ae0)))
                                                    ($$atom exp1))
                                                   (if (($$atom symbol?)
                                                        (($$atom car)
                                                         ($$atom exp1)))
                                                       (if (($$atom eq?)
                                                            (($$atom car)
                                                             ($$atom exp1))
                                                            ($$atom var1))
                                                           (($$atom ##set-box!)
                                                            ($$atom oper1)
                                                            (($$atom +)
                                                             (($$atom ##unbox)
                                                              ($$atom oper1))
                                                             ($$atom 1)))
                                                           ($$atom #f))
                                                       ($$atom #f)))))))))))))
         (begin
           (($$atom rc0)
            ($$atom var0)
            ($$atom always-evaled0)
            ($$atom oper0)
            ($$atom total0)
            ($$atom exp0)
            ($$atom #t))
           (($$atom list)
            (($$atom ##unbox) ($$atom total0))
            (($$atom ##unbox) ($$atom oper0))
            (($$atom ##unbox) ($$atom always-evaled0))))))))
 (define binding-frame
   (lambda (var0 env0)
     (if (($$atom null?) ($$atom env0))
         ($$atom #f)
         (if (let ((g210 (($$atom eq?)
                          (($$atom car) (($$atom car) ($$atom env0)))
                          ($$atom 'let))))
               (if ($$atom g210)
                   ($$atom g210)
                   (($$atom eq?)
                    (($$atom car) (($$atom car) ($$atom env0)))
                    ($$atom 'letrec))))
             (if (($$atom assq)
                  ($$atom var0)
                  (($$atom car) (($$atom cdr) (($$atom car) ($$atom env0)))))
                 (($$atom car) ($$atom env0))
                 (($$atom binding-frame)
                  ($$atom var0)
                  (($$atom cdr) ($$atom env0))))
             (if (($$atom eq?)
                  (($$atom car) (($$atom car) ($$atom env0)))
                  ($$atom 'lambda))
                 (if (($$atom memq)
                      ($$atom var0)
                      (($$atom car)
                       (($$atom cdr) (($$atom car) ($$atom env0)))))
                     (($$atom car) ($$atom env0))
                     (($$atom binding-frame)
                      ($$atom var0)
                      (($$atom cdr) ($$atom env0))))
                 (($$atom fatal-error) ($$atom "ill-formed environment")))))))
 (define bound-expr
   (lambda (var0 frame0)
     (if (let ((g220 (($$atom eq?)
                      (($$atom car) ($$atom frame0))
                      ($$atom 'let))))
           (if ($$atom g220)
               ($$atom g220)
               (($$atom eq?) (($$atom car) ($$atom frame0)) ($$atom 'letrec))))
         (($$atom car)
          (($$atom cdr)
           (($$atom assq)
            ($$atom var0)
            (($$atom car) (($$atom cdr) ($$atom frame0))))))
         (if (($$atom eq?) (($$atom car) ($$atom frame0)) ($$atom 'lambda))
             ($$atom not-constant)
             (($$atom fatal-error) ($$atom "ill-formed frame"))))))
 (define add-binding
   (lambda (val0 frame0 name0)
     (letrec ((find-val0
               (lambda (val1 bindings0)
                 (if (($$atom null?) ($$atom bindings0))
                     ($$atom #f)
                     (if (($$atom equal?)
                          ($$atom val1)
                          (($$atom car)
                           (($$atom cdr) (($$atom car) ($$atom bindings0)))))
                         (($$atom car) (($$atom car) ($$atom bindings0)))
                         (($$atom find-val0)
                          ($$atom val1)
                          (($$atom cdr) ($$atom bindings0))))))))
       (let ((g230 (($$atom find-val0)
                    ($$atom val0)
                    (($$atom car) (($$atom cdr) ($$atom frame0))))))
         (if ($$atom g230)
             ($$atom g230)
             (let ((var0 (($$atom new-variable) ($$atom name0))))
               (begin
                 (($$atom set-cdr!)
                  (($$atom get-last-pair)
                   (($$atom car) (($$atom cdr) ($$atom frame0))))
                  (($$atom list) (($$atom list) ($$atom var0) ($$atom val0))))
                 ($$atom var0))))))))
 (define for-each!
   (lambda (proc!0 l0)
     (if (($$atom null?) ($$atom l0))
         ($$atom #f)
         (begin
           (($$atom proc!0) ($$atom l0))
           (($$atom for-each!) ($$atom proc!0) (($$atom cdr) ($$atom l0)))))))
 (define arg-pattern
   (lambda (exps0)
     (if (($$atom null?) ($$atom exps0))
         ($$atom '())
         (($$atom cons)
          (if (($$atom const-expr?) (($$atom car) ($$atom exps0)))
              (($$atom const-value) (($$atom car) ($$atom exps0)))
              ($$atom not-constant))
          (($$atom arg-pattern) (($$atom cdr) ($$atom exps0)))))))
 (define *primitives*
   (($$atom list)
    (($$atom cons)
     ($$atom 'car)
     (lambda (args0)
       (if (($$atom =) (($$atom length) ($$atom args0)) ($$atom 1))
           (if (($$atom pair?) (($$atom car) ($$atom args0)))
               (($$atom quot) (($$atom car) (($$atom car) ($$atom args0))))
               ($$atom #f))
           ($$atom #f))))
    (($$atom cons)
     ($$atom 'cdr)
     (lambda (args0)
       (if (($$atom =) (($$atom length) ($$atom args0)) ($$atom 1))
           (if (($$atom pair?) (($$atom car) ($$atom args0)))
               (($$atom quot) (($$atom cdr) (($$atom car) ($$atom args0))))
               ($$atom #f))
           ($$atom #f))))
    (($$atom cons)
     ($$atom '+)
     (lambda (args0)
       (if (($$atom every?) ($$atom number?) ($$atom args0))
           (($$atom quot) (($$atom sum) ($$atom args0) ($$atom 0)))
           ($$atom #f))))
    (($$atom cons)
     ($$atom '*)
     (lambda (args0)
       (if (($$atom every?) ($$atom number?) ($$atom args0))
           (($$atom quot) (($$atom product) ($$atom args0) ($$atom 1)))
           ($$atom #f))))
    (($$atom cons)
     ($$atom '-)
     (lambda (args0)
       (if (($$atom >) (($$atom length) ($$atom args0)) ($$atom 0))
           (if (($$atom every?) ($$atom number?) ($$atom args0))
               (($$atom quot)
                (if (($$atom null?) (($$atom cdr) ($$atom args0)))
                    (($$atom *) ($$atom -1) (($$atom car) ($$atom args0)))
                    (($$atom -)
                     (($$atom car) ($$atom args0))
                     (($$atom sum) (($$atom cdr) ($$atom args0)) ($$atom 0)))))
               ($$atom #f))
           ($$atom #f))))
    (($$atom cons)
     ($$atom '/)
     (lambda (args0)
       (if (($$atom >) (($$atom length) ($$atom args0)) ($$atom 1))
           (if (($$atom every?) ($$atom number?) ($$atom args0))
               (($$atom quot)
                (if (($$atom null?) (($$atom cdr) ($$atom args0)))
                    (($$atom /) ($$atom 1) (($$atom car) ($$atom args0)))
                    (($$atom /)
                     (($$atom car) ($$atom args0))
                     (($$atom product)
                      (($$atom cdr) ($$atom args0))
                      ($$atom 1)))))
               ($$atom #f))
           ($$atom #f))))
    (($$atom cons)
     ($$atom '<)
     (lambda (args0)
       (if (($$atom =) (($$atom length) ($$atom args0)) ($$atom 2))
           (if (($$atom every?) ($$atom number?) ($$atom args0))
               (($$atom quot)
                (($$atom <)
                 (($$atom car) ($$atom args0))
                 (($$atom car) (($$atom cdr) ($$atom args0)))))
               ($$atom #f))
           ($$atom #f))))
    (($$atom cons)
     ($$atom '=)
     (lambda (args0)
       (if (($$atom =) (($$atom length) ($$atom args0)) ($$atom 2))
           (if (($$atom every?) ($$atom number?) ($$atom args0))
               (($$atom quot)
                (($$atom =)
                 (($$atom car) ($$atom args0))
                 (($$atom car) (($$atom cdr) ($$atom args0)))))
               ($$atom #f))
           ($$atom #f))))
    (($$atom cons)
     ($$atom '>)
     (lambda (args0)
       (if (($$atom =) (($$atom length) ($$atom args0)) ($$atom 2))
           (if (($$atom every?) ($$atom number?) ($$atom args0))
               (($$atom quot)
                (($$atom >)
                 (($$atom car) ($$atom args0))
                 (($$atom car) (($$atom cdr) ($$atom args0)))))
               ($$atom #f))
           ($$atom #f))))
    (($$atom cons)
     ($$atom 'eq?)
     (lambda (args0)
       (if (($$atom =) (($$atom length) ($$atom args0)) ($$atom 2))
           (($$atom quot)
            (($$atom eq?)
             (($$atom car) ($$atom args0))
             (($$atom car) (($$atom cdr) ($$atom args0)))))
           ($$atom #f))))
    (($$atom cons)
     ($$atom 'not)
     (lambda (args0)
       (if (($$atom =) (($$atom length) ($$atom args0)) ($$atom 1))
           (($$atom quot) (($$atom not) (($$atom car) ($$atom args0))))
           ($$atom #f))))
    (($$atom cons)
     ($$atom 'null?)
     (lambda (args0)
       (if (($$atom =) (($$atom length) ($$atom args0)) ($$atom 1))
           (($$atom quot) (($$atom null?) (($$atom car) ($$atom args0))))
           ($$atom #f))))
    (($$atom cons)
     ($$atom 'pair?)
     (lambda (args0)
       (if (($$atom =) (($$atom length) ($$atom args0)) ($$atom 1))
           (($$atom quot) (($$atom pair?) (($$atom car) ($$atom args0))))
           ($$atom #f))))
    (($$atom cons)
     ($$atom 'symbol?)
     (lambda (args0)
       (if (($$atom =) (($$atom length) ($$atom args0)) ($$atom 1))
           (($$atom quot) (($$atom symbol?) (($$atom car) ($$atom args0))))
           ($$atom #f))))))
 (define sum
   (lambda (lst0 n0)
     (if (($$atom null?) ($$atom lst0))
         ($$atom n0)
         (($$atom sum)
          (($$atom cdr) ($$atom lst0))
          (($$atom +) ($$atom n0) (($$atom car) ($$atom lst0)))))))
 (define product
   (lambda (lst0 n0)
     (if (($$atom null?) ($$atom lst0))
         ($$atom n0)
         (($$atom product)
          (($$atom cdr) ($$atom lst0))
          (($$atom *) ($$atom n0) (($$atom car) ($$atom lst0)))))))
 (define reduce-global
   (lambda (name0 args0)
     (let ((x0 (($$atom assq) ($$atom name0) ($$atom *primitives*))))
       (if ($$atom x0)
           ((($$atom cdr) ($$atom x0)) ($$atom args0))
           ($$atom #f)))))
 (define constant-fold-global
   (lambda (name0 exprs0)
     (letrec ((flatten0
               (lambda (args0 op0)
                 (if (($$atom null?) ($$atom args0))
                     ($$atom '())
                     (if (if (($$atom pair?) (($$atom car) ($$atom args0)))
                             (($$atom eq?)
                              (($$atom car) (($$atom car) ($$atom args0)))
                              ($$atom op0))
                             ($$atom #f))
                         (($$atom ##append-two)
                          (($$atom flatten0)
                           (($$atom cdr) (($$atom car) ($$atom args0)))
                           ($$atom op0))
                          (($$atom flatten0)
                           (($$atom cdr) ($$atom args0))
                           ($$atom op0)))
                         (($$atom cons)
                          (($$atom car) ($$atom args0))
                          (($$atom flatten0)
                           (($$atom cdr) ($$atom args0))
                           ($$atom op0))))))))
       (let ((args0 (if (let ((g240 (($$atom eq?) ($$atom name0) ($$atom '+))))
                          (if ($$atom g240)
                              ($$atom g240)
                              (($$atom eq?) ($$atom name0) ($$atom '*))))
                        (($$atom flatten0) ($$atom exprs0) ($$atom name0))
                        ($$atom exprs0))))
         (let ((g250 (if (($$atom every?) ($$atom const-expr?) ($$atom args0))
                         (($$atom reduce-global)
                          ($$atom name0)
                          (($$atom map) ($$atom const-value) ($$atom args0)))
                         ($$atom #f))))
           (if ($$atom g250)
               ($$atom g250)
               (let ((pattern0 (($$atom arg-pattern) ($$atom args0))))
                 (let ((const0 (($$atom map)
                                ($$atom const-value)
                                (($$atom extract-constant)
                                 ($$atom args0)
                                 ($$atom pattern0))))
                       (non-const0
                        (($$atom remove-constant)
                         ($$atom args0)
                         ($$atom pattern0))))
                   (if (($$atom eq?) ($$atom name0) ($$atom '+))
                       (let ((x0 (($$atom reduce-global)
                                  ($$atom '+)
                                  ($$atom const0))))
                         (if ($$atom x0)
                             (let ((y0 (($$atom const-value) ($$atom x0))))
                               (($$atom cons)
                                ($$atom '+)
                                (if (($$atom =) ($$atom y0) ($$atom 0))
                                    ($$atom non-const0)
                                    (($$atom cons)
                                     ($$atom x0)
                                     ($$atom non-const0)))))
                             (($$atom cons) ($$atom name0) ($$atom args0))))
                       (if (($$atom eq?) ($$atom name0) ($$atom '*))
                           (let ((x0 (($$atom reduce-global)
                                      ($$atom '*)
                                      ($$atom const0))))
                             (if ($$atom x0)
                                 (let ((y0 (($$atom const-value) ($$atom x0))))
                                   (($$atom cons)
                                    ($$atom '*)
                                    (if (($$atom =) ($$atom y0) ($$atom 1))
                                        ($$atom non-const0)
                                        (($$atom cons)
                                         ($$atom x0)
                                         ($$atom non-const0)))))
                                 (($$atom cons)
                                  ($$atom name0)
                                  ($$atom args0))))
                           (if (($$atom eq?) ($$atom name0) ($$atom 'cons))
                               (if (if (($$atom const-expr?)
                                        (($$atom car)
                                         (($$atom cdr) ($$atom args0))))
                                       (($$atom null?)
                                        (($$atom const-value)
                                         (($$atom car)
                                          (($$atom cdr) ($$atom args0)))))
                                       ($$atom #f))
                                   (($$atom list)
                                    ($$atom 'list)
                                    (($$atom car) ($$atom args0)))
                                   (if (if (($$atom pair?)
                                            (($$atom car)
                                             (($$atom cdr) ($$atom args0))))
                                           (($$atom eq?)
                                            (($$atom car)
                                             (($$atom car)
                                              (($$atom cdr) ($$atom args0))))
                                            ($$atom 'list))
                                           ($$atom #f))
                                       (($$atom cons)
                                        ($$atom 'list)
                                        (($$atom cons)
                                         (($$atom car) ($$atom args0))
                                         (($$atom cdr)
                                          (($$atom car)
                                           (($$atom cdr) ($$atom args0))))))
                                       (($$atom cons)
                                        ($$atom name0)
                                        ($$atom args0))))
                               (($$atom cons)
                                ($$atom name0)
                                ($$atom args0)))))))))))))
 (define try-peval
   (lambda (proc0 args0)
     (($$atom partial-evaluate) ($$atom proc0) ($$atom args0))))
 (define example1 ($$atom '(lambda (a b c) (if (null? a) b (+ (car a) c)))))
 (define example2
   ($$atom '(lambda (x y)
              (let ((q (lambda (a b) (if (< a 0) b (- 10 b)))))
                (if (< x 0) (q (- y) (- x)) (q y x))))))
 (define example3
   ($$atom '(lambda (l n)
              (letrec ((add-list
                        (lambda (l n)
                          (if (null? l)
                              '()
                              (cons (+ (car l) n) (add-list (cdr l) n))))))
                (add-list l n)))))
 (define example4
   ($$atom '(lambda (exp env)
              (letrec ((eval (lambda (exp env)
                               (letrec ((eval-list
                                         (lambda (l env)
                                           (if (null? l)
                                               '()
                                               (cons (eval (car l) env)
                                                     (eval-list
                                                      (cdr l)
                                                      env))))))
                                 (if (symbol? exp)
                                     (lookup exp env)
                                     (if (not (pair? exp))
                                         exp
                                         (if (eq? (car exp) 'quote)
                                             (car (cdr exp))
                                             (apply (eval (car exp) env)
                                                    (eval-list
                                                     (cdr exp)
                                                     env)))))))))
                (eval exp env)))))
 (define example5
   ($$atom '(lambda (a b)
              (letrec ((funct (lambda (x)
                                (+ x b (if (< x 1) 0 (funct (- x 1)))))))
                (funct a)))))
 (define example6
   ($$atom '(lambda ()
              (letrec ((fib (lambda (x)
                              (if (< x 2) x (+ (fib (- x 1)) (fib (- x 2)))))))
                (fib 10)))))
 (define example7
   ($$atom '(lambda (input)
              (letrec ((copy (lambda (in)
                               (if (pair? in)
                                   (cons (copy (car in)) (copy (cdr in)))
                                   in))))
                (copy input)))))
 (define example8
   ($$atom '(lambda (input)
              (letrec ((reverse (lambda (in result)
                                  (if (pair? in)
                                      (reverse (cdr in) (cons (car in) result))
                                      result))))
                (reverse input '())))))
 (define test
   (lambda ()
     (begin
       (set! *current-num* ($$atom 0))
       (($$atom list)
        (($$atom try-peval)
         ($$atom '(lambda (a b c) (if (null? a) b (+ (car a) c))))
         (($$atom list) ($$atom '(10 11)) ($$atom not-constant) ($$atom 1)))
        (($$atom try-peval)
         ($$atom '(lambda (x y)
                    (let ((q (lambda (a b) (if (< a 0) b (- 10 b)))))
                      (if (< x 0) (q (- y) (- x)) (q y x)))))
         (($$atom list) ($$atom not-constant) ($$atom 1)))
        (($$atom try-peval)
         ($$atom '(lambda (a b)
                    (letrec ((funct (lambda (x)
                                      (+ x b (if (< x 1) 0 (funct (- x 1)))))))
                      (funct a))))
         (($$atom list) ($$atom 5) ($$atom not-constant)))
        (($$atom try-peval)
         ($$atom '(lambda ()
                    (letrec ((fib (lambda (x)
                                    (if (< x 2)
                                        x
                                        (+ (fib (- x 1)) (fib (- x 2)))))))
                      (fib 10))))
         ($$atom '()))))))
 (($$atom test))

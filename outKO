GNU gdb (Ubuntu 7.7.1-0ubuntu5~14.04.2) 7.7.1
Copyright (C) 2014 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from gsc...(no debugging symbols found)...done.
Starting program: /usr/local/Gambit/bin/gsc -i float.o1 utils.o1 core.o1 native.o1 mem.o1 codegen.o1 ast.o1 expand.o1 main.o1 /home/bapt/Bureau/these/lazy-comp/test.scm --disable-entry-points --disable-return-points --verbose-jit
------------------------------------------------------------------------
adc008				bits 64
adc008 e9b7000000		jmp	rtlib_skip
adc00d			do_callback_handler:
adc00d 57			push	rdi
adc00e 56			push	rsi
adc00f 52			push	rdx
adc010 51			push	rcx
adc011 4150			push	r8
adc013 4151			push	r9
adc015 4152			push	r10
adc017 4153			push	r11
adc019 50			push	rax
adc01a 4889e7			mov	rdi,rsp
adc01d 4883e4f0			and	rsp,byte -16
adc021 4883ec08			sub	rsp,byte 8
adc025 57			push	rdi
adc026 e8d561c301		call	do_callback
adc02b 5c			pop	rsp
adc02c 58			pop	rax
adc02d 415b			pop	r11
adc02f 415a			pop	r10
adc031 4159			pop	r9
adc033 4158			pop	r8
adc035 59			pop	rcx
adc036 5a			pop	rdx
adc037 5e			pop	rsi
adc038 5f			pop	rdi
adc039 c3			ret
adc03a			do_callback_fn_handler:
adc03a 57			push	rdi
adc03b 56			push	rsi
adc03c 52			push	rdx
adc03d 51			push	rcx
adc03e 4150			push	r8
adc040 4151			push	r9
adc042 4152			push	r10
adc044 4153			push	r11
adc046 50			push	rax
adc047 4889e7			mov	rdi,rsp
adc04a 4883e4f0			and	rsp,byte -16
adc04e 4883ec08			sub	rsp,byte 8
adc052 57			push	rdi
adc053 e8bf62c301		call	do_callback_fn
adc058 5c			pop	rsp
adc059 58			pop	rax
adc05a 415b			pop	r11
adc05c 415a			pop	r10
adc05e 4159			pop	r9
adc060 4158			pop	r8
adc062 59			pop	rcx
adc063 5a			pop	rdx
adc064 5e			pop	rsi
adc065 5f			pop	rdi
adc066 c3			ret
adc067			do_callback_cont_handler:
adc067 57			push	rdi
adc068 56			push	rsi
adc069 52			push	rdx
adc06a 51			push	rcx
adc06b 4150			push	r8
adc06d 4151			push	r9
adc06f 4152			push	r10
adc071 4153			push	r11
adc073 50			push	rax
adc074 4889e7			mov	rdi,rsp
adc077 4883e4f0			and	rsp,byte -16
adc07b 4883ec08			sub	rsp,byte 8
adc07f 57			push	rdi
adc080 e8a963c301		call	do_callback_cont
adc085 5c			pop	rsp
adc086 58			pop	rax
adc087 415b			pop	r11
adc089 415a			pop	r10
adc08b 4159			pop	r9
adc08d 4158			pop	r8
adc08f 59			pop	rcx
adc090 5a			pop	rdx
adc091 5e			pop	rsi
adc092 5f			pop	rdi
adc093 c3			ret
adc094			gc_trampoline:
adc094 57			push	rdi
adc095 56			push	rsi
adc096 52			push	rdx
adc097 51			push	rcx
adc098 4150			push	r8
adc09a 4151			push	r9
adc09c 4152			push	r10
adc09e 4153			push	r11
adc0a0 50			push	rax
adc0a1 4889e7			mov	rdi,rsp
adc0a4 4883e4f0			and	rsp,byte -16
adc0a8 4883ec08			sub	rsp,byte 8
adc0ac 57			push	rdi
adc0ad e85a5cc301		call	gc
adc0b2 5c			pop	rsp
adc0b3 4989c1			mov	r9,rax
adc0b6 58			pop	rax
adc0b7 415b			pop	r11
adc0b9 415a			pop	r10
adc0bb 4159			pop	r9
adc0bd 4158			pop	r8
adc0bf 59			pop	rcx
adc0c0 5a			pop	rdx
adc0c1 5e			pop	rsi
adc0c2 5f			pop	rdi
adc0c3 c3			ret
adc0c4			rtlib_skip:
adc0c4 54			push	rsp
adc0c5 50			push	rax
adc0c6 53			push	rbx
adc0c7 51			push	rcx
adc0c8 52			push	rdx
adc0c9 55			push	rbp
adc0ca 56			push	rsi
adc0cb 57			push	rdi
adc0cc 4150			push	r8
adc0ce 4151			push	r9
adc0d0 4152			push	r10
adc0d2 4153			push	r11
adc0d4 4154			push	r12
adc0d6 4155			push	r13
adc0d8 4156			push	r14
adc0da 4157			push	r15
adc0dc 50			push	rax
adc0dd 53			push	rbx
adc0de 48b83810ecf7ff7f
adc0e6 0000			mov	rax,140737352831032
adc0e8 48c7c300000000		mov	rbx,dword 0
adc0ef 488918			mov	[rax],rbx
adc0f2 5b			pop	rbx
adc0f3 58			pop	rax
adc0f4 50			push	rax
adc0f5 53			push	rbx
adc0f6 48b84010ecf7ff7f
adc0fe 0000			mov	rax,140737352831040
adc100 48c7c300000000		mov	rbx,dword 0
adc107 488918			mov	[rax],rbx
adc10a 5b			pop	rbx
adc10b 58			pop	rax
adc10c 50			push	rax
adc10d 53			push	rbx
adc10e 48b84810ecf7ff7f
adc116 0000			mov	rax,140737352831048
adc118 48c7c300000000		mov	rbx,dword 0
adc11f 488918			mov	[rax],rbx
adc122 5b			pop	rbx
adc123 58			pop	rax
adc124 50			push	rax
adc125 53			push	rbx
adc126 48b85010ecf7ff7f
adc12e 0000			mov	rax,140737352831056
adc130 48c7c300000000		mov	rbx,dword 0
adc137 488918			mov	[rax],rbx
adc13a 5b			pop	rbx
adc13b 58			pop	rax
adc13c 50			push	rax
adc13d 53			push	rbx
adc13e 48b85810ecf7ff7f
adc146 0000			mov	rax,140737352831064
adc148 48c7c300000000		mov	rbx,dword 0
adc14f 488918			mov	[rax],rbx
adc152 5b			pop	rbx
adc153 58			pop	rax
adc154 50			push	rax
adc155 53			push	rbx
adc156 48b86010ecf7ff7f
adc15e 0000			mov	rax,140737352831072
adc160 48c7c300000000		mov	rbx,dword 0
adc167 488918			mov	[rax],rbx
adc16a 5b			pop	rbx
adc16b 58			pop	rax
adc16c 48b80810ecf7ff7f
adc174 0000			mov	rax,140737352830984
adc176 488920			mov	[rax],rsp
adc179 4889e5			mov	rbp,rsp
adc17c 48b908a036b2fc7f
adc184 0000			mov	rcx,140723298410504
adc186 48894828			mov	[rax+40],rcx
adc18a 48c7c100000000		mov	rcx,dword 0
adc191 49b908267253fe7f
adc199 0000			mov	r9,140730298410504
adc19b 49b88010ecf7ff7f
adc1a3 0000			mov	r8,140737352831104
adc1a5			prog_begin1:
GEN VERSION >>> #<ctx #2
                      stack: ()
                      slot-loc: ()
                      free-regs: (r0 r1 r2 r3 r4 r5 r6 r7 r8 r9)
                      env: ()
                      nb-args: -1
                      fs: 0>
>>> patching jump at 7ffff4adc1a5 -> 7ffff4adc1a5
------------------------------------------------------------------------
64daf8				bits 64
64daf8			stub_7ffff564daf8_1:
64daf8 fec1			inc	cl
64dafa			stub_7ffff564daf8_0:
64dafa e83be548ff		call	do_callback_fn_handler
64daff d10a0b0100000000
(obj= #(#<procedure #3>))
------------------------------------------------------------------------
64dae8				bits 64
64dae8			stub_7ffff564dae8_0:
64dae8 e820e548ff		call	do_callback_handler
64daed 8151080100000000
(obj= #(#<procedure #4>))
------------------------------------------------------------------------
adc1a5				bits 64
adc1a5 909090		version1:
adc1a8 48c7c0eeffffff		mov	rax,dword -18
adc1af 498900			mov	[r8],rax
adc1b2			version2:
adc1b2 4157			push	r15
adc1b4 498d41f0			lea	rax,[r9-16]
adc1b8 49bf0810ecf7ff7f
adc1c0 0000			mov	r15,140737352830984
adc1c2 493b4728			cmp	rax,[r15+40]
adc1c6 7d0e			jge	short alloc-ok1
adc1c8 48c7c010000000		mov	rax,dword 16
adc1cf e8c0feffff		call	gc_trampoline
adc1d4 eb06			jmp	short alloc-end1
adc1d6			alloc-ok1:
adc1d6 415f			pop	r15
adc1d8 4983e910			sub	r9,byte 16
adc1dc			alloc-end1:
adc1dc 48c7c076020000		mov	rax,dword 630
adc1e3 498901			mov	[r9],rax
adc1e6 488b042538510801		mov	rax,[+17322296]
adc1ee 49894108			mov	[r9+8],rax
adc1f2 498d5901			lea	rbx,[r9+1]
adc1f6			version3:
adc1f6 498918			mov	[r8],rbx
adc1f9 49c7c7eeffffff		mov	r15,dword -18
adc200			version4:
adc200			version5:
adc200 4d8b38			mov	r15,[r8]
adc203			version6:
adc203			version7:
adc203 48c7c304000000		mov	rbx,dword 4
adc20a			version8:
adc20a 48c7c208000000		mov	rdx,dword 8
adc211			version9:
adc211 49c7c60c000000		mov	r14,dword 12
adc218			version10:
adc218 4157			push	r15
adc21a 4156			push	r14
adc21c 52			push	rdx
adc21d 53			push	rbx
adc21e 55			push	rbp
adc21f			load-ret-addr1:
adc21f 48b8e8da64f5ff7f
adc227 0000			mov	rax,140737310415592
adc229 50			push	rax
adc22a 4c89f8			mov	rax,r15
adc22d 50			push	rax
adc22e 4889db			mov	rbx,rbx
adc231 4889d2			mov	rdx,rdx
adc234 4c89f6			mov	rsi,r14
adc237 488d6c2428		lea	rbp,[rsp+40]
adc23c 48c7c70c000000		mov	rdi,dword 12
adc243 488b4007			mov	rax,[rax+7]
adc247 ffe0			jmp	rax
"Gen version with"
#<ctx #5
      stack: (unknown unknown unknown procedure retAddr)
      slot-loc: ((4 . r2) (3 . r1) (2 . r0) (1 . 1) (0 . 0))
      free-regs: (r9 r8 r7 r6 r5 r4 r3)
      env: ((a . #<identifier #6
                    kind: local
                    sslots: (2)
                    flags: ()
                    stype: #f
                    cloc: #f>)
            (b . #<identifier #7
                    kind: local
                    sslots: (3)
                    flags: ()
                    stype: #f
                    cloc: #f>)
            (c . #<identifier #8
                    kind: local
                    sslots: (4)
                    flags: ()
                    stype: #f
                    cloc: #f>))
      nb-args: 3
      fs: 2>
GEN VERSION FN >>> #<ctx #5
                         stack: (unknown unknown unknown procedure retAddr)
                         slot-loc: ((4 . r2) (3 . r1) (2 . r0) (1 . 1) (0 . 0))
                         free-regs: (r9 r8 r7 r6 r5 r4 r3)
                         env: ((a . #<identifier #6
                                       kind: local
                                       sslots: (2)
                                       flags: ()
                                       stype: #f
                                       cloc: #f>)
                               (b . #<identifier #7
                                       kind: local
                                       sslots: (3)
                                       flags: ()
                                       stype: #f
                                       cloc: #f>)
                               (c . #<identifier #8
                                       kind: local
                                       sslots: (4)
                                       flags: ()
                                       stype: #f
                                       cloc: #f>))
                         nb-args: 3
                         fs: 2>
#<ctx #5
      stack: (unknown unknown unknown procedure retAddr)
      slot-loc: ((4 . r2) (3 . r1) (2 . r0) (1 . 1) (0 . 0))
      free-regs: (r9 r8 r7 r6 r5 r4 r3)
      env: ((a . #<identifier #6
                    kind: local
                    sslots: (2)
                    flags: ()
                    stype: #f
                    cloc: #f>)
            (b . #<identifier #7
                    kind: local
                    sslots: (3)
                    flags: ()
                    stype: #f
                    cloc: #f>)
            (c . #<identifier #8
                    kind: local
                    sslots: (4)
                    flags: ()
                    stype: #f
                    cloc: #f>))
      nb-args: 3
      fs: 2>
------------------------------------------------------------------------
adc249				bits 64
adc249 909090		fn_entry_1:
adc24c 4883ff0c			cmp	rdi,byte 12
adc250 7463			je	short label-next1
adc252 48b8416da4f6ff7f
adc25a 0000			mov	rax,140737331359041
adc25c 57			push	rdi
adc25d 56			push	rsi
adc25e 52			push	rdx
adc25f 51			push	rcx
adc260 4150			push	r8
adc262 4151			push	r9
adc264 4152			push	r10
adc266 4153			push	r11
adc268 50			push	rax
adc269 4889e7	
Program received signal SIGSEGV, Segmentation fault.
0x00007ffff6ac17dd in ___H__20_utils () from /home/bapt/Bureau/these/lazy-comp/utils.o1
(gdb) quit
A debugging session is active.

	Inferior 1 [process 17583] will be killed.

Quit anyway? (y or n) 

(define (print-pos-nz n)
    (if (> n 0)
        (begin (print-pos-nz (quotient n 10))
               ($$putchar (+ (modulo n 10) 48)))))

(define (print-pos n)
    (if (= n 0)
        ($$putchar 48)
        (print-pos-nz n)))

(define (print-nb n)
    (if (< n 0)
        (begin ($$putchar 45)
               (print-pos (* -1 n)))
        (print-pos n)))

(define (print-char n)
  ($$putchar (char->integer n)))

(define (print-bool n)
  (if ($eq? n #t)
      (begin ($$putchar  35)
             ($$putchar 116))
      (begin ($$putchar  35)
             ($$putchar 102))))

(define (print-procedure n)
  ($$putchar  35)
  ($$putchar  60)
  ($$putchar 112)
  ($$putchar 114)
  ($$putchar 111)
  ($$putchar  99)
  ($$putchar 101)
  ($$putchar 100)
  ($$putchar 117)
  ($$putchar 114)
  ($$putchar 101)
  ($$putchar  62))

(define (print-vector vector idx length)
  (if (< idx length)
    (begin (print (vector-ref vector idx))
           (print-vector vector (+ idx 1) length))))

(define (print-string str pos len)
  (if (< pos len)
     (begin (print (string-ref str pos))
            (print-string str (+ pos 1) len))))

(define (print-eof)
  ($$putchar 35)  ;#
  ($$putchar 33)  ;!
  ($$putchar 101) ;e
  ($$putchar 111) ;o
  ($$putchar 102));f
  

(define (print n)
    (cond ((null? n) #f)
          ((number? n) (print-nb n))
          ((char? n) (print-char n))
          ((procedure? n) (print-procedure n))
          ((pair? n) (begin (print (car n))
                            (print (cdr n))))
          ((vector? n) (print-vector n 0 (vector-length n)))
          ((string? n) (print-string n 0 (string-length n)))
          ((symbol? n)
             (let ((str (symbol->string n)))
               (print-string str 0 (string-length str))))
          ((eof-object? n)
             (print-eof))
          (else (print-bool n))))
  
(define (println n)
  (print n)
  ($$putchar 10))





(define (pp-pair-h n)
  (cond ;; (e1)
        ((and (list? n) (= (length n) 1)) (pp-h (car n)))
        ;; (e1 . e2)
        ((not (pair? (cdr n)))
            (begin (pp-h (car n))
                   ($$putchar 32)
                   ($$putchar 46)
                   ($$putchar 32)
                   (pp-h (cdr n))))
        ;; (e1 ...)
        (else (begin (pp-h (car n))
                     ($$putchar 32)
                     (pp-pair-h (cdr n))))))

(define (pp-pair n)
  ($$putchar 40)
  (pp-pair-h n)
  ($$putchar 41))

(define (pp-char n)
  ($$putchar 35)
  ($$putchar 92)
  (let ((v (char->integer n)))
    (if (> v 32)
       (print-char n)
       (cond ((eq? v  0) (print "nul"))
             ((<   v  7) (begin (print "x0") (print v)))
             ((eq? v  7) (print "alarm"))
             ((eq? v  8) (print "backspace"))
             ((eq? v  9) (print "tab"))
             ((eq? v 10) (print "newline"))
             ((eq? v 11) (print "vtab"))
             ((eq? v 12) (print "page"))
             ((eq? v 13) (print "return"))
             ((eq? v 14) (print "x0e"))
             ((eq? v 15) (print "x0f"))
             ((<   v 26) (begin (print "x") (print (- v 6))))
             ((eq? v 26) (print "x1a"))
             ((eq? v 27) (print "esc"))
             ((eq? v 28) (print "x1c"))
             ((eq? v 29) (print "x1d"))
             ((eq? v 30) (print "x1e"))
             ((eq? v 31) (print "x1f"))
             ((eq? v 32) (print "space"))
             (else (print "TODO"))))))

(define (pp-vector-h vector idx length)
  (cond ((= idx (- length 1))
            (pp-h (vector-ref vector idx)))
        ((< idx length)
            (begin (pp-h (vector-ref vector idx))
                   ($$putchar 32)
                   (pp-vector-h vector (+ idx 1) length)))))

(define (pp-vector vector)
  ($$putchar 35)
  ($$putchar 40)
  (pp-vector-h vector 0 (vector-length vector))
  ($$putchar 41))

(define (pp-string-h string idx length)
  (if (< idx length)
     (begin (print (string-ref string idx))
            (pp-string-h string (+ idx 1) length))))

(define (pp-string string)
  ($$putchar 34)
  (pp-string-h string 0 (string-length string))
  ($$putchar 34))

(define (pp-h n)
  (cond ((null? n) (begin ($$putchar 40) ($$putchar 41))) ;; ()
        ((number? n) (print-nb n))
        ((char? n) (pp-char n))
        ((procedure? n) (print-procedure n))
        ((pair? n) (pp-pair n))
        ((vector? n) (pp-vector n))
        ((string? n) (pp-string n))
        ((symbol? n)
           (let ((str (symbol->string n)))
             (print-string str 0 (string-length str))))
        ((eof-object? n)
           (print-eof))
        (else (print-bool n))))

(define (pp n)
  (pp-h n)
  ($$putchar 10))



(define write pp)

(define (newline)
  ($$putchar 10))